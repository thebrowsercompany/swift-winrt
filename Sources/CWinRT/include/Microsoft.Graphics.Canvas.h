// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Microsoft.Graphics.Canvas.Brushes.h"
#include "Microsoft.Graphics.Canvas.Effects.h"
#include "Microsoft.Graphics.Canvas.Geometry.h"
#include "Microsoft.Graphics.Canvas.Svg.h"
#include "Microsoft.Graphics.Canvas.Text.h"
#include "Windows.Foundation.Numerics.h"
#include "Windows.Graphics.DirectX.h"
#include "Windows.Graphics.DirectX.Direct3D11.h"
#include "Windows.Graphics.Effects.h"
#include "Windows.Graphics.Imaging.h"
#include "Windows.Storage.Streams.h"
#include "Windows.UI.h"
#include "Windows.UI.Core.h"

/* Forward Declarations */
#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__

typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__
    typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2;

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4;

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 __x_ABI_CWindows_CFoundation_CNumerics_CVector2;

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 __x_ABI_CWindows_CFoundation_CNumerics_CVector4;

typedef struct __x_ABI_CWindows_CFoundation_CRect __x_ABI_CWindows_CFoundation_CRect;

typedef struct __x_ABI_CWindows_CFoundation_CSize __x_ABI_CWindows_CFoundation_CSize;

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice;

#endif // ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface;

#endif // ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat;

#ifndef ____x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource;

#endif // ____x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize;

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

#ifndef ____x_ABI_CWindows_CUI_CCore_CICoreWindow_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CCore_CICoreWindow_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CUI_CCore_CICoreWindow __x_ABI_CWindows_CUI_CCore_CICoreWindow;

#endif // ____x_ABI_CWindows_CUI_CCore_CICoreWindow_FWD_DEFINED__

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits;

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions;

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Straight = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Ignore = 2,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Antialiased = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Aliased = 1,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Auto = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Bmp = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Png = 2,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Jpeg = 3,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Tiff = 4,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Gif = 5,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_JpegXR = 6,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_SourceOver = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Copy = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Min = 2,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Add = 3,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalized = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalizedSrgb = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision16UIntNormalized = 2,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision16Float = 3,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision32Float = 4,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_Custom = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_Srgb = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_ScRgb = 2,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOver = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationOver = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceIn = 2,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationIn = 3,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOut = 4,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationOut = 5,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceAtop = 6,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationAtop = 7,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Xor = 8,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Add = 9,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Copy = 10,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_BoundedCopy = 11,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_MaskInvert = 12,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel_None = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel_Error = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel_Warning = 2,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel_Information = 3,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Floor = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Round = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Ceiling = 2,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Clamp = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Wrap = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Mirror = 2,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Linear = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Cubic = 2,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_MultiSampleLinear = 3,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Anisotropic = 4,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_HighQualityCubic = 5,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_None = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_InitializeFromBackground = 0x1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_IgnoreAlpha = 0x2,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip_None = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip_Horizontal = 0x1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip_Vertical = 0x2,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip_Both = 0x3,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions_None = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions_ClampToSourceRect = 0x1,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode_None = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode_Bitmap = 1,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation_None = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation_Rotate90 = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation_Rotate180 = 2,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation_Rotate270 = 3,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Dips = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Pixels = 1,
};

enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions
    {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions_None = 0,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions_ReleaseSource = 1,
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions_CacheOnDemand = 2,
};

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SizeInPixels)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize* size);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        struct __x_ABI_CWindows_CFoundation_CSize* size);
    HRESULT (STDMETHODCALLTYPE* get_Bounds)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        struct __x_ABI_CWindows_CFoundation_CRect* bounds);
    HRESULT (STDMETHODCALLTYPE* get_Format)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat* value);
    HRESULT (STDMETHODCALLTYPE* get_AlphaMode)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode* value);
    HRESULT (STDMETHODCALLTYPE* SaveToFileAsync)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        HSTRING fileName,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncAction);
    HRESULT (STDMETHODCALLTYPE* SaveToFileWithBitmapFileFormatAsync)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        HSTRING fileName,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncAction);
    HRESULT (STDMETHODCALLTYPE* SaveToFileWithBitmapFileFormatAndQualityAsync)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        HSTRING fileName,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        FLOAT quality,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncAction);
    HRESULT (STDMETHODCALLTYPE* SaveToStreamAsync)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncAction);
    HRESULT (STDMETHODCALLTYPE* SaveToStreamWithQualityAsync)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        FLOAT quality,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** asyncAction);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytes)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        UINT32* valueElementsLength,
        BYTE** valueElements);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytesWithSubrectangle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        INT32 left,
        INT32 top,
        INT32 width,
        INT32 height,
        UINT32* valueElementsLength,
        BYTE** valueElements);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytesWithBuffer)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytesWithBufferAndSubrectangle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        INT32 left,
        INT32 top,
        INT32 width,
        INT32 height);
    HRESULT (STDMETHODCALLTYPE* GetPixelColors)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        UINT32* valueElementsLength,
        struct __x_ABI_CWindows_CUI_CColor** valueElements);
    HRESULT (STDMETHODCALLTYPE* GetPixelColorsWithSubrectangle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        INT32 left,
        INT32 top,
        INT32 width,
        INT32 height,
        UINT32* valueElementsLength,
        struct __x_ABI_CWindows_CUI_CColor** valueElements);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytes)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        UINT32 valueElementsLength,
        BYTE* valueElements);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytesWithSubrectangle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        UINT32 valueElementsLength,
        BYTE* valueElements,
        INT32 left,
        INT32 top,
        INT32 width,
        INT32 height);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytesWithBuffer)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytesWithBufferAndSubrectangle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        INT32 left,
        INT32 top,
        INT32 width,
        INT32 height);
    HRESULT (STDMETHODCALLTYPE* SetPixelColors)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        UINT32 valueElementsLength,
        struct __x_ABI_CWindows_CUI_CColor* valueElements);
    HRESULT (STDMETHODCALLTYPE* SetPixelColorsWithSubrectangle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        UINT32 valueElementsLength,
        struct __x_ABI_CWindows_CUI_CColor* valueElements,
        INT32 left,
        INT32 top,
        INT32 width,
        INT32 height);
    HRESULT (STDMETHODCALLTYPE* CopyPixelsFromBitmap)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* otherBitmap);
    HRESULT (STDMETHODCALLTYPE* CopyPixelsFromBitmapWithDestPoint)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* otherBitmap,
        INT32 destX,
        INT32 destY);
    HRESULT (STDMETHODCALLTYPE* CopyPixelsFromBitmapWithDestPointAndSourceRect)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* otherBitmap,
        INT32 destX,
        INT32 destY,
        INT32 sourceRectLeft,
        INT32 sourceRectTop,
        INT32 sourceRectWidth,
        INT32 sourceRectHeight);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11Surface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11SurfaceWithDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11SurfaceWithDpiAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        FLOAT dpi,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytes)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        UINT32 bytesLength,
        BYTE* bytes,
        INT32 widthInPixels,
        INT32 heightInPixels,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        UINT32 bytesLength,
        BYTE* bytes,
        INT32 widthInPixels,
        INT32 heightInPixels,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithDpiAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        UINT32 bytesLength,
        BYTE* bytes,
        INT32 widthInPixels,
        INT32 heightInPixels,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        FLOAT dpi,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithBuffer)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        INT32 widthInPixels,
        INT32 heightInPixels,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithBufferAndDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        INT32 widthInPixels,
        INT32 heightInPixels,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithBufferAndDpiAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        INT32 widthInPixels,
        INT32 heightInPixels,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        FLOAT dpi,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromColors)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        UINT32 colorsLength,
        struct __x_ABI_CWindows_CUI_CColor* colors,
        INT32 widthInPixels,
        INT32 heightInPixels,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromColorsWithDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        UINT32 colorsLength,
        struct __x_ABI_CWindows_CUI_CColor* colors,
        INT32 widthInPixels,
        INT32 heightInPixels,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromColorsWithDpiAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        UINT32 colorsLength,
        struct __x_ABI_CWindows_CUI_CColor* colors,
        INT32 widthInPixels,
        INT32 heightInPixels,
        FLOAT dpi,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromSoftwareBitmap)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* sourceBitmap,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** bitmap);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromHstring)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        HSTRING fileName,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap** canvasBitmap);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromHstringWithDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        HSTRING fileName,
        FLOAT dpi,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap** canvasBitmap);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromHstringWithDpiAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        HSTRING fileName,
        FLOAT dpi,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap** canvasBitmap);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUri)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap** canvasBitmap);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUriWithDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        FLOAT dpi,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap** canvasBitmap);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUriWithDpiAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        FLOAT dpi,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap** canvasBitmap);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStream)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap** canvasBitmap);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStreamWithDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        FLOAT dpi,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap** canvasBitmap);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStreamWithDpiAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        FLOAT dpi,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap** canvasBitmap);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateDrawingSession)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession** drawingSession);
    HRESULT (STDMETHODCALLTYPE* get_Device)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** value);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList** commandList);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ForceSoftwareRenderer)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_MaximumBitmapSizeInPixels)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* IsPixelFormatSupported)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat pixelFormat,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsBufferPrecisionSupported)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_MaximumCacheSize)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* put_MaximumCacheSize)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        UINT64 value);
    HRESULT (STDMETHODCALLTYPE* get_LowPriority)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_LowPriority)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* add_DeviceLost)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_DeviceLost)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* IsDeviceLost)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        INT32 hresult,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* RaiseDeviceLost)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This);
    HRESULT (STDMETHODCALLTYPE* Lock)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock** lock);
    HRESULT (STDMETHODCALLTYPE* IsDeviceLost2)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* GetDeviceLostReason)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This,
        INT32* hresult);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithForceSoftwareRendererOption)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This,
        boolean forceSoftwareRenderer,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** canvasDevice);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11Device)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice* direct3DDevice,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** canvasDevice);
    HRESULT (STDMETHODCALLTYPE* GetSharedDevice)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** canvasDevice);
    HRESULT (STDMETHODCALLTYPE* GetSharedDeviceWithForceSoftwareRenderer)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This,
        boolean forceSoftwareRenderer,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** canvasDevice);
    HRESULT (STDMETHODCALLTYPE* put_DebugLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel value);
    HRESULT (STDMETHODCALLTYPE* get_DebugLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel* value);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* ClearHdr)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 color);
    HRESULT (STDMETHODCALLTYPE* Flush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOrigin)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffset)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoords)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        FLOAT x,
        FLOAT y);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRect)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CRect destinationRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRect)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRect)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRect)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacity)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacity)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacity)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacityAndInterpolation)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT opacity,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x0,
        FLOAT y0,
        FLOAT x1,
        FLOAT y1,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x0,
        FLOAT y0,
        FLOAT x1,
        FLOAT y1,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x0,
        FLOAT y0,
        FLOAT x1,
        FLOAT y1,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x0,
        FLOAT y0,
        FLOAT x1,
        FLOAT y1,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x0,
        FLOAT y0,
        FLOAT x1,
        FLOAT y1,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x0,
        FLOAT y0,
        FLOAT x1,
        FLOAT y1,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillRectangleWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRectangleAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRectangleWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillRectangleAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillRectangleWithBrushAndOpacityBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillRectangleAtCoordsWithBrushAndOpacityBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CRect rect,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillEllipseWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillEllipseAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radiusX,
        FLOAT radiusY,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillEllipseWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillEllipseAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radiusX,
        FLOAT radiusY,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radius,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radius,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radius,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radius,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radius,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radius,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radius,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radius,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radius,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radius,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radius,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radius,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillCircleWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radius,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillCircleAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radius,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillCircleWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        FLOAT radius,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillCircleAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT x,
        FLOAT y,
        FLOAT radius,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        HSTRING text,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        HSTRING text,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointWithBrushAndFormat)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        HSTRING text,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectWithBrushAndFormat)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        HSTRING text,
        struct __x_ABI_CWindows_CFoundation_CRect rectangle,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointCoordsWithBrushAndFormat)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        HSTRING text,
        FLOAT x,
        FLOAT y,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectCoordsWithBrushAndFormat)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        HSTRING text,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointWithColorAndFormat)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        HSTRING text,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        struct __x_ABI_CWindows_CUI_CColor color,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectWithColorAndFormat)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        HSTRING text,
        struct __x_ABI_CWindows_CFoundation_CRect rectangle,
        struct __x_ABI_CWindows_CUI_CColor color,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointCoordsWithColorAndFormat)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        HSTRING text,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CUI_CColor color,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectCoordsWithColorAndFormat)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        HSTRING text,
        FLOAT x,
        FLOAT y,
        FLOAT w,
        FLOAT h,
        struct __x_ABI_CWindows_CUI_CColor color,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        FLOAT x,
        FLOAT y,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        FLOAT x,
        FLOAT y,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithBrushAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithColorAndStrokeWidth)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        FLOAT x,
        FLOAT y,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CUI_CColor color,
        FLOAT strokeWidth,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillGeometryWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryWithBrushAndOpacityBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        FLOAT x,
        FLOAT y,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtCoordsWithBrushAndOpacityBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        FLOAT x,
        FLOAT y,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtOriginWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtOriginWithBrushAndOpacityBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtOriginWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry,
        FLOAT x,
        FLOAT y,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtOriginWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtOriginWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutAtCoordsWithBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout,
        FLOAT x,
        FLOAT y,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutAtCoordsWithColor)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout,
        FLOAT x,
        FLOAT y,
        struct __x_ABI_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGradientMeshAtOrigin)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* gradientMesh);
    HRESULT (STDMETHODCALLTYPE* DrawGradientMesh)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* gradientMesh,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point);
    HRESULT (STDMETHODCALLTYPE* DrawGradientMeshAtCoords)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* gradientMesh,
        FLOAT x,
        FLOAT y);
    HRESULT (STDMETHODCALLTYPE* DrawSvgAtOrigin)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* svgDocument,
        struct __x_ABI_CWindows_CFoundation_CSize viewportSize);
    HRESULT (STDMETHODCALLTYPE* DrawSvgAtPoint)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* svgDocument,
        struct __x_ABI_CWindows_CFoundation_CSize viewportSize,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point);
    HRESULT (STDMETHODCALLTYPE* DrawSvgAtCoords)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* svgDocument,
        struct __x_ABI_CWindows_CFoundation_CSize viewportSize,
        FLOAT x,
        FLOAT y);
    HRESULT (STDMETHODCALLTYPE* get_Antialiasing)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing* value);
    HRESULT (STDMETHODCALLTYPE* put_Antialiasing)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing value);
    HRESULT (STDMETHODCALLTYPE* get_Blend)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend* value);
    HRESULT (STDMETHODCALLTYPE* put_Blend)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend value);
    HRESULT (STDMETHODCALLTYPE* get_TextAntialiasing)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing* value);
    HRESULT (STDMETHODCALLTYPE* put_TextAntialiasing)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing value);
    HRESULT (STDMETHODCALLTYPE* get_TextRenderingParameters)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters** value);
    HRESULT (STDMETHODCALLTYPE* put_TextRenderingParameters)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* value);
    HRESULT (STDMETHODCALLTYPE* get_Transform)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2* value);
    HRESULT (STDMETHODCALLTYPE* put_Transform)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value);
    HRESULT (STDMETHODCALLTYPE* get_Units)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits* value);
    HRESULT (STDMETHODCALLTYPE* put_Units)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits value);
    HRESULT (STDMETHODCALLTYPE* get_EffectBufferPrecision)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision** value);
    HRESULT (STDMETHODCALLTYPE* put_EffectBufferPrecision)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision* value);
    HRESULT (STDMETHODCALLTYPE* get_EffectTileSize)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize* value);
    HRESULT (STDMETHODCALLTYPE* put_EffectTileSize)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize value);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacity)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT opacity,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** layer);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrush)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** layer);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityAndClipRectangle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT opacity,
        struct __x_ABI_CWindows_CFoundation_CRect clipRectangle,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** layer);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrushAndClipRectangle)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush,
        struct __x_ABI_CWindows_CFoundation_CRect clipRectangle,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** layer);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityAndClipGeometry)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT opacity,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** layer);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrushAndClipGeometry)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** layer);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityAndClipGeometryAndTransform)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT opacity,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** layer);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrushAndClipGeometryAndTransform)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** layer);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithAllOptions)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        FLOAT opacity,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush,
        struct __x_ABI_CWindows_CFoundation_CRect clipRectangle,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions options,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** layer);
    HRESULT (STDMETHODCALLTYPE* DrawGlyphRun)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* fontFace,
        FLOAT fontSize,
        UINT32 glyphsLength,
        struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph* glyphs,
        boolean isSideways,
        UINT32 bidiLevel,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGlyphRunWithMeasuringMode)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* fontFace,
        FLOAT fontSize,
        UINT32 glyphsLength,
        struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph* glyphs,
        boolean isSideways,
        UINT32 bidiLevel,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode);
    HRESULT (STDMETHODCALLTYPE* DrawGlyphRunWithMeasuringModeAndDescription)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* fontFace,
        FLOAT fontSize,
        UINT32 glyphsLength,
        struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph* glyphs,
        boolean isSideways,
        UINT32 bidiLevel,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
        HSTRING localeName,
        HSTRING textString,
        UINT32 clusterMapIndicesLength,
        INT32* clusterMapIndices,
        UINT32 textPosition);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatch)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** spriteBatch);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatchWithSortMode)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** spriteBatch);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatchWithSortModeAndInterpolation)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** spriteBatch);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatchWithSortModeAndInterpolationAndOptions)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions options,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** spriteBatch);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetBounds)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        struct __x_ABI_CWindows_CFoundation_CRect* bounds);
    HRESULT (STDMETHODCALLTYPE* GetBoundsWithTransform)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        struct __x_ABI_CWindows_CFoundation_CRect* bounds);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SaveAsync)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** action);
    HRESULT (STDMETHODCALLTYPE* SaveWithQualityAsync)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        FLOAT quality,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** action);
    HRESULT (STDMETHODCALLTYPE* SaveWithQualityAndBufferPrecisionAsync)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        FLOAT quality,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** action);
    HRESULT (STDMETHODCALLTYPE* ComputeHistogram)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect channelSelect,
        INT32 numberOfBins,
        UINT32* valueElementsLength,
        FLOAT** valueElements);
    HRESULT (STDMETHODCALLTYPE* IsHistogramSupported)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* device,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLockVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLockVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLockVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateDrawingSession)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession** drawingSession);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithSize)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* resourceCreator,
        struct __x_ABI_CWindows_CFoundation_CSize size,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget** renderTarget);
    HRESULT (STDMETHODCALLTYPE* CreateWithWidthAndHeight)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* resourceCreator,
        FLOAT width,
        FLOAT height,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget** renderTarget);
    HRESULT (STDMETHODCALLTYPE* CreateWithWidthAndHeightAndDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        FLOAT width,
        FLOAT height,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget** renderTarget);
    HRESULT (STDMETHODCALLTYPE* CreateWithWidthAndHeightAndDpiAndFormatAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        FLOAT width,
        FLOAT height,
        FLOAT dpi,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget** renderTarget);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11Surface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11SurfaceWithDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget** bitmap);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11SurfaceWithDpiAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        FLOAT dpi,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget** bitmap);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Device)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** value);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Dpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This,
        FLOAT* dpi);
    HRESULT (STDMETHODCALLTYPE* ConvertPixelsToDips)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This,
        INT32 pixels,
        FLOAT* dips);
    HRESULT (STDMETHODCALLTYPE* ConvertDipsToPixels)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This,
        FLOAT dips,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding dpiRounding,
        INT32* pixels);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* DrawToRect)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CRect destRect);
    HRESULT (STDMETHODCALLTYPE* DrawAtOffset)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset);
    HRESULT (STDMETHODCALLTYPE* DrawWithTransform)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform);
    HRESULT (STDMETHODCALLTYPE* DrawToRectWithTint)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CRect destRect,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
    HRESULT (STDMETHODCALLTYPE* DrawAtOffsetWithTint)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
    HRESULT (STDMETHODCALLTYPE* DrawWithTransformAndTint)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
    HRESULT (STDMETHODCALLTYPE* DrawToRectWithTintAndFlip)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CRect destRect,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
    HRESULT (STDMETHODCALLTYPE* DrawWithTransformAndTintAndFlip)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
    HRESULT (STDMETHODCALLTYPE* DrawAtOffsetWithTintAndTransform)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 origin,
        FLOAT rotation,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 scale,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
    HRESULT (STDMETHODCALLTYPE* DrawFromSpriteSheetToRect)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CRect destRect,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRect);
    HRESULT (STDMETHODCALLTYPE* DrawFromSpriteSheetAtOffset)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRect);
    HRESULT (STDMETHODCALLTYPE* DrawFromSpriteSheetWithTransform)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRect);
    HRESULT (STDMETHODCALLTYPE* DrawFromSpriteSheetToRectWithTint)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CRect destRect,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRect,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
    HRESULT (STDMETHODCALLTYPE* DrawFromSpriteSheetAtOffsetWithTint)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRect,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
    HRESULT (STDMETHODCALLTYPE* DrawFromSpriteSheetWithTransformAndTint)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRect,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
    HRESULT (STDMETHODCALLTYPE* DrawFromSpriteSheetToRectWithTintAndFlip)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CRect destRect,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRect,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
    HRESULT (STDMETHODCALLTYPE* DrawFromSpriteSheetWithTransformAndTintAndFlip)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRect,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
    HRESULT (STDMETHODCALLTYPE* DrawFromSpriteSheetAtOffsetWithTintAndTransform)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        struct __x_ABI_CWindows_CFoundation_CRect sourceRect,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 origin,
        FLOAT rotation,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 scale,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* IsSupported)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* device,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Present)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This);
    HRESULT (STDMETHODCALLTYPE* PresentWithSyncInterval)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        INT32 syncInterval);
    HRESULT (STDMETHODCALLTYPE* ResizeBuffersWithSize)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        struct __x_ABI_CWindows_CFoundation_CSize newSize);
    HRESULT (STDMETHODCALLTYPE* ResizeBuffersWithWidthAndHeight)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        FLOAT newWidth,
        FLOAT newHeight);
    HRESULT (STDMETHODCALLTYPE* ResizeBuffersWithWidthAndHeightAndDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        FLOAT newWidth,
        FLOAT newHeight,
        FLOAT newDpi);
    HRESULT (STDMETHODCALLTYPE* ResizeBuffersWithAllOptions)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        FLOAT newWidth,
        FLOAT newHeight,
        FLOAT newDpi,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat newFormat,
        INT32 bufferCount);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        struct __x_ABI_CWindows_CFoundation_CSize* size);
    HRESULT (STDMETHODCALLTYPE* get_SizeInPixels)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize* size);
    HRESULT (STDMETHODCALLTYPE* get_Format)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat* value);
    HRESULT (STDMETHODCALLTYPE* get_BufferCount)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_AlphaMode)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode* value);
    HRESULT (STDMETHODCALLTYPE* get_Rotation)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation* value);
    HRESULT (STDMETHODCALLTYPE* put_Rotation)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation value);
    HRESULT (STDMETHODCALLTYPE* get_SourceSize)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* put_SourceSize)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        struct __x_ABI_CWindows_CFoundation_CSize value);
    HRESULT (STDMETHODCALLTYPE* get_TransformMatrix)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2* value);
    HRESULT (STDMETHODCALLTYPE* put_TransformMatrix)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value);
    HRESULT (STDMETHODCALLTYPE* CreateDrawingSession)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This,
        struct __x_ABI_CWindows_CUI_CColor clearColor,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession** drawingSession);
    HRESULT (STDMETHODCALLTYPE* WaitForVerticalBlank)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain* This);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateWithSize)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* resourceCreator,
        struct __x_ABI_CWindows_CFoundation_CSize size,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain** swapChain);
    HRESULT (STDMETHODCALLTYPE* CreateWithWidthAndHeight)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* resourceCreator,
        FLOAT width,
        FLOAT height,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain** swapChain);
    HRESULT (STDMETHODCALLTYPE* CreateWithWidthAndHeightAndDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        FLOAT width,
        FLOAT height,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain** swapChain);
    HRESULT (STDMETHODCALLTYPE* CreateWithAllOptions)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        FLOAT width,
        FLOAT height,
        FLOAT dpi,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        INT32 bufferCount,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain** swapChain);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateForCoreWindowWithDpi)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* coreWindow,
        FLOAT dpi,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain** swapChain);
    HRESULT (STDMETHODCALLTYPE* CreateForCoreWindowWithAllOptions)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CUI_CCore_CICoreWindow* coreWindow,
        FLOAT width,
        FLOAT height,
        FLOAT dpi,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        INT32 bufferCount,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain** swapChain);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Device)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** value);
    HRESULT (STDMETHODCALLTYPE* get_IsCachedOnDemand)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_SizeInPixels)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize* value);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This,
        struct __x_ABI_CWindows_CFoundation_CSize* value);
    HRESULT (STDMETHODCALLTYPE* get_Bounds)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap* This,
        struct __x_ABI_CWindows_CFoundation_CRect* value);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LoadAsyncFromFileName)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        HSTRING fileName,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap** value);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromFileNameWithOptions)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        HSTRING fileName,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap** value);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromFileNameWithOptionsAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        HSTRING fileName,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap** value);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUri)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap** value);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUriWithOptions)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap** value);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUriWithOptionsAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap** value);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStream)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap** value);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStreamWithOptions)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap** value);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStreamWithOptionsAndAlpha)(__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics* This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap** value);

        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__) */
    

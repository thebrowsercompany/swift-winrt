// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.Enumeration.h"
#include "Windows.Foundation.Numerics.h"
#include "Windows.Media.h"
#include "Windows.Media.Capture.h"
#include "Windows.Media.Core.h"
#include "Windows.Media.Devices.h"
#include "Windows.Media.Effects.h"
#include "Windows.Media.MediaProperties.h"
#include "Windows.Media.Render.h"
#include "Windows.Media.Transcoding.h"
#include "Windows.Storage.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2 __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3 __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2 __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2 __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNode_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNode __x_ABI_CWindows_CMedia_CAudio_CIAudioNode;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNode_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2 __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2 __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2 __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2 __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2 __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2 __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2 __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs __x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult __x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics;

#endif // ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason;

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReasonVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This,
        enum __x_ABI_CWindows_CMedia_CTranscoding_CTranscodeFailureReason* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReasonVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReasonVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReasonVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReasonVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReasonVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
        __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBandVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBandVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBandVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBandVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
        __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBandVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBandVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_int_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_int_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_int __x_ABI_C__FIReference_1_int;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_int;

    typedef struct __x_ABI_C__FIReference_1_intVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_int* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_int* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_int* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_int* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_int* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_int* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_int* This,
        INT32* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_intVtbl;

    interface __x_ABI_C__FIReference_1_int
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_intVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_int_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* sender,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* sender,
        __x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* sender,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable* This,
        __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable* This,
        __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation;

#endif // ____x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CQuaternion __x_ABI_CWindows_CFoundation_CNumerics_CQuaternion;

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 __x_ABI_CWindows_CFoundation_CNumerics_CVector3;

#ifndef ____x_ABI_CWindows_CMedia_CIAudioFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIAudioFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIAudioFrame __x_ABI_CWindows_CMedia_CIAudioFrame;

#endif // ____x_ABI_CWindows_CMedia_CIAudioFrame_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CMedia_CAudioProcessing __x_ABI_CWindows_CMedia_CAudioProcessing;

typedef enum __x_ABI_CWindows_CMedia_CCapture_CMediaCategory __x_ABI_CWindows_CMedia_CCapture_CMediaCategory;

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource2 __x_ABI_CWindows_CMedia_CCore_CIMediaSource2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CMedia_CDevices_CAudioDeviceRole __x_ABI_CWindows_CMedia_CDevices_CAudioDeviceRole;

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CMedia_CRender_CAudioRenderCategory __x_ABI_CWindows_CMedia_CRender_CAudioRenderCategory;

typedef enum __x_ABI_CWindows_CMedia_CSoundLevel __x_ABI_CWindows_CMedia_CSoundLevel;

#ifndef ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CIStorageFile __x_ABI_CWindows_CStorage_CIStorageFile;

#endif // ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterDecayKind __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterDecayKind;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterSettings __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterSettings;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterShapeKind __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterShapeKind;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus;

typedef enum __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel;

enum __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus
    {
        __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus_Success = 0,
    __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus_DeviceNotAvailable = 1,
    __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus_FormatNotSupported = 2,
    __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus_UnknownFailure = 3,
    __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus_AccessDenied = 4,
};

enum __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus
    {
        __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus_Success = 0,
    __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus_FileNotFound = 1,
    __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus_InvalidFileType = 2,
    __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus_FormatNotSupported = 3,
    __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus_UnknownFailure = 4,
};

enum __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus
    {
        __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus_Success = 0,
    __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus_DeviceNotAvailable = 1,
    __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus_FormatNotSupported = 2,
    __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus_UnknownFailure = 3,
};

enum __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError
    {
        __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError_None = 0,
    __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError_AudioDeviceLost = 1,
    __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError_AudioSessionDisconnected = 2,
    __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError_UnknownFailure = 3,
};

enum __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterDecayKind
    {
        __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterDecayKind_Natural = 0,
    __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterDecayKind_Custom = 1,
};

enum __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterSettings
    {
        __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterSettings_None = 0,
    __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterSettings_DisableDoppler = 0x1,
};

enum __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterShapeKind
    {
        __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterShapeKind_Omnidirectional = 0,
    __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterShapeKind_Cone = 1,
};

enum __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus
    {
        __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus_Success = 0,
    __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus_FormatNotSupported = 1,
    __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus_NetworkError = 2,
    __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus_UnknownFailure = 3,
};

enum __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy
    {
        __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy_UseMixedRealityDefaultSpatialAudioFormat = 0,
    __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy_UseDeviceConfigurationDefaultSpatialAudioFormat = 1,
};

enum __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode
    {
        __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode_SystemDefault = 0,
    __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode_LowestLatency = 1,
    __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode_ClosestToDesired = 2,
};

enum __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus
    {
        __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_Succeeded = 0,
    __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_AccessDenied = 1,
    __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_LicenseExpired = 2,
    __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_LicenseNotValidForAudioEndpoint = 3,
    __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_NotSupportedOnAudioEndpoint = 4,
    __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_UnknownError = 5,
};

enum __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel
    {
        __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel_ObjectBased = 0,
    __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel_FoldDown = 1,
};

#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Device)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode* This,
        __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNodeVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNodeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Device)(__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode* This,
        __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNodeVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNodeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_PlaybackSpeedFactor)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_PlaybackSpeedFactor)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* Seek)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan position);
    HRESULT (STDMETHODCALLTYPE* get_StartTime)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_StartTime)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_EndTime)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_EndTime)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_LoopCount)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        __x_ABI_C__FIReference_1_int** value);
    HRESULT (STDMETHODCALLTYPE* put_LoopCount)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        __x_ABI_C__FIReference_1_int* value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_SourceFile)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        __x_ABI_CWindows_CStorage_CIStorageFile** value);
    HRESULT (STDMETHODCALLTYPE* add_FileCompleted)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_FileCompleted)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNodeVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNodeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_File)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode* This,
        __x_ABI_CWindows_CStorage_CIStorageFile** value);
    HRESULT (STDMETHODCALLTYPE* get_FileEncodingProfile)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile** value);
    HRESULT (STDMETHODCALLTYPE* FinalizeAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReason** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNodeVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNodeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Frame)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs* This,
        __x_ABI_CWindows_CMedia_CIAudioFrame** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_PlaybackSpeedFactor)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_PlaybackSpeedFactor)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* AddFrame)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
        __x_ABI_CWindows_CMedia_CIAudioFrame* frame);
    HRESULT (STDMETHODCALLTYPE* DiscardQueuedFrames)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This);
    HRESULT (STDMETHODCALLTYPE* get_QueuedSampleCount)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* add_AudioFrameCompleted)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AudioFrameCompleted)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_QuantumStarted)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_QuantumStarted)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNodeVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNodeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetFrame)(__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode* This,
        __x_ABI_CWindows_CMedia_CIAudioFrame** audioFrame);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNodeVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNodeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFrameInputNode)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode** frameInputNode);
    HRESULT (STDMETHODCALLTYPE* CreateFrameInputNodeWithFormat)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode** frameInputNode);
    HRESULT (STDMETHODCALLTYPE* CreateDeviceInputNodeAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        enum __x_ABI_CWindows_CMedia_CCapture_CMediaCategory category,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* CreateDeviceInputNodeWithFormatAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        enum __x_ABI_CWindows_CMedia_CCapture_CMediaCategory category,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* encodingProperties,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* CreateDeviceInputNodeWithFormatOnDeviceAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        enum __x_ABI_CWindows_CMedia_CCapture_CMediaCategory category,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation* device,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* CreateFrameOutputNode)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode** frameOutputNode);
    HRESULT (STDMETHODCALLTYPE* CreateFrameOutputNodeWithFormat)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode** frameOutputNode);
    HRESULT (STDMETHODCALLTYPE* CreateDeviceOutputNodeAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* CreateFileInputNodeAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* CreateFileOutputNodeAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* CreateFileOutputNodeWithFileProfileAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile* fileEncodingProfile,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* CreateSubmixNode)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode** submixNode);
    HRESULT (STDMETHODCALLTYPE* CreateSubmixNodeWithFormat)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode** submixNode);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This);
    HRESULT (STDMETHODCALLTYPE* ResetAllNodes)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This);
    HRESULT (STDMETHODCALLTYPE* add_QuantumStarted)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_QuantumStarted)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_QuantumProcessed)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_QuantumProcessed)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_UnrecoverableErrorOccurred)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UnrecoverableErrorOccurred)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_CompletedQuantumCount)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_EncodingProperties)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_LatencyInSamples)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_PrimaryRenderDevice)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation** value);
    HRESULT (STDMETHODCALLTYPE* get_RenderDeviceAudioProcessing)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        enum __x_ABI_CWindows_CMedia_CAudioProcessing* value);
    HRESULT (STDMETHODCALLTYPE* get_SamplesPerQuantum)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* This,
        INT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraph;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFrameInputNodeWithFormatAndEmitter)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* emitter,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode** frameInputNode);
    HRESULT (STDMETHODCALLTYPE* CreateDeviceInputNodeWithFormatAndEmitterOnDeviceAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This,
        enum __x_ABI_CWindows_CMedia_CCapture_CMediaCategory category,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation* device,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* emitter,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* CreateFileInputNodeWithEmitterAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* emitter,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResult** result);
    HRESULT (STDMETHODCALLTYPE* CreateSubmixNodeWithFormatAndEmitter)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* emitter,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode** submixNode);
    HRESULT (STDMETHODCALLTYPE* CreateBatchUpdater)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2* This,
        __x_ABI_CWindows_CFoundation_CIClosable** updater);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateMediaSourceAudioInputNodeAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2* mediaSource,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult** operation);
    HRESULT (STDMETHODCALLTYPE* CreateMediaSourceAudioInputNodeWithEmitterAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2* mediaSource,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* emitter,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResult** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Destination)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNode** value);
    HRESULT (STDMETHODCALLTYPE* put_Gain)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Gain)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnectionVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EncodingProperties)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* put_EncodingProperties)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* value);
    HRESULT (STDMETHODCALLTYPE* get_PrimaryRenderDevice)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation** value);
    HRESULT (STDMETHODCALLTYPE* put_PrimaryRenderDevice)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation* value);
    HRESULT (STDMETHODCALLTYPE* get_QuantumSizeSelectionMode)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_QuantumSizeSelectionMode)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredSamplesPerQuantum)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredSamplesPerQuantum)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_AudioRenderCategory)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        enum __x_ABI_CWindows_CMedia_CRender_CAudioRenderCategory* value);
    HRESULT (STDMETHODCALLTYPE* put_AudioRenderCategory)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        enum __x_ABI_CWindows_CMedia_CRender_CAudioRenderCategory value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredRenderDeviceAudioProcessing)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        enum __x_ABI_CWindows_CMedia_CAudioProcessing* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredRenderDeviceAudioProcessing)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* This,
        enum __x_ABI_CWindows_CMedia_CAudioProcessing value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_MaxPlaybackSpeedFactor)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MaxPlaybackSpeedFactor)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory* This,
        enum __x_ABI_CWindows_CMedia_CRender_CAudioRenderCategory audioRenderCategory,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateAsync)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings* settings,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResult** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Error)(__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OutgoingConnections)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnection** value);
    HRESULT (STDMETHODCALLTYPE* AddOutgoingConnection)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNode* destination);
    HRESULT (STDMETHODCALLTYPE* AddOutgoingConnectionWithGain)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNode* destination,
        DOUBLE gain);
    HRESULT (STDMETHODCALLTYPE* RemoveOutgoingConnection)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNode* destination);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNodeVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNodeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Emitter)(__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNode_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNode_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_EffectDefinitions)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinition** value);
    HRESULT (STDMETHODCALLTYPE* put_OutgoingGain)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_OutgoingGain)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_EncodingProperties)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_ConsumeInput)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ConsumeInput)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This);
    HRESULT (STDMETHODCALLTYPE* Reset)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This);
    HRESULT (STDMETHODCALLTYPE* DisableEffectsByDefinition)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* definition);
    HRESULT (STDMETHODCALLTYPE* EnableEffectsByDefinition)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNode* This,
        __x_ABI_CWindows_CMedia_CEffects_CIAudioEffectDefinition* definition);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNode
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNode;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNode_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_Position)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_Direction)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_Direction)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_Shape)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape** value);
    HRESULT (STDMETHODCALLTYPE* get_DecayModel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel** value);
    HRESULT (STDMETHODCALLTYPE* get_Gain)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Gain)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_DistanceScale)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DistanceScale)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_DopplerScale)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DopplerScale)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_DopplerVelocity)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_DopplerVelocity)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_IsDopplerDisabled)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SpatialAudioModel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel* value);
    HRESULT (STDMETHODCALLTYPE* put_SpatialAudioModel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConePropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_InnerAngle)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_OuterAngle)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_OuterAngleGain)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConePropertiesVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConePropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterDecayKind* value);
    HRESULT (STDMETHODCALLTYPE* get_MinGain)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxGain)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_NaturalProperties)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateNatural)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics* This,
        DOUBLE minGain,
        DOUBLE maxGain,
        DOUBLE unityGainDistance,
        DOUBLE cutoffDistance,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel** decayModel);
    HRESULT (STDMETHODCALLTYPE* CreateCustom)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics* This,
        DOUBLE minGain,
        DOUBLE maxGain,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel** decayModel);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateAudioNodeEmitter)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape* shape,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel* decayModel,
        enum __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterSettings settings,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter** emitter);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelPropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_UnityGainDistance)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_CutoffDistance)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelPropertiesVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelPropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterShapeKind* value);
    HRESULT (STDMETHODCALLTYPE* get_ConeProperties)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateCone)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics* This,
        DOUBLE innerAngle,
        DOUBLE outerAngle,
        DOUBLE outerAngleGain,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape** shape);
    HRESULT (STDMETHODCALLTYPE* CreateOmnidirectional)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape** shape);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListenerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_Position)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_Orientation)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CQuaternion* value);
    HRESULT (STDMETHODCALLTYPE* put_Orientation)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CQuaternion value);
    HRESULT (STDMETHODCALLTYPE* get_SpeedOfSound)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_SpeedOfSound)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_DopplerVelocity)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_DopplerVelocity)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListenerVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListenerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListenerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Listener)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener* value);
    HRESULT (STDMETHODCALLTYPE* get_Listener)(__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListenerVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListenerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_SoundLevelChanged)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SoundLevelChanged)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_SoundLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor* This,
        enum __x_ABI_CWindows_CMedia_CSoundLevel* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateForRenderMonitoring)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor** result);
    HRESULT (STDMETHODCALLTYPE* CreateForRenderMonitoringWithCategory)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
        enum __x_ABI_CWindows_CMedia_CRender_CAudioRenderCategory category,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor** result);
    HRESULT (STDMETHODCALLTYPE* CreateForRenderMonitoringWithCategoryAndDeviceRole)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
        enum __x_ABI_CWindows_CMedia_CRender_CAudioRenderCategory category,
        enum __x_ABI_CWindows_CMedia_CDevices_CAudioDeviceRole role,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor** result);
    HRESULT (STDMETHODCALLTYPE* CreateForRenderMonitoringWithCategoryAndDeviceId)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
        enum __x_ABI_CWindows_CMedia_CRender_CAudioRenderCategory category,
        HSTRING deviceId,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor** result);
    HRESULT (STDMETHODCALLTYPE* CreateForCaptureMonitoring)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor** result);
    HRESULT (STDMETHODCALLTYPE* CreateForCaptureMonitoringWithCategory)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
        enum __x_ABI_CWindows_CMedia_CCapture_CMediaCategory category,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor** result);
    HRESULT (STDMETHODCALLTYPE* CreateForCaptureMonitoringWithCategoryAndDeviceRole)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
        enum __x_ABI_CWindows_CMedia_CCapture_CMediaCategory category,
        enum __x_ABI_CWindows_CMedia_CDevices_CAudioDeviceRole role,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor** result);
    HRESULT (STDMETHODCALLTYPE* CreateForCaptureMonitoringWithCategoryAndDeviceId)(__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics* This,
        enum __x_ABI_CWindows_CMedia_CCapture_CMediaCategory category,
        HSTRING deviceId,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceInputNode)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResultVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceOutputNode)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResultVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_FileInputNode)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResultVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_FileOutputNode)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResultVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_Graph)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResultVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_Node)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult* This,
        __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResultVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2Vtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_WetDryMix)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_WetDryMix)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Feedback)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Feedback)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Delay)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Delay)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* audioGraph,
        __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBandVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Bandwidth)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Bandwidth)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_FrequencyCenter)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_FrequencyCenter)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Gain)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Gain)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand* This,
        DOUBLE value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBandVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBandVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Bands)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBand** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* audioGraph,
        __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RequiredSamples)(__x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs* This,
        INT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Release)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Release)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Loudness)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Loudness)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* audioGraph,
        __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNodeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_PlaybackSpeedFactor)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_PlaybackSpeedFactor)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* Seek)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan position);
    HRESULT (STDMETHODCALLTYPE* get_StartTime)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_StartTime)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_EndTime)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_EndTime)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_LoopCount)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        __x_ABI_C__FIReference_1_int** value);
    HRESULT (STDMETHODCALLTYPE* put_LoopCount)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        __x_ABI_C__FIReference_1_int* value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_MediaSource)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** value);
    HRESULT (STDMETHODCALLTYPE* add_MediaSourceCompleted)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MediaSourceCompleted)(__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNodeVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNodeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_WetDryMix)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_WetDryMix)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_ReflectionsDelay)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReflectionsDelay)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReverbDelay)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_ReverbDelay)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_RearDelay)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_RearDelay)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_PositionLeft)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_PositionLeft)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_PositionRight)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_PositionRight)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_PositionMatrixLeft)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_PositionMatrixLeft)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_PositionMatrixRight)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_PositionMatrixRight)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_EarlyDiffusion)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_EarlyDiffusion)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_LateDiffusion)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_LateDiffusion)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_LowEQGain)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_LowEQGain)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_LowEQCutoff)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_LowEQCutoff)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_HighEQGain)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_HighEQGain)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_HighEQCutoff)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_HighEQCutoff)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* put_RoomFilterFreq)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_RoomFilterFreq)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_RoomFilterMain)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_RoomFilterMain)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_RoomFilterHF)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_RoomFilterHF)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_ReflectionsGain)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_ReflectionsGain)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_ReverbGain)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_ReverbGain)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DecayTime)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_DecayTime)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Density)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Density)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_RoomSize)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_RoomSize)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DisableLateField)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_DisableLateField)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory* This,
        __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph* audioGraph,
        __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResultVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsSpatialAudioSupported)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsSpatialAudioFormatSupported)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
        HSTRING subtype,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* get_ActiveSpatialAudioFormat)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DefaultSpatialAudioFormat)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* SetDefaultSpatialAudioFormatAsync)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
        HSTRING subtype,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResult** operation);
    HRESULT (STDMETHODCALLTYPE* add_ConfigurationChanged)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ConfigurationChanged)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForDeviceId)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics* This,
        HSTRING deviceId,
        __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ReportLicenseChangedAsync)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration* This,
        HSTRING subtype,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** operation);
    HRESULT (STDMETHODCALLTYPE* ReportConfigurationChangedAsync)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration* This,
        HSTRING subtype,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** operation);
    HRESULT (STDMETHODCALLTYPE* get_MixedRealityExclusiveModePolicy)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy* value);
    HRESULT (STDMETHODCALLTYPE* put_MixedRealityExclusiveModePolicy)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration* This,
        enum __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics* This,
        __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_WindowsSonic)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DolbyAtmosForHeadphones)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DolbyAtmosForHomeTheater)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DolbyAtmosForSpeakers)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DTSHeadphoneX)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DTSXUltra)(__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics_INTERFACE_DEFINED__) */
    

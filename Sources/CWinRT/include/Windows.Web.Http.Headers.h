// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Globalization.h"
#include "Windows.Networking.h"
#include "Windows.Storage.Streams.h"
#include "Windows.Web.Http.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CGlobalization_CILanguage_FWD_DEFINED__
#define ____x_ABI_CWindows_CGlobalization_CILanguage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGlobalization_CILanguage __x_ABI_CWindows_CGlobalization_CILanguage;

#endif // ____x_ABI_CWindows_CGlobalization_CILanguage_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        __x_ABI_CWindows_CGlobalization_CILanguage** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGlobalization_CILanguage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGlobalization__CLanguage** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethod_FWD_DEFINED__
#define ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethod_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod;

#endif // ____x_ABI_CWindows_CWeb_CHttp_CIHttpMethod_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING __x_ABI_C__FIMapView_2_HSTRING_HSTRING;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING __x_ABI_C__FIMapView_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** first,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_HSTRING_HSTRING __x_ABI_C__FIMap_2_HSTRING_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_HSTRING_HSTRING;

    typedef struct __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        __x_ABI_C__FIMapView_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_HSTRING_HSTRING* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl;

    interface __x_ABI_C__FIMap_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 index,
        __x_ABI_CWindows_CGlobalization_CILanguage** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        __x_ABI_CWindows_CGlobalization_CILanguage* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGlobalization_CILanguage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage __x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 index,
        __x_ABI_CWindows_CGlobalization_CILanguage** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGlobalization__CLanguage** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        __x_ABI_CWindows_CGlobalization_CILanguage* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 index,
        __x_ABI_CWindows_CGlobalization_CILanguage* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 index,
        __x_ABI_CWindows_CGlobalization_CILanguage* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        __x_ABI_CWindows_CGlobalization_CILanguage* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGlobalization_CILanguage** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGlobalization_CILanguage** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CGlobalization__CLanguage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpChallengeHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpCookiePairHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpExpectationHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpProductInfoHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpTransferCodingHeaderValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32 index,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethodVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHttpMethod_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_double __x_ABI_C__FIReference_1_double;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_double;

    typedef struct __x_ABI_C__FIReference_1_doubleVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_double* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_double* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_double* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_double* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_double* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_double* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_double* This,
        DOUBLE* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_doubleVtbl;

    interface __x_ABI_C__FIReference_1_double
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_doubleVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_double_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_UINT32 __x_ABI_C__FIReference_1_UINT32;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_UINT32;

    typedef struct __x_ABI_C__FIReference_1_UINT32Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_UINT32* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_UINT32* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_UINT32* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_UINT32* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_UINT32* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_UINT32* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_UINT32* This,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_UINT32Vtbl;

    interface __x_ABI_C__FIReference_1_UINT32
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_UINT32Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_UINT32_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIReference_1_UINT64_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1_UINT64_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1_UINT64 __x_ABI_C__FIReference_1_UINT64;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1_UINT64;

    typedef struct __x_ABI_C__FIReference_1_UINT64Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1_UINT64* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1_UINT64* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1_UINT64* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1_UINT64* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1_UINT64* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1_UINT64* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1_UINT64* This,
        UINT64* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1_UINT64Vtbl;

    interface __x_ABI_C__FIReference_1_UINT64
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1_UINT64Vtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1_UINT64_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIStringable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIStringable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIStringable __x_ABI_CWindows_CFoundation_CIStringable;

#endif // ____x_ABI_CWindows_CFoundation_CIStringable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CIHostName __x_ABI_CWindows_CNetworking_CIHostName;

#endif // ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_MaxAge)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_MaxAge)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxStale)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_MaxStale)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_MinFresh)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_MinFresh)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_SharedMaxAge)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_SharedMaxAge)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Parameters)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* get_Scheme)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Token)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromScheme)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory* This,
        HSTRING scheme,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromSchemeWithToken)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory* This,
        HSTRING scheme,
        HSTRING token,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue** challengeHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Token)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory* This,
        HSTRING token,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue** connectionOptionHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ContentCoding)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory* This,
        HSTRING contentCoding,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue** contentCodingHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ContentCoding)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Quality)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue* This,
        __x_ABI_C__FIReference_1_double** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromValue)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory* This,
        HSTRING contentCoding,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromValueWithQuality)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory* This,
        HSTRING contentCoding,
        DOUBLE quality,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue** contentCodingWithQualityHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DispositionType)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_DispositionType)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_FileName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_FileName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_FileNameStar)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_FileNameStar)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Parameters)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        __x_ABI_C__FIReference_1_UINT64** value);
    HRESULT (STDMETHODCALLTYPE* put_Size)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* This,
        __x_ABI_C__FIReference_1_UINT64* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory* This,
        HSTRING dispositionType,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue** contentDispositionHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ContentDisposition)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* put_ContentDisposition)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* get_ContentEncoding)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_ContentLanguage)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_ContentLength)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_C__FIReference_1_UINT64** value);
    HRESULT (STDMETHODCALLTYPE* put_ContentLength)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_C__FIReference_1_UINT64* value);
    HRESULT (STDMETHODCALLTYPE* get_ContentLocation)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_ContentLocation)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_ContentMD5)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);
    HRESULT (STDMETHODCALLTYPE* put_ContentMD5)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* value);
    HRESULT (STDMETHODCALLTYPE* get_ContentRange)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* put_ContentRange)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* get_ContentType)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* put_ContentType)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* get_Expires)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* put_Expires)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_LastModified)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* put_LastModified)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        HSTRING name,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* TryAppendWithoutValidation)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection* This,
        HSTRING name,
        HSTRING value,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FirstBytePosition)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This,
        __x_ABI_C__FIReference_1_UINT64** value);
    HRESULT (STDMETHODCALLTYPE* get_LastBytePosition)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This,
        __x_ABI_C__FIReference_1_UINT64** value);
    HRESULT (STDMETHODCALLTYPE* get_Length)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This,
        __x_ABI_C__FIReference_1_UINT64** value);
    HRESULT (STDMETHODCALLTYPE* get_Unit)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Unit)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromLength)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory* This,
        UINT64 length,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromRange)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory* This,
        UINT64 from,
        UINT64 to,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromRangeWithLength)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory* This,
        UINT64 from,
        UINT64 to,
        UINT64 length,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue** contentRangeHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Value)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory* This,
        HSTRING name,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromNameWithValue)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory* This,
        HSTRING name,
        HSTRING value,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** cookiePairHeaderValue);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue** cookiePairHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Parameters)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* get_Scheme)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Token)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromScheme)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory* This,
        HSTRING scheme,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromSchemeWithToken)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory* This,
        HSTRING scheme,
        HSTRING token,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue** credentialsHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Date)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* get_Delta)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue** dateOrDeltaHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Value)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Parameters)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory* This,
        HSTRING name,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromNameWithValue)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory* This,
        HSTRING name,
        HSTRING value,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** expectationHeaderValue);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue** expectationHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LanguageRange)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Quality)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue* This,
        __x_ABI_C__FIReference_1_double** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromLanguageRange)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory* This,
        HSTRING languageRange,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromLanguageRangeWithQuality)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory* This,
        HSTRING languageRange,
        DOUBLE quality,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue** languageRangeWithQualityHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CharSet)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_CharSet)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_MediaType)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_MediaType)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Parameters)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory* This,
        HSTRING mediaType,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue** mediaTypeHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_CharSet)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_CharSet)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_MediaType)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_MediaType)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Parameters)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* get_Quality)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
        __x_ABI_C__FIReference_1_double** value);
    HRESULT (STDMETHODCALLTYPE* put_Quality)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue* This,
        __x_ABI_C__FIReference_1_double* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromMediaType)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory* This,
        HSTRING mediaType,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromMediaTypeWithQuality)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory* This,
        HSTRING mediaType,
        DOUBLE quality,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue** mediaTypeWithQualityHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Value)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory* This,
        HSTRING name,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromNameWithValue)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory* This,
        HSTRING name,
        HSTRING value,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** nameValueHeaderValue);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue** nameValueHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Version)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory* This,
        HSTRING productName,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromNameWithVersion)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory* This,
        HSTRING productName,
        HSTRING productVersion,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue** productHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Product)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* get_Comment)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateFromComment)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory* This,
        HSTRING productComment,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromNameWithVersion)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory* This,
        HSTRING productName,
        HSTRING productVersion,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue** productInfoHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Accept)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_AcceptEncoding)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_AcceptLanguage)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_Authorization)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* put_Authorization)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* get_CacheControl)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_Connection)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_Cookie)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_Date)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* put_Date)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_Expect)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_From)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_From)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Host)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CNetworking_CIHostName** value);
    HRESULT (STDMETHODCALLTYPE* put_Host)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CNetworking_CIHostName* value);
    HRESULT (STDMETHODCALLTYPE* get_IfModifiedSince)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* put_IfModifiedSince)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_IfUnmodifiedSince)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* put_IfUnmodifiedSince)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxForwards)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_C__FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* put_MaxForwards)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_C__FIReference_1_UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ProxyAuthorization)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* put_ProxyAuthorization)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* get_Referer)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_Referer)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_TransferEncoding)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_UserAgent)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        HSTRING name,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* TryAppendWithoutValidation)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection* This,
        HSTRING name,
        HSTRING value,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Age)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_Age)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Allow)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_CacheControl)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_Connection)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_Date)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime** value);
    HRESULT (STDMETHODCALLTYPE* put_Date)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_Location)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_ProxyAuthenticate)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_RetryAfter)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* put_RetryAfter)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue* value);
    HRESULT (STDMETHODCALLTYPE* get_TransferEncoding)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* get_WwwAuthenticate)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection** value);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        HSTRING name,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* TryAppendWithoutValidation)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection* This,
        HSTRING name,
        HSTRING value,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Parameters)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CWeb__CHttp__CHeaders__CHttpNameValueHeaderValue** value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection* This,
        HSTRING input);
    HRESULT (STDMETHODCALLTYPE* TryParseAdd)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection* This,
        HSTRING input,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollectionVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollectionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue** value);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactoryVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Parse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue** result);
    HRESULT (STDMETHODCALLTYPE* TryParse)(__x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics* This,
        HSTRING input,
        __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue** transferCodingHeaderValue,
        boolean* succeeded);

        END_INTERFACE
    } __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStaticsVtbl;

    interface __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics;
#endif /* !defined(____x_ABI_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics_INTERFACE_DEFINED__) */
    

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Networking.h"
#include "Windows.Networking.Sockets.h"
#include "Windows.Security.Credentials.h"
#include "Windows.Security.Cryptography.Certificates.h"
#include "Windows.Storage.Streams.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2 __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4 __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2 __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential __x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2 __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent __x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2 __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2 __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3 __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2 __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential __x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2 __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth __x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory;

#endif // ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfileVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredentialVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredentialVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredentialVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredentialVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredentialVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredentialVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus;

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatusVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatusVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatusVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatusVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_IInspectable __x_ABI_C__FIIterator_1_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_IInspectable;

    typedef struct __x_ABI_C__FIIterator_1_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_IInspectable* This,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_IInspectable* This,
        UINT32 itemsLength,
        IInspectable** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_IInspectableVtbl;

    interface __x_ABI_C__FIIterator_1_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_IInspectable __x_ABI_C__FIIterable_1_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_IInspectable;

    typedef struct __x_ABI_C__FIIterable_1_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_IInspectable* This,
        __x_ABI_C__FIIterator_1_IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_IInspectableVtbl;

    interface __x_ABI_C__FIIterable_1_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CIHostName __x_ABI_CWindows_CNetworking_CIHostName;

#endif // ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
        __x_ABI_CWindows_CNetworking_CIHostName** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CIHostName** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostNameVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CHostName** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostNameVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElementVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElementVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBufferVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBufferVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBufferVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBufferVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnPacketBuffer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CIHostName** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
        __x_ABI_CWindows_CNetworking_CIHostName* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CIHostName** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostNameVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElementVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElementVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1_HSTRING __x_ABI_C__FIVector_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1_HSTRING;

    typedef struct __x_ABI_C__FIVector_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1_HSTRING* This,
        __x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVector_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CIHostName** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
        __x_ABI_CWindows_CNetworking_CIHostName* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CIHostName* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CIHostName* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
        __x_ABI_CWindows_CNetworking_CIHostName* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CIHostName** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CIHostName** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostNameVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostNameVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppIdVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfoVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRouteVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32 index,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilterVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* sender,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* sender,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus __x_ABI_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus;

#ifndef ____x_ABI_CWindows_CSecurity_CCredentials_CIPasswordCredential_FWD_DEFINED__
#define ____x_ABI_CWindows_CSecurity_CCredentials_CIPasswordCredential_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSecurity_CCredentials_CIPasswordCredential __x_ABI_CWindows_CSecurity_CCredentials_CIPasswordCredential;

#endif // ____x_ABI_CWindows_CSecurity_CCredentials_CIPasswordCredential_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate_FWD_DEFINED__
#define ____x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate;

#endif // ____x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAppIdType __x_ABI_CWindows_CNetworking_CVpn_CVpnAppIdType;

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod;

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType;

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType;

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnDataPathType __x_ABI_CWindows_CNetworking_CVpn_CVpnDataPathType;

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnDomainNameType __x_ABI_CWindows_CNetworking_CVpn_CVpnDomainNameType;

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol;

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus;

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnNativeProtocolType __x_ABI_CWindows_CNetworking_CVpn_CVpnNativeProtocolType;

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus __x_ABI_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus;

typedef enum __x_ABI_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType __x_ABI_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType;

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAppIdType
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnAppIdType_PackageFamilyName = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnAppIdType_FullyQualifiedBinaryName = 1,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnAppIdType_FilePath = 2,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod_Mschapv2 = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod_Eap = 1,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod_Certificate = 2,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod_PresharedKey = 3,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType_Idle = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType_Active = 1,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelRequestCredentialsOptions
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelRequestCredentialsOptions_None = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelRequestCredentialsOptions_Retrying = 0x1,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelRequestCredentialsOptions_UseForSingleSignIn = 0x2,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType_UsernamePassword = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType_UsernameOtpPin = 1,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType_UsernamePasswordAndPin = 2,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType_UsernamePasswordChange = 3,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType_SmartCard = 4,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType_ProtectedCertificate = 5,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType_UnProtectedCertificate = 6,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnDataPathType
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnDataPathType_Send = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnDataPathType_Receive = 1,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnDomainNameType
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnDomainNameType_Suffix = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnDomainNameType_FullyQualified = 1,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnDomainNameType_Reserved = 65535,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol_None = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol_Tcp = 6,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol_Udp = 17,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol_Icmp = 1,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol_Ipv6Icmp = 58,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol_Igmp = 2,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol_Pgm = 113,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus_Disconnected = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus_Disconnecting = 1,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus_Connected = 2,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus_Connecting = 3,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_Ok = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_Other = 1,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_InvalidXmlSyntax = 2,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_ProfileNameTooLong = 3,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_ProfileInvalidAppId = 4,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_AccessDenied = 5,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_CannotFindProfile = 6,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_AlreadyDisconnecting = 7,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_AlreadyConnected = 8,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_GeneralAuthenticationFailure = 9,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_EapFailure = 10,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_SmartCardFailure = 11,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_CertificateFailure = 12,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_ServerConfiguration = 13,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_NoConnection = 14,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_ServerConnection = 15,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_UserNamePassword = 16,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_DnsNotResolvable = 17,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_InvalidIP = 18,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnNativeProtocolType
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnNativeProtocolType_Pptp = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnNativeProtocolType_L2tp = 1,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnNativeProtocolType_IpsecIkev2 = 2,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus_Ok = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus_InvalidBufferSize = 1,
};

enum __x_ABI_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType
    {
        __x_ABI_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType_SplitRouting = 0,
    __x_ABI_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType_ForceAllTrafficOverVpn = 1,
};

#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAppIdType* value);
    HRESULT (STDMETHODCALLTYPE* put_Type)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAppIdType value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Value)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAppIdType type,
        HSTRING value,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId** result);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactoryVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnAppIdFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* AssociateTransport)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        IInspectable* mainOuterTunnelTransport,
        IInspectable* optionalOuterTunnelTransport);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* assignedClientIPv4list,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* assignedClientIPv6list,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* vpnInterfaceId,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* routeScope,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* namespaceScope,
        UINT32 mtuSize,
        UINT32 maxFrameSize,
        boolean optimizeForLowCostNetwork,
        IInspectable* mainOuterTunnelTransport,
        IInspectable* optionalOuterTunnelTransport);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This);
    HRESULT (STDMETHODCALLTYPE* RequestCredentials)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType credType,
        boolean isRetry,
        boolean isSingleSignOnCredential,
        __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate* certificate,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential** credential);
    HRESULT (STDMETHODCALLTYPE* RequestVpnPacketBuffer)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnDataPathType type,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** vpnPacketBuffer);
    HRESULT (STDMETHODCALLTYPE* LogDiagnosticMessage)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        HSTRING message);
    HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Configuration)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration** value);
    HRESULT (STDMETHODCALLTYPE* add_ActivityChange)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ActivityChange)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* put_PlugInContext)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_PlugInContext)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* get_SystemHealth)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth** value);
    HRESULT (STDMETHODCALLTYPE* RequestCustomPrompt)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPrompt* customPrompt);
    HRESULT (STDMETHODCALLTYPE* SetErrorMessage)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        HSTRING message);
    HRESULT (STDMETHODCALLTYPE* SetAllowedSslTlsVersions)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* This,
        IInspectable* tunnelTransport,
        boolean useTls12);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* StartWithMainTransport)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* assignedClientIPv4list,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* assignedClientIPv6list,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* vpnInterfaceId,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* assignedRoutes,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* assignedDomainName,
        UINT32 mtuSize,
        UINT32 maxFrameSize,
        boolean Reserved,
        IInspectable* mainOuterTunnelTransport);
    HRESULT (STDMETHODCALLTYPE* StartExistingTransports)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* assignedClientIPv4list,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* assignedClientIPv6list,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* vpnInterfaceId,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* assignedRoutes,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* assignedDomainName,
        UINT32 mtuSize,
        UINT32 maxFrameSize,
        boolean Reserved);
    HRESULT (STDMETHODCALLTYPE* add_ActivityStateChange)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CNetworking__CVpn__CVpnChannel___x_ABI_CWindows__CNetworking__CVpn__CVpnChannelActivityStateChangedArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ActivityStateChange)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* GetVpnSendPacketBuffer)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** vpnSendPacketBuffer);
    HRESULT (STDMETHODCALLTYPE* GetVpnReceivePacketBuffer)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** vpnReceivePacketBuffer);
    HRESULT (STDMETHODCALLTYPE* RequestCustomPromptAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnCustomPromptElement* customPromptElement,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** action);
    HRESULT (STDMETHODCALLTYPE* RequestCredentialsWithCertificateAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType credType,
        UINT32 credOptions,
        __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate* certificate,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential** credential);
    HRESULT (STDMETHODCALLTYPE* RequestCredentialsWithOptionsAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType credType,
        UINT32 credOptions,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential** credential);
    HRESULT (STDMETHODCALLTYPE* RequestCredentialsSimpleAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnCredentialType credType,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnCredential** credential);
    HRESULT (STDMETHODCALLTYPE* TerminateConnection)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        HSTRING message);
    HRESULT (STDMETHODCALLTYPE* StartWithTrafficFilter)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* assignedClientIpv4List,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName* assignedClientIpv6List,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* vpnInterfaceId,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* assignedRoutes,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* assignedNamespace,
        UINT32 mtuSize,
        UINT32 maxFrameSize,
        boolean reserved,
        IInspectable* mainOuterTunnelTransport,
        IInspectable* optionalOuterTunnelTransport,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* assignedTrafficFilters);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* AddAndAssociateTransport)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This,
        IInspectable* transport,
        IInspectable* context);
    HRESULT (STDMETHODCALLTYPE* StartWithMultipleTransports)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* assignedClientIpv4Addresses,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* assignedClientIpv6Addresses,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* vpninterfaceId,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* assignedRoutes,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* assignedNamespace,
        UINT32 mtuSize,
        UINT32 maxFrameSize,
        boolean reserved,
        __x_ABI_C__FIIterable_1_IInspectable* transports,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* assignedTrafficFilters);
    HRESULT (STDMETHODCALLTYPE* ReplaceAndAssociateTransport)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This,
        IInspectable* transport,
        IInspectable* context);
    HRESULT (STDMETHODCALLTYPE* StartReconnectingTransport)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This,
        IInspectable* transport,
        IInspectable* context);
    HRESULT (STDMETHODCALLTYPE* GetSlotTypeForTransportContext)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This,
        IInspectable* context,
        enum __x_ABI_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus* slotType);
    HRESULT (STDMETHODCALLTYPE* get_CurrentRequestTransportContext)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4* This,
        IInspectable** context);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4Vtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgsVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ActivityState)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgsVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ServerServiceName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ServerHostNameList)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CHostName** value);
    HRESULT (STDMETHODCALLTYPE* get_CustomField)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfigurationVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfigurationVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ServerUris)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* ProcessEventAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics* This,
        IInspectable* thirdPartyPlugIn,
        IInspectable* event);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStaticsVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnChannelStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCredentialVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PasskeyCredential)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential* This,
        __x_ABI_CWindows_CSecurity_CCredentials_CIPasswordCredential** value);
    HRESULT (STDMETHODCALLTYPE* get_CertificateCredential)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential* This,
        __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate** value);
    HRESULT (STDMETHODCALLTYPE* get_AdditionalPin)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_OldPasswordCredential)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential* This,
        __x_ABI_CWindows_CSecurity_CCredentials_CIPasswordCredential** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCredentialVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCredentialVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCredential_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBoxVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_InitialCheckState)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_InitialCheckState)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Checked)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBoxVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBoxVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBoxVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_OptionsText)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox* This,
        __x_ABI_C__FIVectorView_1_HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_OptionsText)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_Selected)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBoxVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBoxVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomComboBox_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBoxVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_DefaultText)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_DefaultText)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_NoEcho)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_NoEcho)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBoxVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBoxVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomEditBox_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBoxVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox* This,
            TrustLevel* trustLevel);
    
        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBoxVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBoxVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomErrorBox_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Label)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Label)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Compulsory)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Compulsory)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Bordered)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Bordered)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPrompt_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInputVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_InitialValue)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_InitialValue)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInputVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInputVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElementVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_DisplayName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Compulsory)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Compulsory)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Emphasized)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Emphasized)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElementVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElementVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelectorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Options)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector* This,
        __x_ABI_C__FIVector_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_SelectedIndex)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelectorVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelectorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Text)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptText_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInputVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_PlaceholderText)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_PlaceholderText)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_IsTextHidden)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsTextHidden)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInputVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInputVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBoxVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_DisplayText)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayText)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBoxVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBoxVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnCustomTextBox_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DomainNameList)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo** value);
    HRESULT (STDMETHODCALLTYPE* put_ProxyAutoConfigurationUri)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_ProxyAutoConfigurationUri)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignmentVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignmentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_DomainName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This,
        __x_ABI_CWindows_CNetworking_CIHostName* value);
    HRESULT (STDMETHODCALLTYPE* get_DomainName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This,
        __x_ABI_CWindows_CNetworking_CIHostName** value);
    HRESULT (STDMETHODCALLTYPE* put_DomainNameType)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnDomainNameType value);
    HRESULT (STDMETHODCALLTYPE* get_DomainNameType)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnDomainNameType* value);
    HRESULT (STDMETHODCALLTYPE* get_DnsServers)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName** value);
    HRESULT (STDMETHODCALLTYPE* get_WebProxyServers)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_WebProxyUris)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateVpnDomainNameInfo)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory* This,
        HSTRING name,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnDomainNameType nameType,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* dnsServerList,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CNetworking__CHostName* proxyServerList,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo** domainNameInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactoryVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAddressInfo)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId* This,
        UINT32* idLength,
        BYTE** id);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateVpnInterfaceId)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory* This,
        UINT32 addressLength,
        BYTE* address,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceId** vpnInterfaceId);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactoryVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* AddProfileFromXmlAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
        HSTRING xml,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus** operation);
    HRESULT (STDMETHODCALLTYPE* AddProfileFromObjectAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* profile,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus** operation);
    HRESULT (STDMETHODCALLTYPE* UpdateProfileFromXmlAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
        HSTRING xml,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus** operation);
    HRESULT (STDMETHODCALLTYPE* UpdateProfileFromObjectAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* profile,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus** operation);
    HRESULT (STDMETHODCALLTYPE* GetProfilesAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CVpn__CIVpnProfile** operation);
    HRESULT (STDMETHODCALLTYPE* DeleteProfileAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* profile,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus** operation);
    HRESULT (STDMETHODCALLTYPE* ConnectProfileAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* profile,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus** operation);
    HRESULT (STDMETHODCALLTYPE* ConnectProfileWithPasswordCredentialAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* profile,
        __x_ABI_CWindows_CSecurity_CCredentials_CIPasswordCredential* passwordCredential,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus** operation);
    HRESULT (STDMETHODCALLTYPE* DisconnectProfileAsync)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* profile,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CVpn__CVpnManagementErrorStatus** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgentVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnManagementAgent_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_NamespaceList)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo* value);
    HRESULT (STDMETHODCALLTYPE* get_NamespaceList)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnNamespaceInfo** value);
    HRESULT (STDMETHODCALLTYPE* put_ProxyAutoConfigUri)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_ProxyAutoConfigUri)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignmentVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignmentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Namespace)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Namespace)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_DnsServers)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* value);
    HRESULT (STDMETHODCALLTYPE* get_DnsServers)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName** value);
    HRESULT (STDMETHODCALLTYPE* put_WebProxyServers)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* value);
    HRESULT (STDMETHODCALLTYPE* get_WebProxyServers)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateVpnNamespaceInfo)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory* This,
        HSTRING name,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* dnsServerList,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CHostName* proxyServerList,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo** namespaceInfo);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactoryVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Servers)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        __x_ABI_C__FIVector_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_RoutingPolicyType)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType* value);
    HRESULT (STDMETHODCALLTYPE* put_RoutingPolicyType)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType value);
    HRESULT (STDMETHODCALLTYPE* get_NativeProtocolType)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnNativeProtocolType* value);
    HRESULT (STDMETHODCALLTYPE* put_NativeProtocolType)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnNativeProtocolType value);
    HRESULT (STDMETHODCALLTYPE* get_UserAuthenticationMethod)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod* value);
    HRESULT (STDMETHODCALLTYPE* put_UserAuthenticationMethod)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod value);
    HRESULT (STDMETHODCALLTYPE* get_TunnelAuthenticationMethod)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod* value);
    HRESULT (STDMETHODCALLTYPE* put_TunnelAuthenticationMethod)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod value);
    HRESULT (STDMETHODCALLTYPE* get_EapConfiguration)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        HSTRING* Value);
    HRESULT (STDMETHODCALLTYPE* put_EapConfiguration)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfileVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfileVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RequireVpnClientAppUI)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_RequireVpnClientAppUI)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ConnectionStatus)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnNativeProfile2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Buffer)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);
    HRESULT (STDMETHODCALLTYPE* put_Status)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus value);
    HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus* value);
    HRESULT (STDMETHODCALLTYPE* put_TransportAffinity)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_TransportAffinity)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AppId)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_TransportContext)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3* This,
        IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_TransportContext)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3* This,
        IInspectable** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3Vtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateVpnPacketBuffer)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* parentBuffer,
        UINT32 offset,
        UINT32 length,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** vpnPacketBuffer);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactoryVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferListVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* nextVpnPacketBuffer);
    HRESULT (STDMETHODCALLTYPE* AddAtBegin)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* nextVpnPacketBuffer);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** nextVpnPacketBuffer);
    HRESULT (STDMETHODCALLTYPE* RemoveAtBegin)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** nextVpnPacketBuffer);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This);
    HRESULT (STDMETHODCALLTYPE* put_Status)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus value);
    HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferListVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferListVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* AddLeadingPacket)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* nextVpnPacketBuffer);
    HRESULT (STDMETHODCALLTYPE* RemoveLeadingPacket)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** nextVpnPacketBuffer);
    HRESULT (STDMETHODCALLTYPE* AddTrailingPacket)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* nextVpnPacketBuffer);
    HRESULT (STDMETHODCALLTYPE* RemoveTrailingPacket)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** nextVpnPacketBuffer);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredentialVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PasskeyCredential)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential* This,
        __x_ABI_CWindows_CSecurity_CCredentials_CIPasswordCredential** value);
    HRESULT (STDMETHODCALLTYPE* get_AdditionalPin)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_OldPasswordCredential)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential* This,
        __x_ABI_CWindows_CSecurity_CCredentials_CIPasswordCredential** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredentialVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredentialVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPickedCredential_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Connect)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* channel);
    HRESULT (STDMETHODCALLTYPE* Disconnect)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* channel);
    HRESULT (STDMETHODCALLTYPE* GetKeepAlivePayload)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* channel,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer** keepAlivePacket);
    HRESULT (STDMETHODCALLTYPE* Encapsulate)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* channel,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* packets,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* encapulatedPackets);
    HRESULT (STDMETHODCALLTYPE* Decapsulate)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnChannel* channel,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBuffer* encapBuffer,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* decapsulatedPackets,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnPacketBufferList* controlPacketsToSend);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugIn_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ServerUris)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri** value);
    HRESULT (STDMETHODCALLTYPE* get_CustomConfiguration)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_CustomConfiguration)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_VpnPluginPackageFamilyName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_VpnPluginPackageFamilyName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfileVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfileVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RequireVpnClientAppUI)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_RequireVpnClientAppUI)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ConnectionStatus)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2Vtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfileVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ProfileName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_ProfileName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_AppTriggers)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnAppId** value);
    HRESULT (STDMETHODCALLTYPE* get_Routes)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute** value);
    HRESULT (STDMETHODCALLTYPE* get_DomainNameInfoList)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnDomainNameInfo** value);
    HRESULT (STDMETHODCALLTYPE* get_TrafficFilters)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter** value);
    HRESULT (STDMETHODCALLTYPE* get_RememberCredentials)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_RememberCredentials)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_AlwaysOn)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AlwaysOn)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfileVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnProfileVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnProfile_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Address)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* This,
        __x_ABI_CWindows_CNetworking_CIHostName* value);
    HRESULT (STDMETHODCALLTYPE* get_Address)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* This,
        __x_ABI_CWindows_CNetworking_CIHostName** value);
    HRESULT (STDMETHODCALLTYPE* put_PrefixSize)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* This,
        BYTE value);
    HRESULT (STDMETHODCALLTYPE* get_PrefixSize)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute* This,
        BYTE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Ipv4InclusionRoutes)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* value);
    HRESULT (STDMETHODCALLTYPE* put_Ipv6InclusionRoutes)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* value);
    HRESULT (STDMETHODCALLTYPE* get_Ipv4InclusionRoutes)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute** value);
    HRESULT (STDMETHODCALLTYPE* get_Ipv6InclusionRoutes)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute** value);
    HRESULT (STDMETHODCALLTYPE* put_Ipv4ExclusionRoutes)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* value);
    HRESULT (STDMETHODCALLTYPE* put_Ipv6ExclusionRoutes)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute* value);
    HRESULT (STDMETHODCALLTYPE* get_Ipv4ExclusionRoutes)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute** value);
    HRESULT (STDMETHODCALLTYPE* get_Ipv6ExclusionRoutes)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnRoute** value);
    HRESULT (STDMETHODCALLTYPE* put_ExcludeLocalSubnets)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ExcludeLocalSubnets)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignmentVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignmentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteAssignment_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateVpnRoute)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory* This,
        __x_ABI_CWindows_CNetworking_CIHostName* address,
        BYTE prefixSize,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnRoute** route);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactoryVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnRouteFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealthVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StatementOfHealth)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealthVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealthVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnSystemHealth_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AppId)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId** value);
    HRESULT (STDMETHODCALLTYPE* put_AppId)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* value);
    HRESULT (STDMETHODCALLTYPE* get_AppClaims)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        __x_ABI_C__FIVector_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_Protocol)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol* value);
    HRESULT (STDMETHODCALLTYPE* put_Protocol)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnIPProtocol value);
    HRESULT (STDMETHODCALLTYPE* get_LocalPortRanges)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        __x_ABI_C__FIVector_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_RemotePortRanges)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        __x_ABI_C__FIVector_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_LocalAddressRanges)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        __x_ABI_C__FIVector_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_RemoteAddressRanges)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        __x_ABI_C__FIVector_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_RoutingPolicyType)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType* value);
    HRESULT (STDMETHODCALLTYPE* put_RoutingPolicyType)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter* This,
        enum __x_ABI_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignmentVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TrafficFilterList)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CNetworking__CVpn__CVpnTrafficFilter** value);
    HRESULT (STDMETHODCALLTYPE* get_AllowOutbound)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowOutbound)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_AllowInbound)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowInbound)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment* This,
        boolean value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignmentVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignmentVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory* This,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnAppId* appId,
        __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilter** result);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactoryVtbl;

    interface __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory_INTERFACE_DEFINED__) */
    

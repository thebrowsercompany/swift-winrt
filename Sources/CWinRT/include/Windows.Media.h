// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.ApplicationModel.AppService.h"
#include "Windows.Graphics.DirectX.h"
#include "Windows.Graphics.DirectX.Direct3D11.h"
#include "Windows.Graphics.Imaging.h"
#include "Windows.Storage.h"
#include "Windows.Storage.Streams.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CMedia_CIAudioBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIAudioBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIAudioBuffer __x_ABI_CWindows_CMedia_CIAudioBuffer;

#endif // ____x_ABI_CWindows_CMedia_CIAudioBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIAudioFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIAudioFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIAudioFrame __x_ABI_CWindows_CMedia_CIAudioFrame;

#endif // ____x_ABI_CWindows_CMedia_CIAudioFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIAudioFrameFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIAudioFrameFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIAudioFrameFactory __x_ABI_CWindows_CMedia_CIAudioFrameFactory;

#endif // ____x_ABI_CWindows_CMedia_CIAudioFrameFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs __x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIImageDisplayProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIImageDisplayProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIImageDisplayProperties __x_ABI_CWindows_CMedia_CIImageDisplayProperties;

#endif // ____x_ABI_CWindows_CMedia_CIImageDisplayProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaControl_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaControl __x_ABI_CWindows_CMedia_CIMediaControl;

#endif // ____x_ABI_CWindows_CMedia_CIMediaControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaExtension __x_ABI_CWindows_CMedia_CIMediaExtension;

#endif // ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaExtensionManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaExtensionManager_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaExtensionManager __x_ABI_CWindows_CMedia_CIMediaExtensionManager;

#endif // ____x_ABI_CWindows_CMedia_CIMediaExtensionManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaExtensionManager2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaExtensionManager2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaExtensionManager2 __x_ABI_CWindows_CMedia_CIMediaExtensionManager2;

#endif // ____x_ABI_CWindows_CMedia_CIMediaExtensionManager2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaFrame __x_ABI_CWindows_CMedia_CIMediaFrame;

#endif // ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaMarker_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaMarker_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaMarker __x_ABI_CWindows_CMedia_CIMediaMarker;

#endif // ____x_ABI_CWindows_CMedia_CIMediaMarker_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics __x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics;

#endif // ____x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaMarkers_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaMarkers_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaMarkers __x_ABI_CWindows_CMedia_CIMediaMarkers;

#endif // ____x_ABI_CWindows_CMedia_CIMediaMarkers_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails __x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails;

#endif // ____x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaTimelineController_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaTimelineController_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaTimelineController __x_ABI_CWindows_CMedia_CIMediaTimelineController;

#endif // ____x_ABI_CWindows_CMedia_CIMediaTimelineController_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaTimelineController2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaTimelineController2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaTimelineController2 __x_ABI_CWindows_CMedia_CIMediaTimelineController2;

#endif // ____x_ABI_CWindows_CMedia_CIMediaTimelineController2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs __x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMusicDisplayProperties __x_ABI_CWindows_CMedia_CIMusicDisplayProperties;

#endif // ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMusicDisplayProperties2 __x_ABI_CWindows_CMedia_CIMusicDisplayProperties2;

#endif // ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIMusicDisplayProperties3 __x_ABI_CWindows_CMedia_CIMusicDisplayProperties3;

#endif // ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs __x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs __x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs __x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CISystemMediaTransportControls_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControls_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControls __x_ABI_CWindows_CMedia_CISystemMediaTransportControls;

#endif // ____x_ABI_CWindows_CMedia_CISystemMediaTransportControls_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CISystemMediaTransportControls2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControls2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControls2 __x_ABI_CWindows_CMedia_CISystemMediaTransportControls2;

#endif // ____x_ABI_CWindows_CMedia_CISystemMediaTransportControls2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater;

#endif // ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics;

#endif // ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties;

#endif // ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIVideoDisplayProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIVideoDisplayProperties_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIVideoDisplayProperties __x_ABI_CWindows_CMedia_CIVideoDisplayProperties;

#endif // ____x_ABI_CWindows_CMedia_CIVideoDisplayProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIVideoDisplayProperties2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIVideoDisplayProperties2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIVideoDisplayProperties2 __x_ABI_CWindows_CMedia_CIVideoDisplayProperties2;

#endif // ____x_ABI_CWindows_CMedia_CIVideoDisplayProperties2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIVideoEffectsStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIVideoEffectsStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIVideoEffectsStatics __x_ABI_CWindows_CMedia_CIVideoEffectsStatics;

#endif // ____x_ABI_CWindows_CMedia_CIVideoEffectsStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIVideoFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIVideoFrame_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIVideoFrame __x_ABI_CWindows_CMedia_CIVideoFrame;

#endif // ____x_ABI_CWindows_CMedia_CIVideoFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIVideoFrame2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIVideoFrame2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIVideoFrame2 __x_ABI_CWindows_CMedia_CIVideoFrame2;

#endif // ____x_ABI_CWindows_CMedia_CIVideoFrame2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIVideoFrameFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIVideoFrameFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIVideoFrameFactory __x_ABI_CWindows_CMedia_CIVideoFrameFactory;

#endif // ____x_ABI_CWindows_CMedia_CIVideoFrameFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIVideoFrameStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIVideoFrameStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CMedia_CIVideoFrameStatics __x_ABI_CWindows_CMedia_CIVideoFrameStatics;

#endif // ____x_ABI_CWindows_CMedia_CIVideoFrameStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

#if !defined(____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_boolean __x_ABI_C__FIAsyncOperation_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
        __x_ABI_C__FIAsyncOperation_1_boolean* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarkerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
        __x_ABI_CWindows_CMedia_CIMediaMarker** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CIMediaMarker** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarkerVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarkerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarkerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CMedia__CIMediaMarker** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarkerVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarkerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CIMediaMarker_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarkerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CIMediaMarker** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
        __x_ABI_CWindows_CMedia_CIMediaMarker* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CIMediaMarker** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarkerVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarkerVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1_HSTRING __x_ABI_C__FIVector_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1_HSTRING;

    typedef struct __x_ABI_C__FIVector_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1_HSTRING* This,
        __x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVector_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIEventHandler_1_IInspectable __x_ABI_C__FIEventHandler_1_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIEventHandler_1_IInspectable;

    typedef struct __x_ABI_C__FIEventHandler_1_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIEventHandler_1_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIEventHandler_1_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIEventHandler_1_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIEventHandler_1_IInspectable* This,
        IInspectable* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FIEventHandler_1_IInspectableVtbl;

    interface __x_ABI_C__FIEventHandler_1_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIEventHandler_1_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIEventHandler_1_IInspectable_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds;

#if !defined(____x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds __x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds;

    typedef struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBoundsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds* This,
        struct __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds* result);

        END_INTERFACE
    } __x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBoundsVtbl;

    interface __x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds
    {
        CONST_VTBL struct __x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBoundsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable* This,
        __x_ABI_CWindows_CMedia_CIMediaTimelineController* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs* This,
        __x_ABI_CWindows_CMedia_CIMediaTimelineController* sender,
        __x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControls* sender,
        __x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControls* sender,
        __x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControls* sender,
        __x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControls* sender,
        __x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs* This,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControls* sender,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs* This,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControls* sender,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgsVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection;

#endif // ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet;

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIMemoryBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIMemoryBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIMemoryBuffer __x_ABI_CWindows_CFoundation_CIMemoryBuffer;

#endif // ____x_ABI_CWindows_CFoundation_CIMemoryBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice;

#endif // ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface;

#endif // ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode;

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat;

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CIStorageFile __x_ABI_CWindows_CStorage_CIStorageFile;

#endif // ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CMedia_CAudioBufferAccessMode __x_ABI_CWindows_CMedia_CAudioBufferAccessMode;

typedef enum __x_ABI_CWindows_CMedia_CMediaPlaybackAutoRepeatMode __x_ABI_CWindows_CMedia_CMediaPlaybackAutoRepeatMode;

typedef enum __x_ABI_CWindows_CMedia_CMediaPlaybackStatus __x_ABI_CWindows_CMedia_CMediaPlaybackStatus;

typedef enum __x_ABI_CWindows_CMedia_CMediaPlaybackType __x_ABI_CWindows_CMedia_CMediaPlaybackType;

typedef enum __x_ABI_CWindows_CMedia_CMediaTimelineControllerState __x_ABI_CWindows_CMedia_CMediaTimelineControllerState;

typedef enum __x_ABI_CWindows_CMedia_CSoundLevel __x_ABI_CWindows_CMedia_CSoundLevel;

typedef enum __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton;

typedef enum __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsProperty __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsProperty;

enum __x_ABI_CWindows_CMedia_CAudioBufferAccessMode
    {
        __x_ABI_CWindows_CMedia_CAudioBufferAccessMode_Read = 0,
    __x_ABI_CWindows_CMedia_CAudioBufferAccessMode_ReadWrite = 1,
    __x_ABI_CWindows_CMedia_CAudioBufferAccessMode_Write = 2,
};

enum __x_ABI_CWindows_CMedia_CAudioProcessing
    {
        __x_ABI_CWindows_CMedia_CAudioProcessing_Default = 0,
    __x_ABI_CWindows_CMedia_CAudioProcessing_Raw = 1,
};

enum __x_ABI_CWindows_CMedia_CMediaPlaybackAutoRepeatMode
    {
        __x_ABI_CWindows_CMedia_CMediaPlaybackAutoRepeatMode_None = 0,
    __x_ABI_CWindows_CMedia_CMediaPlaybackAutoRepeatMode_Track = 1,
    __x_ABI_CWindows_CMedia_CMediaPlaybackAutoRepeatMode_List = 2,
};

enum __x_ABI_CWindows_CMedia_CMediaPlaybackStatus
    {
        __x_ABI_CWindows_CMedia_CMediaPlaybackStatus_Closed = 0,
    __x_ABI_CWindows_CMedia_CMediaPlaybackStatus_Changing = 1,
    __x_ABI_CWindows_CMedia_CMediaPlaybackStatus_Stopped = 2,
    __x_ABI_CWindows_CMedia_CMediaPlaybackStatus_Playing = 3,
    __x_ABI_CWindows_CMedia_CMediaPlaybackStatus_Paused = 4,
};

enum __x_ABI_CWindows_CMedia_CMediaPlaybackType
    {
        __x_ABI_CWindows_CMedia_CMediaPlaybackType_Unknown = 0,
    __x_ABI_CWindows_CMedia_CMediaPlaybackType_Music = 1,
    __x_ABI_CWindows_CMedia_CMediaPlaybackType_Video = 2,
    __x_ABI_CWindows_CMedia_CMediaPlaybackType_Image = 3,
};

enum __x_ABI_CWindows_CMedia_CMediaTimelineControllerState
    {
        __x_ABI_CWindows_CMedia_CMediaTimelineControllerState_Paused = 0,
    __x_ABI_CWindows_CMedia_CMediaTimelineControllerState_Running = 1,
    __x_ABI_CWindows_CMedia_CMediaTimelineControllerState_Stalled = 2,
    __x_ABI_CWindows_CMedia_CMediaTimelineControllerState_Error = 3,
};

enum __x_ABI_CWindows_CMedia_CSoundLevel
    {
        __x_ABI_CWindows_CMedia_CSoundLevel_Muted = 0,
    __x_ABI_CWindows_CMedia_CSoundLevel_Low = 1,
    __x_ABI_CWindows_CMedia_CSoundLevel_Full = 2,
};

enum __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton
    {
        __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton_Play = 0,
    __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton_Pause = 1,
    __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton_Stop = 2,
    __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton_Record = 3,
    __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton_FastForward = 4,
    __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton_Rewind = 5,
    __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton_Next = 6,
    __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton_Previous = 7,
    __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton_ChannelUp = 8,
    __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton_ChannelDown = 9,
};

enum __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsProperty
    {
        __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsProperty_SoundLevel = 0,
};

struct __x_ABI_CWindows_CMedia_CMediaTimeRange
    {
        struct __x_ABI_CWindows_CFoundation_CTimeSpan Start;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan End;
};

#if !defined(____x_ABI_CWindows_CMedia_CIAudioBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIAudioBuffer_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIAudioBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIAudioBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIAudioBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIAudioBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIAudioBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIAudioBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIAudioBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Capacity)(__x_ABI_CWindows_CMedia_CIAudioBuffer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Length)(__x_ABI_CWindows_CMedia_CIAudioBuffer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Length)(__x_ABI_CWindows_CMedia_CIAudioBuffer* This,
        UINT32 value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIAudioBufferVtbl;

    interface __x_ABI_CWindows_CMedia_CIAudioBuffer
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIAudioBufferVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIAudioBuffer;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIAudioBuffer_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIAudioFrame_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIAudioFrame_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIAudioFrameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIAudioFrame* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIAudioFrame* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIAudioFrame* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIAudioFrame* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIAudioFrame* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIAudioFrame* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* LockBuffer)(__x_ABI_CWindows_CMedia_CIAudioFrame* This,
        enum __x_ABI_CWindows_CMedia_CAudioBufferAccessMode mode,
        __x_ABI_CWindows_CMedia_CIAudioBuffer** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIAudioFrameVtbl;

    interface __x_ABI_CWindows_CMedia_CIAudioFrame
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIAudioFrameVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIAudioFrame;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIAudioFrame_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIAudioFrameFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIAudioFrameFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIAudioFrameFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIAudioFrameFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIAudioFrameFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIAudioFrameFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIAudioFrameFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIAudioFrameFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIAudioFrameFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CIAudioFrameFactory* This,
        UINT32 capacity,
        __x_ABI_CWindows_CMedia_CIAudioFrame** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIAudioFrameFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CIAudioFrameFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIAudioFrameFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIAudioFrameFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIAudioFrameFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RequestedAutoRepeatMode)(__x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs* This,
        enum __x_ABI_CWindows_CMedia_CMediaPlaybackAutoRepeatMode* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIAutoRepeatModeChangeRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIImageDisplayProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIImageDisplayProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIImageDisplayPropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIImageDisplayProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIImageDisplayProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIImageDisplayProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIImageDisplayProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIImageDisplayProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIImageDisplayProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CMedia_CIImageDisplayProperties* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Title)(__x_ABI_CWindows_CMedia_CIImageDisplayProperties* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Subtitle)(__x_ABI_CWindows_CMedia_CIImageDisplayProperties* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Subtitle)(__x_ABI_CWindows_CMedia_CIImageDisplayProperties* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIImageDisplayPropertiesVtbl;

    interface __x_ABI_CWindows_CMedia_CIImageDisplayProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIImageDisplayPropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIImageDisplayProperties;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIImageDisplayProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaControl_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaControl_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaControlVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaControl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaControl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* add_SoundLevelChanged)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_SoundLevelChanged)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PlayPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PlayPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PausePressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PausePressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_StopPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_StopPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PlayPauseTogglePressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PlayPauseTogglePressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_RecordPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_RecordPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_NextTrackPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_NextTrackPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_PreviousTrackPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_PreviousTrackPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_FastForwardPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_FastForwardPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_RewindPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_RewindPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_ChannelUpPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_ChannelUpPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* add_ChannelDownPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_C__FIEventHandler_1_IInspectable* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_ChannelDownPressed)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* get_SoundLevel)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        enum __x_ABI_CWindows_CMedia_CSoundLevel* value);
    HRESULT (STDMETHODCALLTYPE* put_TrackName)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_TrackName)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_ArtistName)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_ArtistName)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_IsPlaying)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsPlaying)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AlbumArt)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_AlbumArt)(__x_ABI_CWindows_CMedia_CIMediaControl* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaControlVtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaControlVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaControl;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaControl_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaExtension_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaExtension_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaExtensionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaExtension* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaExtension* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaExtension* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaExtension* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaExtension* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaExtension* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* SetProperties)(__x_ABI_CWindows_CMedia_CIMediaExtension* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* configuration);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaExtensionVtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaExtension
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaExtensionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaExtension;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaExtension_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaExtensionManager_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaExtensionManager_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaExtensionManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RegisterSchemeHandler)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        HSTRING scheme);
    HRESULT (STDMETHODCALLTYPE* RegisterSchemeHandlerWithSettings)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        HSTRING scheme,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* configuration);
    HRESULT (STDMETHODCALLTYPE* RegisterByteStreamHandler)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        HSTRING fileExtension,
        HSTRING mimeType);
    HRESULT (STDMETHODCALLTYPE* RegisterByteStreamHandlerWithSettings)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        HSTRING fileExtension,
        HSTRING mimeType,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* configuration);
    HRESULT (STDMETHODCALLTYPE* RegisterAudioDecoder)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        GUID inputSubtype,
        GUID outputSubtype);
    HRESULT (STDMETHODCALLTYPE* RegisterAudioDecoderWithSettings)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        GUID inputSubtype,
        GUID outputSubtype,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* configuration);
    HRESULT (STDMETHODCALLTYPE* RegisterAudioEncoder)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        GUID inputSubtype,
        GUID outputSubtype);
    HRESULT (STDMETHODCALLTYPE* RegisterAudioEncoderWithSettings)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        GUID inputSubtype,
        GUID outputSubtype,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* configuration);
    HRESULT (STDMETHODCALLTYPE* RegisterVideoDecoder)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        GUID inputSubtype,
        GUID outputSubtype);
    HRESULT (STDMETHODCALLTYPE* RegisterVideoDecoderWithSettings)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        GUID inputSubtype,
        GUID outputSubtype,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* configuration);
    HRESULT (STDMETHODCALLTYPE* RegisterVideoEncoder)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        GUID inputSubtype,
        GUID outputSubtype);
    HRESULT (STDMETHODCALLTYPE* RegisterVideoEncoderWithSettings)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager* This,
        HSTRING activatableClassId,
        GUID inputSubtype,
        GUID outputSubtype,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet* configuration);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaExtensionManagerVtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaExtensionManager
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaExtensionManagerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaExtensionManager;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaExtensionManager_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaExtensionManager2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaExtensionManager2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaExtensionManager2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* RegisterMediaExtensionForAppService)(__x_ABI_CWindows_CMedia_CIMediaExtensionManager2* This,
        __x_ABI_CWindows_CMedia_CIMediaExtension* extension,
        __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection* connection);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaExtensionManager2Vtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaExtensionManager2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaExtensionManager2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaExtensionManager2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaExtensionManager2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaFrame_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaFrame_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaFrameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaFrame* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaFrame* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsReadOnly)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_RelativeTime)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_RelativeTime)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_SystemRelativeTime)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_SystemRelativeTime)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_IsDiscontinuous)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsDiscontinuous)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedProperties)(__x_ABI_CWindows_CMedia_CIMediaFrame* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaFrameVtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaFrame
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaFrameVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaFrame;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaFrame_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaMarker_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaMarker_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaMarkerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaMarker* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaMarker* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaMarker* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaMarker* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaMarker* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaMarker* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Time)(__x_ABI_CWindows_CMedia_CIMediaMarker* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_MediaMarkerType)(__x_ABI_CWindows_CMedia_CIMediaMarker* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CMedia_CIMediaMarker* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaMarkerVtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaMarker
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaMarkerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaMarker;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaMarker_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaMarkerTypesStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Bookmark)(__x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaMarkerTypesStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaMarkerTypesStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaMarkerTypesStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaMarkers_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaMarkers_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaMarkersVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaMarkers* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaMarkers* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaMarkers* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaMarkers* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaMarkers* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaMarkers* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Markers)(__x_ABI_CWindows_CMedia_CIMediaMarkers* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CIMediaMarker** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaMarkersVtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaMarkers
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaMarkersVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaMarkers;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaMarkers_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetailsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Arguments)(__x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetailsVtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetailsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaProcessingTriggerDetails_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaTimelineController_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaTimelineController_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaTimelineControllerVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This);
    HRESULT (STDMETHODCALLTYPE* Resume)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This);
    HRESULT (STDMETHODCALLTYPE* Pause)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Position)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_ClockRate)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_ClockRate)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_State)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
        enum __x_ABI_CWindows_CMedia_CMediaTimelineControllerState* value);
    HRESULT (STDMETHODCALLTYPE* add_PositionChanged)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable* positionChangedEventHandler,
        EventRegistrationToken* eventCookie);
    HRESULT (STDMETHODCALLTYPE* remove_PositionChanged)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
        EventRegistrationToken eventCookie);
    HRESULT (STDMETHODCALLTYPE* add_StateChanged)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable* stateChangedEventHandler,
        EventRegistrationToken* eventCookie);
    HRESULT (STDMETHODCALLTYPE* remove_StateChanged)(__x_ABI_CWindows_CMedia_CIMediaTimelineController* This,
        EventRegistrationToken eventCookie);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaTimelineControllerVtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaTimelineController
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaTimelineControllerVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaTimelineController;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaTimelineController_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaTimelineController2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaTimelineController2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaTimelineController2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_IsLoopingEnabled)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsLoopingEnabled)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* add_Failed)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController___x_ABI_CWindows__CMedia__CMediaTimelineControllerFailedEventArgs* eventHandler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Failed)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Ended)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CMediaTimelineController_IInspectable* eventHandler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Ended)(__x_ABI_CWindows_CMedia_CIMediaTimelineController2* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaTimelineController2Vtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaTimelineController2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaTimelineController2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaTimelineController2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaTimelineController2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMediaTimelineControllerFailedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMusicDisplayProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMusicDisplayPropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Title)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_AlbumArtist)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_AlbumArtist)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Artist)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Artist)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMusicDisplayPropertiesVtbl;

    interface __x_ABI_CWindows_CMedia_CIMusicDisplayProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMusicDisplayPropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMusicDisplayProperties;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMusicDisplayProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMusicDisplayProperties2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMusicDisplayProperties2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AlbumTitle)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_AlbumTitle)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_TrackNumber)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_TrackNumber)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Genres)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties2* This,
        __x_ABI_C__FIVector_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMusicDisplayProperties2Vtbl;

    interface __x_ABI_CWindows_CMedia_CIMusicDisplayProperties2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMusicDisplayProperties2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMusicDisplayProperties2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMusicDisplayProperties2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIMusicDisplayProperties3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIMusicDisplayProperties3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIMusicDisplayProperties3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AlbumTrackCount)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_AlbumTrackCount)(__x_ABI_CWindows_CMedia_CIMusicDisplayProperties3* This,
        UINT32 value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIMusicDisplayProperties3Vtbl;

    interface __x_ABI_CWindows_CMedia_CIMusicDisplayProperties3
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIMusicDisplayProperties3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIMusicDisplayProperties3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIMusicDisplayProperties3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RequestedPlaybackPosition)(__x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIPlaybackPositionChangeRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RequestedPlaybackRate)(__x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs* This,
        DOUBLE* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIPlaybackRateChangeRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_RequestedShuffleEnabled)(__x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIShuffleEnabledChangeRequestedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControls_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControls_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PlaybackStatus)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        enum __x_ABI_CWindows_CMedia_CMediaPlaybackStatus* value);
    HRESULT (STDMETHODCALLTYPE* put_PlaybackStatus)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        enum __x_ABI_CWindows_CMedia_CMediaPlaybackStatus value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayUpdater)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater** value);
    HRESULT (STDMETHODCALLTYPE* get_SoundLevel)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        enum __x_ABI_CWindows_CMedia_CSoundLevel* value);
    HRESULT (STDMETHODCALLTYPE* get_IsEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsPlayEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsPlayEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsStopEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsStopEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsPauseEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsPauseEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsRecordEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsRecordEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsFastForwardEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsFastForwardEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsRewindEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsRewindEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsPreviousEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsPreviousEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsNextEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsNextEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsChannelUpEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsChannelUpEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsChannelDownEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsChannelDownEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* add_ButtonPressed)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsButtonPressedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ButtonPressed)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PropertyChanged)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CSystemMediaTransportControlsPropertyChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PropertyChanged)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsVtbl;

    interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControls
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CISystemMediaTransportControls;
#endif /* !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControls_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControls2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControls2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControls2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_AutoRepeatMode)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        enum __x_ABI_CWindows_CMedia_CMediaPlaybackAutoRepeatMode* value);
    HRESULT (STDMETHODCALLTYPE* put_AutoRepeatMode)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        enum __x_ABI_CWindows_CMedia_CMediaPlaybackAutoRepeatMode value);
    HRESULT (STDMETHODCALLTYPE* get_ShuffleEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ShuffleEnabled)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PlaybackRate)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_PlaybackRate)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* UpdateTimelineProperties)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* timelineProperties);
    HRESULT (STDMETHODCALLTYPE* add_PlaybackPositionChangeRequested)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackPositionChangeRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PlaybackPositionChangeRequested)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PlaybackRateChangeRequested)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CPlaybackRateChangeRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PlaybackRateChangeRequested)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ShuffleEnabledChangeRequested)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CShuffleEnabledChangeRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ShuffleEnabledChangeRequested)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AutoRepeatModeChangeRequested)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CSystemMediaTransportControls___x_ABI_CWindows__CMedia__CAutoRepeatModeChangeRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_AutoRepeatModeChangeRequested)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControls2* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CISystemMediaTransportControls2Vtbl;

    interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControls2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControls2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CISystemMediaTransportControls2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControls2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Button)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs* This,
        enum __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsButton* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsButtonPressedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdaterVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
        enum __x_ABI_CWindows_CMedia_CMediaPlaybackType* value);
    HRESULT (STDMETHODCALLTYPE* put_Type)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
        enum __x_ABI_CWindows_CMedia_CMediaPlaybackType value);
    HRESULT (STDMETHODCALLTYPE* get_AppMediaId)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_AppMediaId)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Thumbnail)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** value);
    HRESULT (STDMETHODCALLTYPE* put_Thumbnail)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* value);
    HRESULT (STDMETHODCALLTYPE* get_MusicProperties)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
        __x_ABI_CWindows_CMedia_CIMusicDisplayProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_VideoProperties)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
        __x_ABI_CWindows_CMedia_CIVideoDisplayProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_ImageProperties)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
        __x_ABI_CWindows_CMedia_CIImageDisplayProperties** value);
    HRESULT (STDMETHODCALLTYPE* CopyFromFileAsync)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This,
        enum __x_ABI_CWindows_CMedia_CMediaPlaybackType type,
        __x_ABI_CWindows_CStorage_CIStorageFile* source,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* ClearAll)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This);
    HRESULT (STDMETHODCALLTYPE* Update)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater* This);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdaterVtbl;

    interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdaterVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater;
#endif /* !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsDisplayUpdater_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Property)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs* This,
        enum __x_ABI_CWindows_CMedia_CSystemMediaTransportControlsProperty* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsPropertyChangedEventArgs_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetForCurrentView)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics* This,
        __x_ABI_CWindows_CMedia_CISystemMediaTransportControls** mediaControl);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelinePropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StartTime)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_StartTime)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_EndTime)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_EndTime)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_MinSeekTime)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_MinSeekTime)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_MaxSeekTime)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_MaxSeekTime)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Position)(__x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelinePropertiesVtbl;

    interface __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelinePropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties;
#endif /* !defined(____x_ABI_CWindows_CMedia_CISystemMediaTransportControlsTimelineProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIVideoDisplayProperties_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIVideoDisplayProperties_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIVideoDisplayPropertiesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Title)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Subtitle)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Subtitle)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIVideoDisplayPropertiesVtbl;

    interface __x_ABI_CWindows_CMedia_CIVideoDisplayProperties
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIVideoDisplayPropertiesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIVideoDisplayProperties;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIVideoDisplayProperties_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIVideoDisplayProperties2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIVideoDisplayProperties2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIVideoDisplayProperties2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Genres)(__x_ABI_CWindows_CMedia_CIVideoDisplayProperties2* This,
        __x_ABI_C__FIVector_1_HSTRING** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIVideoDisplayProperties2Vtbl;

    interface __x_ABI_CWindows_CMedia_CIVideoDisplayProperties2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIVideoDisplayProperties2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIVideoDisplayProperties2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIVideoDisplayProperties2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIVideoEffectsStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIVideoEffectsStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIVideoEffectsStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIVideoEffectsStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIVideoEffectsStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIVideoEffectsStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIVideoEffectsStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIVideoEffectsStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIVideoEffectsStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_VideoStabilization)(__x_ABI_CWindows_CMedia_CIVideoEffectsStatics* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIVideoEffectsStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CIVideoEffectsStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIVideoEffectsStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIVideoEffectsStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIVideoEffectsStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIVideoFrame_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIVideoFrame_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIVideoFrameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIVideoFrame* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIVideoFrame* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIVideoFrame* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIVideoFrame* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIVideoFrame* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIVideoFrame* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SoftwareBitmap)(__x_ABI_CWindows_CMedia_CIVideoFrame* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);
    HRESULT (STDMETHODCALLTYPE* CopyToAsync)(__x_ABI_CWindows_CMedia_CIVideoFrame* This,
        __x_ABI_CWindows_CMedia_CIVideoFrame* frame,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** value);
    HRESULT (STDMETHODCALLTYPE* get_Direct3DSurface)(__x_ABI_CWindows_CMedia_CIVideoFrame* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIVideoFrameVtbl;

    interface __x_ABI_CWindows_CMedia_CIVideoFrame
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIVideoFrameVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIVideoFrame;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIVideoFrame_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIVideoFrame2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIVideoFrame2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIVideoFrame2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIVideoFrame2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIVideoFrame2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIVideoFrame2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIVideoFrame2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIVideoFrame2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIVideoFrame2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CopyToWithBoundsAsync)(__x_ABI_CWindows_CMedia_CIVideoFrame2* This,
        __x_ABI_CWindows_CMedia_CIVideoFrame* frame,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds* sourceBounds,
        __x_ABI_C__FIReference_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapBounds* destinationBounds,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIVideoFrame2Vtbl;

    interface __x_ABI_CWindows_CMedia_CIVideoFrame2
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIVideoFrame2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIVideoFrame2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIVideoFrame2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIVideoFrameFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIVideoFrameFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIVideoFrameFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIVideoFrameFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIVideoFrameFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIVideoFrameFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIVideoFrameFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIVideoFrameFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIVideoFrameFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CIVideoFrameFactory* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat format,
        INT32 width,
        INT32 height,
        __x_ABI_CWindows_CMedia_CIVideoFrame** value);
    HRESULT (STDMETHODCALLTYPE* CreateWithAlpha)(__x_ABI_CWindows_CMedia_CIVideoFrameFactory* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat format,
        INT32 width,
        INT32 height,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode alpha,
        __x_ABI_CWindows_CMedia_CIVideoFrame** value);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIVideoFrameFactoryVtbl;

    interface __x_ABI_CWindows_CMedia_CIVideoFrameFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIVideoFrameFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIVideoFrameFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIVideoFrameFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CMedia_CIVideoFrameStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CMedia_CIVideoFrameStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CMedia_CIVideoFrameStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CIVideoFrameStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CIVideoFrameStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CIVideoFrameStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CIVideoFrameStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CIVideoFrameStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CIVideoFrameStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateAsDirect3D11SurfaceBacked)(__x_ABI_CWindows_CMedia_CIVideoFrameStatics* This,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        INT32 width,
        INT32 height,
        __x_ABI_CWindows_CMedia_CIVideoFrame** result);
    HRESULT (STDMETHODCALLTYPE* CreateAsDirect3D11SurfaceBackedWithDevice)(__x_ABI_CWindows_CMedia_CIVideoFrameStatics* This,
        enum __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        INT32 width,
        INT32 height,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice* device,
        __x_ABI_CWindows_CMedia_CIVideoFrame** result);
    HRESULT (STDMETHODCALLTYPE* CreateWithSoftwareBitmap)(__x_ABI_CWindows_CMedia_CIVideoFrameStatics* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* bitmap,
        __x_ABI_CWindows_CMedia_CIVideoFrame** result);
    HRESULT (STDMETHODCALLTYPE* CreateWithDirect3D11Surface)(__x_ABI_CWindows_CMedia_CIVideoFrameStatics* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        __x_ABI_CWindows_CMedia_CIVideoFrame** result);

        END_INTERFACE
    } __x_ABI_CWindows_CMedia_CIVideoFrameStaticsVtbl;

    interface __x_ABI_CWindows_CMedia_CIVideoFrameStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CMedia_CIVideoFrameStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CIVideoFrameStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CIVideoFrameStatics_INTERFACE_DEFINED__) */
    

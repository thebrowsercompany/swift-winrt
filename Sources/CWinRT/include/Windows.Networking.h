// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Networking.Connectivity.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CNetworking_CIEndpointPair_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CIEndpointPair_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CIEndpointPair __x_ABI_CWindows_CNetworking_CIEndpointPair;

#endif // ____x_ABI_CWindows_CNetworking_CIEndpointPair_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CIEndpointPairFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CIEndpointPairFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CIEndpointPairFactory __x_ABI_CWindows_CNetworking_CIEndpointPairFactory;

#endif // ____x_ABI_CWindows_CNetworking_CIEndpointPairFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CIHostName __x_ABI_CWindows_CNetworking_CIHostName;

#endif // ____x_ABI_CWindows_CNetworking_CIHostName_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CIHostNameFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CIHostNameFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CIHostNameFactory __x_ABI_CWindows_CNetworking_CIHostNameFactory;

#endif // ____x_ABI_CWindows_CNetworking_CIHostNameFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CIHostNameStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CIHostNameStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CIHostNameStatics __x_ABI_CWindows_CNetworking_CIHostNameStatics;

#endif // ____x_ABI_CWindows_CNetworking_CIHostNameStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#ifndef ____x_ABI_CWindows_CFoundation_CIStringable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIStringable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIStringable __x_ABI_CWindows_CFoundation_CIStringable;

#endif // ____x_ABI_CWindows_CFoundation_CIStringable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation;

#endif // ____x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CNetworking_CHostNameType __x_ABI_CWindows_CNetworking_CHostNameType;

enum __x_ABI_CWindows_CNetworking_CDomainNameType
    {
        __x_ABI_CWindows_CNetworking_CDomainNameType_Suffix = 0,
    __x_ABI_CWindows_CNetworking_CDomainNameType_FullyQualified = 1,
};

enum __x_ABI_CWindows_CNetworking_CHostNameSortOptions
    {
        __x_ABI_CWindows_CNetworking_CHostNameSortOptions_None = 0,
    __x_ABI_CWindows_CNetworking_CHostNameSortOptions_OptimizeForLongConnections = 0x2,
};

enum __x_ABI_CWindows_CNetworking_CHostNameType
    {
        __x_ABI_CWindows_CNetworking_CHostNameType_DomainName = 0,
    __x_ABI_CWindows_CNetworking_CHostNameType_Ipv4 = 1,
    __x_ABI_CWindows_CNetworking_CHostNameType_Ipv6 = 2,
    __x_ABI_CWindows_CNetworking_CHostNameType_Bluetooth = 3,
};

#if !defined(____x_ABI_CWindows_CNetworking_CIEndpointPair_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CIEndpointPair_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CIEndpointPairVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_LocalHostName)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CIHostName** value);
    HRESULT (STDMETHODCALLTYPE* put_LocalHostName)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CIHostName* value);
    HRESULT (STDMETHODCALLTYPE* get_LocalServiceName)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_LocalServiceName)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_RemoteHostName)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CIHostName** value);
    HRESULT (STDMETHODCALLTYPE* put_RemoteHostName)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
        __x_ABI_CWindows_CNetworking_CIHostName* value);
    HRESULT (STDMETHODCALLTYPE* get_RemoteServiceName)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_RemoteServiceName)(__x_ABI_CWindows_CNetworking_CIEndpointPair* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CIEndpointPairVtbl;

    interface __x_ABI_CWindows_CNetworking_CIEndpointPair
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CIEndpointPairVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CIEndpointPair;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CIEndpointPair_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CIEndpointPairFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CIEndpointPairFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CIEndpointPairFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CIEndpointPairFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CIEndpointPairFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CIEndpointPairFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CIEndpointPairFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CIEndpointPairFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CIEndpointPairFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateEndpointPair)(__x_ABI_CWindows_CNetworking_CIEndpointPairFactory* This,
        __x_ABI_CWindows_CNetworking_CIHostName* localHostName,
        HSTRING localServiceName,
        __x_ABI_CWindows_CNetworking_CIHostName* remoteHostName,
        HSTRING remoteServiceName,
        __x_ABI_CWindows_CNetworking_CIEndpointPair** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CIEndpointPairFactoryVtbl;

    interface __x_ABI_CWindows_CNetworking_CIEndpointPairFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CIEndpointPairFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CIEndpointPairFactory;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CIEndpointPairFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CIHostName_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CIHostName_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CIHostNameVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CIHostName* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CIHostName* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CIHostName* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CIHostName* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CIHostName* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CIHostName* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IPInformation)(__x_ABI_CWindows_CNetworking_CIHostName* This,
        __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation** value);
    HRESULT (STDMETHODCALLTYPE* get_RawName)(__x_ABI_CWindows_CNetworking_CIHostName* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CNetworking_CIHostName* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CanonicalName)(__x_ABI_CWindows_CNetworking_CIHostName* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_CWindows_CNetworking_CIHostName* This,
        enum __x_ABI_CWindows_CNetworking_CHostNameType* value);
    HRESULT (STDMETHODCALLTYPE* IsEqual)(__x_ABI_CWindows_CNetworking_CIHostName* This,
        __x_ABI_CWindows_CNetworking_CIHostName* hostName,
        boolean* isEqual);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CIHostNameVtbl;

    interface __x_ABI_CWindows_CNetworking_CIHostName
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CIHostNameVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CIHostName;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CIHostName_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CIHostNameFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CIHostNameFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CIHostNameFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CIHostNameFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CIHostNameFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CIHostNameFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CIHostNameFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CIHostNameFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CIHostNameFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateHostName)(__x_ABI_CWindows_CNetworking_CIHostNameFactory* This,
        HSTRING hostName,
        __x_ABI_CWindows_CNetworking_CIHostName** value);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CIHostNameFactoryVtbl;

    interface __x_ABI_CWindows_CNetworking_CIHostNameFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CIHostNameFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CIHostNameFactory;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CIHostNameFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CNetworking_CIHostNameStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CNetworking_CIHostNameStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CNetworking_CIHostNameStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CNetworking_CIHostNameStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CNetworking_CIHostNameStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CNetworking_CIHostNameStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CNetworking_CIHostNameStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CNetworking_CIHostNameStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CNetworking_CIHostNameStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Compare)(__x_ABI_CWindows_CNetworking_CIHostNameStatics* This,
        HSTRING value1,
        HSTRING value2,
        INT32* result);

        END_INTERFACE
    } __x_ABI_CWindows_CNetworking_CIHostNameStaticsVtbl;

    interface __x_ABI_CWindows_CNetworking_CIHostNameStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CNetworking_CIHostNameStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CNetworking_CIHostNameStatics;
#endif /* !defined(____x_ABI_CWindows_CNetworking_CIHostNameStatics_INTERFACE_DEFINED__) */
    

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider;

#endif // ____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider;

#endif // ____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
        __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProviderVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProviderVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
        __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProviderVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProviderVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PinCount)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ActualFrequency)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* SetDesiredFrequency)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
        DOUBLE frequency,
        DOUBLE* result);
    HRESULT (STDMETHODCALLTYPE* get_MaxFrequency)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_MinFrequency)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* AcquirePin)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
        INT32 pin);
    HRESULT (STDMETHODCALLTYPE* ReleasePin)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
        INT32 pin);
    HRESULT (STDMETHODCALLTYPE* EnablePin)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
        INT32 pin);
    HRESULT (STDMETHODCALLTYPE* DisablePin)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
        INT32 pin);
    HRESULT (STDMETHODCALLTYPE* SetPulseParameters)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider* This,
        INT32 pin,
        DOUBLE dutyCycle,
        boolean invertPolarity);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmControllerProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetControllers)(__x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPwm__CProvider__CIPwmControllerProvider** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPwm_CProvider_CIPwmProvider_INTERFACE_DEFINED__) */
    

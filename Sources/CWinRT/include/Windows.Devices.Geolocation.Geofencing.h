// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Devices.Geolocation.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReportVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReportVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReportVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReportVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReportVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReportVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable;

    typedef struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* sender,
        IInspectable* args);

        END_INTERFACE
    } __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectableVtbl;

    interface __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceMonitorStatus __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceMonitorStatus;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceRemovalReason __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceRemovalReason;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceState __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceState;

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates;

enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceMonitorStatus
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceMonitorStatus_Ready = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceMonitorStatus_Initializing = 1,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceMonitorStatus_NoData = 2,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceMonitorStatus_Disabled = 3,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceMonitorStatus_NotInitialized = 4,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceMonitorStatus_NotAvailable = 5,
};

enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceRemovalReason
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceRemovalReason_Used = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceRemovalReason_Expired = 1,
};

enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceState
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceState_None = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceState_Entered = 0x1,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceState_Exited = 0x2,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceState_Removed = 0x4,
};

enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates
    {
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates_None = 0,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates_Entered = 0x1,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates_Exited = 0x2,
    __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates_Removed = 0x4,
};

#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_StartTime)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_DwellTime)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MonitoredStates)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates* value);
    HRESULT (STDMETHODCALLTYPE* get_Geoshape)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape** value);
    HRESULT (STDMETHODCALLTYPE* get_SingleUse)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory* This,
        HSTRING id,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* geoshape,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** geofence);
    HRESULT (STDMETHODCALLTYPE* CreateWithMonitorStates)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory* This,
        HSTRING id,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* geoshape,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates monitoredStates,
        boolean singleUse,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** geofence);
    HRESULT (STDMETHODCALLTYPE* CreateWithMonitorStatesAndDwellTime)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory* This,
        HSTRING id,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* geoshape,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates monitoredStates,
        boolean singleUse,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan dwellTime,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** geofence);
    HRESULT (STDMETHODCALLTYPE* CreateWithMonitorStatesDwellTimeStartTimeAndDuration)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory* This,
        HSTRING id,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape* geoshape,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CMonitoredGeofenceStates monitoredStates,
        boolean singleUse,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan dwellTime,
        struct __x_ABI_CWindows_CFoundation_CDateTime startTime,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan duration,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** geofence);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceMonitorStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_Geofences)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofence** value);
    HRESULT (STDMETHODCALLTYPE* get_LastKnownGeoposition)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition** value);
    HRESULT (STDMETHODCALLTYPE* add_GeofenceStateChanged)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable* eventHandler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_GeofenceStateChanged)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* ReadReports)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceStateChangeReport** value);
    HRESULT (STDMETHODCALLTYPE* add_StatusChanged)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
        __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CGeolocation__CGeofencing__CGeofenceMonitor_IInspectable* eventHandler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_StatusChanged)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor* This,
        EventRegistrationToken token);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitor** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceMonitorStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReportVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_NewState)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceState* value);
    HRESULT (STDMETHODCALLTYPE* get_Geofence)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofence** value);
    HRESULT (STDMETHODCALLTYPE* get_Geoposition)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoposition** value);
    HRESULT (STDMETHODCALLTYPE* get_RemovalReason)(__x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport* This,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CGeofenceRemovalReason* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReportVtbl;

    interface __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReportVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport;
#endif /* !defined(____x_ABI_CWindows_CDevices_CGeolocation_CGeofencing_CIGeofenceStateChangeReport_INTERFACE_DEFINED__) */
    

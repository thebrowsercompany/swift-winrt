// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowpresenterkind)
public typealias AppWindowPresenterKind = __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareafallback)
public typealias DisplayAreaFallback = __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaFallback
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcherstatus)
public typealias DisplayAreaWatcherStatus = __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.iconshowoptions)
public typealias IconShowOptions = __x_ABI_CMicrosoft_CUI_CWindowing_CIconShowOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenterstate)
public typealias OverlappedPresenterState = __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.titlebarheightoption)
public typealias TitleBarHeightOption = __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarHeightOption
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow)
public final class AppWindow : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow>?) -> AppWindow? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAppWindowStatics: __ABI_Microsoft_UI_Windowing.IAppWindowStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Windowing.AppWindow"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.create)
    public static func create() -> AppWindow! {
        return try! _IAppWindowStatics.CreateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.create)
    public static func create(_ appWindowPresenter: AppWindowPresenter!) -> AppWindow! {
        return try! _IAppWindowStatics.CreateWithPresenterImpl(appWindowPresenter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.create)
    public static func create(_ appWindowPresenter: AppWindowPresenter!, _ ownerWindowId: WinAppSDK.WindowId) -> AppWindow! {
        return try! _IAppWindowStatics.CreateWithPresenterAndOwnerImpl(appWindowPresenter, ownerWindowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.getfromwindowid)
    public static func getFromWindowId(_ windowId: WinAppSDK.WindowId) -> AppWindow! {
        return try! _IAppWindowStatics.GetFromWindowIdImpl(windowId)
    }

    private static let _IAppWindowStatics2: __ABI_Microsoft_UI_Windowing.IAppWindowStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Windowing.AppWindow"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.create)
    public static func create(_ appWindowPresenter: AppWindowPresenter!, _ ownerWindowId: WinAppSDK.WindowId, _ DispatcherQueue: WinAppSDK.DispatcherQueue!) -> AppWindow! {
        return try! _IAppWindowStatics2.CreateWithDispatcherQueueImpl(appWindowPresenter, ownerWindowId, DispatcherQueue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.destroy)
    public func destroy() throws {
        try _default.DestroyImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.hide)
    public func hide() throws {
        try _default.HideImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.move)
    public func move(_ position: UWP.PointInt32) throws {
        try _default.MoveImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.moveandresize)
    public func moveAndResize(_ rect: UWP.RectInt32) throws {
        try _default.MoveAndResizeImpl(rect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.moveandresize)
    public func moveAndResize(_ rect: UWP.RectInt32, _ displayarea: DisplayArea!) throws {
        try _default.MoveAndResizeRelativeToDisplayAreaImpl(rect, displayarea)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.resize)
    public func resize(_ size: UWP.SizeInt32) throws {
        try _default.ResizeImpl(size)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.seticon)
    public func setIcon(_ iconPath: String) throws {
        try _default.SetIconImpl(iconPath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.seticon)
    public func setIcon(_ iconId: WinAppSDK.IconId) throws {
        try _default.SetIconWithIconIdImpl(iconId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.setpresenter)
    public func setPresenter(_ appWindowPresenter: AppWindowPresenter!) throws {
        try _default.SetPresenterImpl(appWindowPresenter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.setpresenter)
    public func setPresenter(_ appWindowPresenterKind: AppWindowPresenterKind) throws {
        try _default.SetPresenterByKindImpl(appWindowPresenterKind)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.show)
    public func show() throws {
        try _default.ShowImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.show)
    public func show(_ activateWindow: Bool) throws {
        try _default.ShowWithActivationImpl(activateWindow)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.id)
    public var id : WinAppSDK.WindowId {
        get { try! _default.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.isshowninswitchers)
    public var isShownInSwitchers : Bool {
        get { try! _default.get_IsShownInSwitchersImpl() }
        set { try! _default.put_IsShownInSwitchersImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.isvisible)
    public var isVisible : Bool {
        get { try! _default.get_IsVisibleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.ownerwindowid)
    public var ownerWindowId : WinAppSDK.WindowId {
        get { try! _default.get_OwnerWindowIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.position)
    public var position : UWP.PointInt32 {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.presenter)
    public var presenter : AppWindowPresenter! {
        get { try! _default.get_PresenterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.size)
    public var size : UWP.SizeInt32 {
        get { try! _default.get_SizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.titlebar)
    public var titleBar : AppWindowTitleBar! {
        get { try! _default.get_TitleBarImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.changed)
    public lazy var changed : Event<TypedEventHandler<AppWindow?, AppWindowChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.closing)
    public lazy var closing : Event<TypedEventHandler<AppWindow?, AppWindowClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.destroying)
    public lazy var destroying : Event<TypedEventHandler<AppWindow?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DestroyingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DestroyingImpl($0)
       }
      )
    }()

    private lazy var _IAppWindow2: __ABI_Microsoft_UI_Windowing.IAppWindow2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.moveinzorderatbottom)
    public func moveInZOrderAtBottom() throws {
        try _IAppWindow2.MoveInZOrderAtBottomImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.moveinzorderattop)
    public func moveInZOrderAtTop() throws {
        try _IAppWindow2.MoveInZOrderAtTopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.moveinzorderbelow)
    public func moveInZOrderBelow(_ windowId: WinAppSDK.WindowId) throws {
        try _IAppWindow2.MoveInZOrderBelowImpl(windowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.resizeclient)
    public func resizeClient(_ size: UWP.SizeInt32) throws {
        try _IAppWindow2.ResizeClientImpl(size)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.showoncewithrequestedstartupstate)
    public func showOnceWithRequestedStartupState() throws {
        try _IAppWindow2.ShowOnceWithRequestedStartupStateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.clientsize)
    public var clientSize : UWP.SizeInt32 {
        get { try! _IAppWindow2.get_ClientSizeImpl() }
    }

    private lazy var _IAppWindow3: __ABI_Microsoft_UI_Windowing.IAppWindow3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.associatewithdispatcherqueue)
    public func associateWithDispatcherQueue(_ dispatcherQueue: WinAppSDK.DispatcherQueue!) throws {
        try _IAppWindow3.AssociateWithDispatcherQueueImpl(dispatcherQueue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _IAppWindow3.get_DispatcherQueueImpl() }
    }

    deinit {
        _default = nil
        _IAppWindow2 = nil
        _IAppWindow3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs)
public final class AppWindowChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindowChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs>?) -> AppWindowChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.didpositionchange)
    public var didPositionChange : Bool {
        get { try! _default.get_DidPositionChangeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.didpresenterchange)
    public var didPresenterChange : Bool {
        get { try! _default.get_DidPresenterChangeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.didsizechange)
    public var didSizeChange : Bool {
        get { try! _default.get_DidSizeChangeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.didvisibilitychange)
    public var didVisibilityChange : Bool {
        get { try! _default.get_DidVisibilityChangeImpl() }
    }

    private lazy var _IAppWindowChangedEventArgs2: __ABI_Microsoft_UI_Windowing.IAppWindowChangedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.didzorderchange)
    public var didZOrderChange : Bool {
        get { try! _IAppWindowChangedEventArgs2.get_DidZOrderChangeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.iszorderatbottom)
    public var isZOrderAtBottom : Bool {
        get { try! _IAppWindowChangedEventArgs2.get_IsZOrderAtBottomImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.iszorderattop)
    public var isZOrderAtTop : Bool {
        get { try! _IAppWindowChangedEventArgs2.get_IsZOrderAtTopImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.zorderbelowwindowid)
    public var zorderBelowWindowId : WinAppSDK.WindowId {
        get { try! _IAppWindowChangedEventArgs2.get_ZOrderBelowWindowIdImpl() }
    }

    deinit {
        _default = nil
        _IAppWindowChangedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowclosingeventargs)
public final class AppWindowClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindowClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs>?) -> AppWindowClosingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowpresenter)
open class AppWindowPresenter : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindowPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenter>?) -> AppWindowPresenter? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAppWindowPresenterFactory : __ABI_Microsoft_UI_Windowing.IAppWindowPresenterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Windowing.AppWindowPresenter"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowpresenter.kind)
    public var kind : AppWindowPresenterKind {
        get { try! _default.get_KindImpl() }
    }

    internal enum IAppWindowPresenter : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = AppWindowPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindowPresenter
        }
    }
    internal typealias Composable = IAppWindowPresenter
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar)
public final class AppWindowTitleBar : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindowTitleBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar>?) -> AppWindowTitleBar? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAppWindowTitleBarStatics: __ABI_Microsoft_UI_Windowing.IAppWindowTitleBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Windowing.AppWindowTitleBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.iscustomizationsupported)
    public static func isCustomizationSupported() -> Bool {
        return try! _IAppWindowTitleBarStatics.IsCustomizationSupportedImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.resettodefault)
    public func resetToDefault() throws {
        try _default.ResetToDefaultImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.backgroundcolor)
    public var backgroundColor : UWP.Color? {
        get { try! _default.get_BackgroundColorImpl() }
        set { try! _default.put_BackgroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonbackgroundcolor)
    public var buttonBackgroundColor : UWP.Color? {
        get { try! _default.get_ButtonBackgroundColorImpl() }
        set { try! _default.put_ButtonBackgroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonforegroundcolor)
    public var buttonForegroundColor : UWP.Color? {
        get { try! _default.get_ButtonForegroundColorImpl() }
        set { try! _default.put_ButtonForegroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonhoverbackgroundcolor)
    public var buttonHoverBackgroundColor : UWP.Color? {
        get { try! _default.get_ButtonHoverBackgroundColorImpl() }
        set { try! _default.put_ButtonHoverBackgroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonhoverforegroundcolor)
    public var buttonHoverForegroundColor : UWP.Color? {
        get { try! _default.get_ButtonHoverForegroundColorImpl() }
        set { try! _default.put_ButtonHoverForegroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttoninactivebackgroundcolor)
    public var buttonInactiveBackgroundColor : UWP.Color? {
        get { try! _default.get_ButtonInactiveBackgroundColorImpl() }
        set { try! _default.put_ButtonInactiveBackgroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttoninactiveforegroundcolor)
    public var buttonInactiveForegroundColor : UWP.Color? {
        get { try! _default.get_ButtonInactiveForegroundColorImpl() }
        set { try! _default.put_ButtonInactiveForegroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonpressedbackgroundcolor)
    public var buttonPressedBackgroundColor : UWP.Color? {
        get { try! _default.get_ButtonPressedBackgroundColorImpl() }
        set { try! _default.put_ButtonPressedBackgroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonpressedforegroundcolor)
    public var buttonPressedForegroundColor : UWP.Color? {
        get { try! _default.get_ButtonPressedForegroundColorImpl() }
        set { try! _default.put_ButtonPressedForegroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.extendscontentintotitlebar)
    public var extendsContentIntoTitleBar : Bool {
        get { try! _default.get_ExtendsContentIntoTitleBarImpl() }
        set { try! _default.put_ExtendsContentIntoTitleBarImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.foregroundcolor)
    public var foregroundColor : UWP.Color? {
        get { try! _default.get_ForegroundColorImpl() }
        set { try! _default.put_ForegroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.height)
    public var height : Int32 {
        get { try! _default.get_HeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.iconshowoptions)
    public var iconShowOptions : IconShowOptions {
        get { try! _default.get_IconShowOptionsImpl() }
        set { try! _default.put_IconShowOptionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.inactivebackgroundcolor)
    public var inactiveBackgroundColor : UWP.Color? {
        get { try! _default.get_InactiveBackgroundColorImpl() }
        set { try! _default.put_InactiveBackgroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.inactiveforegroundcolor)
    public var inactiveForegroundColor : UWP.Color? {
        get { try! _default.get_InactiveForegroundColorImpl() }
        set { try! _default.put_InactiveForegroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.leftinset)
    public var leftInset : Int32 {
        get { try! _default.get_LeftInsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.rightinset)
    public var rightInset : Int32 {
        get { try! _default.get_RightInsetImpl() }
    }

    private lazy var _IAppWindowTitleBar2: __ABI_Microsoft_UI_Windowing.IAppWindowTitleBar2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.preferredheightoption)
    public var preferredHeightOption : TitleBarHeightOption {
        get { try! _IAppWindowTitleBar2.get_PreferredHeightOptionImpl() }
        set { try! _IAppWindowTitleBar2.put_PreferredHeightOptionImpl(newValue) }
    }

    deinit {
        _default = nil
        _IAppWindowTitleBar2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea)
public final class DisplayArea : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IDisplayArea
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea>?) -> DisplayArea? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IDisplayAreaStatics: __ABI_Microsoft_UI_Windowing.IDisplayAreaStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Windowing.DisplayArea"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.createwatcher)
    public static func createWatcher() -> DisplayAreaWatcher! {
        return try! _IDisplayAreaStatics.CreateWatcherImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.findall)
    public static func findAll() -> WindowsFoundation.AnyIVectorView<DisplayArea?>! {
        return try! _IDisplayAreaStatics.FindAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.getfromwindowid)
    public static func getFromWindowId(_ windowId: WinAppSDK.WindowId, _ displayAreaFallback: DisplayAreaFallback) -> DisplayArea! {
        return try! _IDisplayAreaStatics.GetFromWindowIdImpl(windowId, displayAreaFallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.getfrompoint)
    public static func getFromPoint(_ point: UWP.PointInt32, _ displayAreaFallback: DisplayAreaFallback) -> DisplayArea! {
        return try! _IDisplayAreaStatics.GetFromPointImpl(point, displayAreaFallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.getfromrect)
    public static func getFromRect(_ rect: UWP.RectInt32, _ displayAreaFallback: DisplayAreaFallback) -> DisplayArea! {
        return try! _IDisplayAreaStatics.GetFromRectImpl(rect, displayAreaFallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.primary)
    public static var primary : DisplayArea! {
        get { try! _IDisplayAreaStatics.get_PrimaryImpl() }
    }

    private static let _IDisplayAreaStatics2: __ABI_Microsoft_UI_Windowing.IDisplayAreaStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Windowing.DisplayArea"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.getfromdisplayid)
    public static func getFromDisplayId(_ displayId: WinAppSDK.DisplayId) -> DisplayArea! {
        return try! _IDisplayAreaStatics2.GetFromDisplayIdImpl(displayId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.displayid)
    public var displayId : WinAppSDK.DisplayId {
        get { try! _default.get_DisplayIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.isprimary)
    public var isPrimary : Bool {
        get { try! _default.get_IsPrimaryImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.outerbounds)
    public var outerBounds : UWP.RectInt32 {
        get { try! _default.get_OuterBoundsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.workarea)
    public var workArea : UWP.RectInt32 {
        get { try! _default.get_WorkAreaImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher)
public final class DisplayAreaWatcher : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IDisplayAreaWatcher
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher>?) -> DisplayAreaWatcher? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.start)
    public func start() throws {
        try _default.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.stop)
    public func stop() throws {
        try _default.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.status)
    public var status : DisplayAreaWatcherStatus {
        get { try! _default.get_StatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.added)
    public lazy var added : Event<TypedEventHandler<DisplayAreaWatcher?, DisplayArea?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AddedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AddedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.enumerationcompleted)
    public lazy var enumerationCompleted : Event<TypedEventHandler<DisplayAreaWatcher?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_EnumerationCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_EnumerationCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.removed)
    public lazy var removed : Event<TypedEventHandler<DisplayAreaWatcher?, DisplayArea?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RemovedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RemovedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.stopped)
    public lazy var stopped : Event<TypedEventHandler<DisplayAreaWatcher?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_StoppedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_StoppedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.updated)
    public lazy var updated : Event<TypedEventHandler<DisplayAreaWatcher?, DisplayArea?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_UpdatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_UpdatedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.fullscreenpresenter)
public final class FullScreenPresenter : WinAppSDK.AppWindowPresenter {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IFullScreenPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenter>?) -> FullScreenPresenter? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IFullScreenPresenterStatics: __ABI_Microsoft_UI_Windowing.IFullScreenPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Windowing.FullScreenPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.fullscreenpresenter.create)
    public static func create() -> FullScreenPresenter! {
        return try! _IFullScreenPresenterStatics.CreateImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter)
public final class OverlappedPresenter : WinAppSDK.AppWindowPresenter {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IOverlappedPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter>?) -> OverlappedPresenter? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IOverlappedPresenterStatics: __ABI_Microsoft_UI_Windowing.IOverlappedPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Windowing.OverlappedPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.create)
    public static func create() -> OverlappedPresenter! {
        return try! _IOverlappedPresenterStatics.CreateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.createforcontextmenu)
    public static func createForContextMenu() -> OverlappedPresenter! {
        return try! _IOverlappedPresenterStatics.CreateForContextMenuImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.createfordialog)
    public static func createForDialog() -> OverlappedPresenter! {
        return try! _IOverlappedPresenterStatics.CreateForDialogImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.createfortoolwindow)
    public static func createForToolWindow() -> OverlappedPresenter! {
        return try! _IOverlappedPresenterStatics.CreateForToolWindowImpl()
    }

    private static let _IOverlappedPresenterStatics2: __ABI_Microsoft_UI_Windowing.IOverlappedPresenterStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Windowing.OverlappedPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.requestedstartupstate)
    public static var requestedStartupState : OverlappedPresenterState {
        get { try! _IOverlappedPresenterStatics2.get_RequestedStartupStateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.maximize)
    public func maximize() throws {
        try _default.MaximizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.minimize)
    public func minimize() throws {
        try _default.MinimizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.restore)
    public func restore() throws {
        try _default.RestoreImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.setborderandtitlebar)
    public func setBorderAndTitleBar(_ hasBorder: Bool, _ hasTitleBar: Bool) throws {
        try _default.SetBorderAndTitleBarImpl(hasBorder, hasTitleBar)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.hasborder)
    public var hasBorder : Bool {
        get { try! _default.get_HasBorderImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.hastitlebar)
    public var hasTitleBar : Bool {
        get { try! _default.get_HasTitleBarImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.isalwaysontop)
    public var isAlwaysOnTop : Bool {
        get { try! _default.get_IsAlwaysOnTopImpl() }
        set { try! _default.put_IsAlwaysOnTopImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.ismaximizable)
    public var isMaximizable : Bool {
        get { try! _default.get_IsMaximizableImpl() }
        set { try! _default.put_IsMaximizableImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.isminimizable)
    public var isMinimizable : Bool {
        get { try! _default.get_IsMinimizableImpl() }
        set { try! _default.put_IsMinimizableImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.ismodal)
    public var isModal : Bool {
        get { try! _default.get_IsModalImpl() }
        set { try! _default.put_IsModalImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.isresizable)
    public var isResizable : Bool {
        get { try! _default.get_IsResizableImpl() }
        set { try! _default.put_IsResizableImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.state)
    public var state : OverlappedPresenterState {
        get { try! _default.get_StateImpl() }
    }

    private lazy var _IOverlappedPresenter2: __ABI_Microsoft_UI_Windowing.IOverlappedPresenter2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.minimize)
    public func minimize(_ activateWindow: Bool) throws {
        try _IOverlappedPresenter2.MinimizeWithActivationImpl(activateWindow)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.restore)
    public func restore(_ activateWindow: Bool) throws {
        try _IOverlappedPresenter2.RestoreWithActivationImpl(activateWindow)
    }

    deinit {
        _default = nil
        _IOverlappedPresenter2 = nil
    }
}

extension WinAppSDK.AppWindowPresenterKind {
    public static var `default` : WinAppSDK.AppWindowPresenterKind {
        __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind_Default
    }
    public static var compactOverlay : WinAppSDK.AppWindowPresenterKind {
        __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind_CompactOverlay
    }
    public static var fullScreen : WinAppSDK.AppWindowPresenterKind {
        __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind_FullScreen
    }
    public static var overlapped : WinAppSDK.AppWindowPresenterKind {
        __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind_Overlapped
    }
}
extension WinAppSDK.AppWindowPresenterKind: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.DisplayAreaFallback {
    public static var none : WinAppSDK.DisplayAreaFallback {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaFallback_None
    }
    public static var primary : WinAppSDK.DisplayAreaFallback {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaFallback_Primary
    }
    public static var nearest : WinAppSDK.DisplayAreaFallback {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaFallback_Nearest
    }
}
extension WinAppSDK.DisplayAreaFallback: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.DisplayAreaWatcherStatus {
    public static var created : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_Created
    }
    public static var started : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_Started
    }
    public static var enumerationCompleted : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_EnumerationCompleted
    }
    public static var stopping : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_Stopping
    }
    public static var stopped : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_Stopped
    }
    public static var aborted : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_Aborted
    }
}
extension WinAppSDK.DisplayAreaWatcherStatus: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.IconShowOptions {
    public static var showIconAndSystemMenu : WinAppSDK.IconShowOptions {
        __x_ABI_CMicrosoft_CUI_CWindowing_CIconShowOptions_ShowIconAndSystemMenu
    }
    public static var hideIconAndSystemMenu : WinAppSDK.IconShowOptions {
        __x_ABI_CMicrosoft_CUI_CWindowing_CIconShowOptions_HideIconAndSystemMenu
    }
}
extension WinAppSDK.IconShowOptions: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.OverlappedPresenterState {
    public static var maximized : WinAppSDK.OverlappedPresenterState {
        __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState_Maximized
    }
    public static var minimized : WinAppSDK.OverlappedPresenterState {
        __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState_Minimized
    }
    public static var restored : WinAppSDK.OverlappedPresenterState {
        __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState_Restored
    }
}
extension WinAppSDK.OverlappedPresenterState: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.TitleBarHeightOption {
    public static var standard : WinAppSDK.TitleBarHeightOption {
        __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarHeightOption_Standard
    }
    public static var tall : WinAppSDK.TitleBarHeightOption {
        __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarHeightOption_Tall
    }
    public static var collapsed : WinAppSDK.TitleBarHeightOption {
        __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarHeightOption_Collapsed
    }
}
extension WinAppSDK.TitleBarHeightOption: @retroactive Hashable, @retroactive Codable {}


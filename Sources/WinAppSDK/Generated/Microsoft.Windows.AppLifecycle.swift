// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.extendedactivationkind)
public typealias ExtendedActivationKind = __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.activationregistrationmanager)
public final class ActivationRegistrationManager {
    private static let _IActivationRegistrationManagerStatics: __ABI_Microsoft_Windows_AppLifecycle.IActivationRegistrationManagerStatics = try! RoGetActivationFactory(HString("Microsoft.Windows.AppLifecycle.ActivationRegistrationManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.activationregistrationmanager.registerforprotocolactivation)
    public static func registerForProtocolActivation(_ scheme: String, _ logo: String, _ displayName: String, _ exePath: String) {
        try! _IActivationRegistrationManagerStatics.RegisterForProtocolActivationImpl(scheme, logo, displayName, exePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.activationregistrationmanager.registerforstartupactivation)
    public static func registerForStartupActivation(_ taskId: String, _ exePath: String) {
        try! _IActivationRegistrationManagerStatics.RegisterForStartupActivationImpl(taskId, exePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.activationregistrationmanager.unregisterforprotocolactivation)
    public static func unregisterForProtocolActivation(_ scheme: String, _ exePath: String) {
        try! _IActivationRegistrationManagerStatics.UnregisterForProtocolActivationImpl(scheme, exePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.activationregistrationmanager.unregisterforstartupactivation)
    public static func unregisterForStartupActivation(_ taskId: String) {
        try! _IActivationRegistrationManagerStatics.UnregisterForStartupActivationImpl(taskId)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appactivationarguments)
public final class AppActivationArguments : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Windows_AppLifecycle.IAppActivationArguments
    private typealias CABI = __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CIAppActivationArguments
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWindows_CAppLifecycle_CIAppActivationArguments>?) -> AppActivationArguments? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appactivationarguments.data)
    public var data : Any! {
        get { try! _default.get_DataImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appactivationarguments.kind)
    public var kind : ExtendedActivationKind {
        get { try! _default.get_KindImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance)
public final class AppInstance : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Windows_AppLifecycle.IAppInstance
    private typealias CABI = __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CIAppInstance
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWindows_CAppLifecycle_CIAppInstance>?) -> AppInstance? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAppInstanceStatics: __ABI_Microsoft_Windows_AppLifecycle.IAppInstanceStatics = try! RoGetActivationFactory(HString("Microsoft.Windows.AppLifecycle.AppInstance"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.getcurrent)
    public static func getCurrent() -> AppInstance! {
        return try! _IAppInstanceStatics.GetCurrentImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.getinstances)
    public static func getInstances() -> WindowsFoundation.AnyIVector<AppInstance?>! {
        return try! _IAppInstanceStatics.GetInstancesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.findorregisterforkey)
    public static func findOrRegisterForKey(_ key: String) -> AppInstance! {
        return try! _IAppInstanceStatics.FindOrRegisterForKeyImpl(key)
    }

    private static let _IAppInstanceStatics2: __ABI_Microsoft_Windows_AppLifecycle.IAppInstanceStatics2 = try! RoGetActivationFactory(HString("Microsoft.Windows.AppLifecycle.AppInstance"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.restart)
    public static func restart(_ arguments: String) -> UWP.AppRestartFailureReason {
        return try! _IAppInstanceStatics2.RestartImpl(arguments)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.unregisterkey)
    public func unregisterKey() throws {
        try _default.UnregisterKeyImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.redirectactivationtoasync)
    public func redirectActivationToAsync(_ args: AppActivationArguments!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.RedirectActivationToAsyncImpl(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.getactivatedeventargs)
    public func getActivatedEventArgs() throws -> AppActivationArguments! {
        try _default.GetActivatedEventArgsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.iscurrent)
    public var isCurrent : Bool {
        get { try! _default.get_IsCurrentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.key)
    public var key : String {
        get { try! _default.get_KeyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.processid)
    public var processId : UInt32 {
        get { try! _default.get_ProcessIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applifecycle.appinstance.activated)
    public lazy var activated : Event<EventHandler<AppActivationArguments?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ActivatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ActivatedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

extension WinAppSDK.ExtendedActivationKind {
    public static var launch : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_Launch
    }
    public static var search : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_Search
    }
    public static var shareTarget : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_ShareTarget
    }
    public static var file : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_File
    }
    public static var `protocol` : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_Protocol
    }
    public static var fileOpenPicker : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_FileOpenPicker
    }
    public static var fileSavePicker : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_FileSavePicker
    }
    public static var cachedFileUpdater : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_CachedFileUpdater
    }
    public static var contactPicker : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_ContactPicker
    }
    public static var device : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_Device
    }
    public static var printTaskSettings : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_PrintTaskSettings
    }
    public static var cameraSettings : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_CameraSettings
    }
    public static var restrictedLaunch : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_RestrictedLaunch
    }
    public static var appointmentsProvider : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_AppointmentsProvider
    }
    public static var contact : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_Contact
    }
    public static var lockScreenCall : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_LockScreenCall
    }
    public static var voiceCommand : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_VoiceCommand
    }
    public static var lockScreen : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_LockScreen
    }
    public static var pickerReturned : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_PickerReturned
    }
    public static var walletAction : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_WalletAction
    }
    public static var pickFileContinuation : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_PickFileContinuation
    }
    public static var pickSaveFileContinuation : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_PickSaveFileContinuation
    }
    public static var pickFolderContinuation : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_PickFolderContinuation
    }
    public static var webAuthenticationBrokerContinuation : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_WebAuthenticationBrokerContinuation
    }
    public static var webAccountProvider : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_WebAccountProvider
    }
    public static var componentUI : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_ComponentUI
    }
    public static var protocolForResults : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_ProtocolForResults
    }
    public static var toastNotification : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_ToastNotification
    }
    public static var print3DWorkflow : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_Print3DWorkflow
    }
    public static var dialReceiver : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_DialReceiver
    }
    public static var devicePairing : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_DevicePairing
    }
    public static var userDataAccountsProvider : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_UserDataAccountsProvider
    }
    public static var filePickerExperience : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_FilePickerExperience
    }
    public static var lockScreenComponent : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_LockScreenComponent
    }
    public static var contactPanel : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_ContactPanel
    }
    public static var printWorkflowForegroundTask : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_PrintWorkflowForegroundTask
    }
    public static var gameUIProvider : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_GameUIProvider
    }
    public static var startupTask : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_StartupTask
    }
    public static var commandLineLaunch : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_CommandLineLaunch
    }
    public static var barcodeScannerProvider : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_BarcodeScannerProvider
    }
    public static var printSupportJobUI : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_PrintSupportJobUI
    }
    public static var printSupportSettingsUI : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_PrintSupportSettingsUI
    }
    public static var phoneCallActivation : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_PhoneCallActivation
    }
    public static var vpnForeground : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_VpnForeground
    }
    public static var push : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_Push
    }
    public static var appNotification : WinAppSDK.ExtendedActivationKind {
        __x_ABI_CMicrosoft_CWindows_CAppLifecycle_CExtendedActivationKind_AppNotification
    }
}
extension WinAppSDK.ExtendedActivationKind: @retroactive Hashable, @retroactive Codable {}


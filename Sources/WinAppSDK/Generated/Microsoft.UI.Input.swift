// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.crossslidingstate)
public typealias CrossSlidingState = __x_ABI_CMicrosoft_CUI_CInput_CCrossSlidingState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.draggingstate)
public typealias DraggingState = __x_ABI_CMicrosoft_CUI_CInput_CDraggingState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationreason)
public typealias FocusNavigationReason = __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationReason
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationresult)
public typealias FocusNavigationResult = __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationResult
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturesettings)
public typealias GestureSettings = __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.holdingstate)
public typealias HoldingState = __x_ABI_CMicrosoft_CUI_CInput_CHoldingState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputactivationstate)
public typealias InputActivationState = __x_ABI_CMicrosoft_CUI_CInput_CInputActivationState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersourcedevicekinds)
public typealias InputPointerSourceDeviceKinds = __x_ABI_CMicrosoft_CUI_CInput_CInputPointerSourceDeviceKinds
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputsystemcursorshape)
public typealias InputSystemCursorShape = __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.nonclientregionkind)
public typealias NonClientRegionKind = __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerdevicetype)
public typealias PointerDeviceType = __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerupdatekind)
public typealias PointerUpdateKind = __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.virtualkeystates)
public typealias VirtualKeyStates = __x_ABI_CMicrosoft_CUI_CInput_CVirtualKeyStates
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.characterreceivedeventargs)
public final class CharacterReceivedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.ICharacterReceivedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CICharacterReceivedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CICharacterReceivedEventArgs>?) -> CharacterReceivedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.characterreceivedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.characterreceivedeventargs.keycode)
    public var keyCode : UInt32 {
        get { try! _default.get_KeyCodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.characterreceivedeventargs.keystatus)
    public var keyStatus : PhysicalKeyStatus {
        get { try! _default.get_KeyStatusImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.contextmenukeyeventargs)
public final class ContextMenuKeyEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IContextMenuKeyEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIContextMenuKeyEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIContextMenuKeyEventArgs>?) -> ContextMenuKeyEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.contextmenukeyeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.crossslidingeventargs)
public final class CrossSlidingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.ICrossSlidingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CICrossSlidingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CICrossSlidingEventArgs>?) -> CrossSlidingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.crossslidingeventargs.crossslidingstate)
    public var crossSlidingState : CrossSlidingState {
        get { try! _default.get_CrossSlidingStateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.crossslidingeventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.crossslidingeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.draggingeventargs)
public final class DraggingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IDraggingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIDraggingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIDraggingEventArgs>?) -> DraggingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.draggingeventargs.draggingstate)
    public var draggingState : DraggingState {
        get { try! _default.get_DraggingStateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.draggingeventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.draggingeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focuschangedeventargs)
public final class FocusChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IFocusChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIFocusChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIFocusChangedEventArgs>?) -> FocusChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focuschangedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationrequest)
public final class FocusNavigationRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IFocusNavigationRequest
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequest>?) -> FocusNavigationRequest? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IFocusNavigationRequestStatics: __ABI_Microsoft_UI_Input.IFocusNavigationRequestStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.FocusNavigationRequest"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationrequest.create)
    public static func create(_ reason: FocusNavigationReason) -> FocusNavigationRequest! {
        return try! _IFocusNavigationRequestStatics.CreateImpl(reason)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationrequest.create)
    public static func create(_ reason: FocusNavigationReason, _ hintRect: WindowsFoundation.Rect) -> FocusNavigationRequest! {
        return try! _IFocusNavigationRequestStatics.CreateWithHintRectImpl(reason, hintRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationrequest.create)
    public static func create(_ reason: FocusNavigationReason, _ hintRect: WindowsFoundation.Rect, _ correlationId: Foundation.UUID) -> FocusNavigationRequest! {
        return try! _IFocusNavigationRequestStatics.CreateWithHintRectAndIdImpl(reason, hintRect, correlationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationrequest.correlationid)
    public var correlationId : Foundation.UUID {
        get { try! _default.get_CorrelationIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationrequest.hintrect)
    public var hintRect : WindowsFoundation.Rect? {
        get { try! _default.get_HintRectImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationrequest.reason)
    public var reason : FocusNavigationReason {
        get { try! _default.get_ReasonImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationrequesteventargs)
public final class FocusNavigationRequestEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IFocusNavigationRequestEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestEventArgs>?) -> FocusNavigationRequestEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationrequesteventargs.request)
    public var request : FocusNavigationRequest! {
        get { try! _default.get_RequestImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.focusnavigationrequesteventargs.result)
    public var result : FocusNavigationResult {
        get { try! _default.get_ResultImpl() }
        set { try! _default.put_ResultImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer)
public final class GestureRecognizer : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IGestureRecognizer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer>?) -> GestureRecognizer? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Input.GestureRecognizer")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.canbedoubletap)
    public func canBeDoubleTap(_ value: PointerPoint!) throws -> Bool {
        try _default.CanBeDoubleTapImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.completegesture)
    public func completeGesture() throws {
        try _default.CompleteGestureImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.processdownevent)
    public func processDownEvent(_ value: PointerPoint!) throws {
        try _default.ProcessDownEventImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.processmoveevents)
    public func processMoveEvents(_ value: WindowsFoundation.AnyIVector<PointerPoint?>!) throws {
        try _default.ProcessMoveEventsImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.processmousewheelevent)
    public func processMouseWheelEvent(_ value: PointerPoint!, _ isShiftKeyDown: Bool, _ isControlKeyDown: Bool) throws {
        try _default.ProcessMouseWheelEventImpl(value, isShiftKeyDown, isControlKeyDown)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.processinertia)
    public func processInertia() throws {
        try _default.ProcessInertiaImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.processupevent)
    public func processUpEvent(_ value: PointerPoint!) throws {
        try _default.ProcessUpEventImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.autoprocessinertia)
    public var autoProcessInertia : Bool {
        get { try! _default.get_AutoProcessInertiaImpl() }
        set { try! _default.put_AutoProcessInertiaImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.crossslideexact)
    public var crossSlideExact : Bool {
        get { try! _default.get_CrossSlideExactImpl() }
        set { try! _default.put_CrossSlideExactImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.crossslidehorizontally)
    public var crossSlideHorizontally : Bool {
        get { try! _default.get_CrossSlideHorizontallyImpl() }
        set { try! _default.put_CrossSlideHorizontallyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.crossslidethresholds)
    public var crossSlideThresholds : CrossSlideThresholds {
        get { try! _default.get_CrossSlideThresholdsImpl() }
        set { try! _default.put_CrossSlideThresholdsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.gesturesettings)
    public var gestureSettings : GestureSettings {
        get { try! _default.get_GestureSettingsImpl() }
        set { try! _default.put_GestureSettingsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.inertiaexpansion)
    public var inertiaExpansion : Float {
        get { try! _default.get_InertiaExpansionImpl() }
        set { try! _default.put_InertiaExpansionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.inertiaexpansiondeceleration)
    public var inertiaExpansionDeceleration : Float {
        get { try! _default.get_InertiaExpansionDecelerationImpl() }
        set { try! _default.put_InertiaExpansionDecelerationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.inertiarotationangle)
    public var inertiaRotationAngle : Float {
        get { try! _default.get_InertiaRotationAngleImpl() }
        set { try! _default.put_InertiaRotationAngleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.inertiarotationdeceleration)
    public var inertiaRotationDeceleration : Float {
        get { try! _default.get_InertiaRotationDecelerationImpl() }
        set { try! _default.put_InertiaRotationDecelerationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.inertiatranslationdeceleration)
    public var inertiaTranslationDeceleration : Float {
        get { try! _default.get_InertiaTranslationDecelerationImpl() }
        set { try! _default.put_InertiaTranslationDecelerationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.inertiatranslationdisplacement)
    public var inertiaTranslationDisplacement : Float {
        get { try! _default.get_InertiaTranslationDisplacementImpl() }
        set { try! _default.put_InertiaTranslationDisplacementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.isactive)
    public var isActive : Bool {
        get { try! _default.get_IsActiveImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.isinertial)
    public var isInertial : Bool {
        get { try! _default.get_IsInertialImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.manipulationexact)
    public var manipulationExact : Bool {
        get { try! _default.get_ManipulationExactImpl() }
        set { try! _default.put_ManipulationExactImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.mousewheelparameters)
    public var mouseWheelParameters : MouseWheelParameters! {
        get { try! _default.get_MouseWheelParametersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.pivotcenter)
    public var pivotCenter : WindowsFoundation.Point {
        get { try! _default.get_PivotCenterImpl() }
        set { try! _default.put_PivotCenterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.pivotradius)
    public var pivotRadius : Float {
        get { try! _default.get_PivotRadiusImpl() }
        set { try! _default.put_PivotRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.showgesturefeedback)
    public var showGestureFeedback : Bool {
        get { try! _default.get_ShowGestureFeedbackImpl() }
        set { try! _default.put_ShowGestureFeedbackImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.crosssliding)
    public lazy var crossSliding : Event<TypedEventHandler<GestureRecognizer?, CrossSlidingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CrossSlidingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CrossSlidingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.dragging)
    public lazy var dragging : Event<TypedEventHandler<GestureRecognizer?, DraggingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DraggingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DraggingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.holding)
    public lazy var holding : Event<TypedEventHandler<GestureRecognizer?, HoldingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_HoldingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_HoldingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.manipulationcompleted)
    public lazy var manipulationCompleted : Event<TypedEventHandler<GestureRecognizer?, ManipulationCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ManipulationCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ManipulationCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.manipulationinertiastarting)
    public lazy var manipulationInertiaStarting : Event<TypedEventHandler<GestureRecognizer?, ManipulationInertiaStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ManipulationInertiaStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ManipulationInertiaStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.manipulationstarted)
    public lazy var manipulationStarted : Event<TypedEventHandler<GestureRecognizer?, ManipulationStartedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ManipulationStartedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ManipulationStartedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.manipulationupdated)
    public lazy var manipulationUpdated : Event<TypedEventHandler<GestureRecognizer?, ManipulationUpdatedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ManipulationUpdatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ManipulationUpdatedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.righttapped)
    public lazy var rightTapped : Event<TypedEventHandler<GestureRecognizer?, RightTappedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RightTappedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RightTappedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.gesturerecognizer.tapped)
    public lazy var tapped : Event<TypedEventHandler<GestureRecognizer?, TappedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TappedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TappedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.holdingeventargs)
public final class HoldingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IHoldingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIHoldingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIHoldingEventArgs>?) -> HoldingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.holdingeventargs.holdingstate)
    public var holdingState : HoldingState {
        get { try! _default.get_HoldingStateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.holdingeventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.holdingeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputactivationlistener)
public final class InputActivationListener : WinAppSDK.InputObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputActivationListener
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListener
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListener>?) -> InputActivationListener? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IInputActivationListenerStatics: __ABI_Microsoft_UI_Input.IInputActivationListenerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputActivationListener"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputactivationlistener.getforwindowid)
    public static func getForWindowId(_ windowId: WinAppSDK.WindowId) -> InputActivationListener! {
        return try! _IInputActivationListenerStatics.GetForWindowIdImpl(windowId)
    }

    private static let _IInputActivationListenerStatics2: __ABI_Microsoft_UI_Input.IInputActivationListenerStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputActivationListener"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputactivationlistener.getforisland)
    public static func getForIsland(_ island: WinAppSDK.ContentIsland!) -> InputActivationListener! {
        return try! _IInputActivationListenerStatics2.GetForIslandImpl(island)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputactivationlistener.state)
    public var state : InputActivationState {
        get { try! _default.get_StateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputactivationlistener.inputactivationchanged)
    public lazy var inputActivationChanged : Event<TypedEventHandler<InputActivationListener?, InputActivationListenerActivationChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_InputActivationChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_InputActivationChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputactivationlisteneractivationchangedeventargs)
public final class InputActivationListenerActivationChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputActivationListenerActivationChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs>?) -> InputActivationListenerActivationChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputcursor)
open class InputCursor : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputCursor
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputCursor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputCursor>?) -> InputCursor? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInputCursorFactory : __ABI_Microsoft_UI_Input.IInputCursorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputCursor"))

    private static let _IInputCursorStatics: __ABI_Microsoft_UI_Input.IInputCursorStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputCursor"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputcursor.createfromcorecursor)
    public class func createFromCoreCursor(_ cursor: UWP.CoreCursor!) -> InputCursor! {
        return try! _IInputCursorStatics.CreateFromCoreCursorImpl(cursor)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputcursor.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    internal enum IInputCursor : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = InputCursor
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputCursor
            internal typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputCursor
        }
    }
    internal typealias Composable = IInputCursor
    deinit {
        _default = nil
        _IClosable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputcustomcursor)
open class InputCustomCursor : WinAppSDK.InputCursor {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputCustomCursor
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputCustomCursor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputCustomCursor>?) -> InputCustomCursor? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInputCustomCursorFactory : __ABI_Microsoft_UI_Input.IInputCustomCursorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputCustomCursor"))

    internal enum IInputCustomCursor : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = InputCustomCursor
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputCustomCursor
            internal typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputCustomCursor
        }
    }
    internal typealias Composable = IInputCustomCursor
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputdesktopnamedresourcecursor)
public final class InputDesktopNamedResourceCursor : WinAppSDK.InputCursor {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputDesktopNamedResourceCursor
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopNamedResourceCursor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopNamedResourceCursor>?) -> InputDesktopNamedResourceCursor? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IInputDesktopNamedResourceCursorStatics: __ABI_Microsoft_UI_Input.IInputDesktopNamedResourceCursorStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputDesktopNamedResourceCursor"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputdesktopnamedresourcecursor.create)
    public static func create(_ resourceName: String) -> InputDesktopNamedResourceCursor! {
        return try! _IInputDesktopNamedResourceCursorStatics.CreateImpl(resourceName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputdesktopnamedresourcecursor.createfrommodule)
    public static func createFromModule(_ moduleName: String, _ resourceName: String) -> InputDesktopNamedResourceCursor! {
        return try! _IInputDesktopNamedResourceCursorStatics.CreateFromModuleImpl(moduleName, resourceName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputdesktopnamedresourcecursor.modulename)
    public var moduleName : String {
        get { try! _default.get_ModuleNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputdesktopnamedresourcecursor.resourcename)
    public var resourceName : String {
        get { try! _default.get_ResourceNameImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputdesktopresourcecursor)
public final class InputDesktopResourceCursor : WinAppSDK.InputCursor {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputDesktopResourceCursor
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopResourceCursor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopResourceCursor>?) -> InputDesktopResourceCursor? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IInputDesktopResourceCursorStatics: __ABI_Microsoft_UI_Input.IInputDesktopResourceCursorStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputDesktopResourceCursor"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputdesktopresourcecursor.create)
    public static func create(_ resourceId: UInt32) -> InputDesktopResourceCursor! {
        return try! _IInputDesktopResourceCursorStatics.CreateImpl(resourceId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputdesktopresourcecursor.createfrommodule)
    public static func createFromModule(_ moduleName: String, _ resourceId: UInt32) -> InputDesktopResourceCursor! {
        return try! _IInputDesktopResourceCursorStatics.CreateFromModuleImpl(moduleName, resourceId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputdesktopresourcecursor.modulename)
    public var moduleName : String {
        get { try! _default.get_ModuleNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputdesktopresourcecursor.resourceid)
    public var resourceId : UInt32 {
        get { try! _default.get_ResourceIdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocuscontroller)
public final class InputFocusController : WinAppSDK.InputObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputFocusController
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController>?) -> InputFocusController? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IInputFocusControllerStatics: __ABI_Microsoft_UI_Input.IInputFocusControllerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputFocusController"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocuscontroller.getforisland)
    public static func getForIsland(_ island: WinAppSDK.ContentIsland!) -> InputFocusController! {
        return try! _IInputFocusControllerStatics.GetForIslandImpl(island)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocuscontroller.trysetfocus)
    public func trySetFocus() throws -> Bool {
        try _default.TrySetFocusImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocuscontroller.hasfocus)
    public var hasFocus : Bool {
        get { try! _default.get_HasFocusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocuscontroller.gotfocus)
    public lazy var gotFocus : Event<TypedEventHandler<InputFocusController?, FocusChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_GotFocusImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_GotFocusImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocuscontroller.lostfocus)
    public lazy var lostFocus : Event<TypedEventHandler<InputFocusController?, FocusChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_LostFocusImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_LostFocusImpl($0)
       }
      )
    }()

    private lazy var _IInputFocusController2: __ABI_Microsoft_UI_Input.IInputFocusController2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocuscontroller.departfocus)
    public func departFocus(_ request: FocusNavigationRequest!) throws -> FocusNavigationResult {
        try _IInputFocusController2.DepartFocusImpl(request)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocuscontroller.navigatefocusrequested)
    public lazy var navigateFocusRequested : Event<TypedEventHandler<InputFocusController?, FocusNavigationRequestEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IInputFocusController2 else { return .init() }
          return try! this.add_NavigateFocusRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IInputFocusController2.remove_NavigateFocusRequestedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
        _IInputFocusController2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocusnavigationhost)
public final class InputFocusNavigationHost : WinAppSDK.InputObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputFocusNavigationHost
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHost
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHost>?) -> InputFocusNavigationHost? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IInputFocusNavigationHostStatics: __ABI_Microsoft_UI_Input.IInputFocusNavigationHostStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputFocusNavigationHost"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocusnavigationhost.getforsitebridge)
    public static func getForSiteBridge(_ site: WinAppSDK.AnyIContentSiteBridge!) -> InputFocusNavigationHost! {
        return try! _IInputFocusNavigationHostStatics.GetForSiteBridgeImpl(site)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocusnavigationhost.navigatefocus)
    public func navigateFocus(_ request: FocusNavigationRequest!) throws -> FocusNavigationResult {
        try _default.NavigateFocusImpl(request)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocusnavigationhost.containsfocus)
    public var containsFocus : Bool {
        get { try! _default.get_ContainsFocusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputfocusnavigationhost.departfocusrequested)
    public lazy var departFocusRequested : Event<TypedEventHandler<InputFocusNavigationHost?, FocusNavigationRequestEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DepartFocusRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DepartFocusRequestedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource)
public final class InputKeyboardSource : WinAppSDK.InputObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputKeyboardSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource>?) -> InputKeyboardSource? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IInputKeyboardSourceStatics: __ABI_Microsoft_UI_Input.IInputKeyboardSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputKeyboardSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource.getkeystateforcurrentthread)
    public static func getKeyStateForCurrentThread(_ virtualKey: UWP.VirtualKey) -> UWP.CoreVirtualKeyStates {
        return try! _IInputKeyboardSourceStatics.GetKeyStateForCurrentThreadImpl(virtualKey)
    }

    private static let _IInputKeyboardSourceStatics2: __ABI_Microsoft_UI_Input.IInputKeyboardSourceStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputKeyboardSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource.getforisland)
    public static func getForIsland(_ island: WinAppSDK.ContentIsland!) -> InputKeyboardSource! {
        return try! _IInputKeyboardSourceStatics2.GetForIslandImpl(island)
    }

    private lazy var _IInputKeyboardSource2: __ABI_Microsoft_UI_Input.IInputKeyboardSource2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource.getcurrentkeystate)
    public func getCurrentKeyState(_ virtualKey: UWP.VirtualKey) throws -> VirtualKeyStates {
        try _IInputKeyboardSource2.GetCurrentKeyStateImpl(virtualKey)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource.getkeystate)
    public func getKeyState(_ virtualKey: UWP.VirtualKey) throws -> VirtualKeyStates {
        try _IInputKeyboardSource2.GetKeyStateImpl(virtualKey)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource.characterreceived)
    public lazy var characterReceived : Event<TypedEventHandler<InputKeyboardSource?, CharacterReceivedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IInputKeyboardSource2 else { return .init() }
          return try! this.add_CharacterReceivedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IInputKeyboardSource2.remove_CharacterReceivedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource.contextmenukey)
    public lazy var contextMenuKey : Event<TypedEventHandler<InputKeyboardSource?, ContextMenuKeyEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IInputKeyboardSource2 else { return .init() }
          return try! this.add_ContextMenuKeyImpl($0)
        },
        remove: { [weak self] in
         try? self?._IInputKeyboardSource2.remove_ContextMenuKeyImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource.keydown)
    public lazy var keyDown : Event<TypedEventHandler<InputKeyboardSource?, KeyEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IInputKeyboardSource2 else { return .init() }
          return try! this.add_KeyDownImpl($0)
        },
        remove: { [weak self] in
         try? self?._IInputKeyboardSource2.remove_KeyDownImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource.keyup)
    public lazy var keyUp : Event<TypedEventHandler<InputKeyboardSource?, KeyEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IInputKeyboardSource2 else { return .init() }
          return try! this.add_KeyUpImpl($0)
        },
        remove: { [weak self] in
         try? self?._IInputKeyboardSource2.remove_KeyUpImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource.systemkeydown)
    public lazy var systemKeyDown : Event<TypedEventHandler<InputKeyboardSource?, KeyEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IInputKeyboardSource2 else { return .init() }
          return try! this.add_SystemKeyDownImpl($0)
        },
        remove: { [weak self] in
         try? self?._IInputKeyboardSource2.remove_SystemKeyDownImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputkeyboardsource.systemkeyup)
    public lazy var systemKeyUp : Event<TypedEventHandler<InputKeyboardSource?, KeyEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IInputKeyboardSource2 else { return .init() }
          return try! this.add_SystemKeyUpImpl($0)
        },
        remove: { [weak self] in
         try? self?._IInputKeyboardSource2.remove_SystemKeyUpImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
        _IInputKeyboardSource2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputlightdismissaction)
public final class InputLightDismissAction : WinAppSDK.InputObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputLightDismissAction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissAction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissAction>?) -> InputLightDismissAction? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IInputLightDismissActionStatics: __ABI_Microsoft_UI_Input.IInputLightDismissActionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputLightDismissAction"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputlightdismissaction.getforwindowid)
    public static func getForWindowId(_ windowId: WinAppSDK.WindowId) -> InputLightDismissAction! {
        return try! _IInputLightDismissActionStatics.GetForWindowIdImpl(windowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputlightdismissaction.dismissed)
    public lazy var dismissed : Event<TypedEventHandler<InputLightDismissAction?, InputLightDismissEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DismissedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DismissedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputlightdismisseventargs)
public final class InputLightDismissEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputLightDismissEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissEventArgs>?) -> InputLightDismissEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource)
public final class InputNonClientPointerSource : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputNonClientPointerSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource>?) -> InputNonClientPointerSource? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IInputNonClientPointerSourceStatics: __ABI_Microsoft_UI_Input.IInputNonClientPointerSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputNonClientPointerSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.getforwindowid)
    public static func getForWindowId(_ windowId: WinAppSDK.WindowId) -> InputNonClientPointerSource! {
        return try! _IInputNonClientPointerSourceStatics.GetForWindowIdImpl(windowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.clearallregionrects)
    public func clearAllRegionRects() throws {
        try _default.ClearAllRegionRectsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.clearregionrects)
    public func clearRegionRects(_ region: NonClientRegionKind) throws {
        try _default.ClearRegionRectsImpl(region)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _default.get_DispatcherQueueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.captiontapped)
    public lazy var captionTapped : Event<TypedEventHandler<InputNonClientPointerSource?, NonClientCaptionTappedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CaptionTappedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CaptionTappedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.pointerentered)
    public lazy var pointerEntered : Event<TypedEventHandler<InputNonClientPointerSource?, NonClientPointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerEnteredImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerEnteredImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.pointerexited)
    public lazy var pointerExited : Event<TypedEventHandler<InputNonClientPointerSource?, NonClientPointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerExitedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerExitedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.pointermoved)
    public lazy var pointerMoved : Event<TypedEventHandler<InputNonClientPointerSource?, NonClientPointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerMovedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerMovedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.pointerpressed)
    public lazy var pointerPressed : Event<TypedEventHandler<InputNonClientPointerSource?, NonClientPointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerPressedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerPressedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.pointerreleased)
    public lazy var pointerReleased : Event<TypedEventHandler<InputNonClientPointerSource?, NonClientPointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerReleasedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerReleasedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource.regionschanged)
    public lazy var regionsChanged : Event<TypedEventHandler<InputNonClientPointerSource?, NonClientRegionsChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RegionsChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RegionsChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputobject)
open class InputObject : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputObject
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputObject
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputObject>?) -> InputObject? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInputObjectFactory : __ABI_Microsoft_UI_Input.IInputObjectFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputObject"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputobject.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _default.get_DispatcherQueueImpl() }
    }

    internal enum IInputObject : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = InputObject
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputObject
            internal typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputObject
        }
    }
    internal typealias Composable = IInputObject
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource)
public final class InputPointerSource : WinAppSDK.InputObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputPointerSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource>?) -> InputPointerSource? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IInputPointerSourceStatics: __ABI_Microsoft_UI_Input.IInputPointerSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputPointerSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.getforisland)
    public static func getForIsland(_ island: WinAppSDK.ContentIsland!) -> InputPointerSource! {
        return try! _IInputPointerSourceStatics.GetForIslandImpl(island)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.cursor)
    public var cursor : InputCursor! {
        get { try! _default.get_CursorImpl() }
        set { try! _default.put_CursorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.devicekinds)
    public var deviceKinds : InputPointerSourceDeviceKinds {
        get { try! _default.get_DeviceKindsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.pointercapturelost)
    public lazy var pointerCaptureLost : Event<TypedEventHandler<InputPointerSource?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerCaptureLostImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerCaptureLostImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.pointerentered)
    public lazy var pointerEntered : Event<TypedEventHandler<InputPointerSource?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerEnteredImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerEnteredImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.pointerexited)
    public lazy var pointerExited : Event<TypedEventHandler<InputPointerSource?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerExitedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerExitedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.pointermoved)
    public lazy var pointerMoved : Event<TypedEventHandler<InputPointerSource?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerMovedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerMovedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.pointerpressed)
    public lazy var pointerPressed : Event<TypedEventHandler<InputPointerSource?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerPressedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerPressedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.pointerreleased)
    public lazy var pointerReleased : Event<TypedEventHandler<InputPointerSource?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerReleasedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerReleasedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.pointerroutedaway)
    public lazy var pointerRoutedAway : Event<TypedEventHandler<InputPointerSource?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerRoutedAwayImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerRoutedAwayImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.pointerroutedreleased)
    public lazy var pointerRoutedReleased : Event<TypedEventHandler<InputPointerSource?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerRoutedReleasedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerRoutedReleasedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.pointerroutedto)
    public lazy var pointerRoutedTo : Event<TypedEventHandler<InputPointerSource?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerRoutedToImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerRoutedToImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpointersource.pointerwheelchanged)
    public lazy var pointerWheelChanged : Event<TypedEventHandler<InputPointerSource?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerWheelChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerWheelChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpretranslatekeyboardsource)
public final class InputPreTranslateKeyboardSource : WinAppSDK.InputObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputPreTranslateKeyboardSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputPreTranslateKeyboardSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputPreTranslateKeyboardSource>?) -> InputPreTranslateKeyboardSource? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IInputPreTranslateKeyboardSourceStatics: __ABI_Microsoft_UI_Input.IInputPreTranslateKeyboardSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputPreTranslateKeyboardSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputpretranslatekeyboardsource.getforisland)
    public static func getForIsland(_ island: WinAppSDK.ContentIsland!) -> InputPreTranslateKeyboardSource! {
        return try! _IInputPreTranslateKeyboardSourceStatics.GetForIslandImpl(island)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputsystemcursor)
public final class InputSystemCursor : WinAppSDK.InputCursor {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IInputSystemCursor
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIInputSystemCursor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIInputSystemCursor>?) -> InputSystemCursor? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IInputSystemCursorStatics: __ABI_Microsoft_UI_Input.IInputSystemCursorStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.InputSystemCursor"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputsystemcursor.create)
    public static func create(_ type: InputSystemCursorShape) -> InputSystemCursor! {
        return try! _IInputSystemCursorStatics.CreateImpl(type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputsystemcursor.cursorshape)
    public var cursorShape : InputSystemCursorShape {
        get { try! _default.get_CursorShapeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.keyeventargs)
public final class KeyEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IKeyEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIKeyEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIKeyEventArgs>?) -> KeyEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.keyeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.keyeventargs.keystatus)
    public var keyStatus : PhysicalKeyStatus {
        get { try! _default.get_KeyStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.keyeventargs.timestamp)
    public var timestamp : UInt64 {
        get { try! _default.get_TimestampImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.keyeventargs.virtualkey)
    public var virtualKey : UWP.VirtualKey {
        get { try! _default.get_VirtualKeyImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationcompletedeventargs)
public final class ManipulationCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IManipulationCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIManipulationCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIManipulationCompletedEventArgs>?) -> ManipulationCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationcompletedeventargs.cumulative)
    public var cumulative : ManipulationDelta {
        get { try! _default.get_CumulativeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationcompletedeventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationcompletedeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationcompletedeventargs.velocities)
    public var velocities : ManipulationVelocities {
        get { try! _default.get_VelocitiesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationinertiastartingeventargs)
public final class ManipulationInertiaStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IManipulationInertiaStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIManipulationInertiaStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIManipulationInertiaStartingEventArgs>?) -> ManipulationInertiaStartingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationinertiastartingeventargs.cumulative)
    public var cumulative : ManipulationDelta {
        get { try! _default.get_CumulativeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationinertiastartingeventargs.delta)
    public var delta : ManipulationDelta {
        get { try! _default.get_DeltaImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationinertiastartingeventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationinertiastartingeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationinertiastartingeventargs.velocities)
    public var velocities : ManipulationVelocities {
        get { try! _default.get_VelocitiesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationstartedeventargs)
public final class ManipulationStartedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IManipulationStartedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIManipulationStartedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIManipulationStartedEventArgs>?) -> ManipulationStartedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationstartedeventargs.cumulative)
    public var cumulative : ManipulationDelta {
        get { try! _default.get_CumulativeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationstartedeventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationstartedeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationupdatedeventargs)
public final class ManipulationUpdatedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IManipulationUpdatedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIManipulationUpdatedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIManipulationUpdatedEventArgs>?) -> ManipulationUpdatedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationupdatedeventargs.cumulative)
    public var cumulative : ManipulationDelta {
        get { try! _default.get_CumulativeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationupdatedeventargs.delta)
    public var delta : ManipulationDelta {
        get { try! _default.get_DeltaImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationupdatedeventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationupdatedeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationupdatedeventargs.velocities)
    public var velocities : ManipulationVelocities {
        get { try! _default.get_VelocitiesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.mousewheelparameters)
public final class MouseWheelParameters : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IMouseWheelParameters
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters>?) -> MouseWheelParameters? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.mousewheelparameters.chartranslation)
    public var charTranslation : WindowsFoundation.Point {
        get { try! _default.get_CharTranslationImpl() }
        set { try! _default.put_CharTranslationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.mousewheelparameters.deltarotationangle)
    public var deltaRotationAngle : Float {
        get { try! _default.get_DeltaRotationAngleImpl() }
        set { try! _default.put_DeltaRotationAngleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.mousewheelparameters.deltascale)
    public var deltaScale : Float {
        get { try! _default.get_DeltaScaleImpl() }
        set { try! _default.put_DeltaScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.mousewheelparameters.pagetranslation)
    public var pageTranslation : WindowsFoundation.Point {
        get { try! _default.get_PageTranslationImpl() }
        set { try! _default.put_PageTranslationImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.nonclientcaptiontappedeventargs)
public final class NonClientCaptionTappedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.INonClientCaptionTappedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CINonClientCaptionTappedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CINonClientCaptionTappedEventArgs>?) -> NonClientCaptionTappedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.nonclientcaptiontappedeventargs.point)
    public var point : WindowsFoundation.Point {
        get { try! _default.get_PointImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.nonclientcaptiontappedeventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.nonclientpointereventargs)
public final class NonClientPointerEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.INonClientPointerEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CINonClientPointerEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CINonClientPointerEventArgs>?) -> NonClientPointerEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.nonclientpointereventargs.ispointinregion)
    public var isPointInRegion : Bool {
        get { try! _default.get_IsPointInRegionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.nonclientpointereventargs.point)
    public var point : WindowsFoundation.Point {
        get { try! _default.get_PointImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.nonclientpointereventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.nonclientpointereventargs.regionkind)
    public var regionKind : NonClientRegionKind {
        get { try! _default.get_RegionKindImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.nonclientregionschangedeventargs)
public final class NonClientRegionsChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.INonClientRegionsChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CINonClientRegionsChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CINonClientRegionsChangedEventArgs>?) -> NonClientRegionsChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointereventargs)
public final class PointerEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IPointerEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIPointerEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIPointerEventArgs>?) -> PointerEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointereventargs.getintermediatepoints)
    public func getIntermediatePoints() throws -> WindowsFoundation.AnyIVector<PointerPoint?>! {
        try _default.GetIntermediatePointsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointereventargs.getintermediatetransformedpoints)
    public func getIntermediateTransformedPoints(_ transform: AnyIPointerPointTransform!) throws -> WindowsFoundation.AnyIVector<PointerPoint?>! {
        try _default.GetIntermediateTransformedPointsImpl(transform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointereventargs.currentpoint)
    public var currentPoint : PointerPoint! {
        get { try! _default.get_CurrentPointImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointereventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointereventargs.keymodifiers)
    public var keyModifiers : UWP.VirtualKeyModifiers {
        get { try! _default.get_KeyModifiersImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpoint)
public final class PointerPoint : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IPointerPoint
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint>?) -> PointerPoint? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpoint.gettransformedpoint)
    public func getTransformedPoint(_ transform: AnyIPointerPointTransform!) throws -> PointerPoint! {
        try _default.GetTransformedPointImpl(transform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpoint.frameid)
    public var frameId : UInt32 {
        get { try! _default.get_FrameIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpoint.isincontact)
    public var isInContact : Bool {
        get { try! _default.get_IsInContactImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpoint.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpoint.pointerid)
    public var pointerId : UInt32 {
        get { try! _default.get_PointerIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpoint.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpoint.properties)
    public var properties : PointerPointProperties! {
        get { try! _default.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpoint.timestamp)
    public var timestamp : UInt64 {
        get { try! _default.get_TimestampImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties)
public final class PointerPointProperties : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IPointerPointProperties
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties>?) -> PointerPointProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.contactrect)
    public var contactRect : WindowsFoundation.Rect {
        get { try! _default.get_ContactRectImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.isbarrelbuttonpressed)
    public var isBarrelButtonPressed : Bool {
        get { try! _default.get_IsBarrelButtonPressedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.iscanceled)
    public var isCanceled : Bool {
        get { try! _default.get_IsCanceledImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.iseraser)
    public var isEraser : Bool {
        get { try! _default.get_IsEraserImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.ishorizontalmousewheel)
    public var isHorizontalMouseWheel : Bool {
        get { try! _default.get_IsHorizontalMouseWheelImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.isinrange)
    public var isInRange : Bool {
        get { try! _default.get_IsInRangeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.isinverted)
    public var isInverted : Bool {
        get { try! _default.get_IsInvertedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.isleftbuttonpressed)
    public var isLeftButtonPressed : Bool {
        get { try! _default.get_IsLeftButtonPressedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.ismiddlebuttonpressed)
    public var isMiddleButtonPressed : Bool {
        get { try! _default.get_IsMiddleButtonPressedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.isprimary)
    public var isPrimary : Bool {
        get { try! _default.get_IsPrimaryImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.isrightbuttonpressed)
    public var isRightButtonPressed : Bool {
        get { try! _default.get_IsRightButtonPressedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.isxbutton1pressed)
    public var isXButton1Pressed : Bool {
        get { try! _default.get_IsXButton1PressedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.isxbutton2pressed)
    public var isXButton2Pressed : Bool {
        get { try! _default.get_IsXButton2PressedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.mousewheeldelta)
    public var mouseWheelDelta : Int32 {
        get { try! _default.get_MouseWheelDeltaImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.orientation)
    public var orientation : Float {
        get { try! _default.get_OrientationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.pointerupdatekind)
    public var pointerUpdateKind : PointerUpdateKind {
        get { try! _default.get_PointerUpdateKindImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.pressure)
    public var pressure : Float {
        get { try! _default.get_PressureImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.touchconfidence)
    public var touchConfidence : Bool {
        get { try! _default.get_TouchConfidenceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.twist)
    public var twist : Float {
        get { try! _default.get_TwistImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.xtilt)
    public var xtilt : Float {
        get { try! _default.get_XTiltImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpointproperties.ytilt)
    public var ytilt : Float {
        get { try! _default.get_YTiltImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpredictor)
public final class PointerPredictor : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IPointerPredictor
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIPointerPredictor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIPointerPredictor>?) -> PointerPredictor? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IPointerPredictorStatics: __ABI_Microsoft_UI_Input.IPointerPredictorStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Input.PointerPredictor"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpredictor.createforinputpointersource)
    public static func createForInputPointerSource(_ inputPointerSource: InputPointerSource!) -> PointerPredictor! {
        return try! _IPointerPredictorStatics.CreateForInputPointerSourceImpl(inputPointerSource)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpredictor.predictiontime)
    public var predictionTime : WindowsFoundation.TimeSpan {
        get { try! _default.get_PredictionTimeImpl() }
        set { try! _default.put_PredictionTimeImpl(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.pointerpredictor.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    deinit {
        _default = nil
        _IClosable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.righttappedeventargs)
public final class RightTappedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.IRightTappedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CIRightTappedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CIRightTappedEventArgs>?) -> RightTappedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.righttappedeventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.righttappedeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.tappedeventargs)
public final class TappedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Input.ITappedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CInput_CITappedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CInput_CITappedEventArgs>?) -> TappedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.tappedeventargs.pointerdevicetype)
    public var pointerDeviceType : PointerDeviceType {
        get { try! _default.get_PointerDeviceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.tappedeventargs.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.tappedeventargs.tapcount)
    public var tapCount : UInt32 {
        get { try! _default.get_TapCountImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.crossslidethresholds)
public struct CrossSlideThresholds: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.crossslidethresholds.selectionstart)
    public var selectionStart: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.crossslidethresholds.speedbumpstart)
    public var speedBumpStart: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.crossslidethresholds.speedbumpend)
    public var speedBumpEnd: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.crossslidethresholds.rearrangestart)
    public var rearrangeStart: Float = 0.0
    public init() {}
    public init(selectionStart: Float, speedBumpStart: Float, speedBumpEnd: Float, rearrangeStart: Float) {
        self.selectionStart = selectionStart
        self.speedBumpStart = speedBumpStart
        self.speedBumpEnd = speedBumpEnd
        self.rearrangeStart = rearrangeStart
    }
    public static func from(abi: __x_ABI_CMicrosoft_CUI_CInput_CCrossSlideThresholds) -> CrossSlideThresholds {
        .init(selectionStart: abi.SelectionStart, speedBumpStart: abi.SpeedBumpStart, speedBumpEnd: abi.SpeedBumpEnd, rearrangeStart: abi.RearrangeStart)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationdelta)
public struct ManipulationDelta: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationdelta.translation)
    public var translation: WindowsFoundation.Point = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationdelta.scale)
    public var scale: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationdelta.rotation)
    public var rotation: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationdelta.expansion)
    public var expansion: Float = 0.0
    public init() {}
    public init(translation: WindowsFoundation.Point, scale: Float, rotation: Float, expansion: Float) {
        self.translation = translation
        self.scale = scale
        self.rotation = rotation
        self.expansion = expansion
    }
    public static func from(abi: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta) -> ManipulationDelta {
        .init(translation: .from(abi: abi.Translation), scale: abi.Scale, rotation: abi.Rotation, expansion: abi.Expansion)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationvelocities)
public struct ManipulationVelocities: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationvelocities.linear)
    public var linear: WindowsFoundation.Point = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationvelocities.angular)
    public var angular: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.manipulationvelocities.expansion)
    public var expansion: Float = 0.0
    public init() {}
    public init(linear: WindowsFoundation.Point, angular: Float, expansion: Float) {
        self.linear = linear
        self.angular = angular
        self.expansion = expansion
    }
    public static func from(abi: __x_ABI_CMicrosoft_CUI_CInput_CManipulationVelocities) -> ManipulationVelocities {
        .init(linear: .from(abi: abi.Linear), angular: abi.Angular, expansion: abi.Expansion)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.physicalkeystatus)
public struct PhysicalKeyStatus: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.physicalkeystatus.repeatcount)
    public var repeatCount: UInt32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.physicalkeystatus.scancode)
    public var scanCode: UInt32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.physicalkeystatus.isextendedkey)
    public var isExtendedKey: Bool = false
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.physicalkeystatus.ismenukeydown)
    public var isMenuKeyDown: Bool = false
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.physicalkeystatus.waskeydown)
    public var wasKeyDown: Bool = false
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.physicalkeystatus.iskeyreleased)
    public var isKeyReleased: Bool = false
    public init() {}
    public init(repeatCount: UInt32, scanCode: UInt32, isExtendedKey: Bool, isMenuKeyDown: Bool, wasKeyDown: Bool, isKeyReleased: Bool) {
        self.repeatCount = repeatCount
        self.scanCode = scanCode
        self.isExtendedKey = isExtendedKey
        self.isMenuKeyDown = isMenuKeyDown
        self.wasKeyDown = wasKeyDown
        self.isKeyReleased = isKeyReleased
    }
    public static func from(abi: __x_ABI_CMicrosoft_CUI_CInput_CPhysicalKeyStatus) -> PhysicalKeyStatus {
        .init(repeatCount: abi.RepeatCount, scanCode: abi.ScanCode, isExtendedKey: .init(from: abi.IsExtendedKey), isMenuKeyDown: .init(from: abi.IsMenuKeyDown), wasKeyDown: .init(from: abi.WasKeyDown), isKeyReleased: .init(from: abi.IsKeyReleased))
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.ipointerpointtransform)
public protocol IPointerPointTransform : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.ipointerpointtransform.trytransform)
    func tryTransform(_ inPoint: WindowsFoundation.Point, _ outPoint: inout WindowsFoundation.Point) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.ipointerpointtransform.trytransformbounds)
    func tryTransformBounds(_ inRect: WindowsFoundation.Rect, _ outRect: inout WindowsFoundation.Rect) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.ipointerpointtransform.inverse)
    var inverse: WinAppSDK.AnyIPointerPointTransform! { get }
}

extension IPointerPointTransform {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Input.IPointerPointTransformWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Input.IPointerPointTransformWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIPointerPointTransform = any IPointerPointTransform

extension WinAppSDK.CrossSlidingState {
    public static var started : WinAppSDK.CrossSlidingState {
        __x_ABI_CMicrosoft_CUI_CInput_CCrossSlidingState_Started
    }
    public static var dragging : WinAppSDK.CrossSlidingState {
        __x_ABI_CMicrosoft_CUI_CInput_CCrossSlidingState_Dragging
    }
    public static var selecting : WinAppSDK.CrossSlidingState {
        __x_ABI_CMicrosoft_CUI_CInput_CCrossSlidingState_Selecting
    }
    public static var selectSpeedBumping : WinAppSDK.CrossSlidingState {
        __x_ABI_CMicrosoft_CUI_CInput_CCrossSlidingState_SelectSpeedBumping
    }
    public static var speedBumping : WinAppSDK.CrossSlidingState {
        __x_ABI_CMicrosoft_CUI_CInput_CCrossSlidingState_SpeedBumping
    }
    public static var rearranging : WinAppSDK.CrossSlidingState {
        __x_ABI_CMicrosoft_CUI_CInput_CCrossSlidingState_Rearranging
    }
    public static var completed : WinAppSDK.CrossSlidingState {
        __x_ABI_CMicrosoft_CUI_CInput_CCrossSlidingState_Completed
    }
}
extension WinAppSDK.CrossSlidingState: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.DraggingState {
    public static var started : WinAppSDK.DraggingState {
        __x_ABI_CMicrosoft_CUI_CInput_CDraggingState_Started
    }
    public static var continuing : WinAppSDK.DraggingState {
        __x_ABI_CMicrosoft_CUI_CInput_CDraggingState_Continuing
    }
    public static var completed : WinAppSDK.DraggingState {
        __x_ABI_CMicrosoft_CUI_CInput_CDraggingState_Completed
    }
}
extension WinAppSDK.DraggingState: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.FocusNavigationReason {
    public static var programmatic : WinAppSDK.FocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationReason_Programmatic
    }
    public static var restore : WinAppSDK.FocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationReason_Restore
    }
    public static var first : WinAppSDK.FocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationReason_First
    }
    public static var last : WinAppSDK.FocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationReason_Last
    }
    public static var left : WinAppSDK.FocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationReason_Left
    }
    public static var up : WinAppSDK.FocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationReason_Up
    }
    public static var right : WinAppSDK.FocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationReason_Right
    }
    public static var down : WinAppSDK.FocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationReason_Down
    }
}
extension WinAppSDK.FocusNavigationReason: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.FocusNavigationResult {
    public static var notMoved : WinAppSDK.FocusNavigationResult {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationResult_NotMoved
    }
    public static var moved : WinAppSDK.FocusNavigationResult {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationResult_Moved
    }
    public static var noFocusableElements : WinAppSDK.FocusNavigationResult {
        __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationResult_NoFocusableElements
    }
}
extension WinAppSDK.FocusNavigationResult: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.GestureSettings {
    public static var none : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_None
    }
    public static var tap : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_Tap
    }
    public static var doubleTap : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_DoubleTap
    }
    public static var hold : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_Hold
    }
    public static var holdWithMouse : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_HoldWithMouse
    }
    public static var rightTap : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_RightTap
    }
    public static var drag : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_Drag
    }
    public static var manipulationTranslateX : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_ManipulationTranslateX
    }
    public static var manipulationTranslateY : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_ManipulationTranslateY
    }
    public static var manipulationTranslateRailsX : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_ManipulationTranslateRailsX
    }
    public static var manipulationTranslateRailsY : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_ManipulationTranslateRailsY
    }
    public static var manipulationRotate : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_ManipulationRotate
    }
    public static var manipulationScale : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_ManipulationScale
    }
    public static var manipulationTranslateInertia : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_ManipulationTranslateInertia
    }
    public static var manipulationRotateInertia : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_ManipulationRotateInertia
    }
    public static var manipulationScaleInertia : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_ManipulationScaleInertia
    }
    public static var crossSlide : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_CrossSlide
    }
    public static var manipulationMultipleFingerPanning : WinAppSDK.GestureSettings {
        __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings_ManipulationMultipleFingerPanning
    }
}
extension WinAppSDK.GestureSettings: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.HoldingState {
    public static var started : WinAppSDK.HoldingState {
        __x_ABI_CMicrosoft_CUI_CInput_CHoldingState_Started
    }
    public static var completed : WinAppSDK.HoldingState {
        __x_ABI_CMicrosoft_CUI_CInput_CHoldingState_Completed
    }
    public static var canceled : WinAppSDK.HoldingState {
        __x_ABI_CMicrosoft_CUI_CInput_CHoldingState_Canceled
    }
}
extension WinAppSDK.HoldingState: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.InputActivationState {
    public static var none : WinAppSDK.InputActivationState {
        __x_ABI_CMicrosoft_CUI_CInput_CInputActivationState_None
    }
    public static var deactivated : WinAppSDK.InputActivationState {
        __x_ABI_CMicrosoft_CUI_CInput_CInputActivationState_Deactivated
    }
    public static var activated : WinAppSDK.InputActivationState {
        __x_ABI_CMicrosoft_CUI_CInput_CInputActivationState_Activated
    }
}
extension WinAppSDK.InputActivationState: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.InputPointerSourceDeviceKinds {
    public static var none : WinAppSDK.InputPointerSourceDeviceKinds {
        __x_ABI_CMicrosoft_CUI_CInput_CInputPointerSourceDeviceKinds_None
    }
    public static var touch : WinAppSDK.InputPointerSourceDeviceKinds {
        __x_ABI_CMicrosoft_CUI_CInput_CInputPointerSourceDeviceKinds_Touch
    }
    public static var pen : WinAppSDK.InputPointerSourceDeviceKinds {
        __x_ABI_CMicrosoft_CUI_CInput_CInputPointerSourceDeviceKinds_Pen
    }
    public static var mouse : WinAppSDK.InputPointerSourceDeviceKinds {
        __x_ABI_CMicrosoft_CUI_CInput_CInputPointerSourceDeviceKinds_Mouse
    }
}
extension WinAppSDK.InputPointerSourceDeviceKinds: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.InputSystemCursorShape {
    public static var arrow : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_Arrow
    }
    public static var cross : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_Cross
    }
    public static var hand : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_Hand
    }
    public static var help : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_Help
    }
    public static var ibeam : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_IBeam
    }
    public static var sizeAll : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_SizeAll
    }
    public static var sizeNortheastSouthwest : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_SizeNortheastSouthwest
    }
    public static var sizeNorthSouth : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_SizeNorthSouth
    }
    public static var sizeNorthwestSoutheast : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_SizeNorthwestSoutheast
    }
    public static var sizeWestEast : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_SizeWestEast
    }
    public static var universalNo : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_UniversalNo
    }
    public static var upArrow : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_UpArrow
    }
    public static var wait : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_Wait
    }
    public static var pin : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_Pin
    }
    public static var person : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_Person
    }
    public static var appStarting : WinAppSDK.InputSystemCursorShape {
        __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape_AppStarting
    }
}
extension WinAppSDK.InputSystemCursorShape: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.NonClientRegionKind {
    public static var close : WinAppSDK.NonClientRegionKind {
        __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind_Close
    }
    public static var maximize : WinAppSDK.NonClientRegionKind {
        __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind_Maximize
    }
    public static var minimize : WinAppSDK.NonClientRegionKind {
        __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind_Minimize
    }
    public static var icon : WinAppSDK.NonClientRegionKind {
        __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind_Icon
    }
    public static var caption : WinAppSDK.NonClientRegionKind {
        __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind_Caption
    }
    public static var topBorder : WinAppSDK.NonClientRegionKind {
        __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind_TopBorder
    }
    public static var leftBorder : WinAppSDK.NonClientRegionKind {
        __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind_LeftBorder
    }
    public static var bottomBorder : WinAppSDK.NonClientRegionKind {
        __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind_BottomBorder
    }
    public static var rightBorder : WinAppSDK.NonClientRegionKind {
        __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind_RightBorder
    }
    public static var passthrough : WinAppSDK.NonClientRegionKind {
        __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind_Passthrough
    }
}
extension WinAppSDK.NonClientRegionKind: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.PointerDeviceType {
    public static var touch : WinAppSDK.PointerDeviceType {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType_Touch
    }
    public static var pen : WinAppSDK.PointerDeviceType {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType_Pen
    }
    public static var mouse : WinAppSDK.PointerDeviceType {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType_Mouse
    }
    public static var touchpad : WinAppSDK.PointerDeviceType {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType_Touchpad
    }
}
extension WinAppSDK.PointerDeviceType: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.PointerUpdateKind {
    public static var other : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_Other
    }
    public static var leftButtonPressed : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_LeftButtonPressed
    }
    public static var leftButtonReleased : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_LeftButtonReleased
    }
    public static var rightButtonPressed : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_RightButtonPressed
    }
    public static var rightButtonReleased : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_RightButtonReleased
    }
    public static var middleButtonPressed : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_MiddleButtonPressed
    }
    public static var middleButtonReleased : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_MiddleButtonReleased
    }
    public static var xbutton1Pressed : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_XButton1Pressed
    }
    public static var xbutton1Released : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_XButton1Released
    }
    public static var xbutton2Pressed : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_XButton2Pressed
    }
    public static var xbutton2Released : WinAppSDK.PointerUpdateKind {
        __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind_XButton2Released
    }
}
extension WinAppSDK.PointerUpdateKind: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.VirtualKeyStates {
    public static var none : WinAppSDK.VirtualKeyStates {
        __x_ABI_CMicrosoft_CUI_CInput_CVirtualKeyStates_None
    }
    public static var down : WinAppSDK.VirtualKeyStates {
        __x_ABI_CMicrosoft_CUI_CInput_CVirtualKeyStates_Down
    }
    public static var locked : WinAppSDK.VirtualKeyStates {
        __x_ABI_CMicrosoft_CUI_CInput_CVirtualKeyStates_Locked
    }
}
extension WinAppSDK.VirtualKeyStates: @retroactive Hashable, @retroactive Codable {}


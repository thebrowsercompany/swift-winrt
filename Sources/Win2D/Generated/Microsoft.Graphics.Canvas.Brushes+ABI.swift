// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush: WindowsFoundation.IID {
    .init(Data1: 0xF5D58591, Data2: 0xC803, Data3: 0x41B4, Data4: ( 0x87,0x8E,0x79,0xD9,0x2A,0xB1,0x32,0x95 ))// F5D58591-C803-41B4-878E-79D92AB13295
}

public enum __ABI_Microsoft_Graphics_Canvas_Brushes {
    public class ICanvasBrush: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush }

        open func get_OpacityImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Opacity(pThis, &value))
            }
            return value
        }

        open func put_OpacityImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Opacity(pThis, value))
            }
        }

        open func get_TransformImpl() throws -> WindowsFoundation.Matrix3x2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform(pThis, &value))
            }
            return .from(abi: value)
        }

        open func put_TransformImpl(_ value: WindowsFoundation.Matrix3x2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Transform(pThis, .from(swift: value)))
            }
        }

        open func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    internal static var ICanvasBrushVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl = .init(
        QueryInterface: { ICanvasBrushWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasBrushWrapper.addRef($0) },
        Release: { ICanvasBrushWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Brushes.ICanvasBrush").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Opacity: {
            guard let __unwrapped__instance = ICanvasBrushWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.opacity
            $1?.initialize(to: value)
            return S_OK
        },

        put_Opacity: {
            guard let __unwrapped__instance = ICanvasBrushWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Float = $1
            __unwrapped__instance.opacity = value
            return S_OK
        },

        get_Transform: {
            guard let __unwrapped__instance = ICanvasBrushWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.transform
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        put_Transform: {
            guard let __unwrapped__instance = ICanvasBrushWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WindowsFoundation.Matrix3x2 = .from(abi: $1)
            __unwrapped__instance.transform = value
            return S_OK
        },

        get_Device: {
            guard let __unwrapped__instance = ICanvasBrushWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.device
            value?.copyTo($1)
            return S_OK
        }
    )

    public typealias ICanvasBrushWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushBridge>
}

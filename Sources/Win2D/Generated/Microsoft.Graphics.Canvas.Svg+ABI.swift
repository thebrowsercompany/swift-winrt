// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute: WindowsFoundation.IID {
    .init(Data1: 0x652786A8, Data2: 0xF3AB, Data3: 0x4083, Data4: ( 0x99,0x1D,0x97,0x48,0xAA,0x86,0xBD,0x6E ))// 652786A8-F3AB-4083-991D-9748AA86BD6E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument: WindowsFoundation.IID {
    .init(Data1: 0xA0E34929, Data2: 0x3551, Data3: 0x44FE, Data4: ( 0xA6,0x70,0xD9,0xB3,0xFD,0x80,0x05,0x16 ))// A0E34929-3551-44FE-A670-D9B3FD800516
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory: WindowsFoundation.IID {
    .init(Data1: 0xBAB0F16D, Data2: 0x4050, Data3: 0x4EF6, Data4: ( 0x80,0x22,0x8A,0x07,0xE9,0xE7,0x4A,0x9D ))// BAB0F16D-4050-4EF6-8022-8A07E9E74A9D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics: WindowsFoundation.IID {
    .init(Data1: 0x7740E748, Data2: 0xCB9A, Data3: 0x453F, Data4: ( 0xA6,0x78,0x8B,0x3B,0x3A,0x72,0x54,0xD3 ))// 7740E748-CB9A-453F-A678-8B3B3A7254D3
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement: WindowsFoundation.IID {
    .init(Data1: 0x0775CB81, Data2: 0xC555, Data3: 0x45BF, Data4: ( 0x97,0x95,0x0F,0xF5,0x91,0x51,0xC3,0xBE ))// 0775CB81-C555-45BF-9795-0FF59151C3BE
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement: WindowsFoundation.IID {
    .init(Data1: 0xD8B7CB94, Data2: 0x8167, Data3: 0x495D, Data4: ( 0x9C,0x71,0x5E,0x97,0xE5,0xD0,0x8D,0x2B ))// D8B7CB94-8167-495D-9C71-5E97E5D08D2B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute: WindowsFoundation.IID {
    .init(Data1: 0x653786A8, Data2: 0xF3AB, Data3: 0x4083, Data4: ( 0x99,0x1D,0x97,0x48,0xAA,0x86,0xBD,0x6E ))// 653786A8-F3AB-4083-991D-9748AA86BD6E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute: WindowsFoundation.IID {
    .init(Data1: 0x652786A8, Data2: 0xF3AB, Data3: 0x4083, Data4: ( 0x99,0x1D,0x97,0x48,0xAB,0x86,0xBD,0x6E ))// 652786A8-F3AB-4083-991D-9748AB86BD6E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute: WindowsFoundation.IID {
    .init(Data1: 0x652786A8, Data2: 0xF3AB, Data3: 0x4083, Data4: ( 0x99,0x1D,0x97,0x48,0xAA,0x86,0xBD,0x6F ))// 652786A8-F3AB-4083-991D-9748AA86BD6F
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute: WindowsFoundation.IID {
    .init(Data1: 0x652786A8, Data2: 0xF3AB, Data3: 0x4083, Data4: ( 0x99,0x1D,0x97,0x48,0xAA,0x86,0xBD,0x70 ))// 652786A8-F3AB-4083-991D-9748AA86BD70
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement: WindowsFoundation.IID {
    .init(Data1: 0x652786A8, Data2: 0xF3AB, Data3: 0x4083, Data4: ( 0x99,0x1D,0x97,0x48,0xAA,0x86,0xBD,0x6D ))// 652786A8-F3AB-4083-991D-9748AA86BD6D
}

public enum __ABI_Microsoft_Graphics_Canvas_Svg {
    public class ICanvasSvgAttribute: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute }

        open func CloneImpl() throws -> Win2D.AnyICanvasSvgAttribute? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Clone(pThis, &resultAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttributeWrapper.unwrapFrom(abi: result)
        }

        open func GetElementImpl() throws -> Win2D.CanvasSvgNamedElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    internal static var ICanvasSvgAttributeVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttributeVtbl = .init(
        QueryInterface: { ICanvasSvgAttributeWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasSvgAttributeWrapper.addRef($0) },
        Release: { ICanvasSvgAttributeWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttributeWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Clone: {
            do {
                guard let __unwrapped__instance = ICanvasSvgAttributeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.clone()
                let resultWrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttributeWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetElement: {
            do {
                guard let __unwrapped__instance = ICanvasSvgAttributeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getElement()
                value?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_Device: {
            guard let __unwrapped__instance = ICanvasSvgAttributeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.device
            value?.copyTo($1)
            return S_OK
        }
    )

    public typealias ICanvasSvgAttributeWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttributeBridge>
    public class ICanvasSvgDocument: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument }

        internal func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetXmlImpl() throws -> String {
            var xmlString: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetXml(pThis, &xmlString))
            }
            return .init(from: xmlString)
        }

        internal func SaveAsyncImpl(_ stream: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncAction) = try ComPtrs.initialize { asyncActionAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveAsync(pThis, _stream, &asyncActionAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncAction)
        }

        internal func put_RootImpl(_ value: Win2D.CanvasSvgNamedElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Root(pThis, RawPointer(value)))
            }
        }

        internal func get_RootImpl() throws -> Win2D.CanvasSvgNamedElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Root(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func FindElementByIdImpl(_ id: String) throws -> Win2D.CanvasSvgNamedElement? {
            let (element) = try ComPtrs.initialize { elementAbi in
                let _id = try! HString(id)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindElementById(pThis, _id.get(), &elementAbi))
                }
            }
            return .from(abi: element)
        }

        internal func CreatePaintAttributeWithDefaultsImpl() throws -> Win2D.CanvasSvgPaintAttribute? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePaintAttributeWithDefaults(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreatePaintAttributeImpl(_ paintType: Win2D.CanvasSvgPaintType, _ color: UWP.Color, _ id: String) throws -> Win2D.CanvasSvgPaintAttribute? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _id = try! HString(id)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePaintAttribute(pThis, paintType, .from(swift: color), _id.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreatePathAttributeWithDefaultsImpl() throws -> Win2D.CanvasSvgPathAttribute? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePathAttributeWithDefaults(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreatePointsAttributeWithDefaultsImpl() throws -> Win2D.CanvasSvgPointsAttribute? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePointsAttributeWithDefaults(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateStrokeDashArrayAttributeWithDefaultsImpl() throws -> Win2D.CanvasSvgStrokeDashArrayAttribute? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateStrokeDashArrayAttributeWithDefaults(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func LoadElementFromXmlImpl(_ xmlString: String) throws -> Win2D.CanvasSvgNamedElement? {
            let (svgElement) = try ComPtrs.initialize { svgElementAbi in
                let _xmlString = try! HString(xmlString)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadElementFromXml(pThis, _xmlString.get(), &svgElementAbi))
                }
            }
            return .from(abi: svgElement)
        }

        internal func LoadElementAsyncImpl(_ stream: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasSvgNamedElement?>? {
            let (svgElement) = try ComPtrs.initialize { svgElementAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadElementAsync(pThis, _stream, &svgElementAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.unwrapFrom(abi: svgElement)
        }

    }

    public class ICanvasSvgDocumentFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory }

        internal func CreateEmptyImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?) throws -> ICanvasSvgDocument {
            let (canvasSvgDocument) = try ComPtrs.initialize { canvasSvgDocumentAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEmpty(pThis, _resourceCreator, &canvasSvgDocumentAbi))
                }
            }
            return ICanvasSvgDocument(canvasSvgDocument!)
        }

    }

    public class ICanvasSvgDocumentStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics }

        internal func LoadFromXmlImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ xmlString: String) throws -> Win2D.CanvasSvgDocument? {
            let (svgDocument) = try ComPtrs.initialize { svgDocumentAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let _xmlString = try! HString(xmlString)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromXml(pThis, _resourceCreator, _xmlString.get(), &svgDocumentAbi))
                }
            }
            return .from(abi: svgDocument)
        }

        internal func LoadAsyncImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ stream: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasSvgDocument?>? {
            let (svgDocument) = try ComPtrs.initialize { svgDocumentAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsync(pThis, _resourceCreator, _stream, &svgDocumentAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.unwrapFrom(abi: svgDocument)
        }

        internal func IsSupportedImpl(_ device: Win2D.CanvasDevice?) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupported(pThis, RawPointer(device), &value))
            }
            return .init(from: value)
        }

    }

    public class ICanvasSvgElement: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement }

        open func get_ContainingDocumentImpl() throws -> Win2D.CanvasSvgDocument? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainingDocument(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func get_ParentImpl() throws -> Win2D.CanvasSvgNamedElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parent(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    internal static var ICanvasSvgElementVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElementVtbl = .init(
        QueryInterface: { ICanvasSvgElementWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasSvgElementWrapper.addRef($0) },
        Release: { ICanvasSvgElementWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_ContainingDocument: {
            guard let __unwrapped__instance = ICanvasSvgElementWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.containingDocument
            value?.copyTo($1)
            return S_OK
        },

        get_Parent: {
            guard let __unwrapped__instance = ICanvasSvgElementWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.parent
            value?.copyTo($1)
            return S_OK
        },

        get_Device: {
            guard let __unwrapped__instance = ICanvasSvgElementWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.device
            value?.copyTo($1)
            return S_OK
        }
    )

    public typealias ICanvasSvgElementWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementBridge>
    public class ICanvasSvgNamedElement: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement }

        internal func AppendChildImpl(_ child: Win2D.AnyICanvasSvgElement?) throws {
            let childWrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper(child)
            let _child = try! childWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AppendChild(pThis, _child))
            }
        }

        internal func CreateAndAppendNamedChildElementImpl(_ childName: String) throws -> Win2D.CanvasSvgNamedElement? {
            let (childElement) = try ComPtrs.initialize { childElementAbi in
                let _childName = try! HString(childName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAndAppendNamedChildElement(pThis, _childName.get(), &childElementAbi))
                }
            }
            return .from(abi: childElement)
        }

        internal func CreateAndAppendTextChildElementImpl(_ textContent: String) throws -> Win2D.CanvasSvgTextElement? {
            let (childElement) = try ComPtrs.initialize { childElementAbi in
                let _textContent = try! HString(textContent)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAndAppendTextChildElement(pThis, _textContent.get(), &childElementAbi))
                }
            }
            return .from(abi: childElement)
        }

        internal func get_FirstChildImpl() throws -> Win2D.AnyICanvasSvgElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FirstChild(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper.unwrapFrom(abi: value)
        }

        internal func get_LastChildImpl() throws -> Win2D.AnyICanvasSvgElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastChild(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper.unwrapFrom(abi: value)
        }

        internal func GetPreviousSiblingImpl(_ child: Win2D.AnyICanvasSvgElement?) throws -> Win2D.AnyICanvasSvgElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let childWrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper(child)
                let _child = try! childWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPreviousSibling(pThis, _child, &valueAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper.unwrapFrom(abi: value)
        }

        internal func GetNextSiblingImpl(_ child: Win2D.AnyICanvasSvgElement?) throws -> Win2D.AnyICanvasSvgElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let childWrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper(child)
                let _child = try! childWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNextSibling(pThis, _child, &valueAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper.unwrapFrom(abi: value)
        }

        internal func get_TagImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tag(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HasChildrenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasChildren(pThis, &value))
            }
            return .init(from: value)
        }

        internal func InsertChildBeforeImpl(_ child: Win2D.AnyICanvasSvgElement?, _ referenceChild: Win2D.AnyICanvasSvgElement?) throws {
            let childWrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper(child)
            let _child = try! childWrapper?.toABI { $0 }
            let referenceChildWrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper(referenceChild)
            let _referenceChild = try! referenceChildWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InsertChildBefore(pThis, _child, _referenceChild))
            }
        }

        internal func IsAttributeSpecifiedImpl(_ attributeName: String) throws -> Bool {
            var value: boolean = 0
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsAttributeSpecified(pThis, _attributeName.get(), &value))
            }
            return .init(from: value)
        }

        internal func IsAttributeSpecifiedWithInherhitedImpl(_ attributeName: String, _ inherited: Bool) throws -> Bool {
            var value: boolean = 0
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsAttributeSpecifiedWithInherhited(pThis, _attributeName.get(), .init(from: inherited), &value))
            }
            return .init(from: value)
        }

        internal func RemoveAttributeImpl(_ attributeName: String) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAttribute(pThis, _attributeName.get()))
            }
        }

        internal func RemoveChildImpl(_ child: Win2D.AnyICanvasSvgElement?) throws {
            let childWrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper(child)
            let _child = try! childWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveChild(pThis, _child))
            }
        }

        internal func ReplaceChildImpl(_ newChild: Win2D.AnyICanvasSvgElement?, _ oldChild: Win2D.AnyICanvasSvgElement?) throws {
            let newChildWrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper(newChild)
            let _newChild = try! newChildWrapper?.toABI { $0 }
            let oldChildWrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper(oldChild)
            let _oldChild = try! oldChildWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceChild(pThis, _newChild, _oldChild))
            }
        }

        internal func SetStringAttributeImpl(_ attributeName: String, _ attributeValue: String) throws {
            let _attributeName = try! HString(attributeName)
            let _attributeValue = try! HString(attributeValue)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetStringAttribute(pThis, _attributeName.get(), _attributeValue.get()))
            }
        }

        internal func GetStringAttributeImpl(_ attributeName: String) throws -> String {
            var attributeValue: HSTRING?
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetStringAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return .init(from: attributeValue)
        }

        internal func SetAttributeImpl(_ attributeName: String, _ attributeValue: Win2D.AnyICanvasSvgAttribute?) throws {
            let _attributeName = try! HString(attributeName)
            let attributeValueWrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttributeWrapper(attributeValue)
            let _attributeValue = try! attributeValueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAttribute(pThis, _attributeName.get(), _attributeValue))
            }
        }

        internal func GetAttributeImpl(_ attributeName: String) throws -> Win2D.AnyICanvasSvgAttribute? {
            let (attributeValue) = try ComPtrs.initialize { attributeValueAbi in
                let _attributeName = try! HString(attributeName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAttribute(pThis, _attributeName.get(), &attributeValueAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttributeWrapper.unwrapFrom(abi: attributeValue)
        }

        internal func SetIdAttributeImpl(_ attributeName: String, _ attributeValue: String) throws {
            let _attributeName = try! HString(attributeName)
            let _attributeValue = try! HString(attributeValue)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIdAttribute(pThis, _attributeName.get(), _attributeValue.get()))
            }
        }

        internal func GetIdAttributeImpl(_ attributeName: String) throws -> String {
            var attributeValue: HSTRING?
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIdAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return .init(from: attributeValue)
        }

        internal func SetFloatAttributeImpl(_ attributeName: String, _ attributeValue: Float) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFloatAttribute(pThis, _attributeName.get(), attributeValue))
            }
        }

        internal func GetFloatAttributeImpl(_ attributeName: String) throws -> Float {
            var attributeValue: FLOAT = 0.0
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFloatAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return attributeValue
        }

        internal func SetColorAttributeImpl(_ attributeName: String, _ attributeValue: UWP.Color) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetColorAttribute(pThis, _attributeName.get(), .from(swift: attributeValue)))
            }
        }

        internal func GetColorAttributeImpl(_ attributeName: String) throws -> UWP.Color {
            var attributeValue: __x_ABI_CWindows_CUI_CColor = .init()
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetColorAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return .from(abi: attributeValue)
        }

        internal func SetFilledRegionDeterminationAttributeImpl(_ attributeName: String, _ attributeValue: Win2D.CanvasFilledRegionDetermination) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFilledRegionDeterminationAttribute(pThis, _attributeName.get(), attributeValue))
            }
        }

        internal func GetFilledRegionDeterminationAttributeImpl(_ attributeName: String) throws -> Win2D.CanvasFilledRegionDetermination {
            var attributeValue: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination = .init(0)
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilledRegionDeterminationAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return attributeValue
        }

        internal func SetDisplayAttributeImpl(_ attributeName: String, _ attributeValue: Win2D.CanvasSvgDisplay) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDisplayAttribute(pThis, _attributeName.get(), attributeValue))
            }
        }

        internal func GetDisplayAttributeImpl(_ attributeName: String) throws -> Win2D.CanvasSvgDisplay {
            var attributeValue: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay = .init(0)
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDisplayAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return attributeValue
        }

        internal func SetOverflowAttributeImpl(_ attributeName: String, _ attributeValue: Win2D.CanvasSvgOverflow) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetOverflowAttribute(pThis, _attributeName.get(), attributeValue))
            }
        }

        internal func GetOverflowAttributeImpl(_ attributeName: String) throws -> Win2D.CanvasSvgOverflow {
            var attributeValue: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow = .init(0)
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetOverflowAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return attributeValue
        }

        internal func SetCapStyleAttributeImpl(_ attributeName: String, _ attributeValue: Win2D.CanvasCapStyle) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetCapStyleAttribute(pThis, _attributeName.get(), attributeValue))
            }
        }

        internal func GetCapStyleAttributeImpl(_ attributeName: String) throws -> Win2D.CanvasCapStyle {
            var attributeValue: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle = .init(0)
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCapStyleAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return attributeValue
        }

        internal func SetLineJoinAttributeImpl(_ attributeName: String, _ attributeValue: Win2D.CanvasLineJoin) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetLineJoinAttribute(pThis, _attributeName.get(), attributeValue))
            }
        }

        internal func GetLineJoinAttributeImpl(_ attributeName: String) throws -> Win2D.CanvasLineJoin {
            var attributeValue: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin = .init(0)
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLineJoinAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return attributeValue
        }

        internal func SetVisibilityAttributeImpl(_ attributeName: String, _ attributeValue: Win2D.CanvasSvgVisibility) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetVisibilityAttribute(pThis, _attributeName.get(), attributeValue))
            }
        }

        internal func GetVisibilityAttributeImpl(_ attributeName: String) throws -> Win2D.CanvasSvgVisibility {
            var attributeValue: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility = .init(0)
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetVisibilityAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return attributeValue
        }

        internal func SetTransformAttributeImpl(_ attributeName: String, _ attributeValue: WindowsFoundation.Matrix3x2) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTransformAttribute(pThis, _attributeName.get(), .from(swift: attributeValue)))
            }
        }

        internal func GetTransformAttributeImpl(_ attributeName: String) throws -> WindowsFoundation.Matrix3x2 {
            var attributeValue: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 = .init()
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTransformAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return .from(abi: attributeValue)
        }

        internal func SetUnitsAttributeImpl(_ attributeName: String, _ attributeValue: Win2D.CanvasSvgUnits) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetUnitsAttribute(pThis, _attributeName.get(), attributeValue))
            }
        }

        internal func GetUnitsAttributeImpl(_ attributeName: String) throws -> Win2D.CanvasSvgUnits {
            var attributeValue: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits = .init(0)
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUnitsAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return attributeValue
        }

        internal func SetEdgeBehaviorAttributeImpl(_ attributeName: String, _ attributeValue: Win2D.CanvasEdgeBehavior) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetEdgeBehaviorAttribute(pThis, _attributeName.get(), attributeValue))
            }
        }

        internal func GetEdgeBehaviorAttributeImpl(_ attributeName: String) throws -> Win2D.CanvasEdgeBehavior {
            var attributeValue: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = .init(0)
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetEdgeBehaviorAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return attributeValue
        }

        internal func SetRectangleAttributeImpl(_ attributeName: String, _ attributeValue: WindowsFoundation.Rect) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetRectangleAttribute(pThis, _attributeName.get(), .from(swift: attributeValue)))
            }
        }

        internal func GetRectangleAttributeImpl(_ attributeName: String) throws -> WindowsFoundation.Rect {
            var attributeValue: __x_ABI_CWindows_CFoundation_CRect = .init()
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRectangleAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return .from(abi: attributeValue)
        }

        internal func SetLengthAttributeImpl(_ attributeName: String, _ value: Float, _ units: Win2D.CanvasSvgLengthUnits) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetLengthAttribute(pThis, _attributeName.get(), value, units))
            }
        }

        internal func GetLengthAttributeImpl(_ attributeName: String, _ units: inout Win2D.CanvasSvgLengthUnits) throws -> Float {
            var value: FLOAT = 0.0
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLengthAttribute(pThis, _attributeName.get(), &units, &value))
            }
            return value
        }

        internal func SetAspectRatioAttributeImpl(_ attributeName: String, _ alignment: Win2D.CanvasSvgAspectAlignment, _ meetOrSlice: Win2D.CanvasSvgAspectScaling) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAspectRatioAttribute(pThis, _attributeName.get(), alignment, meetOrSlice))
            }
        }

        internal func GetAspectRatioAttributeImpl(_ attributeName: String, _ meetOrSlice: inout Win2D.CanvasSvgAspectScaling) throws -> Win2D.CanvasSvgAspectAlignment {
            var alignment: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment = .init(0)
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAspectRatioAttribute(pThis, _attributeName.get(), &meetOrSlice, &alignment))
            }
            return alignment
        }

    }

    public class ICanvasSvgPaintAttribute: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute }

        internal func put_PaintTypeImpl(_ value: Win2D.CanvasSvgPaintType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaintType(pThis, value))
            }
        }

        internal func get_PaintTypeImpl() throws -> Win2D.CanvasSvgPaintType {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaintType(pThis, &value))
            }
            return value
        }

        internal func put_ColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, .from(swift: value)))
            }
        }

        internal func get_ColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_IdImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, _value.get()))
            }
        }

        internal func get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICanvasSvgPathAttribute: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute }

        internal func CreatePathGeometryImpl() throws -> Win2D.CanvasGeometry? {
            let (outputGeometry) = try ComPtrs.initialize { outputGeometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePathGeometry(pThis, &outputGeometryAbi))
                }
            }
            return .from(abi: outputGeometry)
        }

        internal func CreatePathGeometryWithFillImpl(_ fill: Win2D.CanvasFilledRegionDetermination) throws -> Win2D.CanvasGeometry? {
            let (outputGeometry) = try ComPtrs.initialize { outputGeometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePathGeometryWithFill(pThis, fill, &outputGeometryAbi))
                }
            }
            return .from(abi: outputGeometry)
        }

        internal func RemoveCommandsAtEndImpl(_ commandsCount: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveCommandsAtEnd(pThis, commandsCount))
            }
        }

        internal func RemoveSegmentDataAtEndImpl(_ commandsCount: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveSegmentDataAtEnd(pThis, commandsCount))
            }
        }

    }

    public class ICanvasSvgPointsAttribute: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute }

        internal func RemovePointsAtEndImpl(_ pointCount: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemovePointsAtEnd(pThis, pointCount))
            }
        }

    }

    public class ICanvasSvgStrokeDashArrayAttribute: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute }

        internal func RemoveDashesAtEndImpl(_ dashCount: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveDashesAtEnd(pThis, dashCount))
            }
        }

    }

    public class ICanvasSvgTextElement: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement }

        internal func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

    }

}

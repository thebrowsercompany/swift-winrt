// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry: WindowsFoundation.IID {
    .init(Data1: 0xBA6CB114, Data2: 0xE1A1, Data3: 0x448D, Data4: ( 0xAB,0x7C,0x8D,0x2B,0x92,0x67,0x41,0x19 ))// BA6CB114-E1A1-448D-AB7C-8D2B92674119
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics: WindowsFoundation.IID {
    .init(Data1: 0x80BA1060, Data2: 0xA9D7, Data3: 0x41BA, Data4: ( 0x93,0x72,0xEC,0x3F,0xC1,0x74,0x4E,0x5D ))// 80BA1060-A9D7-41BA-9372-EC3FC1744E5D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry: WindowsFoundation.IID {
    .init(Data1: 0x74EA89FA, Data2: 0xC87C, Data3: 0x4D0D, Data4: ( 0x90,0x57,0x27,0x43,0xB8,0xDB,0x67,0xEE ))// 74EA89FA-C87C-4D0D-9057-2743B8DB67EE
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics: WindowsFoundation.IID {
    .init(Data1: 0xD94E33CF, Data2: 0xCD59, Data3: 0x46F2, Data4: ( 0x8D,0xF4,0x55,0x06,0x6A,0xAB,0xFD,0x56 ))// D94E33CF-CD59-46F2-8DF4-55066AABFD56
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh: WindowsFoundation.IID {
    .init(Data1: 0x6BFC2BF1, Data2: 0x0A7A, Data3: 0x449C, Data4: ( 0xA7,0xEF,0x67,0x06,0x32,0x1B,0x0C,0x1A ))// 6BFC2BF1-0A7A-449C-A7EF-6706321B0C1A
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory: WindowsFoundation.IID {
    .init(Data1: 0x4756492D, Data2: 0x251E, Data3: 0x421D, Data4: ( 0x83,0x4D,0x87,0xEC,0x26,0x0D,0x5E,0x4D ))// 4756492D-251E-421D-834D-87EC260D5E4D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics: WindowsFoundation.IID {
    .init(Data1: 0x44027640, Data2: 0x3EAB, Data3: 0x4199, Data4: ( 0xAA,0x3B,0x64,0x48,0x90,0xD0,0x12,0x3D ))// 44027640-3EAB-4199-AA3B-644890D0123D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder: WindowsFoundation.IID {
    .init(Data1: 0xBCF5822F, Data2: 0x8127, Data3: 0x4E5C, Data4: ( 0x96,0xB8,0x29,0x98,0x3B,0x91,0x55,0x41 ))// BCF5822F-8127-4E5C-96B8-29983B915541
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory: WindowsFoundation.IID {
    .init(Data1: 0xAC2BEE14, Data2: 0xEFD1, Data3: 0x4343, Data4: ( 0x8E,0x53,0xBA,0x62,0x15,0x3D,0x89,0x66 ))// AC2BEE14-EFD1-4343-8E53-BA62153D8966
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver: WindowsFoundation.IID {
    .init(Data1: 0x70E65373, Data2: 0x7FB3, Data3: 0x4645, Data4: ( 0x8B,0x6D,0xF6,0x16,0xD1,0xB9,0xA9,0xD7 ))// 70E65373-7FB3-4645-8B6D-F616D1B9A9D7
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle: WindowsFoundation.IID {
    .init(Data1: 0xFD3E1CD2, Data2: 0x6019, Data3: 0x40A1, Data4: ( 0xB3,0x15,0x26,0x7E,0xEF,0x6C,0x2A,0xEB ))// FD3E1CD2-6019-40A1-B315-267EEF6C2AEB
}

public enum __ABI_Microsoft_Graphics_Canvas_Geometry {
    public class ICanvasCachedGeometry: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry }

        internal func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICanvasCachedGeometryStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics }

        internal func CreateFillImpl(_ geometry: Win2D.CanvasGeometry?) throws -> Win2D.CanvasCachedGeometry? {
            let (cachedGeometry) = try ComPtrs.initialize { cachedGeometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFill(pThis, RawPointer(geometry), &cachedGeometryAbi))
                }
            }
            return .from(abi: cachedGeometry)
        }

        internal func CreateFillWithFlatteningToleranceImpl(_ geometry: Win2D.CanvasGeometry?, _ flatteningTolerance: Float) throws -> Win2D.CanvasCachedGeometry? {
            let (cachedGeometry) = try ComPtrs.initialize { cachedGeometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFillWithFlatteningTolerance(pThis, RawPointer(geometry), flatteningTolerance, &cachedGeometryAbi))
                }
            }
            return .from(abi: cachedGeometry)
        }

        internal func CreateStrokeImpl(_ geometry: Win2D.CanvasGeometry?, _ strokeWidth: Float) throws -> Win2D.CanvasCachedGeometry? {
            let (cachedGeometry) = try ComPtrs.initialize { cachedGeometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateStroke(pThis, RawPointer(geometry), strokeWidth, &cachedGeometryAbi))
                }
            }
            return .from(abi: cachedGeometry)
        }

        internal func CreateStrokeWithStrokeStyleImpl(_ geometry: Win2D.CanvasGeometry?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws -> Win2D.CanvasCachedGeometry? {
            let (cachedGeometry) = try ComPtrs.initialize { cachedGeometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateStrokeWithStrokeStyle(pThis, RawPointer(geometry), strokeWidth, RawPointer(strokeStyle), &cachedGeometryAbi))
                }
            }
            return .from(abi: cachedGeometry)
        }

        internal func CreateStrokeWithStrokeStyleAndFlatteningToleranceImpl(_ geometry: Win2D.CanvasGeometry?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?, _ flatteningTolerance: Float) throws -> Win2D.CanvasCachedGeometry? {
            let (cachedGeometry) = try ComPtrs.initialize { cachedGeometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateStrokeWithStrokeStyleAndFlatteningTolerance(pThis, RawPointer(geometry), strokeWidth, RawPointer(strokeStyle), flatteningTolerance, &cachedGeometryAbi))
                }
            }
            return .from(abi: cachedGeometry)
        }

    }

    public class ICanvasGeometry: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry }

        internal func CombineWithImpl(_ otherGeometry: Win2D.CanvasGeometry?, _ otherGeometryTransform: WindowsFoundation.Matrix3x2, _ combine: Win2D.CanvasGeometryCombine) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CombineWith(pThis, RawPointer(otherGeometry), .from(swift: otherGeometryTransform), combine, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CombineWithUsingFlatteningToleranceImpl(_ otherGeometry: Win2D.CanvasGeometry?, _ otherGeometryTransform: WindowsFoundation.Matrix3x2, _ combine: Win2D.CanvasGeometryCombine, _ flatteningTolerance: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CombineWithUsingFlatteningTolerance(pThis, RawPointer(otherGeometry), .from(swift: otherGeometryTransform), combine, flatteningTolerance, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func StrokeImpl(_ strokeWidth: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Stroke(pThis, strokeWidth, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func StrokeWithStrokeStyleImpl(_ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.StrokeWithStrokeStyle(pThis, strokeWidth, RawPointer(strokeStyle), &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func StrokeWithAllOptionsImpl(_ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.StrokeWithAllOptions(pThis, strokeWidth, RawPointer(strokeStyle), .from(swift: transform), flatteningTolerance, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func OutlineImpl() throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Outline(pThis, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func OutlineWithTransformAndFlatteningToleranceImpl(_ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OutlineWithTransformAndFlatteningTolerance(pThis, .from(swift: transform), flatteningTolerance, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func SimplifyImpl(_ simplification: Win2D.CanvasGeometrySimplification) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Simplify(pThis, simplification, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func SimplifyWithTransformAndFlatteningToleranceImpl(_ simplification: Win2D.CanvasGeometrySimplification, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SimplifyWithTransformAndFlatteningTolerance(pThis, simplification, .from(swift: transform), flatteningTolerance, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func TransformImpl(_ transform: WindowsFoundation.Matrix3x2) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Transform(pThis, .from(swift: transform), &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CompareWithImpl(_ otherGeometry: Win2D.CanvasGeometry?) throws -> Win2D.CanvasGeometryRelation {
            var relation: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompareWith(pThis, RawPointer(otherGeometry), &relation))
            }
            return relation
        }

        internal func CompareWithUsingTransformAndFlatteningToleranceImpl(_ otherGeometry: Win2D.CanvasGeometry?, _ otherGeometryTransform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Win2D.CanvasGeometryRelation {
            var relation: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompareWithUsingTransformAndFlatteningTolerance(pThis, RawPointer(otherGeometry), .from(swift: otherGeometryTransform), flatteningTolerance, &relation))
            }
            return relation
        }

        internal func ComputeAreaImpl() throws -> Float {
            var area: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputeArea(pThis, &area))
            }
            return area
        }

        internal func ComputeAreaWithTransformAndFlatteningToleranceImpl(_ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Float {
            var area: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputeAreaWithTransformAndFlatteningTolerance(pThis, .from(swift: transform), flatteningTolerance, &area))
            }
            return area
        }

        internal func ComputePathLengthImpl() throws -> Float {
            var length: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputePathLength(pThis, &length))
            }
            return length
        }

        internal func ComputePathLengthWithTransformAndFlatteningToleranceImpl(_ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Float {
            var length: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputePathLengthWithTransformAndFlatteningTolerance(pThis, .from(swift: transform), flatteningTolerance, &length))
            }
            return length
        }

        internal func ComputePointOnPathImpl(_ distance: Float) throws -> WindowsFoundation.Vector2 {
            var point: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputePointOnPath(pThis, distance, &point))
            }
            return .from(abi: point)
        }

        internal func ComputePointOnPathWithTangentImpl(_ distance: Float, _ tangent: inout WindowsFoundation.Vector2) throws -> WindowsFoundation.Vector2 {
            var point: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            var _tangent: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputePointOnPathWithTangent(pThis, distance, &_tangent, &point))
            }
            tangent = .from(abi: _tangent)
            return .from(abi: point)
        }

        internal func ComputePointOnPathWithTransformAndFlatteningToleranceAndTangentImpl(_ length: Float, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float, _ tangent: inout WindowsFoundation.Vector2) throws -> WindowsFoundation.Vector2 {
            var point: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            var _tangent: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(pThis, length, .from(swift: transform), flatteningTolerance, &_tangent, &point))
            }
            tangent = .from(abi: _tangent)
            return .from(abi: point)
        }

        internal func FillContainsPointImpl(_ point: WindowsFoundation.Vector2) throws -> Bool {
            var containsPoint: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillContainsPoint(pThis, .from(swift: point), &containsPoint))
            }
            return .init(from: containsPoint)
        }

        internal func FillContainsPointWithTransformAndFlatteningToleranceImpl(_ point: WindowsFoundation.Vector2, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Bool {
            var containsPoint: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillContainsPointWithTransformAndFlatteningTolerance(pThis, .from(swift: point), .from(swift: transform), flatteningTolerance, &containsPoint))
            }
            return .init(from: containsPoint)
        }

        internal func ComputeBoundsImpl() throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputeBounds(pThis, &bounds))
            }
            return .from(abi: bounds)
        }

        internal func ComputeBoundsWithTransformImpl(_ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputeBoundsWithTransform(pThis, .from(swift: transform), &bounds))
            }
            return .from(abi: bounds)
        }

        internal func ComputeStrokeBoundsImpl(_ strokeWidth: Float) throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputeStrokeBounds(pThis, strokeWidth, &bounds))
            }
            return .from(abi: bounds)
        }

        internal func ComputeStrokeBoundsWithStrokeStyleImpl(_ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputeStrokeBoundsWithStrokeStyle(pThis, strokeWidth, RawPointer(strokeStyle), &bounds))
            }
            return .from(abi: bounds)
        }

        internal func ComputeStrokeBoundsWithAllOptionsImpl(_ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputeStrokeBoundsWithAllOptions(pThis, strokeWidth, RawPointer(strokeStyle), .from(swift: transform), flatteningTolerance, &bounds))
            }
            return .from(abi: bounds)
        }

        internal func StrokeContainsPointImpl(_ point: WindowsFoundation.Vector2, _ strokeWidth: Float) throws -> Bool {
            var containsPoint: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StrokeContainsPoint(pThis, .from(swift: point), strokeWidth, &containsPoint))
            }
            return .init(from: containsPoint)
        }

        internal func StrokeContainsPointWithStrokeStyleImpl(_ point: WindowsFoundation.Vector2, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws -> Bool {
            var containsPoint: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StrokeContainsPointWithStrokeStyle(pThis, .from(swift: point), strokeWidth, RawPointer(strokeStyle), &containsPoint))
            }
            return .init(from: containsPoint)
        }

        internal func StrokeContainsPointWithAllOptionsImpl(_ point: WindowsFoundation.Vector2, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Bool {
            var containsPoint: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StrokeContainsPointWithAllOptions(pThis, .from(swift: point), strokeWidth, RawPointer(strokeStyle), .from(swift: transform), flatteningTolerance, &containsPoint))
            }
            return .init(from: containsPoint)
        }

        internal func SendPathToImpl(_ streamReader: Win2D.AnyICanvasPathReceiver?) throws {
            let streamReaderWrapper = __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasPathReceiverWrapper(streamReader)
            let _streamReader = try! streamReaderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SendPathTo(pThis, _streamReader))
            }
        }

        internal func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICanvasGeometryStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics }

        internal func CreateRectangleImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ rect: WindowsFoundation.Rect) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRectangle(pThis, _resourceCreator, .from(swift: rect), &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CreateRectangleAtCoordsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ x: Float, _ y: Float, _ w: Float, _ h: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRectangleAtCoords(pThis, _resourceCreator, x, y, w, h, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CreateRoundedRectangleImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRoundedRectangle(pThis, _resourceCreator, .from(swift: rect), radiusX, radiusY, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CreateRoundedRectangleAtCoordsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRoundedRectangleAtCoords(pThis, _resourceCreator, x, y, w, h, radiusX, radiusY, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CreateEllipseImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEllipse(pThis, _resourceCreator, .from(swift: centerPoint), radiusX, radiusY, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CreateEllipseAtCoordsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEllipseAtCoords(pThis, _resourceCreator, x, y, radiusX, radiusY, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CreateCircleImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ centerPoint: WindowsFoundation.Vector2, _ radius: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCircle(pThis, _resourceCreator, .from(swift: centerPoint), radius, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CreateCircleAtCoordsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ x: Float, _ y: Float, _ radius: Float) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCircleAtCoords(pThis, _resourceCreator, x, y, radius, &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CreatePathImpl(_ pathBuilder: Win2D.CanvasPathBuilder?) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePath(pThis, RawPointer(pathBuilder), &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func CreateTextImpl(_ textLayout: Win2D.CanvasTextLayout?) throws -> Win2D.CanvasGeometry? {
            let (geometry) = try ComPtrs.initialize { geometryAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateText(pThis, RawPointer(textLayout), &geometryAbi))
                }
            }
            return .from(abi: geometry)
        }

        internal func ComputeFlatteningToleranceImpl(_ dpi: Float, _ maximumZoomFactor: Float) throws -> Float {
            var flatteningTolerance: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputeFlatteningTolerance(pThis, dpi, maximumZoomFactor, &flatteningTolerance))
            }
            return flatteningTolerance
        }

        internal func ComputeFlatteningToleranceWithTransformImpl(_ dpi: Float, _ maximumZoomFactor: Float, _ expectedGeometryTransform: WindowsFoundation.Matrix3x2) throws -> Float {
            var flatteningTolerance: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ComputeFlatteningToleranceWithTransform(pThis, dpi, maximumZoomFactor, .from(swift: expectedGeometryTransform), &flatteningTolerance))
            }
            return flatteningTolerance
        }

        internal func get_DefaultFlatteningToleranceImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFlatteningTolerance(pThis, &value))
            }
            return value
        }

    }

    public class ICanvasGradientMesh: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh }

        internal func GetBoundsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?) throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
            let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBounds(pThis, _resourceCreator, &bounds))
            }
            return .from(abi: bounds)
        }

        internal func GetBoundsWithTransformImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
            let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBoundsWithTransform(pThis, _resourceCreator, .from(swift: transform), &bounds))
            }
            return .from(abi: bounds)
        }

        internal func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICanvasGradientMeshFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory }

    }

    public class ICanvasGradientMeshStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics }

    }

    public class ICanvasPathBuilder: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder }

        internal func BeginFigureWithFigureFillImpl(_ startPoint: WindowsFoundation.Vector2, _ figureFill: Win2D.CanvasFigureFill) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.BeginFigureWithFigureFill(pThis, .from(swift: startPoint), figureFill))
            }
        }

        internal func BeginFigureImpl(_ startPoint: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.BeginFigure(pThis, .from(swift: startPoint)))
            }
        }

        internal func BeginFigureAtCoordsWithFigureFillImpl(_ startX: Float, _ startY: Float, _ figureFill: Win2D.CanvasFigureFill) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.BeginFigureAtCoordsWithFigureFill(pThis, startX, startY, figureFill))
            }
        }

        internal func BeginFigureAtCoordsImpl(_ startX: Float, _ startY: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.BeginFigureAtCoords(pThis, startX, startY))
            }
        }

        internal func AddArcToPointImpl(_ endPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ rotationAngle: Float, _ sweepDirection: Win2D.CanvasSweepDirection, _ arcSize: Win2D.CanvasArcSize) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddArcToPoint(pThis, .from(swift: endPoint), radiusX, radiusY, rotationAngle, sweepDirection, arcSize))
            }
        }

        internal func AddArcAroundEllipseImpl(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ startAngle: Float, _ sweepAngle: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddArcAroundEllipse(pThis, .from(swift: centerPoint), radiusX, radiusY, startAngle, sweepAngle))
            }
        }

        internal func AddCubicBezierImpl(_ controlPoint1: WindowsFoundation.Vector2, _ controlPoint2: WindowsFoundation.Vector2, _ endPoint: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddCubicBezier(pThis, .from(swift: controlPoint1), .from(swift: controlPoint2), .from(swift: endPoint)))
            }
        }

        internal func AddLineImpl(_ endPoint: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddLine(pThis, .from(swift: endPoint)))
            }
        }

        internal func AddLineWithCoordsImpl(_ x: Float, _ y: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddLineWithCoords(pThis, x, y))
            }
        }

        internal func AddQuadraticBezierImpl(_ controlPoint: WindowsFoundation.Vector2, _ endPoint: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddQuadraticBezier(pThis, .from(swift: controlPoint), .from(swift: endPoint)))
            }
        }

        internal func SetFilledRegionDeterminationImpl(_ filledRegionDetermination: Win2D.CanvasFilledRegionDetermination) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFilledRegionDetermination(pThis, filledRegionDetermination))
            }
        }

        internal func SetSegmentOptionsImpl(_ figureSegmentOptions: Win2D.CanvasFigureSegmentOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetSegmentOptions(pThis, figureSegmentOptions))
            }
        }

        internal func EndFigureImpl(_ figureLoop: Win2D.CanvasFigureLoop) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EndFigure(pThis, figureLoop))
            }
        }

        internal func AddGeometryImpl(_ geometry: Win2D.CanvasGeometry?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddGeometry(pThis, RawPointer(geometry)))
            }
        }

    }

    public class ICanvasPathBuilderFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory }

        internal func CreateImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?) throws -> ICanvasPathBuilder {
            let (canvasPathBuilder) = try ComPtrs.initialize { canvasPathBuilderAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _resourceCreator, &canvasPathBuilderAbi))
                }
            }
            return ICanvasPathBuilder(canvasPathBuilder!)
        }

    }

    public class ICanvasPathReceiver: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver }

        open func BeginFigureImpl(_ startPoint: WindowsFoundation.Vector2, _ figureFill: Win2D.CanvasFigureFill) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.BeginFigure(pThis, .from(swift: startPoint), figureFill))
            }
        }

        open func AddArcImpl(_ endPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ rotationAngle: Float, _ sweepDirection: Win2D.CanvasSweepDirection, _ arcSize: Win2D.CanvasArcSize) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddArc(pThis, .from(swift: endPoint), radiusX, radiusY, rotationAngle, sweepDirection, arcSize))
            }
        }

        open func AddCubicBezierImpl(_ controlPoint1: WindowsFoundation.Vector2, _ controlPoint2: WindowsFoundation.Vector2, _ endPoint: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddCubicBezier(pThis, .from(swift: controlPoint1), .from(swift: controlPoint2), .from(swift: endPoint)))
            }
        }

        open func AddLineImpl(_ endPoint: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddLine(pThis, .from(swift: endPoint)))
            }
        }

        open func AddQuadraticBezierImpl(_ controlPoint: WindowsFoundation.Vector2, _ endPoint: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddQuadraticBezier(pThis, .from(swift: controlPoint), .from(swift: endPoint)))
            }
        }

        open func SetFilledRegionDeterminationImpl(_ filledRegionDetermination: Win2D.CanvasFilledRegionDetermination) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFilledRegionDetermination(pThis, filledRegionDetermination))
            }
        }

        open func SetSegmentOptionsImpl(_ figureSegmentOptions: Win2D.CanvasFigureSegmentOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetSegmentOptions(pThis, figureSegmentOptions))
            }
        }

        open func EndFigureImpl(_ figureLoop: Win2D.CanvasFigureLoop) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EndFigure(pThis, figureLoop))
            }
        }

    }

    internal static var ICanvasPathReceiverVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiverVtbl = .init(
        QueryInterface: { ICanvasPathReceiverWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasPathReceiverWrapper.addRef($0) },
        Release: { ICanvasPathReceiverWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasPathReceiverWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        BeginFigure: {
            do {
                guard let __unwrapped__instance = ICanvasPathReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let startPoint: WindowsFoundation.Vector2 = .from(abi: $1)
                let figureFill: Win2D.CanvasFigureFill = $2
                try __unwrapped__instance.beginFigure(startPoint, figureFill)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        AddArc: {
            do {
                guard let __unwrapped__instance = ICanvasPathReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let endPoint: WindowsFoundation.Vector2 = .from(abi: $1)
                let radiusX: Float = $2
                let radiusY: Float = $3
                let rotationAngle: Float = $4
                let sweepDirection: Win2D.CanvasSweepDirection = $5
                let arcSize: Win2D.CanvasArcSize = $6
                try __unwrapped__instance.addArc(endPoint, radiusX, radiusY, rotationAngle, sweepDirection, arcSize)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        AddCubicBezier: {
            do {
                guard let __unwrapped__instance = ICanvasPathReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let controlPoint1: WindowsFoundation.Vector2 = .from(abi: $1)
                let controlPoint2: WindowsFoundation.Vector2 = .from(abi: $2)
                let endPoint: WindowsFoundation.Vector2 = .from(abi: $3)
                try __unwrapped__instance.addCubicBezier(controlPoint1, controlPoint2, endPoint)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        AddLine: {
            do {
                guard let __unwrapped__instance = ICanvasPathReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let endPoint: WindowsFoundation.Vector2 = .from(abi: $1)
                try __unwrapped__instance.addLine(endPoint)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        AddQuadraticBezier: {
            do {
                guard let __unwrapped__instance = ICanvasPathReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let controlPoint: WindowsFoundation.Vector2 = .from(abi: $1)
                let endPoint: WindowsFoundation.Vector2 = .from(abi: $2)
                try __unwrapped__instance.addQuadraticBezier(controlPoint, endPoint)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetFilledRegionDetermination: {
            do {
                guard let __unwrapped__instance = ICanvasPathReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let filledRegionDetermination: Win2D.CanvasFilledRegionDetermination = $1
                try __unwrapped__instance.setFilledRegionDetermination(filledRegionDetermination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetSegmentOptions: {
            do {
                guard let __unwrapped__instance = ICanvasPathReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let figureSegmentOptions: Win2D.CanvasFigureSegmentOptions = $1
                try __unwrapped__instance.setSegmentOptions(figureSegmentOptions)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        EndFigure: {
            do {
                guard let __unwrapped__instance = ICanvasPathReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let figureLoop: Win2D.CanvasFigureLoop = $1
                try __unwrapped__instance.endFigure(figureLoop)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ICanvasPathReceiverWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Geometry.ICanvasPathReceiverBridge>
    public class ICanvasStrokeStyle: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle }

        internal func get_StartCapImpl() throws -> Win2D.CanvasCapStyle {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartCap(pThis, &value))
            }
            return value
        }

        internal func put_StartCapImpl(_ value: Win2D.CanvasCapStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartCap(pThis, value))
            }
        }

        internal func get_EndCapImpl() throws -> Win2D.CanvasCapStyle {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndCap(pThis, &value))
            }
            return value
        }

        internal func put_EndCapImpl(_ value: Win2D.CanvasCapStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EndCap(pThis, value))
            }
        }

        internal func get_DashCapImpl() throws -> Win2D.CanvasCapStyle {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DashCap(pThis, &value))
            }
            return value
        }

        internal func put_DashCapImpl(_ value: Win2D.CanvasCapStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DashCap(pThis, value))
            }
        }

        internal func get_LineJoinImpl() throws -> Win2D.CanvasLineJoin {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineJoin(pThis, &value))
            }
            return value
        }

        internal func put_LineJoinImpl(_ value: Win2D.CanvasLineJoin) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineJoin(pThis, value))
            }
        }

        internal func get_MiterLimitImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MiterLimit(pThis, &value))
            }
            return value
        }

        internal func put_MiterLimitImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MiterLimit(pThis, value))
            }
        }

        internal func get_DashStyleImpl() throws -> Win2D.CanvasDashStyle {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DashStyle(pThis, &value))
            }
            return value
        }

        internal func put_DashStyleImpl(_ value: Win2D.CanvasDashStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DashStyle(pThis, value))
            }
        }

        internal func get_DashOffsetImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DashOffset(pThis, &value))
            }
            return value
        }

        internal func put_DashOffsetImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DashOffset(pThis, value))
            }
        }

        internal func get_TransformBehaviorImpl() throws -> Win2D.CanvasStrokeTransformBehavior {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransformBehavior(pThis, &value))
            }
            return value
        }

        internal func put_TransformBehaviorImpl(_ value: Win2D.CanvasStrokeTransformBehavior) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransformBehavior(pThis, value))
            }
        }

    }

}
extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch {
        public static func from(swift: Win2D.CanvasGradientMeshPatch) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch {
            .init(Point00: .from(swift: swift.point00), Point01: .from(swift: swift.point01), Point02: .from(swift: swift.point02), Point03: .from(swift: swift.point03), Point10: .from(swift: swift.point10), Point11: .from(swift: swift.point11), Point12: .from(swift: swift.point12), Point13: .from(swift: swift.point13), Point20: .from(swift: swift.point20), Point21: .from(swift: swift.point21), Point22: .from(swift: swift.point22), Point23: .from(swift: swift.point23), Point30: .from(swift: swift.point30), Point31: .from(swift: swift.point31), Point32: .from(swift: swift.point32), Point33: .from(swift: swift.point33), Color00: .from(swift: swift.color00), Color03: .from(swift: swift.color03), Color30: .from(swift: swift.color30), Color33: .from(swift: swift.color33), Edge00To03: swift.edge00To03, Edge03To33: swift.edge03To33, Edge33To30: swift.edge33To30, Edge30To00: swift.edge30To00)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices {
        public static func from(swift: Win2D.CanvasTriangleVertices) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices {
            .init(Vertex1: .from(swift: swift.vertex1), Vertex2: .from(swift: swift.vertex2), Vertex3: .from(swift: swift.vertex3))
        }
    }
    
// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasclusterproperties)
public typealias CanvasClusterProperties = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasdrawtextoptions)
public typealias CanvasDrawTextOptions = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontfileformattype)
public typealias CanvasFontFileFormatType = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontinformation)
public typealias CanvasFontInformation = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontsimulations)
public typealias CanvasFontSimulations = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyphorientation)
public typealias CanvasGlyphOrientation = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvashorizontalalignment)
public typealias CanvasHorizontalAlignment = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinebreakcondition)
public typealias CanvasLineBreakCondition = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinespacingmode)
public typealias CanvasLineSpacingMode = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasopticalalignment)
public typealias CanvasOpticalAlignment = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasscriptshape)
public typealias CanvasScriptShape = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextantialiasing)
public typealias CanvasTextAntialiasing = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextdirection)
public typealias CanvasTextDirection = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextgridfit)
public typealias CanvasTextGridFit = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextmeasuringmode)
public typealias CanvasTextMeasuringMode = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextrenderingmode)
public typealias CanvasTextRenderingMode = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastexttrimminggranularity)
public typealias CanvasTextTrimmingGranularity = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastrimmingsign)
public typealias CanvasTrimmingSign = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastypographyfeaturename)
public typealias CanvasTypographyFeatureName = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasverticalalignment)
public typealias CanvasVerticalAlignment = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasverticalglyphorientation)
public typealias CanvasVerticalGlyphOrientation = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaswordwrapping)
public typealias CanvasWordWrapping = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface)
public final class CanvasFontFace : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasFontFace
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>?) -> CanvasFontFace? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.getrecommendedrenderingmode)
    public func getRecommendedRenderingMode(_ fontSize: Float, _ dpi: Float, _ measuringMode: CanvasTextMeasuringMode, _ renderingParameters: CanvasTextRenderingParameters!) throws -> CanvasTextRenderingMode {
        try _default.GetRecommendedRenderingModeImpl(fontSize, dpi, measuringMode, renderingParameters)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.getrecommendedrenderingmode)
    public func getRecommendedRenderingMode(_ fontSize: Float, _ dpi: Float, _ measuringMode: CanvasTextMeasuringMode, _ renderingParameters: CanvasTextRenderingParameters!, _ transform: WindowsFoundation.Matrix3x2, _ isSideways: Bool, _ outlineThreshold: Win2D.CanvasAntialiasing) throws -> CanvasTextRenderingMode {
        try _default.GetRecommendedRenderingModeWithAllOptionsImpl(fontSize, dpi, measuringMode, renderingParameters, transform, isSideways, outlineThreshold)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.getrecommendedgridfit)
    public func getRecommendedGridFit(_ fontSize: Float, _ dpi: Float, _ measuringMode: CanvasTextMeasuringMode, _ renderingParameters: CanvasTextRenderingParameters!, _ transform: WindowsFoundation.Matrix3x2, _ isSideways: Bool, _ outlineThreshold: Win2D.CanvasAntialiasing) throws -> CanvasTextGridFit {
        try _default.GetRecommendedGridFitImpl(fontSize, dpi, measuringMode, renderingParameters, transform, isSideways, outlineThreshold)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.getinformationalstrings)
    public func getInformationalStrings(_ fontInformation: CanvasFontInformation) throws -> WindowsFoundation.AnyIMapView<String, String>! {
        try _default.GetInformationalStringsImpl(fontInformation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.hascharacter)
    public func hasCharacter(_ unicodeValue: UInt32) throws -> Bool {
        try _default.HasCharacterImpl(unicodeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.ascent)
    public var ascent : Float {
        get { try! _default.get_AscentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.capheight)
    public var capHeight : Float {
        get { try! _default.get_CapHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.caretoffset)
    public var caretOffset : Float {
        get { try! _default.get_CaretOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.caretsloperise)
    public var caretSlopeRise : Float {
        get { try! _default.get_CaretSlopeRiseImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.caretsloperun)
    public var caretSlopeRun : Float {
        get { try! _default.get_CaretSlopeRunImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.descent)
    public var descent : Float {
        get { try! _default.get_DescentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.facenames)
    public var faceNames : WindowsFoundation.AnyIMapView<String, String>! {
        get { try! _default.get_FaceNamesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.familynames)
    public var familyNames : WindowsFoundation.AnyIMapView<String, String>! {
        get { try! _default.get_FamilyNamesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.fileformattype)
    public var fileFormatType : CanvasFontFileFormatType {
        get { try! _default.get_FileFormatTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.glyphbox)
    public var glyphBox : WindowsFoundation.Rect {
        get { try! _default.get_GlyphBoxImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.glyphcount)
    public var glyphCount : UInt32 {
        get { try! _default.get_GlyphCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.hastypographicmetrics)
    public var hasTypographicMetrics : Bool {
        get { try! _default.get_HasTypographicMetricsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.hasverticalglyphvariants)
    public var hasVerticalGlyphVariants : Bool {
        get { try! _default.get_HasVerticalGlyphVariantsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.ismonospaced)
    public var isMonospaced : Bool {
        get { try! _default.get_IsMonospacedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.issymbolfont)
    public var isSymbolFont : Bool {
        get { try! _default.get_IsSymbolFontImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.linegap)
    public var lineGap : Float {
        get { try! _default.get_LineGapImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.lowercaseletterheight)
    public var lowercaseLetterHeight : Float {
        get { try! _default.get_LowercaseLetterHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.simulations)
    public var simulations : CanvasFontSimulations {
        get { try! _default.get_SimulationsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.stretch)
    public var stretch : UWP.FontStretch {
        get { try! _default.get_StretchImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.strikethroughposition)
    public var strikethroughPosition : Float {
        get { try! _default.get_StrikethroughPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.strikethroughthickness)
    public var strikethroughThickness : Float {
        get { try! _default.get_StrikethroughThicknessImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.style)
    public var style : UWP.FontStyle {
        get { try! _default.get_StyleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.subscriptposition)
    public var subscriptPosition : WindowsFoundation.Vector2 {
        get { try! _default.get_SubscriptPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.subscriptsize)
    public var subscriptSize : WindowsFoundation.Size {
        get { try! _default.get_SubscriptSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.superscriptposition)
    public var superscriptPosition : WindowsFoundation.Vector2 {
        get { try! _default.get_SuperscriptPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.superscriptsize)
    public var superscriptSize : WindowsFoundation.Size {
        get { try! _default.get_SuperscriptSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.underlineposition)
    public var underlinePosition : Float {
        get { try! _default.get_UnderlinePositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.underlinethickness)
    public var underlineThickness : Float {
        get { try! _default.get_UnderlineThicknessImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasfontface.weight)
    public var weight : UWP.FontWeight {
        get { try! _default.get_WeightImpl() }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat)
public final class CanvasTextFormat : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextFormat
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>?) -> CanvasTextFormat? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.Graphics.Canvas.Text.CanvasTextFormat")))
    }

    private static let _ICanvasTextFormatStatics: __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextFormatStatics = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.Text.CanvasTextFormat"))
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.customtrimmingsign)
    public var customTrimmingSign : AnyICanvasTextInlineObject! {
        get { try! _default.get_CustomTrimmingSignImpl() }
        set { try! _default.put_CustomTrimmingSignImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.direction)
    public var direction : CanvasTextDirection {
        get { try! _default.get_DirectionImpl() }
        set { try! _default.put_DirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.fontfamily)
    public var fontFamily : String {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.fontsize)
    public var fontSize : Float {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretchImpl() }
        set { try! _default.put_FontStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.horizontalalignment)
    public var horizontalAlignment : CanvasHorizontalAlignment {
        get { try! _default.get_HorizontalAlignmentImpl() }
        set { try! _default.put_HorizontalAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.incrementaltabstop)
    public var incrementalTabStop : Float {
        get { try! _default.get_IncrementalTabStopImpl() }
        set { try! _default.put_IncrementalTabStopImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.lastlinewrapping)
    public var lastLineWrapping : Bool {
        get { try! _default.get_LastLineWrappingImpl() }
        set { try! _default.put_LastLineWrappingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.linespacing)
    public var lineSpacing : Float {
        get { try! _default.get_LineSpacingImpl() }
        set { try! _default.put_LineSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.linespacingbaseline)
    public var lineSpacingBaseline : Float {
        get { try! _default.get_LineSpacingBaselineImpl() }
        set { try! _default.put_LineSpacingBaselineImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.linespacingmode)
    public var lineSpacingMode : CanvasLineSpacingMode {
        get { try! _default.get_LineSpacingModeImpl() }
        set { try! _default.put_LineSpacingModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.localename)
    public var localeName : String {
        get { try! _default.get_LocaleNameImpl() }
        set { try! _default.put_LocaleNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.opticalalignment)
    public var opticalAlignment : CanvasOpticalAlignment {
        get { try! _default.get_OpticalAlignmentImpl() }
        set { try! _default.put_OpticalAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.options)
    public var options : CanvasDrawTextOptions {
        get { try! _default.get_OptionsImpl() }
        set { try! _default.put_OptionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.trimmingdelimiter)
    public var trimmingDelimiter : String {
        get { try! _default.get_TrimmingDelimiterImpl() }
        set { try! _default.put_TrimmingDelimiterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.trimmingdelimitercount)
    public var trimmingDelimiterCount : Int32 {
        get { try! _default.get_TrimmingDelimiterCountImpl() }
        set { try! _default.put_TrimmingDelimiterCountImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.trimminggranularity)
    public var trimmingGranularity : CanvasTextTrimmingGranularity {
        get { try! _default.get_TrimmingGranularityImpl() }
        set { try! _default.put_TrimmingGranularityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.trimmingsign)
    public var trimmingSign : CanvasTrimmingSign {
        get { try! _default.get_TrimmingSignImpl() }
        set { try! _default.put_TrimmingSignImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.verticalalignment)
    public var verticalAlignment : CanvasVerticalAlignment {
        get { try! _default.get_VerticalAlignmentImpl() }
        set { try! _default.put_VerticalAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.verticalglyphorientation)
    public var verticalGlyphOrientation : CanvasVerticalGlyphOrientation {
        get { try! _default.get_VerticalGlyphOrientationImpl() }
        set { try! _default.put_VerticalGlyphOrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextformat.wordwrapping)
    public var wordWrapping : CanvasWordWrapping {
        get { try! _default.get_WordWrappingImpl() }
        set { try! _default.put_WordWrappingImpl(newValue) }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout)
public final class CanvasTextLayout : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextLayout
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>?) -> CanvasTextLayout? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasTextLayoutFactory: __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextLayoutFactory = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.Text.CanvasTextLayout"))
    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ textString: String, _ textFormat: CanvasTextFormat!, _ requestedWidth: Float, _ requestedHeight: Float) {
        super.init(try! Self._ICanvasTextLayoutFactory.CreateImpl(resourceCreator, textString, textFormat, requestedWidth, requestedHeight))
    }

    private static let _ICanvasTextLayoutStatics: __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextLayoutStatics = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.Text.CanvasTextLayout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getglyphorientationtransform)
    public static func getGlyphOrientationTransform(_ glyphOrientation: CanvasGlyphOrientation, _ isSideways: Bool, _ position: WindowsFoundation.Vector2) -> WindowsFoundation.Matrix3x2 {
        return try! _ICanvasTextLayoutStatics.GetGlyphOrientationTransformImpl(glyphOrientation, isSideways, position)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getminimumlinelength)
    public func getMinimumLineLength() throws -> Float {
        try _default.GetMinimumLineLengthImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getbrush)
    public func getBrush(_ characterIndex: Int32) throws -> Win2D.AnyICanvasBrush! {
        try _default.GetBrushImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getcustombrush)
    public func getCustomBrush(_ characterIndex: Int32) throws -> Any! {
        try _default.GetCustomBrushImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getfontfamily)
    public func getFontFamily(_ characterIndex: Int32) throws -> String {
        try _default.GetFontFamilyImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getfontsize)
    public func getFontSize(_ characterIndex: Int32) throws -> Float {
        try _default.GetFontSizeImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getfontstretch)
    public func getFontStretch(_ characterIndex: Int32) throws -> UWP.FontStretch {
        try _default.GetFontStretchImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getfontstyle)
    public func getFontStyle(_ characterIndex: Int32) throws -> UWP.FontStyle {
        try _default.GetFontStyleImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getfontweight)
    public func getFontWeight(_ characterIndex: Int32) throws -> UWP.FontWeight {
        try _default.GetFontWeightImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getlocalename)
    public func getLocaleName(_ characterIndex: Int32) throws -> String {
        try _default.GetLocaleNameImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getstrikethrough)
    public func getStrikethrough(_ characterIndex: Int32) throws -> Bool {
        try _default.GetStrikethroughImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getunderline)
    public func getUnderline(_ characterIndex: Int32) throws -> Bool {
        try _default.GetUnderlineImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getinlineobject)
    public func getInlineObject(_ characterIndex: Int32) throws -> AnyICanvasTextInlineObject! {
        try _default.GetInlineObjectImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setcolor)
    public func setColor(_ characterIndex: Int32, _ characterCount: Int32, _ color: UWP.Color) throws {
        try _default.SetColorImpl(characterIndex, characterCount, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setbrush)
    public func setBrush(_ characterIndex: Int32, _ characterCount: Int32, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.SetBrushImpl(characterIndex, characterCount, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setcustombrush)
    public func setCustomBrush(_ characterIndex: Int32, _ characterCount: Int32, _ brush: Any!) throws {
        try _default.SetCustomBrushImpl(characterIndex, characterCount, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setfontfamily)
    public func setFontFamily(_ characterIndex: Int32, _ characterCount: Int32, _ fontFamily: String) throws {
        try _default.SetFontFamilyImpl(characterIndex, characterCount, fontFamily)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setfontsize)
    public func setFontSize(_ characterIndex: Int32, _ characterCount: Int32, _ fontSize: Float) throws {
        try _default.SetFontSizeImpl(characterIndex, characterCount, fontSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setfontstretch)
    public func setFontStretch(_ characterIndex: Int32, _ characterCount: Int32, _ fontStretch: UWP.FontStretch) throws {
        try _default.SetFontStretchImpl(characterIndex, characterCount, fontStretch)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setfontstyle)
    public func setFontStyle(_ characterIndex: Int32, _ characterCount: Int32, _ fontStyle: UWP.FontStyle) throws {
        try _default.SetFontStyleImpl(characterIndex, characterCount, fontStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setfontweight)
    public func setFontWeight(_ characterIndex: Int32, _ characterCount: Int32, _ fontWeight: UWP.FontWeight) throws {
        try _default.SetFontWeightImpl(characterIndex, characterCount, fontWeight)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setlocalename)
    public func setLocaleName(_ characterIndex: Int32, _ characterCount: Int32, _ name: String) throws {
        try _default.SetLocaleNameImpl(characterIndex, characterCount, name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setstrikethrough)
    public func setStrikethrough(_ characterIndex: Int32, _ characterCount: Int32, _ hasStrikethrough: Bool) throws {
        try _default.SetStrikethroughImpl(characterIndex, characterCount, hasStrikethrough)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setunderline)
    public func setUnderline(_ characterIndex: Int32, _ characterCount: Int32, _ hasUnderline: Bool) throws {
        try _default.SetUnderlineImpl(characterIndex, characterCount, hasUnderline)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setinlineobject)
    public func setInlineObject(_ characterIndex: Int32, _ characterCount: Int32, _ inlineObject: AnyICanvasTextInlineObject!) throws {
        try _default.SetInlineObjectImpl(characterIndex, characterCount, inlineObject)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.drawtotextrenderer)
    public func drawToTextRenderer(_ textRenderer: AnyICanvasTextRenderer!, _ position: WindowsFoundation.Vector2) throws {
        try _default.DrawToTextRendererImpl(textRenderer, position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.drawtotextrenderer)
    public func drawToTextRenderer(_ textRenderer: AnyICanvasTextRenderer!, _ x: Float, _ y: Float) throws {
        try _default.DrawToTextRendererWithCoordsImpl(textRenderer, x, y)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.settypography)
    public func setTypography(_ characterIndex: Int32, _ characterCount: Int32, _ typography: CanvasTypography!) throws {
        try _default.SetTypographyImpl(characterIndex, characterCount, typography)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.gettypography)
    public func getTypography(_ characterIndex: Int32) throws -> CanvasTypography! {
        try _default.GetTypographyImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.hittest)
    public func hitTest(_ point: WindowsFoundation.Vector2) throws -> Bool {
        try _default.HitTestImpl(point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.hittest)
    public func hitTest(_ x: Float, _ y: Float) throws -> Bool {
        try _default.HitTestWithCoordsImpl(x, y)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.hittest)
    public func hitTest(_ point: WindowsFoundation.Vector2, _ textLayoutRegion: inout CanvasTextLayoutRegion) throws -> Bool {
        try _default.HitTestWithDescriptionImpl(point, &textLayoutRegion)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.hittest)
    public func hitTest(_ x: Float, _ y: Float, _ textLayoutRegion: inout CanvasTextLayoutRegion) throws -> Bool {
        try _default.HitTestWithDescriptionAndCoordsImpl(x, y, &textLayoutRegion)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.hittest)
    public func hitTest(_ point: WindowsFoundation.Vector2, _ textLayoutRegion: inout CanvasTextLayoutRegion, _ trailingSideOfCharacter: inout Bool) throws -> Bool {
        try _default.HitTestWithDescriptionAndTrailingSideImpl(point, &textLayoutRegion, &trailingSideOfCharacter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.hittest)
    public func hitTest(_ x: Float, _ y: Float, _ textLayoutRegion: inout CanvasTextLayoutRegion, _ trailingSideOfCharacter: inout Bool) throws -> Bool {
        try _default.HitTestWithDescriptionAndCoordsAndTrailingSideImpl(x, y, &textLayoutRegion, &trailingSideOfCharacter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getcaretposition)
    public func getCaretPosition(_ characterIndex: Int32, _ trailingSideOfCharacter: Bool) throws -> WindowsFoundation.Vector2 {
        try _default.GetCaretPositionImpl(characterIndex, trailingSideOfCharacter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getcaretposition)
    public func getCaretPosition(_ characterIndex: Int32, _ trailingSideOfCharacter: Bool, _ textLayoutRegion: inout CanvasTextLayoutRegion) throws -> WindowsFoundation.Vector2 {
        try _default.GetCaretPositionWithDescriptionImpl(characterIndex, trailingSideOfCharacter, &textLayoutRegion)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getpairkerning)
    public func getPairKerning(_ characterIndex: Int32) throws -> Bool {
        try _default.GetPairKerningImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setpairkerning)
    public func setPairKerning(_ characterIndex: Int32, _ characterCount: Int32, _ hasPairKerning: Bool) throws {
        try _default.SetPairKerningImpl(characterIndex, characterCount, hasPairKerning)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getleadingcharacterspacing)
    public func getLeadingCharacterSpacing(_ characterIndex: Int32) throws -> Float {
        try _default.GetLeadingCharacterSpacingImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.gettrailingcharacterspacing)
    public func getTrailingCharacterSpacing(_ characterIndex: Int32) throws -> Float {
        try _default.GetTrailingCharacterSpacingImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.getminimumcharacteradvance)
    public func getMinimumCharacterAdvance(_ characterIndex: Int32) throws -> Float {
        try _default.GetMinimumCharacterAdvanceImpl(characterIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.setcharacterspacing)
    public func setCharacterSpacing(_ characterIndex: Int32, _ characterCount: Int32, _ leadingSpacing: Float, _ trailingSpacing: Float, _ minimumAdvance: Float) throws {
        try _default.SetCharacterSpacingImpl(characterIndex, characterCount, leadingSpacing, trailingSpacing, minimumAdvance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.customtrimmingsign)
    public var customTrimmingSign : AnyICanvasTextInlineObject! {
        get { try! _default.get_CustomTrimmingSignImpl() }
        set { try! _default.put_CustomTrimmingSignImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.defaultfontfamily)
    public var defaultFontFamily : String {
        get { try! _default.get_DefaultFontFamilyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.defaultfontsize)
    public var defaultFontSize : Float {
        get { try! _default.get_DefaultFontSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.defaultfontstretch)
    public var defaultFontStretch : UWP.FontStretch {
        get { try! _default.get_DefaultFontStretchImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.defaultfontstyle)
    public var defaultFontStyle : UWP.FontStyle {
        get { try! _default.get_DefaultFontStyleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.defaultfontweight)
    public var defaultFontWeight : UWP.FontWeight {
        get { try! _default.get_DefaultFontWeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.defaultlocalename)
    public var defaultLocaleName : String {
        get { try! _default.get_DefaultLocaleNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _default.get_DeviceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.direction)
    public var direction : CanvasTextDirection {
        get { try! _default.get_DirectionImpl() }
        set { try! _default.put_DirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.drawbounds)
    public var drawBounds : WindowsFoundation.Rect {
        get { try! _default.get_DrawBoundsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.horizontalalignment)
    public var horizontalAlignment : CanvasHorizontalAlignment {
        get { try! _default.get_HorizontalAlignmentImpl() }
        set { try! _default.put_HorizontalAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.incrementaltabstop)
    public var incrementalTabStop : Float {
        get { try! _default.get_IncrementalTabStopImpl() }
        set { try! _default.put_IncrementalTabStopImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.lastlinewrapping)
    public var lastLineWrapping : Bool {
        get { try! _default.get_LastLineWrappingImpl() }
        set { try! _default.put_LastLineWrappingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.layoutbounds)
    public var layoutBounds : WindowsFoundation.Rect {
        get { try! _default.get_LayoutBoundsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.layoutboundsincludingtrailingwhitespace)
    public var layoutBoundsIncludingTrailingWhitespace : WindowsFoundation.Rect {
        get { try! _default.get_LayoutBoundsIncludingTrailingWhitespaceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.linecount)
    public var lineCount : Int32 {
        get { try! _default.get_LineCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.linespacing)
    public var lineSpacing : Float {
        get { try! _default.get_LineSpacingImpl() }
        set { try! _default.put_LineSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.linespacingbaseline)
    public var lineSpacingBaseline : Float {
        get { try! _default.get_LineSpacingBaselineImpl() }
        set { try! _default.put_LineSpacingBaselineImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.linespacingmode)
    public var lineSpacingMode : CanvasLineSpacingMode {
        get { try! _default.get_LineSpacingModeImpl() }
        set { try! _default.put_LineSpacingModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.maximumbidireorderingdepth)
    public var maximumBidiReorderingDepth : Int32 {
        get { try! _default.get_MaximumBidiReorderingDepthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.opticalalignment)
    public var opticalAlignment : CanvasOpticalAlignment {
        get { try! _default.get_OpticalAlignmentImpl() }
        set { try! _default.put_OpticalAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.options)
    public var options : CanvasDrawTextOptions {
        get { try! _default.get_OptionsImpl() }
        set { try! _default.put_OptionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.requestedsize)
    public var requestedSize : WindowsFoundation.Size {
        get { try! _default.get_RequestedSizeImpl() }
        set { try! _default.put_RequestedSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.trimmingdelimiter)
    public var trimmingDelimiter : String {
        get { try! _default.get_TrimmingDelimiterImpl() }
        set { try! _default.put_TrimmingDelimiterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.trimmingdelimitercount)
    public var trimmingDelimiterCount : Int32 {
        get { try! _default.get_TrimmingDelimiterCountImpl() }
        set { try! _default.put_TrimmingDelimiterCountImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.trimminggranularity)
    public var trimmingGranularity : CanvasTextTrimmingGranularity {
        get { try! _default.get_TrimmingGranularityImpl() }
        set { try! _default.put_TrimmingGranularityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.trimmingsign)
    public var trimmingSign : CanvasTrimmingSign {
        get { try! _default.get_TrimmingSignImpl() }
        set { try! _default.put_TrimmingSignImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.verticalalignment)
    public var verticalAlignment : CanvasVerticalAlignment {
        get { try! _default.get_VerticalAlignmentImpl() }
        set { try! _default.put_VerticalAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.verticalglyphorientation)
    public var verticalGlyphOrientation : CanvasVerticalGlyphOrientation {
        get { try! _default.get_VerticalGlyphOrientationImpl() }
        set { try! _default.put_VerticalGlyphOrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayout.wordwrapping)
    public var wordWrapping : CanvasWordWrapping {
        get { try! _default.get_WordWrappingImpl() }
        set { try! _default.put_WordWrappingImpl(newValue) }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextrenderingparameters)
public final class CanvasTextRenderingParameters : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRenderingParameters
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>?) -> CanvasTextRenderingParameters? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICanvasTextRenderingParametersFactory: __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRenderingParametersFactory = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters"))
    public init(_ textRenderingMode: CanvasTextRenderingMode, _ gridFit: CanvasTextGridFit) {
        super.init(try! Self._ICanvasTextRenderingParametersFactory.CreateImpl(textRenderingMode, gridFit))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextrenderingparameters.gridfit)
    public var gridFit : CanvasTextGridFit {
        get { try! _default.get_GridFitImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextrenderingparameters.renderingmode)
    public var renderingMode : CanvasTextRenderingMode {
        get { try! _default.get_RenderingModeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastypography)
public final class CanvasTypography : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTypography
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography>?) -> CanvasTypography? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.Graphics.Canvas.Text.CanvasTypography")))
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastypography.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastypography.addfeature)
    public func addFeature(_ feature: CanvasTypographyFeature) throws {
        try _default.AddFeatureImpl(feature)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastypography.addfeature)
    public func addFeature(_ name: CanvasTypographyFeatureName, _ parameter: UInt32) throws {
        try _default.AddFeatureWithNameAndParameterImpl(name, parameter)
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasanalyzedscript)
public struct CanvasAnalyzedScript: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasanalyzedscript.scriptidentifier)
    public var scriptIdentifier: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasanalyzedscript.shape)
    public var shape: CanvasScriptShape = .init(0)
    public init() {}
    public init(scriptIdentifier: Int32, shape: CanvasScriptShape) {
        self.scriptIdentifier = scriptIdentifier
        self.shape = shape
    }
    public static func from(abi: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript) -> CanvasAnalyzedScript {
        .init(scriptIdentifier: abi.ScriptIdentifier, shape: abi.Shape)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasclustermetrics)
public struct CanvasClusterMetrics: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasclustermetrics.charactercount)
    public var characterCount: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasclustermetrics.width)
    public var width: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasclustermetrics.properties)
    public var properties: CanvasClusterProperties = .init(0)
    public init() {}
    public init(characterCount: Int32, width: Float, properties: CanvasClusterProperties) {
        self.characterCount = characterCount
        self.width = width
        self.properties = properties
    }
    public static func from(abi: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics) -> CanvasClusterMetrics {
        .init(characterCount: abi.CharacterCount, width: abi.Width, properties: abi.Properties)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyph)
public struct CanvasGlyph: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyph.index)
    public var index: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyph.advance)
    public var advance: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyph.advanceoffset)
    public var advanceOffset: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyph.ascenderoffset)
    public var ascenderOffset: Float = 0.0
    public init() {}
    public init(index: Int32, advance: Float, advanceOffset: Float, ascenderOffset: Float) {
        self.index = index
        self.advance = advance
        self.advanceOffset = advanceOffset
        self.ascenderOffset = ascenderOffset
    }
    public static func from(abi: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph) -> CanvasGlyph {
        .init(index: abi.Index, advance: abi.Advance, advanceOffset: abi.AdvanceOffset, ascenderOffset: abi.AscenderOffset)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyphmetrics)
public struct CanvasGlyphMetrics: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyphmetrics.leftsidebearing)
    public var leftSideBearing: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyphmetrics.advancewidth)
    public var advanceWidth: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyphmetrics.rightsidebearing)
    public var rightSideBearing: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyphmetrics.topsidebearing)
    public var topSideBearing: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyphmetrics.advanceheight)
    public var advanceHeight: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyphmetrics.bottomsidebearing)
    public var bottomSideBearing: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyphmetrics.verticalorigin)
    public var verticalOrigin: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasglyphmetrics.drawbounds)
    public var drawBounds: WindowsFoundation.Rect = .init()
    public init() {}
    public init(leftSideBearing: Float, advanceWidth: Float, rightSideBearing: Float, topSideBearing: Float, advanceHeight: Float, bottomSideBearing: Float, verticalOrigin: Float, drawBounds: WindowsFoundation.Rect) {
        self.leftSideBearing = leftSideBearing
        self.advanceWidth = advanceWidth
        self.rightSideBearing = rightSideBearing
        self.topSideBearing = topSideBearing
        self.advanceHeight = advanceHeight
        self.bottomSideBearing = bottomSideBearing
        self.verticalOrigin = verticalOrigin
        self.drawBounds = drawBounds
    }
    public static func from(abi: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics) -> CanvasGlyphMetrics {
        .init(leftSideBearing: abi.LeftSideBearing, advanceWidth: abi.AdvanceWidth, rightSideBearing: abi.RightSideBearing, topSideBearing: abi.TopSideBearing, advanceHeight: abi.AdvanceHeight, bottomSideBearing: abi.BottomSideBearing, verticalOrigin: abi.VerticalOrigin, drawBounds: .from(abi: abi.DrawBounds))
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinemetrics)
public struct CanvasLineMetrics: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinemetrics.charactercount)
    public var characterCount: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinemetrics.trailingwhitespacecount)
    public var trailingWhitespaceCount: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinemetrics.terminalnewlinecount)
    public var terminalNewlineCount: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinemetrics.height)
    public var height: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinemetrics.baseline)
    public var baseline: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinemetrics.istrimmed)
    public var isTrimmed: Bool = false
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinemetrics.leadingwhitespacebefore)
    public var leadingWhitespaceBefore: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvaslinemetrics.leadingwhitespaceafter)
    public var leadingWhitespaceAfter: Float = 0.0
    public init() {}
    public init(characterCount: Int32, trailingWhitespaceCount: Int32, terminalNewlineCount: Int32, height: Float, baseline: Float, isTrimmed: Bool, leadingWhitespaceBefore: Float, leadingWhitespaceAfter: Float) {
        self.characterCount = characterCount
        self.trailingWhitespaceCount = trailingWhitespaceCount
        self.terminalNewlineCount = terminalNewlineCount
        self.height = height
        self.baseline = baseline
        self.isTrimmed = isTrimmed
        self.leadingWhitespaceBefore = leadingWhitespaceBefore
        self.leadingWhitespaceAfter = leadingWhitespaceAfter
    }
    public static func from(abi: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics) -> CanvasLineMetrics {
        .init(characterCount: abi.CharacterCount, trailingWhitespaceCount: abi.TrailingWhitespaceCount, terminalNewlineCount: abi.TerminalNewlineCount, height: abi.Height, baseline: abi.Baseline, isTrimmed: .init(from: abi.IsTrimmed), leadingWhitespaceBefore: abi.LeadingWhitespaceBefore, leadingWhitespaceAfter: abi.LeadingWhitespaceAfter)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayoutregion)
public struct CanvasTextLayoutRegion: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayoutregion.characterindex)
    public var characterIndex: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayoutregion.charactercount)
    public var characterCount: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastextlayoutregion.layoutbounds)
    public var layoutBounds: WindowsFoundation.Rect = .init()
    public init() {}
    public init(characterIndex: Int32, characterCount: Int32, layoutBounds: WindowsFoundation.Rect) {
        self.characterIndex = characterIndex
        self.characterCount = characterCount
        self.layoutBounds = layoutBounds
    }
    public static func from(abi: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion) -> CanvasTextLayoutRegion {
        .init(characterIndex: abi.CharacterIndex, characterCount: abi.CharacterCount, layoutBounds: .from(abi: abi.LayoutBounds))
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastypographyfeature)
public struct CanvasTypographyFeature: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastypographyfeature.name)
    public var name: CanvasTypographyFeatureName = .init(0)
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvastypographyfeature.parameter)
    public var parameter: UInt32 = 0
    public init() {}
    public init(name: CanvasTypographyFeatureName, parameter: UInt32) {
        self.name = name
        self.parameter = parameter
    }
    public static func from(abi: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature) -> CanvasTypographyFeature {
        .init(name: abi.Name, parameter: abi.Parameter)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasunicoderange)
public struct CanvasUnicodeRange: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasunicoderange.first)
    public var first: UInt32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.canvasunicoderange.last)
    public var last: UInt32 = 0
    public init() {}
    public init(first: UInt32, last: UInt32) {
        self.first = first
        self.last = last
    }
    public static func from(abi: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange) -> CanvasUnicodeRange {
        .init(first: abi.First, last: abi.Last)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextinlineobject)
public protocol ICanvasTextInlineObject : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextinlineobject.draw)
    func draw(_ textRenderer: Win2D.AnyICanvasTextRenderer!, _ point: WindowsFoundation.Vector2, _ isSideways: Bool, _ isRightToLeft: Bool, _ brush: Any!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextinlineobject.baseline)
    var baseline: Float { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextinlineobject.breakafter)
    var breakAfter: Win2D.CanvasLineBreakCondition { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextinlineobject.breakbefore)
    var breakBefore: Win2D.CanvasLineBreakCondition { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextinlineobject.drawbounds)
    var drawBounds: WindowsFoundation.Rect { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextinlineobject.size)
    var size: WindowsFoundation.Size { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextinlineobject.supportssideways)
    var supportsSideways: Bool { get }
}

extension ICanvasTextInlineObject {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasTextInlineObject = any ICanvasTextInlineObject

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextrenderer)
public protocol ICanvasTextRenderer : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextrenderer.drawstrikethrough)
    func drawStrikethrough(_ point: WindowsFoundation.Vector2, _ strikethroughWidth: Float, _ strikethroughThickness: Float, _ strikethroughOffset: Float, _ textDirection: Win2D.CanvasTextDirection, _ brush: Any!, _ textMeasuringMode: Win2D.CanvasTextMeasuringMode, _ localeName: String, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextrenderer.drawunderline)
    func drawUnderline(_ point: WindowsFoundation.Vector2, _ underlineWidth: Float, _ underlineThickness: Float, _ underlineOffset: Float, _ runHeight: Float, _ textDirection: Win2D.CanvasTextDirection, _ brush: Any!, _ textMeasuringMode: Win2D.CanvasTextMeasuringMode, _ localeName: String, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextrenderer.drawinlineobject)
    func drawInlineObject(_ point: WindowsFoundation.Vector2, _ inlineObject: Win2D.AnyICanvasTextInlineObject!, _ isSideways: Bool, _ isRightToLeft: Bool, _ brush: Any!, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextrenderer.dpi)
    var dpi: Float { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextrenderer.pixelsnappingdisabled)
    var pixelSnappingDisabled: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.text.icanvastextrenderer.transform)
    var transform: WindowsFoundation.Matrix3x2 { get }
}

extension ICanvasTextRenderer {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasTextRenderer = any ICanvasTextRenderer

extension Win2D.CanvasClusterProperties {
    public static var none : Win2D.CanvasClusterProperties {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_None
    }
    public static var canWrapLineAfter : Win2D.CanvasClusterProperties {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_CanWrapLineAfter
    }
    public static var whitespace : Win2D.CanvasClusterProperties {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_Whitespace
    }
    public static var newline : Win2D.CanvasClusterProperties {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_Newline
    }
    public static var softHyphen : Win2D.CanvasClusterProperties {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_SoftHyphen
    }
    public static var rightToLeft : Win2D.CanvasClusterProperties {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_RightToLeft
    }
}
extension Win2D.CanvasClusterProperties: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasDrawTextOptions {
    public static var `default` : Win2D.CanvasDrawTextOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Default
    }
    public static var noPixelSnap : Win2D.CanvasDrawTextOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_NoPixelSnap
    }
    public static var clip : Win2D.CanvasDrawTextOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Clip
    }
    public static var enableColorFont : Win2D.CanvasDrawTextOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_EnableColorFont
    }
}
extension Win2D.CanvasDrawTextOptions: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasFontFileFormatType {
    public static var cff : Win2D.CanvasFontFileFormatType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Cff
    }
    public static var trueType : Win2D.CanvasFontFileFormatType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_TrueType
    }
    public static var trueTypeCollection : Win2D.CanvasFontFileFormatType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_TrueTypeCollection
    }
    public static var type1 : Win2D.CanvasFontFileFormatType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Type1
    }
    public static var vector : Win2D.CanvasFontFileFormatType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Vector
    }
    public static var bitmap : Win2D.CanvasFontFileFormatType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Bitmap
    }
    public static var unknown : Win2D.CanvasFontFileFormatType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Unknown
    }
    public static var rawCff : Win2D.CanvasFontFileFormatType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_RawCff
    }
}
extension Win2D.CanvasFontFileFormatType: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasFontInformation {
    public static var none : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_None
    }
    public static var copyrightNotice : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_CopyrightNotice
    }
    public static var versionStrings : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_VersionStrings
    }
    public static var trademark : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Trademark
    }
    public static var manufacturer : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Manufacturer
    }
    public static var designer : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Designer
    }
    public static var designerUrl : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_DesignerUrl
    }
    public static var description : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Description
    }
    public static var fontVendorUrl : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_FontVendorUrl
    }
    public static var licenseDescription : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_LicenseDescription
    }
    public static var licenseInfoUrl : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_LicenseInfoUrl
    }
    public static var win32FamilyNames : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Win32FamilyNames
    }
    public static var win32SubfamilyNames : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Win32SubfamilyNames
    }
    public static var preferredFamilyNames : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_PreferredFamilyNames
    }
    public static var preferredSubfamilyNames : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_PreferredSubfamilyNames
    }
    public static var sampleText : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_SampleText
    }
    public static var fullName : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_FullName
    }
    public static var postscriptName : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_PostscriptName
    }
    public static var postscriptCidName : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_PostscriptCidName
    }
    public static var wwsFamilyName : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_WwsFamilyName
    }
    public static var designScriptLanguageTag : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_DesignScriptLanguageTag
    }
    public static var supportedScriptLanguageTag : Win2D.CanvasFontInformation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_SupportedScriptLanguageTag
    }
}
extension Win2D.CanvasFontInformation: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasFontSimulations {
    public static var none : Win2D.CanvasFontSimulations {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations_None
    }
    public static var bold : Win2D.CanvasFontSimulations {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations_Bold
    }
    public static var oblique : Win2D.CanvasFontSimulations {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations_Oblique
    }
}
extension Win2D.CanvasFontSimulations: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasGlyphOrientation {
    public static var upright : Win2D.CanvasGlyphOrientation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation_Upright
    }
    public static var clockwise90Degrees : Win2D.CanvasGlyphOrientation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation_Clockwise90Degrees
    }
    public static var clockwise180Degrees : Win2D.CanvasGlyphOrientation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation_Clockwise180Degrees
    }
    public static var clockwise270Degrees : Win2D.CanvasGlyphOrientation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation_Clockwise270Degrees
    }
}
extension Win2D.CanvasGlyphOrientation: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasHorizontalAlignment {
    public static var left : Win2D.CanvasHorizontalAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Left
    }
    public static var right : Win2D.CanvasHorizontalAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Right
    }
    public static var center : Win2D.CanvasHorizontalAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Center
    }
    public static var justified : Win2D.CanvasHorizontalAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Justified
    }
}
extension Win2D.CanvasHorizontalAlignment: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasLineBreakCondition {
    public static var neutral : Win2D.CanvasLineBreakCondition {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition_Neutral
    }
    public static var canBreak : Win2D.CanvasLineBreakCondition {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition_CanBreak
    }
    public static var cannotBreak : Win2D.CanvasLineBreakCondition {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition_CannotBreak
    }
    public static var mustBreak : Win2D.CanvasLineBreakCondition {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition_MustBreak
    }
}
extension Win2D.CanvasLineBreakCondition: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasLineSpacingMode {
    public static var `default` : Win2D.CanvasLineSpacingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Default
    }
    public static var uniform : Win2D.CanvasLineSpacingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Uniform
    }
    public static var proportional : Win2D.CanvasLineSpacingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Proportional
    }
}
extension Win2D.CanvasLineSpacingMode: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasOpticalAlignment {
    public static var `default` : Win2D.CanvasOpticalAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_Default
    }
    public static var noSideBearings : Win2D.CanvasOpticalAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_NoSideBearings
    }
}
extension Win2D.CanvasOpticalAlignment: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasScriptShape {
    public static var `default` : Win2D.CanvasScriptShape {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape_Default
    }
    public static var noVisual : Win2D.CanvasScriptShape {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape_NoVisual
    }
}
extension Win2D.CanvasScriptShape: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasTextAntialiasing {
    public static var auto : Win2D.CanvasTextAntialiasing {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Auto
    }
    public static var clearType : Win2D.CanvasTextAntialiasing {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_ClearType
    }
    public static var grayscale : Win2D.CanvasTextAntialiasing {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Grayscale
    }
    public static var aliased : Win2D.CanvasTextAntialiasing {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Aliased
    }
}
extension Win2D.CanvasTextAntialiasing: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasTextDirection {
    public static var leftToRightThenTopToBottom : Win2D.CanvasTextDirection {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenTopToBottom
    }
    public static var rightToLeftThenTopToBottom : Win2D.CanvasTextDirection {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_RightToLeftThenTopToBottom
    }
    public static var leftToRightThenBottomToTop : Win2D.CanvasTextDirection {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenBottomToTop
    }
    public static var rightToLeftThenBottomToTop : Win2D.CanvasTextDirection {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_RightToLeftThenBottomToTop
    }
    public static var topToBottomThenLeftToRight : Win2D.CanvasTextDirection {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_TopToBottomThenLeftToRight
    }
    public static var bottomToTopThenLeftToRight : Win2D.CanvasTextDirection {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_BottomToTopThenLeftToRight
    }
    public static var topToBottomThenRightToLeft : Win2D.CanvasTextDirection {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_TopToBottomThenRightToLeft
    }
    public static var bottomToTopThenRightToLeft : Win2D.CanvasTextDirection {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_BottomToTopThenRightToLeft
    }
}
extension Win2D.CanvasTextDirection: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasTextGridFit {
    public static var `default` : Win2D.CanvasTextGridFit {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Default
    }
    public static var disable : Win2D.CanvasTextGridFit {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Disable
    }
    public static var enable : Win2D.CanvasTextGridFit {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Enable
    }
}
extension Win2D.CanvasTextGridFit: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasTextMeasuringMode {
    public static var natural : Win2D.CanvasTextMeasuringMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_Natural
    }
    public static var gdiClassic : Win2D.CanvasTextMeasuringMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiClassic
    }
    public static var gdiNatural : Win2D.CanvasTextMeasuringMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiNatural
    }
}
extension Win2D.CanvasTextMeasuringMode: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasTextRenderingMode {
    public static var `default` : Win2D.CanvasTextRenderingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Default
    }
    public static var aliased : Win2D.CanvasTextRenderingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Aliased
    }
    public static var gdiClassic : Win2D.CanvasTextRenderingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiClassic
    }
    public static var gdiNatural : Win2D.CanvasTextRenderingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiNatural
    }
    public static var natural : Win2D.CanvasTextRenderingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Natural
    }
    public static var naturalSymmetric : Win2D.CanvasTextRenderingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetric
    }
    public static var outline : Win2D.CanvasTextRenderingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Outline
    }
    public static var naturalSymmetricDownsampled : Win2D.CanvasTextRenderingMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetricDownsampled
    }
}
extension Win2D.CanvasTextRenderingMode: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasTextTrimmingGranularity {
    public static var none : Win2D.CanvasTextTrimmingGranularity {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_None
    }
    public static var character : Win2D.CanvasTextTrimmingGranularity {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_Character
    }
    public static var word : Win2D.CanvasTextTrimmingGranularity {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_Word
    }
}
extension Win2D.CanvasTextTrimmingGranularity: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasTrimmingSign {
    public static var none : Win2D.CanvasTrimmingSign {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_None
    }
    public static var ellipsis : Win2D.CanvasTrimmingSign {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_Ellipsis
    }
}
extension Win2D.CanvasTrimmingSign: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasTypographyFeatureName {
    public static var none : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_None
    }
    public static var `default` : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Default
    }
    public static var verticalWriting : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_VerticalWriting
    }
    public static var verticalAlternatesAndRotation : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_VerticalAlternatesAndRotation
    }
    public static var alternativeFractions : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_AlternativeFractions
    }
    public static var petiteCapitalsFromCapitals : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_PetiteCapitalsFromCapitals
    }
    public static var smallCapitalsFromCapitals : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_SmallCapitalsFromCapitals
    }
    public static var contextualAlternates : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ContextualAlternates
    }
    public static var caseSensitiveForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_CaseSensitiveForms
    }
    public static var glyphCompositionDecomposition : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_GlyphCompositionDecomposition
    }
    public static var contextualLigatures : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ContextualLigatures
    }
    public static var capitalSpacing : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_CapitalSpacing
    }
    public static var contextualSwash : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ContextualSwash
    }
    public static var cursivePositioning : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_CursivePositioning
    }
    public static var discretionaryLigatures : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_DiscretionaryLigatures
    }
    public static var expertForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ExpertForms
    }
    public static var fractions : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Fractions
    }
    public static var fullWidth : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_FullWidth
    }
    public static var halfForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HalfForms
    }
    public static var halantForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HalantForms
    }
    public static var alternateHalfWidth : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_AlternateHalfWidth
    }
    public static var historicalForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HistoricalForms
    }
    public static var horizontalKanaAlternates : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HorizontalKanaAlternates
    }
    public static var historicalLigatures : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HistoricalLigatures
    }
    public static var halfWidth : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HalfWidth
    }
    public static var hojoKanjiForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HojoKanjiForms
    }
    public static var jis04Forms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Jis04Forms
    }
    public static var jis78Forms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Jis78Forms
    }
    public static var jis83Forms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Jis83Forms
    }
    public static var jis90Forms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Jis90Forms
    }
    public static var kerning : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Kerning
    }
    public static var standardLigatures : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StandardLigatures
    }
    public static var liningFigures : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_LiningFigures
    }
    public static var localizedForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_LocalizedForms
    }
    public static var markPositioning : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_MarkPositioning
    }
    public static var mathematicalGreek : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_MathematicalGreek
    }
    public static var markToMarkPositioning : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_MarkToMarkPositioning
    }
    public static var alternateAnnotationForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_AlternateAnnotationForms
    }
    public static var nlcKanjiForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_NlcKanjiForms
    }
    public static var oldStyleFigures : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_OldStyleFigures
    }
    public static var ordinals : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Ordinals
    }
    public static var proportionalAlternateWidth : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ProportionalAlternateWidth
    }
    public static var petiteCapitals : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_PetiteCapitals
    }
    public static var proportionalFigures : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ProportionalFigures
    }
    public static var proportionalWidths : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ProportionalWidths
    }
    public static var quarterWidths : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_QuarterWidths
    }
    public static var requiredLigatures : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_RequiredLigatures
    }
    public static var rubyNotationForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_RubyNotationForms
    }
    public static var stylisticAlternates : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticAlternates
    }
    public static var scientificInferiors : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ScientificInferiors
    }
    public static var smallCapitals : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_SmallCapitals
    }
    public static var simplifiedForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_SimplifiedForms
    }
    public static var stylisticSet1 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet1
    }
    public static var stylisticSet2 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet2
    }
    public static var stylisticSet3 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet3
    }
    public static var stylisticSet4 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet4
    }
    public static var stylisticSet5 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet5
    }
    public static var stylisticSet6 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet6
    }
    public static var stylisticSet7 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet7
    }
    public static var stylisticSet8 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet8
    }
    public static var stylisticSet9 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet9
    }
    public static var stylisticSet10 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet10
    }
    public static var stylisticSet11 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet11
    }
    public static var stylisticSet12 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet12
    }
    public static var stylisticSet13 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet13
    }
    public static var stylisticSet14 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet14
    }
    public static var stylisticSet15 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet15
    }
    public static var stylisticSet16 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet16
    }
    public static var stylisticSet17 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet17
    }
    public static var stylisticSet18 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet18
    }
    public static var stylisticSet19 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet19
    }
    public static var stylisticSet20 : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet20
    }
    public static var `subscript` : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Subscript
    }
    public static var superscript : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Superscript
    }
    public static var swash : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Swash
    }
    public static var titling : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Titling
    }
    public static var traditionalNameForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_TraditionalNameForms
    }
    public static var tabularFigures : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_TabularFigures
    }
    public static var traditionalForms : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_TraditionalForms
    }
    public static var thirdWidths : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ThirdWidths
    }
    public static var unicase : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Unicase
    }
    public static var slashedZero : Win2D.CanvasTypographyFeatureName {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_SlashedZero
    }
}
extension Win2D.CanvasTypographyFeatureName: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasVerticalAlignment {
    public static var top : Win2D.CanvasVerticalAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Top
    }
    public static var bottom : Win2D.CanvasVerticalAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Bottom
    }
    public static var center : Win2D.CanvasVerticalAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Center
    }
}
extension Win2D.CanvasVerticalAlignment: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasVerticalGlyphOrientation {
    public static var `default` : Win2D.CanvasVerticalGlyphOrientation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Default
    }
    public static var stacked : Win2D.CanvasVerticalGlyphOrientation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Stacked
    }
}
extension Win2D.CanvasVerticalGlyphOrientation: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasWordWrapping {
    public static var wrap : Win2D.CanvasWordWrapping {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Wrap
    }
    public static var noWrap : Win2D.CanvasWordWrapping {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_NoWrap
    }
    public static var emergencyBreak : Win2D.CanvasWordWrapping {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_EmergencyBreak
    }
    public static var wholeWord : Win2D.CanvasWordWrapping {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_WholeWord
    }
    public static var character : Win2D.CanvasWordWrapping {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Character
    }
}
extension Win2D.CanvasWordWrapping: @retroactive Hashable, @retroactive Codable {}


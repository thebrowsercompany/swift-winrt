// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer: WindowsFoundation.IID {
    .init(Data1: 0x49ECFC58, Data2: 0x5E1C, Data3: 0x4EE3, Data4: ( 0x80,0x88,0x54,0x2F,0x94,0xE9,0x3C,0x60 ))// 49ECFC58-5E1C-4EE3-8088-542F94E93C60
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap: WindowsFoundation.IID {
    .init(Data1: 0xC57532ED, Data2: 0x709E, Data3: 0x4AC2, Data4: ( 0x86,0xBE,0xA1,0xEC,0x3A,0x7F,0xA8,0xFE ))// C57532ED-709E-4AC2-86BE-A1EC3A7FA8FE
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory: WindowsFoundation.IID {
    .init(Data1: 0xF2D0EB0E, Data2: 0x16F3, Data3: 0x4BCF, Data4: ( 0xB1,0xD1,0x04,0x83,0x4A,0xB9,0x7D,0xE4 ))// F2D0EB0E-16F3-4BCF-B1D1-04834AB97DE4
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics: WindowsFoundation.IID {
    .init(Data1: 0xC8948DEA, Data2: 0xA41D, Data3: 0x4CC2, Data4: ( 0xAF,0x9A,0xFD,0xDE,0x01,0xB6,0x06,0xDC ))// C8948DEA-A41D-4CC2-AF9A-FDDE01B606DC
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList: WindowsFoundation.IID {
    .init(Data1: 0xB71E73CF, Data2: 0x2FE7, Data3: 0x4D3A, Data4: ( 0xBB,0xB8,0x19,0xF0,0x16,0xF5,0xBE,0x1B ))// B71E73CF-2FE7-4D3A-BBB8-19F016F5BE1B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory: WindowsFoundation.IID {
    .init(Data1: 0xB3D44E68, Data2: 0xD931, Data3: 0x4B5B, Data4: ( 0xB9,0x57,0x08,0x88,0x98,0x0A,0x7D,0x50 ))// B3D44E68-D931-4B5B-B957-0888980A7D50
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice: WindowsFoundation.IID {
    .init(Data1: 0xA27F0B5D, Data2: 0xEC2C, Data3: 0x4D4F, Data4: ( 0x94,0x8F,0x0A,0xA1,0xE9,0x5E,0x33,0xE6 ))// A27F0B5D-EC2C-4D4F-948F-0AA1E95E33E6
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory: WindowsFoundation.IID {
    .init(Data1: 0xE2C2BF21, Data2: 0x5418, Data3: 0x43B9, Data4: ( 0xA2,0xDA,0x53,0x9E,0x28,0x7C,0x79,0x0F ))// E2C2BF21-5418-43B9-A2DA-539E287C790F
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics: WindowsFoundation.IID {
    .init(Data1: 0x9B6E2B27, Data2: 0xCD07, Data3: 0x421A, Data4: ( 0x8F,0x69,0x0A,0xE8,0xA7,0x87,0xFE,0x8C ))// 9B6E2B27-CD07-421A-8F69-0AE8A787FE8C
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession: WindowsFoundation.IID {
    .init(Data1: 0xF60AFD09, Data2: 0xE623, Data3: 0x4BE0, Data4: ( 0xB7,0x50,0x57,0x8A,0xA9,0x20,0xB1,0xDB ))// F60AFD09-E623-4BE0-B750-578AA920B1DB
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage: WindowsFoundation.IID {
    .init(Data1: 0x794966D3, Data2: 0x6A64, Data3: 0x47E9, Data4: ( 0x8D,0xA8,0xB4,0x6A,0xAA,0x24,0xD5,0x3B ))// 794966D3-6A64-47E9-8DA8-B46AAA24D53B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics: WindowsFoundation.IID {
    .init(Data1: 0xC54EEA15, Data2: 0x5A14, Data3: 0x489A, Data4: ( 0x8F,0xA0,0x6E,0x84,0x54,0x1F,0x92,0x2D ))// C54EEA15-5A14-489A-8FA0-6E84541F922D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock: WindowsFoundation.IID {
    .init(Data1: 0x7A0E8498, Data2: 0xFBA9, Data3: 0x4FB0, Data4: ( 0xAA,0x8C,0x6A,0x48,0xB5,0xEE,0x3E,0x4F ))// 7A0E8498-FBA9-4FB0-AA8C-6A48B5EE3E4F
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget: WindowsFoundation.IID {
    .init(Data1: 0x2D4C7349, Data2: 0x9A32, Data3: 0x41B9, Data4: ( 0xB3,0xCC,0xCA,0xF1,0xB7,0xE1,0x09,0x9B ))// 2D4C7349-9A32-41B9-B3CC-CAF1B7E1099B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory: WindowsFoundation.IID {
    .init(Data1: 0x620DFDBB, Data2: 0x9D08, Data3: 0x406C, Data4: ( 0xBF,0xE6,0xD9,0xB8,0x1E,0x6D,0xF8,0xE7 ))// 620DFDBB-9D08-406C-BFE6-D9B81E6DF8E7
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics: WindowsFoundation.IID {
    .init(Data1: 0xC7D1FE37, Data2: 0xDD57, Data3: 0x45D7, Data4: ( 0xBC,0xC1,0x15,0x62,0x5A,0x21,0xE8,0xD5 ))// C7D1FE37-DD57-45D7-BCC1-15625A21E8D5
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator: WindowsFoundation.IID {
    .init(Data1: 0x8F6D8AA8, Data2: 0x492F, Data3: 0x4BC6, Data4: ( 0xB3,0xD0,0xE7,0xF5,0xEA,0xE8,0x4B,0x11 ))// 8F6D8AA8-492F-4BC6-B3D0-E7F5EAE84B11
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi: WindowsFoundation.IID {
    .init(Data1: 0x1A75B512, Data2: 0xE9FA, Data3: 0x49E6, Data4: ( 0xA8,0x76,0x38,0xCA,0xE1,0x94,0x01,0x3E ))// 1A75B512-E9FA-49E6-A876-38CAE194013E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch: WindowsFoundation.IID {
    .init(Data1: 0xA065DCE4, Data2: 0xA7F2, Data3: 0x4DF4, Data4: ( 0x84,0x05,0xEA,0x9E,0x3A,0x21,0x5B,0xF8 ))// A065DCE4-A7F2-4DF4-8405-EA9E3A215BF8
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics: WindowsFoundation.IID {
    .init(Data1: 0x851EB08D, Data2: 0x9D01, Data3: 0x4B57, Data4: ( 0x9E,0x94,0x24,0x11,0x31,0x51,0xB7,0x4B ))// 851EB08D-9D01-4B57-9E94-24113151B74B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain: WindowsFoundation.IID {
    .init(Data1: 0x882E3C3A, Data2: 0x5725, Data3: 0x409C, Data4: ( 0x9E,0x76,0xF8,0x0B,0x3B,0xAC,0xF1,0xB4 ))// 882E3C3A-5725-409C-9E76-F80B3BACF1B4
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory: WindowsFoundation.IID {
    .init(Data1: 0x133C25CB, Data2: 0xED3C, Data3: 0x492B, Data4: ( 0xBF,0xFE,0x75,0x09,0xB5,0x21,0x84,0x2B ))// 133C25CB-ED3C-492B-BFFE-7509B521842B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics: WindowsFoundation.IID {
    .init(Data1: 0x05376D8F, Data2: 0x3E8D, Data3: 0x4A82, Data4: ( 0x98,0x38,0x69,0x16,0x80,0xD3,0x2A,0x52 ))// 05376D8F-3E8D-4A82-9838-691680D32A52
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap: WindowsFoundation.IID {
    .init(Data1: 0x707D8BB0, Data2: 0x05F9, Data3: 0x484C, Data4: ( 0x9E,0xE2,0x17,0x9E,0x06,0x81,0xC8,0xA7 ))// 707D8BB0-05F9-484C-9EE2-179E0681C8A7
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics: WindowsFoundation.IID {
    .init(Data1: 0xB2F1F8E9, Data2: 0x0770, Data3: 0x4DD4, Data4: ( 0x95,0x6D,0x78,0xD9,0x11,0x39,0x09,0x57 ))// B2F1F8E9-0770-4DD4-956D-78D911390957
}

public enum __ABI_Microsoft_Graphics_Canvas {
    public class ICanvasActiveLayer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer }

    }

    public class ICanvasBitmap: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap }

        internal func get_SizeInPixelsImpl() throws -> UWP.BitmapSize {
            var size: __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SizeInPixels(pThis, &size))
            }
            return .from(abi: size)
        }

        internal func get_SizeImpl() throws -> WindowsFoundation.Size {
            var size: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &size))
            }
            return .from(abi: size)
        }

        internal func get_BoundsImpl() throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, &bounds))
            }
            return .from(abi: bounds)
        }

        internal func get_FormatImpl() throws -> UWP.DirectXPixelFormat {
            var value: __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Format(pThis, &value))
            }
            return value
        }

        internal func get_AlphaModeImpl() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

        internal func SaveToFileAsyncImpl(_ fileName: String) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncAction) = try ComPtrs.initialize { asyncActionAbi in
                let _fileName = try! HString(fileName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToFileAsync(pThis, _fileName.get(), &asyncActionAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncAction)
        }

        internal func SaveToFileWithBitmapFileFormatAsyncImpl(_ fileName: String, _ fileFormat: Win2D.CanvasBitmapFileFormat) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncAction) = try ComPtrs.initialize { asyncActionAbi in
                let _fileName = try! HString(fileName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToFileWithBitmapFileFormatAsync(pThis, _fileName.get(), fileFormat, &asyncActionAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncAction)
        }

        internal func SaveToFileWithBitmapFileFormatAndQualityAsyncImpl(_ fileName: String, _ fileFormat: Win2D.CanvasBitmapFileFormat, _ quality: Float) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncAction) = try ComPtrs.initialize { asyncActionAbi in
                let _fileName = try! HString(fileName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToFileWithBitmapFileFormatAndQualityAsync(pThis, _fileName.get(), fileFormat, quality, &asyncActionAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncAction)
        }

        internal func SaveToStreamAsyncImpl(_ stream: UWP.AnyIRandomAccessStream?, _ fileFormat: Win2D.CanvasBitmapFileFormat) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncAction) = try ComPtrs.initialize { asyncActionAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToStreamAsync(pThis, _stream, fileFormat, &asyncActionAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncAction)
        }

        internal func SaveToStreamWithQualityAsyncImpl(_ stream: UWP.AnyIRandomAccessStream?, _ fileFormat: Win2D.CanvasBitmapFileFormat, _ quality: Float) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncAction) = try ComPtrs.initialize { asyncActionAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToStreamWithQualityAsync(pThis, _stream, fileFormat, quality, &asyncActionAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncAction)
        }

        internal func GetPixelBytesWithBufferImpl(_ buffer: UWP.AnyIBuffer?) throws {
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPixelBytesWithBuffer(pThis, _buffer))
            }
        }

        internal func GetPixelBytesWithBufferAndSubrectangleImpl(_ buffer: UWP.AnyIBuffer?, _ left: Int32, _ top: Int32, _ width: Int32, _ height: Int32) throws {
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPixelBytesWithBufferAndSubrectangle(pThis, _buffer, left, top, width, height))
            }
        }

        internal func SetPixelBytesWithBufferImpl(_ buffer: UWP.AnyIBuffer?) throws {
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPixelBytesWithBuffer(pThis, _buffer))
            }
        }

        internal func SetPixelBytesWithBufferAndSubrectangleImpl(_ buffer: UWP.AnyIBuffer?, _ left: Int32, _ top: Int32, _ width: Int32, _ height: Int32) throws {
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPixelBytesWithBufferAndSubrectangle(pThis, _buffer, left, top, width, height))
            }
        }

        internal func CopyPixelsFromBitmapImpl(_ otherBitmap: Win2D.CanvasBitmap?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopyPixelsFromBitmap(pThis, RawPointer(otherBitmap)))
            }
        }

        internal func CopyPixelsFromBitmapWithDestPointImpl(_ otherBitmap: Win2D.CanvasBitmap?, _ destX: Int32, _ destY: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopyPixelsFromBitmapWithDestPoint(pThis, RawPointer(otherBitmap), destX, destY))
            }
        }

        internal func CopyPixelsFromBitmapWithDestPointAndSourceRectImpl(_ otherBitmap: Win2D.CanvasBitmap?, _ destX: Int32, _ destY: Int32, _ sourceRectLeft: Int32, _ sourceRectTop: Int32, _ sourceRectWidth: Int32, _ sourceRectHeight: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopyPixelsFromBitmapWithDestPointAndSourceRect(pThis, RawPointer(otherBitmap), destX, destY, sourceRectLeft, sourceRectTop, sourceRectWidth, sourceRectHeight))
            }
        }

    }

    public class ICanvasBitmapFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory }

    }

    public class ICanvasBitmapStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics }

        internal func CreateFromDirect3D11SurfaceImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ surface: UWP.AnyIDirect3DSurface?) throws -> Win2D.CanvasBitmap? {
            let (bitmap) = try ComPtrs.initialize { bitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let surfaceWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(surface)
                let _surface = try! surfaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDirect3D11Surface(pThis, _resourceCreator, _surface, &bitmapAbi))
                }
            }
            return .from(abi: bitmap)
        }

        internal func CreateFromDirect3D11SurfaceWithDpiImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ surface: UWP.AnyIDirect3DSurface?, _ dpi: Float) throws -> Win2D.CanvasBitmap? {
            let (bitmap) = try ComPtrs.initialize { bitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let surfaceWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(surface)
                let _surface = try! surfaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDirect3D11SurfaceWithDpi(pThis, _resourceCreator, _surface, dpi, &bitmapAbi))
                }
            }
            return .from(abi: bitmap)
        }

        internal func CreateFromDirect3D11SurfaceWithDpiAndAlphaImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ surface: UWP.AnyIDirect3DSurface?, _ dpi: Float, _ alpha: Win2D.CanvasAlphaMode) throws -> Win2D.CanvasBitmap? {
            let (bitmap) = try ComPtrs.initialize { bitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let surfaceWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(surface)
                let _surface = try! surfaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDirect3D11SurfaceWithDpiAndAlpha(pThis, _resourceCreator, _surface, dpi, alpha, &bitmapAbi))
                }
            }
            return .from(abi: bitmap)
        }

        internal func CreateFromBytesWithBufferImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ buffer: UWP.AnyIBuffer?, _ widthInPixels: Int32, _ heightInPixels: Int32, _ format: UWP.DirectXPixelFormat) throws -> Win2D.CanvasBitmap? {
            let (bitmap) = try ComPtrs.initialize { bitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
                let _buffer = try! bufferWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromBytesWithBuffer(pThis, _resourceCreator, _buffer, widthInPixels, heightInPixels, format, &bitmapAbi))
                }
            }
            return .from(abi: bitmap)
        }

        internal func CreateFromBytesWithBufferAndDpiImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ buffer: UWP.AnyIBuffer?, _ widthInPixels: Int32, _ heightInPixels: Int32, _ format: UWP.DirectXPixelFormat, _ dpi: Float) throws -> Win2D.CanvasBitmap? {
            let (bitmap) = try ComPtrs.initialize { bitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
                let _buffer = try! bufferWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromBytesWithBufferAndDpi(pThis, _resourceCreator, _buffer, widthInPixels, heightInPixels, format, dpi, &bitmapAbi))
                }
            }
            return .from(abi: bitmap)
        }

        internal func CreateFromBytesWithBufferAndDpiAndAlphaImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ buffer: UWP.AnyIBuffer?, _ widthInPixels: Int32, _ heightInPixels: Int32, _ format: UWP.DirectXPixelFormat, _ dpi: Float, _ alpha: Win2D.CanvasAlphaMode) throws -> Win2D.CanvasBitmap? {
            let (bitmap) = try ComPtrs.initialize { bitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
                let _buffer = try! bufferWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromBytesWithBufferAndDpiAndAlpha(pThis, _resourceCreator, _buffer, widthInPixels, heightInPixels, format, dpi, alpha, &bitmapAbi))
                }
            }
            return .from(abi: bitmap)
        }

        internal func CreateFromSoftwareBitmapImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ sourceBitmap: UWP.SoftwareBitmap?) throws -> Win2D.CanvasBitmap? {
            let (bitmap) = try ComPtrs.initialize { bitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromSoftwareBitmap(pThis, _resourceCreator, RawPointer(sourceBitmap), &bitmapAbi))
                }
            }
            return .from(abi: bitmap)
        }

        internal func LoadAsyncFromHstringImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ fileName: String) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>? {
            let (canvasBitmap) = try ComPtrs.initialize { canvasBitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let _fileName = try! HString(fileName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromHstring(pThis, _resourceCreator, _fileName.get(), &canvasBitmapAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: canvasBitmap)
        }

        internal func LoadAsyncFromHstringWithDpiImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ fileName: String, _ dpi: Float) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>? {
            let (canvasBitmap) = try ComPtrs.initialize { canvasBitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let _fileName = try! HString(fileName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromHstringWithDpi(pThis, _resourceCreator, _fileName.get(), dpi, &canvasBitmapAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: canvasBitmap)
        }

        internal func LoadAsyncFromHstringWithDpiAndAlphaImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ fileName: String, _ dpi: Float, _ alpha: Win2D.CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>? {
            let (canvasBitmap) = try ComPtrs.initialize { canvasBitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let _fileName = try! HString(fileName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromHstringWithDpiAndAlpha(pThis, _resourceCreator, _fileName.get(), dpi, alpha, &canvasBitmapAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: canvasBitmap)
        }

        internal func LoadAsyncFromUriImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ uri: WindowsFoundation.Uri?) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>? {
            let (canvasBitmap) = try ComPtrs.initialize { canvasBitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromUri(pThis, _resourceCreator, RawPointer(uri), &canvasBitmapAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: canvasBitmap)
        }

        internal func LoadAsyncFromUriWithDpiImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ uri: WindowsFoundation.Uri?, _ dpi: Float) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>? {
            let (canvasBitmap) = try ComPtrs.initialize { canvasBitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromUriWithDpi(pThis, _resourceCreator, RawPointer(uri), dpi, &canvasBitmapAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: canvasBitmap)
        }

        internal func LoadAsyncFromUriWithDpiAndAlphaImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ uri: WindowsFoundation.Uri?, _ dpi: Float, _ alpha: Win2D.CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>? {
            let (canvasBitmap) = try ComPtrs.initialize { canvasBitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromUriWithDpiAndAlpha(pThis, _resourceCreator, RawPointer(uri), dpi, alpha, &canvasBitmapAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: canvasBitmap)
        }

        internal func LoadAsyncFromStreamImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ stream: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>? {
            let (canvasBitmap) = try ComPtrs.initialize { canvasBitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromStream(pThis, _resourceCreator, _stream, &canvasBitmapAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: canvasBitmap)
        }

        internal func LoadAsyncFromStreamWithDpiImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ stream: UWP.AnyIRandomAccessStream?, _ dpi: Float) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>? {
            let (canvasBitmap) = try ComPtrs.initialize { canvasBitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromStreamWithDpi(pThis, _resourceCreator, _stream, dpi, &canvasBitmapAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: canvasBitmap)
        }

        internal func LoadAsyncFromStreamWithDpiAndAlphaImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ stream: UWP.AnyIRandomAccessStream?, _ dpi: Float, _ alpha: Win2D.CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>? {
            let (canvasBitmap) = try ComPtrs.initialize { canvasBitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromStreamWithDpiAndAlpha(pThis, _resourceCreator, _stream, dpi, alpha, &canvasBitmapAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: canvasBitmap)
        }

    }

    public class ICanvasCommandList: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList }

        internal func CreateDrawingSessionImpl() throws -> Win2D.CanvasDrawingSession? {
            let (drawingSession) = try ComPtrs.initialize { drawingSessionAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSession(pThis, &drawingSessionAbi))
                }
            }
            return .from(abi: drawingSession)
        }

        internal func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICanvasCommandListFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory }

        internal func CreateImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?) throws -> ICanvasCommandList {
            let (commandList) = try ComPtrs.initialize { commandListAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _resourceCreator, &commandListAbi))
                }
            }
            return ICanvasCommandList(commandList!)
        }

    }

    public class ICanvasDevice: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice }

        internal func get_ForceSoftwareRendererImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForceSoftwareRenderer(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_MaximumBitmapSizeInPixelsImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumBitmapSizeInPixels(pThis, &value))
            }
            return value
        }

        internal func IsPixelFormatSupportedImpl(_ pixelFormat: UWP.DirectXPixelFormat) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsPixelFormatSupported(pThis, pixelFormat, &value))
            }
            return .init(from: value)
        }

        internal func IsBufferPrecisionSupportedImpl(_ bufferPrecision: Win2D.CanvasBufferPrecision) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsBufferPrecisionSupported(pThis, bufferPrecision, &value))
            }
            return .init(from: value)
        }

        internal func get_MaximumCacheSizeImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumCacheSize(pThis, &value))
            }
            return value
        }

        internal func put_MaximumCacheSizeImpl(_ value: UInt64) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaximumCacheSize(pThis, value))
            }
        }

        internal func get_LowPriorityImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LowPriority(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LowPriorityImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LowPriority(pThis, .init(from: value)))
            }
        }

        internal func add_DeviceLostImpl(_ value: TypedEventHandler<Win2D.CanvasDevice?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DeviceLost(pThis, _value, &token))
            }
            return token
        }

        internal func remove_DeviceLostImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DeviceLost(pThis, token))
            }
        }

        internal func IsDeviceLostImpl(_ hresult: Int32) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDeviceLost(pThis, hresult, &value))
            }
            return .init(from: value)
        }

        internal func RaiseDeviceLostImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RaiseDeviceLost(pThis))
            }
        }

        internal func LockImpl() throws -> Win2D.CanvasLock? {
            let (lock) = try ComPtrs.initialize { lockAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Lock(pThis, &lockAbi))
                }
            }
            return .from(abi: lock)
        }

        internal func IsDeviceLost2Impl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDeviceLost2(pThis, &value))
            }
            return .init(from: value)
        }

        internal func GetDeviceLostReasonImpl() throws -> Int32 {
            var hresult: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeviceLostReason(pThis, &hresult))
            }
            return hresult
        }

    }

    public class ICanvasDeviceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory }

        internal func CreateWithForceSoftwareRendererOptionImpl(_ forceSoftwareRenderer: Bool) throws -> ICanvasDevice {
            let (canvasDevice) = try ComPtrs.initialize { canvasDeviceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithForceSoftwareRendererOption(pThis, .init(from: forceSoftwareRenderer), &canvasDeviceAbi))
                }
            }
            return ICanvasDevice(canvasDevice!)
        }

    }

    public class ICanvasDeviceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics }

        internal func CreateFromDirect3D11DeviceImpl(_ direct3DDevice: UWP.AnyIDirect3DDevice?) throws -> Win2D.CanvasDevice? {
            let (canvasDevice) = try ComPtrs.initialize { canvasDeviceAbi in
                let direct3DDeviceWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DDeviceWrapper(direct3DDevice)
                let _direct3DDevice = try! direct3DDeviceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDirect3D11Device(pThis, _direct3DDevice, &canvasDeviceAbi))
                }
            }
            return .from(abi: canvasDevice)
        }

        internal func GetSharedDeviceImpl() throws -> Win2D.CanvasDevice? {
            let (canvasDevice) = try ComPtrs.initialize { canvasDeviceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetSharedDevice(pThis, &canvasDeviceAbi))
                }
            }
            return .from(abi: canvasDevice)
        }

        internal func GetSharedDeviceWithForceSoftwareRendererImpl(_ forceSoftwareRenderer: Bool) throws -> Win2D.CanvasDevice? {
            let (canvasDevice) = try ComPtrs.initialize { canvasDeviceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetSharedDeviceWithForceSoftwareRenderer(pThis, .init(from: forceSoftwareRenderer), &canvasDeviceAbi))
                }
            }
            return .from(abi: canvasDevice)
        }

        internal func put_DebugLevelImpl(_ value: Win2D.CanvasDebugLevel) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DebugLevel(pThis, value))
            }
        }

        internal func get_DebugLevelImpl() throws -> Win2D.CanvasDebugLevel {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DebugLevel(pThis, &value))
            }
            return value
        }

    }

    public class ICanvasDrawingSession: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession }

        internal func ClearImpl(_ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis, .from(swift: color)))
            }
        }

        internal func ClearHdrImpl(_ color: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearHdr(pThis, .from(swift: color)))
            }
        }

        internal func FlushImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Flush(pThis))
            }
        }

        internal func DrawImageAtOriginImpl(_ image: Win2D.AnyICanvasImage?) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOrigin(pThis, _image))
            }
        }

        internal func DrawImageAtOffsetImpl(_ image: Win2D.AnyICanvasImage?, _ offset: WindowsFoundation.Vector2) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffset(pThis, _image, .from(swift: offset)))
            }
        }

        internal func DrawImageAtCoordsImpl(_ image: Win2D.AnyICanvasImage?, _ x: Float, _ y: Float) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoords(pThis, _image, x, y))
            }
        }

        internal func DrawImageToRectImpl(_ bitmap: Win2D.CanvasBitmap?, _ destinationRectangle: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRect(pThis, RawPointer(bitmap), .from(swift: destinationRectangle)))
            }
        }

        internal func DrawImageAtOffsetWithSourceRectImpl(_ image: Win2D.AnyICanvasImage?, _ offset: WindowsFoundation.Vector2, _ sourceRectangle: WindowsFoundation.Rect) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffsetWithSourceRect(pThis, _image, .from(swift: offset), .from(swift: sourceRectangle)))
            }
        }

        internal func DrawImageAtCoordsWithSourceRectImpl(_ image: Win2D.AnyICanvasImage?, _ x: Float, _ y: Float, _ sourceRectangle: WindowsFoundation.Rect) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoordsWithSourceRect(pThis, _image, x, y, .from(swift: sourceRectangle)))
            }
        }

        internal func DrawImageToRectWithSourceRectImpl(_ image: Win2D.AnyICanvasImage?, _ destinationRectangle: WindowsFoundation.Rect, _ sourceRectangle: WindowsFoundation.Rect) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRectWithSourceRect(pThis, _image, .from(swift: destinationRectangle), .from(swift: sourceRectangle)))
            }
        }

        internal func DrawImageAtOffsetWithSourceRectAndOpacityImpl(_ image: Win2D.AnyICanvasImage?, _ offset: WindowsFoundation.Vector2, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffsetWithSourceRectAndOpacity(pThis, _image, .from(swift: offset), .from(swift: sourceRectangle), opacity))
            }
        }

        internal func DrawImageAtCoordsWithSourceRectAndOpacityImpl(_ image: Win2D.AnyICanvasImage?, _ x: Float, _ y: Float, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoordsWithSourceRectAndOpacity(pThis, _image, x, y, .from(swift: sourceRectangle), opacity))
            }
        }

        internal func DrawImageToRectWithSourceRectAndOpacityImpl(_ image: Win2D.AnyICanvasImage?, _ destinationRectangle: WindowsFoundation.Rect, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRectWithSourceRectAndOpacity(pThis, _image, .from(swift: destinationRectangle), .from(swift: sourceRectangle), opacity))
            }
        }

        internal func DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationImpl(_ image: Win2D.AnyICanvasImage?, _ offset: WindowsFoundation.Vector2, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: Win2D.CanvasImageInterpolation) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(pThis, _image, .from(swift: offset), .from(swift: sourceRectangle), opacity, interpolation))
            }
        }

        internal func DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationImpl(_ image: Win2D.AnyICanvasImage?, _ x: Float, _ y: Float, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: Win2D.CanvasImageInterpolation) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(pThis, _image, x, y, .from(swift: sourceRectangle), opacity, interpolation))
            }
        }

        internal func DrawImageToRectWithSourceRectAndOpacityAndInterpolationImpl(_ image: Win2D.AnyICanvasImage?, _ destinationRectangle: WindowsFoundation.Rect, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: Win2D.CanvasImageInterpolation) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRectWithSourceRectAndOpacityAndInterpolation(pThis, _image, .from(swift: destinationRectangle), .from(swift: sourceRectangle), opacity, interpolation))
            }
        }

        internal func DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndCompositeImpl(_ image: Win2D.AnyICanvasImage?, _ offset: WindowsFoundation.Vector2, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: Win2D.CanvasImageInterpolation, _ composite: Win2D.CanvasComposite) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(pThis, _image, .from(swift: offset), .from(swift: sourceRectangle), opacity, interpolation, composite))
            }
        }

        internal func DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndCompositeImpl(_ image: Win2D.AnyICanvasImage?, _ x: Float, _ y: Float, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: Win2D.CanvasImageInterpolation, _ composite: Win2D.CanvasComposite) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(pThis, _image, x, y, .from(swift: sourceRectangle), opacity, interpolation, composite))
            }
        }

        internal func DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndCompositeImpl(_ image: Win2D.AnyICanvasImage?, _ destinationRectangle: WindowsFoundation.Rect, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: Win2D.CanvasImageInterpolation, _ composite: Win2D.CanvasComposite) throws {
            let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
            let _image = try! imageWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(pThis, _image, .from(swift: destinationRectangle), .from(swift: sourceRectangle), opacity, interpolation, composite))
            }
        }

        internal func DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspectiveImpl(_ bitmap: Win2D.CanvasBitmap?, _ offset: WindowsFoundation.Vector2, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: Win2D.CanvasImageInterpolation, _ perspective: WindowsFoundation.Matrix4x4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(pThis, RawPointer(bitmap), .from(swift: offset), .from(swift: sourceRectangle), opacity, interpolation, .from(swift: perspective)))
            }
        }

        internal func DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspectiveImpl(_ bitmap: Win2D.CanvasBitmap?, _ x: Float, _ y: Float, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: Win2D.CanvasImageInterpolation, _ perspective: WindowsFoundation.Matrix4x4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(pThis, RawPointer(bitmap), x, y, .from(swift: sourceRectangle), opacity, interpolation, .from(swift: perspective)))
            }
        }

        internal func DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspectiveImpl(_ bitmap: Win2D.CanvasBitmap?, _ destinationRectangle: WindowsFoundation.Rect, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: Win2D.CanvasImageInterpolation, _ perspective: WindowsFoundation.Matrix4x4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(pThis, RawPointer(bitmap), .from(swift: destinationRectangle), .from(swift: sourceRectangle), opacity, interpolation, .from(swift: perspective)))
            }
        }

        internal func DrawLineWithBrushImpl(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithBrush(pThis, .from(swift: point0), .from(swift: point1), _brush))
            }
        }

        internal func DrawLineAtCoordsWithBrushImpl(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithBrush(pThis, x0, y0, x1, y1, _brush))
            }
        }

        internal func DrawLineWithColorImpl(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithColor(pThis, .from(swift: point0), .from(swift: point1), .from(swift: color)))
            }
        }

        internal func DrawLineAtCoordsWithColorImpl(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithColor(pThis, x0, y0, x1, y1, .from(swift: color)))
            }
        }

        internal func DrawLineWithBrushAndStrokeWidthImpl(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithBrushAndStrokeWidth(pThis, .from(swift: point0), .from(swift: point1), _brush, strokeWidth))
            }
        }

        internal func DrawLineAtCoordsWithBrushAndStrokeWidthImpl(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithBrushAndStrokeWidth(pThis, x0, y0, x1, y1, _brush, strokeWidth))
            }
        }

        internal func DrawLineWithColorAndStrokeWidthImpl(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithColorAndStrokeWidth(pThis, .from(swift: point0), .from(swift: point1), .from(swift: color), strokeWidth))
            }
        }

        internal func DrawLineAtCoordsWithColorAndStrokeWidthImpl(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithColorAndStrokeWidth(pThis, x0, y0, x1, y1, .from(swift: color), strokeWidth))
            }
        }

        internal func DrawLineWithBrushAndStrokeWidthAndStrokeStyleImpl(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithBrushAndStrokeWidthAndStrokeStyle(pThis, .from(swift: point0), .from(swift: point1), _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyleImpl(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, x0, y0, x1, y1, _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawLineWithColorAndStrokeWidthAndStrokeStyleImpl(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithColorAndStrokeWidthAndStrokeStyle(pThis, .from(swift: point0), .from(swift: point1), .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyleImpl(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, x0, y0, x1, y1, .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawRectangleWithBrushImpl(_ rect: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithBrush(pThis, .from(swift: rect), _brush))
            }
        }

        internal func DrawRectangleAtCoordsWithBrushImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithBrush(pThis, x, y, w, h, _brush))
            }
        }

        internal func DrawRectangleWithColorImpl(_ rect: WindowsFoundation.Rect, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithColor(pThis, .from(swift: rect), .from(swift: color)))
            }
        }

        internal func DrawRectangleAtCoordsWithColorImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithColor(pThis, x, y, w, h, .from(swift: color)))
            }
        }

        internal func DrawRectangleWithBrushAndStrokeWidthImpl(_ rect: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithBrushAndStrokeWidth(pThis, .from(swift: rect), _brush, strokeWidth))
            }
        }

        internal func DrawRectangleAtCoordsWithBrushAndStrokeWidthImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithBrushAndStrokeWidth(pThis, x, y, w, h, _brush, strokeWidth))
            }
        }

        internal func DrawRectangleWithColorAndStrokeWidthImpl(_ rect: WindowsFoundation.Rect, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithColorAndStrokeWidth(pThis, .from(swift: rect), .from(swift: color), strokeWidth))
            }
        }

        internal func DrawRectangleAtCoordsWithColorAndStrokeWidthImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithColorAndStrokeWidth(pThis, x, y, w, h, .from(swift: color), strokeWidth))
            }
        }

        internal func DrawRectangleWithBrushAndStrokeWidthAndStrokeStyleImpl(_ rect: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(pThis, .from(swift: rect), _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyleImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, x, y, w, h, _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawRectangleWithColorAndStrokeWidthAndStrokeStyleImpl(_ rect: WindowsFoundation.Rect, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(pThis, .from(swift: rect), .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyleImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, x, y, w, h, .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func FillRectangleWithBrushImpl(_ rect: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleWithBrush(pThis, .from(swift: rect), _brush))
            }
        }

        internal func FillRectangleAtCoordsWithBrushImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleAtCoordsWithBrush(pThis, x, y, w, h, _brush))
            }
        }

        internal func FillRectangleWithColorImpl(_ rect: WindowsFoundation.Rect, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleWithColor(pThis, .from(swift: rect), .from(swift: color)))
            }
        }

        internal func FillRectangleAtCoordsWithColorImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleAtCoordsWithColor(pThis, x, y, w, h, .from(swift: color)))
            }
        }

        internal func FillRectangleWithBrushAndOpacityBrushImpl(_ rect: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush?, _ opacityBrush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            let opacityBrushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(opacityBrush)
            let _opacityBrush = try! opacityBrushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleWithBrushAndOpacityBrush(pThis, .from(swift: rect), _brush, _opacityBrush))
            }
        }

        internal func FillRectangleAtCoordsWithBrushAndOpacityBrushImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush?, _ opacityBrush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            let opacityBrushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(opacityBrush)
            let _opacityBrush = try! opacityBrushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleAtCoordsWithBrushAndOpacityBrush(pThis, x, y, w, h, _brush, _opacityBrush))
            }
        }

        internal func DrawRoundedRectangleWithBrushImpl(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithBrush(pThis, .from(swift: rect), radiusX, radiusY, _brush))
            }
        }

        internal func DrawRoundedRectangleAtCoordsWithBrushImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithBrush(pThis, x, y, w, h, radiusX, radiusY, _brush))
            }
        }

        internal func DrawRoundedRectangleWithColorImpl(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithColor(pThis, .from(swift: rect), radiusX, radiusY, .from(swift: color)))
            }
        }

        internal func DrawRoundedRectangleAtCoordsWithColorImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithColor(pThis, x, y, w, h, radiusX, radiusY, .from(swift: color)))
            }
        }

        internal func DrawRoundedRectangleWithBrushAndStrokeWidthImpl(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithBrushAndStrokeWidth(pThis, .from(swift: rect), radiusX, radiusY, _brush, strokeWidth))
            }
        }

        internal func DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(pThis, x, y, w, h, radiusX, radiusY, _brush, strokeWidth))
            }
        }

        internal func DrawRoundedRectangleWithColorAndStrokeWidthImpl(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithColorAndStrokeWidth(pThis, .from(swift: rect), radiusX, radiusY, .from(swift: color), strokeWidth))
            }
        }

        internal func DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(pThis, x, y, w, h, radiusX, radiusY, .from(swift: color), strokeWidth))
            }
        }

        internal func DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyleImpl(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(pThis, .from(swift: rect), radiusX, radiusY, _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyleImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, x, y, w, h, radiusX, radiusY, _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyleImpl(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(pThis, .from(swift: rect), radiusX, radiusY, .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyleImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, x, y, w, h, radiusX, radiusY, .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func FillRoundedRectangleWithBrushImpl(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillRoundedRectangleWithBrush(pThis, .from(swift: rect), radiusX, radiusY, _brush))
            }
        }

        internal func FillRoundedRectangleAtCoordsWithBrushImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillRoundedRectangleAtCoordsWithBrush(pThis, x, y, w, h, radiusX, radiusY, _brush))
            }
        }

        internal func FillRoundedRectangleWithColorImpl(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillRoundedRectangleWithColor(pThis, .from(swift: rect), radiusX, radiusY, .from(swift: color)))
            }
        }

        internal func FillRoundedRectangleAtCoordsWithColorImpl(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillRoundedRectangleAtCoordsWithColor(pThis, x, y, w, h, radiusX, radiusY, .from(swift: color)))
            }
        }

        internal func DrawEllipseWithBrushImpl(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithBrush(pThis, .from(swift: centerPoint), radiusX, radiusY, _brush))
            }
        }

        internal func DrawEllipseAtCoordsWithBrushImpl(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithBrush(pThis, x, y, radiusX, radiusY, _brush))
            }
        }

        internal func DrawEllipseWithColorImpl(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithColor(pThis, .from(swift: centerPoint), radiusX, radiusY, .from(swift: color)))
            }
        }

        internal func DrawEllipseAtCoordsWithColorImpl(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithColor(pThis, x, y, radiusX, radiusY, .from(swift: color)))
            }
        }

        internal func DrawEllipseWithBrushAndStrokeWidthImpl(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithBrushAndStrokeWidth(pThis, .from(swift: centerPoint), radiusX, radiusY, _brush, strokeWidth))
            }
        }

        internal func DrawEllipseAtCoordsWithBrushAndStrokeWidthImpl(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithBrushAndStrokeWidth(pThis, x, y, radiusX, radiusY, _brush, strokeWidth))
            }
        }

        internal func DrawEllipseWithColorAndStrokeWidthImpl(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithColorAndStrokeWidth(pThis, .from(swift: centerPoint), radiusX, radiusY, .from(swift: color), strokeWidth))
            }
        }

        internal func DrawEllipseAtCoordsWithColorAndStrokeWidthImpl(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithColorAndStrokeWidth(pThis, x, y, radiusX, radiusY, .from(swift: color), strokeWidth))
            }
        }

        internal func DrawEllipseWithBrushAndStrokeWidthAndStrokeStyleImpl(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(pThis, .from(swift: centerPoint), radiusX, radiusY, _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyleImpl(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, x, y, radiusX, radiusY, _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawEllipseWithColorAndStrokeWidthAndStrokeStyleImpl(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(pThis, .from(swift: centerPoint), radiusX, radiusY, .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyleImpl(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, x, y, radiusX, radiusY, .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func FillEllipseWithBrushImpl(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillEllipseWithBrush(pThis, .from(swift: centerPoint), radiusX, radiusY, _brush))
            }
        }

        internal func FillEllipseAtCoordsWithBrushImpl(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillEllipseAtCoordsWithBrush(pThis, x, y, radiusX, radiusY, _brush))
            }
        }

        internal func FillEllipseWithColorImpl(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillEllipseWithColor(pThis, .from(swift: centerPoint), radiusX, radiusY, .from(swift: color)))
            }
        }

        internal func FillEllipseAtCoordsWithColorImpl(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillEllipseAtCoordsWithColor(pThis, x, y, radiusX, radiusY, .from(swift: color)))
            }
        }

        internal func DrawCircleWithBrushImpl(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithBrush(pThis, .from(swift: centerPoint), radius, _brush))
            }
        }

        internal func DrawCircleAtCoordsWithBrushImpl(_ x: Float, _ y: Float, _ radius: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithBrush(pThis, x, y, radius, _brush))
            }
        }

        internal func DrawCircleWithColorImpl(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithColor(pThis, .from(swift: centerPoint), radius, .from(swift: color)))
            }
        }

        internal func DrawCircleAtCoordsWithColorImpl(_ x: Float, _ y: Float, _ radius: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithColor(pThis, x, y, radius, .from(swift: color)))
            }
        }

        internal func DrawCircleWithBrushAndStrokeWidthImpl(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithBrushAndStrokeWidth(pThis, .from(swift: centerPoint), radius, _brush, strokeWidth))
            }
        }

        internal func DrawCircleAtCoordsWithBrushAndStrokeWidthImpl(_ x: Float, _ y: Float, _ radius: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithBrushAndStrokeWidth(pThis, x, y, radius, _brush, strokeWidth))
            }
        }

        internal func DrawCircleWithColorAndStrokeWidthImpl(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithColorAndStrokeWidth(pThis, .from(swift: centerPoint), radius, .from(swift: color), strokeWidth))
            }
        }

        internal func DrawCircleAtCoordsWithColorAndStrokeWidthImpl(_ x: Float, _ y: Float, _ radius: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithColorAndStrokeWidth(pThis, x, y, radius, .from(swift: color), strokeWidth))
            }
        }

        internal func DrawCircleWithBrushAndStrokeWidthAndStrokeStyleImpl(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(pThis, .from(swift: centerPoint), radius, _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyleImpl(_ x: Float, _ y: Float, _ radius: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, x, y, radius, _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawCircleWithColorAndStrokeWidthAndStrokeStyleImpl(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithColorAndStrokeWidthAndStrokeStyle(pThis, .from(swift: centerPoint), radius, .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyleImpl(_ x: Float, _ y: Float, _ radius: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, x, y, radius, .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func FillCircleWithBrushImpl(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillCircleWithBrush(pThis, .from(swift: centerPoint), radius, _brush))
            }
        }

        internal func FillCircleAtCoordsWithBrushImpl(_ x: Float, _ y: Float, _ radius: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillCircleAtCoordsWithBrush(pThis, x, y, radius, _brush))
            }
        }

        internal func FillCircleWithColorImpl(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillCircleWithColor(pThis, .from(swift: centerPoint), radius, .from(swift: color)))
            }
        }

        internal func FillCircleAtCoordsWithColorImpl(_ x: Float, _ y: Float, _ radius: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillCircleAtCoordsWithColor(pThis, x, y, radius, .from(swift: color)))
            }
        }

        internal func DrawTextAtPointWithColorImpl(_ text: String, _ point: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
            let _text = try! HString(text)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointWithColor(pThis, _text.get(), .from(swift: point), .from(swift: color)))
            }
        }

        internal func DrawTextAtPointCoordsWithColorImpl(_ text: String, _ x: Float, _ y: Float, _ color: UWP.Color) throws {
            let _text = try! HString(text)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointCoordsWithColor(pThis, _text.get(), x, y, .from(swift: color)))
            }
        }

        internal func DrawTextAtPointWithBrushAndFormatImpl(_ text: String, _ point: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?, _ format: Win2D.CanvasTextFormat?) throws {
            let _text = try! HString(text)
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointWithBrushAndFormat(pThis, _text.get(), .from(swift: point), _brush, RawPointer(format)))
            }
        }

        internal func DrawTextAtRectWithBrushAndFormatImpl(_ text: String, _ rectangle: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush?, _ format: Win2D.CanvasTextFormat?) throws {
            let _text = try! HString(text)
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtRectWithBrushAndFormat(pThis, _text.get(), .from(swift: rectangle), _brush, RawPointer(format)))
            }
        }

        internal func DrawTextAtPointCoordsWithBrushAndFormatImpl(_ text: String, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush?, _ format: Win2D.CanvasTextFormat?) throws {
            let _text = try! HString(text)
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointCoordsWithBrushAndFormat(pThis, _text.get(), x, y, _brush, RawPointer(format)))
            }
        }

        internal func DrawTextAtRectCoordsWithBrushAndFormatImpl(_ text: String, _ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush?, _ format: Win2D.CanvasTextFormat?) throws {
            let _text = try! HString(text)
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtRectCoordsWithBrushAndFormat(pThis, _text.get(), x, y, w, h, _brush, RawPointer(format)))
            }
        }

        internal func DrawTextAtPointWithColorAndFormatImpl(_ text: String, _ point: WindowsFoundation.Vector2, _ color: UWP.Color, _ format: Win2D.CanvasTextFormat?) throws {
            let _text = try! HString(text)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointWithColorAndFormat(pThis, _text.get(), .from(swift: point), .from(swift: color), RawPointer(format)))
            }
        }

        internal func DrawTextAtRectWithColorAndFormatImpl(_ text: String, _ rectangle: WindowsFoundation.Rect, _ color: UWP.Color, _ format: Win2D.CanvasTextFormat?) throws {
            let _text = try! HString(text)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtRectWithColorAndFormat(pThis, _text.get(), .from(swift: rectangle), .from(swift: color), RawPointer(format)))
            }
        }

        internal func DrawTextAtPointCoordsWithColorAndFormatImpl(_ text: String, _ x: Float, _ y: Float, _ color: UWP.Color, _ format: Win2D.CanvasTextFormat?) throws {
            let _text = try! HString(text)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointCoordsWithColorAndFormat(pThis, _text.get(), x, y, .from(swift: color), RawPointer(format)))
            }
        }

        internal func DrawTextAtRectCoordsWithColorAndFormatImpl(_ text: String, _ x: Float, _ y: Float, _ w: Float, _ h: Float, _ color: UWP.Color, _ format: Win2D.CanvasTextFormat?) throws {
            let _text = try! HString(text)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtRectCoordsWithColorAndFormat(pThis, _text.get(), x, y, w, h, .from(swift: color), RawPointer(format)))
            }
        }

        internal func DrawGeometryWithBrushImpl(_ geometry: Win2D.CanvasGeometry?, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithBrush(pThis, RawPointer(geometry), .from(swift: offset), _brush))
            }
        }

        internal func DrawGeometryWithColorImpl(_ geometry: Win2D.CanvasGeometry?, _ offset: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithColor(pThis, RawPointer(geometry), .from(swift: offset), .from(swift: color)))
            }
        }

        internal func DrawGeometryAtCoordsWithBrushImpl(_ geometry: Win2D.CanvasGeometry?, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithBrush(pThis, RawPointer(geometry), x, y, _brush))
            }
        }

        internal func DrawGeometryAtCoordsWithColorImpl(_ geometry: Win2D.CanvasGeometry?, _ x: Float, _ y: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithColor(pThis, RawPointer(geometry), x, y, .from(swift: color)))
            }
        }

        internal func DrawGeometryAtOriginWithBrushImpl(_ geometry: Win2D.CanvasGeometry?, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithBrush(pThis, RawPointer(geometry), _brush))
            }
        }

        internal func DrawGeometryAtOriginWithColorImpl(_ geometry: Win2D.CanvasGeometry?, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithColor(pThis, RawPointer(geometry), .from(swift: color)))
            }
        }

        internal func DrawGeometryWithBrushAndStrokeWidthImpl(_ geometry: Win2D.CanvasGeometry?, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithBrushAndStrokeWidth(pThis, RawPointer(geometry), .from(swift: offset), _brush, strokeWidth))
            }
        }

        internal func DrawGeometryWithColorAndStrokeWidthImpl(_ geometry: Win2D.CanvasGeometry?, _ offset: WindowsFoundation.Vector2, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithColorAndStrokeWidth(pThis, RawPointer(geometry), .from(swift: offset), .from(swift: color), strokeWidth))
            }
        }

        internal func DrawGeometryAtCoordsWithBrushAndStrokeWidthImpl(_ geometry: Win2D.CanvasGeometry?, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithBrushAndStrokeWidth(pThis, RawPointer(geometry), x, y, _brush, strokeWidth))
            }
        }

        internal func DrawGeometryAtCoordsWithColorAndStrokeWidthImpl(_ geometry: Win2D.CanvasGeometry?, _ x: Float, _ y: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithColorAndStrokeWidth(pThis, RawPointer(geometry), x, y, .from(swift: color), strokeWidth))
            }
        }

        internal func DrawGeometryAtOriginWithBrushAndStrokeWidthImpl(_ geometry: Win2D.CanvasGeometry?, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithBrushAndStrokeWidth(pThis, RawPointer(geometry), _brush, strokeWidth))
            }
        }

        internal func DrawGeometryAtOriginWithColorAndStrokeWidthImpl(_ geometry: Win2D.CanvasGeometry?, _ color: UWP.Color, _ strokeWidth: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithColorAndStrokeWidth(pThis, RawPointer(geometry), .from(swift: color), strokeWidth))
            }
        }

        internal func DrawGeometryWithBrushAndStrokeWidthAndStrokeStyleImpl(_ geometry: Win2D.CanvasGeometry?, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(pThis, RawPointer(geometry), .from(swift: offset), _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawGeometryWithColorAndStrokeWidthAndStrokeStyleImpl(_ geometry: Win2D.CanvasGeometry?, _ offset: WindowsFoundation.Vector2, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(pThis, RawPointer(geometry), .from(swift: offset), .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyleImpl(_ geometry: Win2D.CanvasGeometry?, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, RawPointer(geometry), x, y, _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyleImpl(_ geometry: Win2D.CanvasGeometry?, _ x: Float, _ y: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, RawPointer(geometry), x, y, .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyleImpl(_ geometry: Win2D.CanvasGeometry?, _ brush: Win2D.AnyICanvasBrush?, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(pThis, RawPointer(geometry), _brush, strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyleImpl(_ geometry: Win2D.CanvasGeometry?, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(pThis, RawPointer(geometry), .from(swift: color), strokeWidth, RawPointer(strokeStyle)))
            }
        }

        internal func FillGeometryWithBrushImpl(_ geometry: Win2D.CanvasGeometry?, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryWithBrush(pThis, RawPointer(geometry), .from(swift: offset), _brush))
            }
        }

        internal func FillGeometryWithBrushAndOpacityBrushImpl(_ geometry: Win2D.CanvasGeometry?, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?, _ opacityBrush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            let opacityBrushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(opacityBrush)
            let _opacityBrush = try! opacityBrushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryWithBrushAndOpacityBrush(pThis, RawPointer(geometry), .from(swift: offset), _brush, _opacityBrush))
            }
        }

        internal func FillGeometryWithColorImpl(_ geometry: Win2D.CanvasGeometry?, _ offset: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryWithColor(pThis, RawPointer(geometry), .from(swift: offset), .from(swift: color)))
            }
        }

        internal func FillGeometryAtCoordsWithBrushImpl(_ geometry: Win2D.CanvasGeometry?, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtCoordsWithBrush(pThis, RawPointer(geometry), x, y, _brush))
            }
        }

        internal func FillGeometryAtCoordsWithBrushAndOpacityBrushImpl(_ geometry: Win2D.CanvasGeometry?, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush?, _ opacityBrush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            let opacityBrushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(opacityBrush)
            let _opacityBrush = try! opacityBrushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtCoordsWithBrushAndOpacityBrush(pThis, RawPointer(geometry), x, y, _brush, _opacityBrush))
            }
        }

        internal func FillGeometryAtCoordsWithColorImpl(_ geometry: Win2D.CanvasGeometry?, _ x: Float, _ y: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtCoordsWithColor(pThis, RawPointer(geometry), x, y, .from(swift: color)))
            }
        }

        internal func FillGeometryAtOriginWithBrushImpl(_ geometry: Win2D.CanvasGeometry?, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtOriginWithBrush(pThis, RawPointer(geometry), _brush))
            }
        }

        internal func FillGeometryAtOriginWithBrushAndOpacityBrushImpl(_ geometry: Win2D.CanvasGeometry?, _ brush: Win2D.AnyICanvasBrush?, _ opacityBrush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            let opacityBrushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(opacityBrush)
            let _opacityBrush = try! opacityBrushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtOriginWithBrushAndOpacityBrush(pThis, RawPointer(geometry), _brush, _opacityBrush))
            }
        }

        internal func FillGeometryAtOriginWithColorImpl(_ geometry: Win2D.CanvasGeometry?, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtOriginWithColor(pThis, RawPointer(geometry), .from(swift: color)))
            }
        }

        internal func DrawCachedGeometryWithBrushImpl(_ geometry: Win2D.CanvasCachedGeometry?, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryWithBrush(pThis, RawPointer(geometry), .from(swift: offset), _brush))
            }
        }

        internal func DrawCachedGeometryWithColorImpl(_ geometry: Win2D.CanvasCachedGeometry?, _ offset: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryWithColor(pThis, RawPointer(geometry), .from(swift: offset), .from(swift: color)))
            }
        }

        internal func DrawCachedGeometryAtCoordsWithBrushImpl(_ geometry: Win2D.CanvasCachedGeometry?, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryAtCoordsWithBrush(pThis, RawPointer(geometry), x, y, _brush))
            }
        }

        internal func DrawCachedGeometryAtCoordsWithColorImpl(_ geometry: Win2D.CanvasCachedGeometry?, _ x: Float, _ y: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryAtCoordsWithColor(pThis, RawPointer(geometry), x, y, .from(swift: color)))
            }
        }

        internal func DrawCachedGeometryAtOriginWithBrushImpl(_ geometry: Win2D.CanvasCachedGeometry?, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryAtOriginWithBrush(pThis, RawPointer(geometry), _brush))
            }
        }

        internal func DrawCachedGeometryAtOriginWithColorImpl(_ geometry: Win2D.CanvasCachedGeometry?, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryAtOriginWithColor(pThis, RawPointer(geometry), .from(swift: color)))
            }
        }

        internal func DrawTextLayoutWithBrushImpl(_ textLayout: Win2D.CanvasTextLayout?, _ point: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextLayoutWithBrush(pThis, RawPointer(textLayout), .from(swift: point), _brush))
            }
        }

        internal func DrawTextLayoutAtCoordsWithBrushImpl(_ textLayout: Win2D.CanvasTextLayout?, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextLayoutAtCoordsWithBrush(pThis, RawPointer(textLayout), x, y, _brush))
            }
        }

        internal func DrawTextLayoutWithColorImpl(_ textLayout: Win2D.CanvasTextLayout?, _ point: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextLayoutWithColor(pThis, RawPointer(textLayout), .from(swift: point), .from(swift: color)))
            }
        }

        internal func DrawTextLayoutAtCoordsWithColorImpl(_ textLayout: Win2D.CanvasTextLayout?, _ x: Float, _ y: Float, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextLayoutAtCoordsWithColor(pThis, RawPointer(textLayout), x, y, .from(swift: color)))
            }
        }

        internal func DrawGradientMeshAtOriginImpl(_ gradientMesh: Win2D.CanvasGradientMesh?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGradientMeshAtOrigin(pThis, RawPointer(gradientMesh)))
            }
        }

        internal func DrawGradientMeshImpl(_ gradientMesh: Win2D.CanvasGradientMesh?, _ point: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGradientMesh(pThis, RawPointer(gradientMesh), .from(swift: point)))
            }
        }

        internal func DrawGradientMeshAtCoordsImpl(_ gradientMesh: Win2D.CanvasGradientMesh?, _ x: Float, _ y: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGradientMeshAtCoords(pThis, RawPointer(gradientMesh), x, y))
            }
        }

        internal func DrawSvgAtOriginImpl(_ svgDocument: Win2D.CanvasSvgDocument?, _ viewportSize: WindowsFoundation.Size) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawSvgAtOrigin(pThis, RawPointer(svgDocument), .from(swift: viewportSize)))
            }
        }

        internal func DrawSvgAtPointImpl(_ svgDocument: Win2D.CanvasSvgDocument?, _ viewportSize: WindowsFoundation.Size, _ point: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawSvgAtPoint(pThis, RawPointer(svgDocument), .from(swift: viewportSize), .from(swift: point)))
            }
        }

        internal func DrawSvgAtCoordsImpl(_ svgDocument: Win2D.CanvasSvgDocument?, _ viewportSize: WindowsFoundation.Size, _ x: Float, _ y: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawSvgAtCoords(pThis, RawPointer(svgDocument), .from(swift: viewportSize), x, y))
            }
        }

        internal func get_AntialiasingImpl() throws -> Win2D.CanvasAntialiasing {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Antialiasing(pThis, &value))
            }
            return value
        }

        internal func put_AntialiasingImpl(_ value: Win2D.CanvasAntialiasing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Antialiasing(pThis, value))
            }
        }

        internal func get_BlendImpl() throws -> Win2D.CanvasBlend {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Blend(pThis, &value))
            }
            return value
        }

        internal func put_BlendImpl(_ value: Win2D.CanvasBlend) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Blend(pThis, value))
            }
        }

        internal func get_TextAntialiasingImpl() throws -> Win2D.CanvasTextAntialiasing {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAntialiasing(pThis, &value))
            }
            return value
        }

        internal func put_TextAntialiasingImpl(_ value: Win2D.CanvasTextAntialiasing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextAntialiasing(pThis, value))
            }
        }

        internal func get_TextRenderingParametersImpl() throws -> Win2D.CanvasTextRenderingParameters? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextRenderingParameters(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TextRenderingParametersImpl(_ value: Win2D.CanvasTextRenderingParameters?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextRenderingParameters(pThis, RawPointer(value)))
            }
        }

        internal func get_TransformImpl() throws -> WindowsFoundation.Matrix3x2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_TransformImpl(_ value: WindowsFoundation.Matrix3x2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Transform(pThis, .from(swift: value)))
            }
        }

        internal func get_UnitsImpl() throws -> Win2D.CanvasUnits {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Units(pThis, &value))
            }
            return value
        }

        internal func put_UnitsImpl(_ value: Win2D.CanvasUnits) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Units(pThis, value))
            }
        }

        internal func get_EffectBufferPrecisionImpl() throws -> Win2D.CanvasBufferPrecision? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EffectBufferPrecision(pThis, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper.unwrapFrom(abi: value)
        }

        internal func put_EffectBufferPrecisionImpl(_ value: Win2D.CanvasBufferPrecision?) throws {
            let valueWrapper = Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EffectBufferPrecision(pThis, _value))
            }
        }

        internal func get_EffectTileSizeImpl() throws -> UWP.BitmapSize {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EffectTileSize(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_EffectTileSizeImpl(_ value: UWP.BitmapSize) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EffectTileSize(pThis, .from(swift: value)))
            }
        }

        internal func CreateLayerWithOpacityImpl(_ opacity: Float) throws -> Win2D.CanvasActiveLayer? {
            let (layer) = try ComPtrs.initialize { layerAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacity(pThis, opacity, &layerAbi))
                }
            }
            return .from(abi: layer)
        }

        internal func CreateLayerWithOpacityBrushImpl(_ opacityBrush: Win2D.AnyICanvasBrush?) throws -> Win2D.CanvasActiveLayer? {
            let (layer) = try ComPtrs.initialize { layerAbi in
                let opacityBrushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(opacityBrush)
                let _opacityBrush = try! opacityBrushWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityBrush(pThis, _opacityBrush, &layerAbi))
                }
            }
            return .from(abi: layer)
        }

        internal func CreateLayerWithOpacityAndClipRectangleImpl(_ opacity: Float, _ clipRectangle: WindowsFoundation.Rect) throws -> Win2D.CanvasActiveLayer? {
            let (layer) = try ComPtrs.initialize { layerAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityAndClipRectangle(pThis, opacity, .from(swift: clipRectangle), &layerAbi))
                }
            }
            return .from(abi: layer)
        }

        internal func CreateLayerWithOpacityBrushAndClipRectangleImpl(_ opacityBrush: Win2D.AnyICanvasBrush?, _ clipRectangle: WindowsFoundation.Rect) throws -> Win2D.CanvasActiveLayer? {
            let (layer) = try ComPtrs.initialize { layerAbi in
                let opacityBrushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(opacityBrush)
                let _opacityBrush = try! opacityBrushWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityBrushAndClipRectangle(pThis, _opacityBrush, .from(swift: clipRectangle), &layerAbi))
                }
            }
            return .from(abi: layer)
        }

        internal func CreateLayerWithOpacityAndClipGeometryImpl(_ opacity: Float, _ clipGeometry: Win2D.CanvasGeometry?) throws -> Win2D.CanvasActiveLayer? {
            let (layer) = try ComPtrs.initialize { layerAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityAndClipGeometry(pThis, opacity, RawPointer(clipGeometry), &layerAbi))
                }
            }
            return .from(abi: layer)
        }

        internal func CreateLayerWithOpacityBrushAndClipGeometryImpl(_ opacityBrush: Win2D.AnyICanvasBrush?, _ clipGeometry: Win2D.CanvasGeometry?) throws -> Win2D.CanvasActiveLayer? {
            let (layer) = try ComPtrs.initialize { layerAbi in
                let opacityBrushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(opacityBrush)
                let _opacityBrush = try! opacityBrushWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityBrushAndClipGeometry(pThis, _opacityBrush, RawPointer(clipGeometry), &layerAbi))
                }
            }
            return .from(abi: layer)
        }

        internal func CreateLayerWithOpacityAndClipGeometryAndTransformImpl(_ opacity: Float, _ clipGeometry: Win2D.CanvasGeometry?, _ geometryTransform: WindowsFoundation.Matrix3x2) throws -> Win2D.CanvasActiveLayer? {
            let (layer) = try ComPtrs.initialize { layerAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityAndClipGeometryAndTransform(pThis, opacity, RawPointer(clipGeometry), .from(swift: geometryTransform), &layerAbi))
                }
            }
            return .from(abi: layer)
        }

        internal func CreateLayerWithOpacityBrushAndClipGeometryAndTransformImpl(_ opacityBrush: Win2D.AnyICanvasBrush?, _ clipGeometry: Win2D.CanvasGeometry?, _ geometryTransform: WindowsFoundation.Matrix3x2) throws -> Win2D.CanvasActiveLayer? {
            let (layer) = try ComPtrs.initialize { layerAbi in
                let opacityBrushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(opacityBrush)
                let _opacityBrush = try! opacityBrushWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityBrushAndClipGeometryAndTransform(pThis, _opacityBrush, RawPointer(clipGeometry), .from(swift: geometryTransform), &layerAbi))
                }
            }
            return .from(abi: layer)
        }

        internal func CreateLayerWithAllOptionsImpl(_ opacity: Float, _ opacityBrush: Win2D.AnyICanvasBrush?, _ clipRectangle: WindowsFoundation.Rect, _ clipGeometry: Win2D.CanvasGeometry?, _ geometryTransform: WindowsFoundation.Matrix3x2, _ options: Win2D.CanvasLayerOptions) throws -> Win2D.CanvasActiveLayer? {
            let (layer) = try ComPtrs.initialize { layerAbi in
                let opacityBrushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(opacityBrush)
                let _opacityBrush = try! opacityBrushWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithAllOptions(pThis, opacity, _opacityBrush, .from(swift: clipRectangle), RawPointer(clipGeometry), .from(swift: geometryTransform), options, &layerAbi))
                }
            }
            return .from(abi: layer)
        }

        internal func CreateSpriteBatchImpl() throws -> Win2D.CanvasSpriteBatch? {
            let (spriteBatch) = try ComPtrs.initialize { spriteBatchAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSpriteBatch(pThis, &spriteBatchAbi))
                }
            }
            return .from(abi: spriteBatch)
        }

        internal func CreateSpriteBatchWithSortModeImpl(_ sortMode: Win2D.CanvasSpriteSortMode) throws -> Win2D.CanvasSpriteBatch? {
            let (spriteBatch) = try ComPtrs.initialize { spriteBatchAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSpriteBatchWithSortMode(pThis, sortMode, &spriteBatchAbi))
                }
            }
            return .from(abi: spriteBatch)
        }

        internal func CreateSpriteBatchWithSortModeAndInterpolationImpl(_ sortMode: Win2D.CanvasSpriteSortMode, _ interpolation: Win2D.CanvasImageInterpolation) throws -> Win2D.CanvasSpriteBatch? {
            let (spriteBatch) = try ComPtrs.initialize { spriteBatchAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSpriteBatchWithSortModeAndInterpolation(pThis, sortMode, interpolation, &spriteBatchAbi))
                }
            }
            return .from(abi: spriteBatch)
        }

        internal func CreateSpriteBatchWithSortModeAndInterpolationAndOptionsImpl(_ sortMode: Win2D.CanvasSpriteSortMode, _ interpolation: Win2D.CanvasImageInterpolation, _ options: Win2D.CanvasSpriteOptions) throws -> Win2D.CanvasSpriteBatch? {
            let (spriteBatch) = try ComPtrs.initialize { spriteBatchAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSpriteBatchWithSortModeAndInterpolationAndOptions(pThis, sortMode, interpolation, options, &spriteBatchAbi))
                }
            }
            return .from(abi: spriteBatch)
        }

    }

    public class ICanvasImage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage }

        open func GetBoundsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?) throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
            let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBounds(pThis, _resourceCreator, &bounds))
            }
            return .from(abi: bounds)
        }

        open func GetBoundsWithTransformImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
            let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBoundsWithTransform(pThis, _resourceCreator, .from(swift: transform), &bounds))
            }
            return .from(abi: bounds)
        }

    }

    internal static var ICanvasImageVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl = .init(
        QueryInterface: { ICanvasImageWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasImageWrapper.addRef($0) },
        Release: { ICanvasImageWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper.IID
            iids[3] = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.IID
            iids[4] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.ICanvasImage").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetBounds: {
            do {
                guard let __unwrapped__instance = ICanvasImageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let resourceCreator: Win2D.AnyICanvasResourceCreator? = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper.unwrapFrom(abi: ComPtr($1))
                let bounds = try __unwrapped__instance.getBounds(resourceCreator)
                $2?.initialize(to: .from(swift: bounds))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetBoundsWithTransform: {
            do {
                guard let __unwrapped__instance = ICanvasImageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let resourceCreator: Win2D.AnyICanvasResourceCreator? = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper.unwrapFrom(abi: ComPtr($1))
                let transform: WindowsFoundation.Matrix3x2 = .from(abi: $2)
                let bounds = try __unwrapped__instance.getBounds(resourceCreator, transform)
                $3?.initialize(to: .from(swift: bounds))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ICanvasImageWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas.ICanvasImageBridge>
    public class ICanvasImageStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics }

        internal func SaveAsyncImpl(_ image: Win2D.AnyICanvasImage?, _ sourceRectangle: WindowsFoundation.Rect, _ dpi: Float, _ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ stream: UWP.AnyIRandomAccessStream?, _ fileFormat: Win2D.CanvasBitmapFileFormat) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (action) = try ComPtrs.initialize { actionAbi in
                let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
                let _image = try! imageWrapper?.toABI { $0 }
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveAsync(pThis, _image, .from(swift: sourceRectangle), dpi, _resourceCreator, _stream, fileFormat, &actionAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: action)
        }

        internal func SaveWithQualityAsyncImpl(_ image: Win2D.AnyICanvasImage?, _ sourceRectangle: WindowsFoundation.Rect, _ dpi: Float, _ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ stream: UWP.AnyIRandomAccessStream?, _ fileFormat: Win2D.CanvasBitmapFileFormat, _ quality: Float) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (action) = try ComPtrs.initialize { actionAbi in
                let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
                let _image = try! imageWrapper?.toABI { $0 }
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveWithQualityAsync(pThis, _image, .from(swift: sourceRectangle), dpi, _resourceCreator, _stream, fileFormat, quality, &actionAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: action)
        }

        internal func SaveWithQualityAndBufferPrecisionAsyncImpl(_ image: Win2D.AnyICanvasImage?, _ sourceRectangle: WindowsFoundation.Rect, _ dpi: Float, _ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ stream: UWP.AnyIRandomAccessStream?, _ fileFormat: Win2D.CanvasBitmapFileFormat, _ quality: Float, _ bufferPrecision: Win2D.CanvasBufferPrecision) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (action) = try ComPtrs.initialize { actionAbi in
                let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
                let _image = try! imageWrapper?.toABI { $0 }
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveWithQualityAndBufferPrecisionAsync(pThis, _image, .from(swift: sourceRectangle), dpi, _resourceCreator, _stream, fileFormat, quality, bufferPrecision, &actionAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: action)
        }

        internal func IsHistogramSupportedImpl(_ device: Win2D.CanvasDevice?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsHistogramSupported(pThis, RawPointer(device), &result))
            }
            return .init(from: result)
        }

    }

    public class ICanvasLock: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock }

    }

    public class ICanvasRenderTarget: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget }

        internal func CreateDrawingSessionImpl() throws -> Win2D.CanvasDrawingSession? {
            let (drawingSession) = try ComPtrs.initialize { drawingSessionAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSession(pThis, &drawingSessionAbi))
                }
            }
            return .from(abi: drawingSession)
        }

    }

    public class ICanvasRenderTargetFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory }

        internal func CreateWithSizeImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ size: WindowsFoundation.Size) throws -> ICanvasRenderTarget {
            let (renderTarget) = try ComPtrs.initialize { renderTargetAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithSize(pThis, _resourceCreator, .from(swift: size), &renderTargetAbi))
                }
            }
            return ICanvasRenderTarget(renderTarget!)
        }

        internal func CreateWithWidthAndHeightImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ width: Float, _ height: Float) throws -> ICanvasRenderTarget {
            let (renderTarget) = try ComPtrs.initialize { renderTargetAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeight(pThis, _resourceCreator, width, height, &renderTargetAbi))
                }
            }
            return ICanvasRenderTarget(renderTarget!)
        }

        internal func CreateWithWidthAndHeightAndDpiImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ width: Float, _ height: Float, _ dpi: Float) throws -> ICanvasRenderTarget {
            let (renderTarget) = try ComPtrs.initialize { renderTargetAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpi(pThis, _resourceCreator, width, height, dpi, &renderTargetAbi))
                }
            }
            return ICanvasRenderTarget(renderTarget!)
        }

        internal func CreateWithWidthAndHeightAndDpiAndFormatAndAlphaImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ width: Float, _ height: Float, _ dpi: Float, _ format: UWP.DirectXPixelFormat, _ alpha: Win2D.CanvasAlphaMode) throws -> ICanvasRenderTarget {
            let (renderTarget) = try ComPtrs.initialize { renderTargetAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(pThis, _resourceCreator, width, height, dpi, format, alpha, &renderTargetAbi))
                }
            }
            return ICanvasRenderTarget(renderTarget!)
        }

    }

    public class ICanvasRenderTargetStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics }

        internal func CreateFromDirect3D11SurfaceImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ surface: UWP.AnyIDirect3DSurface?) throws -> Win2D.CanvasRenderTarget? {
            let (bitmap) = try ComPtrs.initialize { bitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let surfaceWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(surface)
                let _surface = try! surfaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDirect3D11Surface(pThis, _resourceCreator, _surface, &bitmapAbi))
                }
            }
            return .from(abi: bitmap)
        }

        internal func CreateFromDirect3D11SurfaceWithDpiImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ surface: UWP.AnyIDirect3DSurface?, _ dpi: Float) throws -> Win2D.CanvasRenderTarget? {
            let (bitmap) = try ComPtrs.initialize { bitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let surfaceWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(surface)
                let _surface = try! surfaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDirect3D11SurfaceWithDpi(pThis, _resourceCreator, _surface, dpi, &bitmapAbi))
                }
            }
            return .from(abi: bitmap)
        }

        internal func CreateFromDirect3D11SurfaceWithDpiAndAlphaImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ surface: UWP.AnyIDirect3DSurface?, _ dpi: Float, _ alpha: Win2D.CanvasAlphaMode) throws -> Win2D.CanvasRenderTarget? {
            let (bitmap) = try ComPtrs.initialize { bitmapAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let surfaceWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(surface)
                let _surface = try! surfaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDirect3D11SurfaceWithDpiAndAlpha(pThis, _resourceCreator, _surface, dpi, alpha, &bitmapAbi))
                }
            }
            return .from(abi: bitmap)
        }

    }

    public class ICanvasResourceCreator: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator }

        open func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    internal static var ICanvasResourceCreatorVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl = .init(
        QueryInterface: { ICanvasResourceCreatorWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasResourceCreatorWrapper.addRef($0) },
        Release: { ICanvasResourceCreatorWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.ICanvasResourceCreator").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Device: {
            guard let __unwrapped__instance = ICanvasResourceCreatorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.device
            value?.copyTo($1)
            return S_OK
        }
    )

    public typealias ICanvasResourceCreatorWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas.ICanvasResourceCreatorBridge>
    public class ICanvasResourceCreatorWithDpi: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi }

        open func get_DpiImpl() throws -> Float {
            var dpi: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Dpi(pThis, &dpi))
            }
            return dpi
        }

        open func ConvertPixelsToDipsImpl(_ pixels: Int32) throws -> Float {
            var dips: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ConvertPixelsToDips(pThis, pixels, &dips))
            }
            return dips
        }

        open func ConvertDipsToPixelsImpl(_ dips: Float, _ dpiRounding: Win2D.CanvasDpiRounding) throws -> Int32 {
            var pixels: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ConvertDipsToPixels(pThis, dips, dpiRounding, &pixels))
            }
            return pixels
        }

    }

    internal static var ICanvasResourceCreatorWithDpiVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl = .init(
        QueryInterface: { ICanvasResourceCreatorWithDpiWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasResourceCreatorWithDpiWrapper.addRef($0) },
        Release: { ICanvasResourceCreatorWithDpiWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper.IID
            iids[3] = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Dpi: {
            guard let __unwrapped__instance = ICanvasResourceCreatorWithDpiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let dpi = __unwrapped__instance.dpi
            $1?.initialize(to: dpi)
            return S_OK
        },

        ConvertPixelsToDips: {
            do {
                guard let __unwrapped__instance = ICanvasResourceCreatorWithDpiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let pixels: Int32 = $1
                let dips = try __unwrapped__instance.convertPixelsToDips(pixels)
                $2?.initialize(to: dips)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ConvertDipsToPixels: {
            do {
                guard let __unwrapped__instance = ICanvasResourceCreatorWithDpiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let dips: Float = $1
                let dpiRounding: Win2D.CanvasDpiRounding = $2
                let pixels = try __unwrapped__instance.convertDipsToPixels(dips, dpiRounding)
                $3?.initialize(to: pixels)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ICanvasResourceCreatorWithDpiWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiBridge>
    public class ICanvasSpriteBatch: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch }

        internal func DrawToRectImpl(_ bitmap: Win2D.CanvasBitmap?, _ destRect: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawToRect(pThis, RawPointer(bitmap), .from(swift: destRect)))
            }
        }

        internal func DrawAtOffsetImpl(_ bitmap: Win2D.CanvasBitmap?, _ offset: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawAtOffset(pThis, RawPointer(bitmap), .from(swift: offset)))
            }
        }

        internal func DrawWithTransformImpl(_ bitmap: Win2D.CanvasBitmap?, _ transform: WindowsFoundation.Matrix3x2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawWithTransform(pThis, RawPointer(bitmap), .from(swift: transform)))
            }
        }

        internal func DrawToRectWithTintImpl(_ bitmap: Win2D.CanvasBitmap?, _ destRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawToRectWithTint(pThis, RawPointer(bitmap), .from(swift: destRect), .from(swift: tint)))
            }
        }

        internal func DrawAtOffsetWithTintImpl(_ bitmap: Win2D.CanvasBitmap?, _ offset: WindowsFoundation.Vector2, _ tint: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawAtOffsetWithTint(pThis, RawPointer(bitmap), .from(swift: offset), .from(swift: tint)))
            }
        }

        internal func DrawWithTransformAndTintImpl(_ bitmap: Win2D.CanvasBitmap?, _ transform: WindowsFoundation.Matrix3x2, _ tint: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawWithTransformAndTint(pThis, RawPointer(bitmap), .from(swift: transform), .from(swift: tint)))
            }
        }

        internal func DrawToRectWithTintAndFlipImpl(_ bitmap: Win2D.CanvasBitmap?, _ destRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4, _ flip: Win2D.CanvasSpriteFlip) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawToRectWithTintAndFlip(pThis, RawPointer(bitmap), .from(swift: destRect), .from(swift: tint), flip))
            }
        }

        internal func DrawWithTransformAndTintAndFlipImpl(_ bitmap: Win2D.CanvasBitmap?, _ transform: WindowsFoundation.Matrix3x2, _ tint: WindowsFoundation.Vector4, _ flip: Win2D.CanvasSpriteFlip) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawWithTransformAndTintAndFlip(pThis, RawPointer(bitmap), .from(swift: transform), .from(swift: tint), flip))
            }
        }

        internal func DrawAtOffsetWithTintAndTransformImpl(_ bitmap: Win2D.CanvasBitmap?, _ offset: WindowsFoundation.Vector2, _ tint: WindowsFoundation.Vector4, _ origin: WindowsFoundation.Vector2, _ rotation: Float, _ scale: WindowsFoundation.Vector2, _ flip: Win2D.CanvasSpriteFlip) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawAtOffsetWithTintAndTransform(pThis, RawPointer(bitmap), .from(swift: offset), .from(swift: tint), .from(swift: origin), rotation, .from(swift: scale), flip))
            }
        }

        internal func DrawFromSpriteSheetToRectImpl(_ bitmap: Win2D.CanvasBitmap?, _ destRect: WindowsFoundation.Rect, _ sourceRect: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawFromSpriteSheetToRect(pThis, RawPointer(bitmap), .from(swift: destRect), .from(swift: sourceRect)))
            }
        }

        internal func DrawFromSpriteSheetAtOffsetImpl(_ bitmap: Win2D.CanvasBitmap?, _ offset: WindowsFoundation.Vector2, _ sourceRect: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawFromSpriteSheetAtOffset(pThis, RawPointer(bitmap), .from(swift: offset), .from(swift: sourceRect)))
            }
        }

        internal func DrawFromSpriteSheetWithTransformImpl(_ bitmap: Win2D.CanvasBitmap?, _ transform: WindowsFoundation.Matrix3x2, _ sourceRect: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawFromSpriteSheetWithTransform(pThis, RawPointer(bitmap), .from(swift: transform), .from(swift: sourceRect)))
            }
        }

        internal func DrawFromSpriteSheetToRectWithTintImpl(_ bitmap: Win2D.CanvasBitmap?, _ destRect: WindowsFoundation.Rect, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawFromSpriteSheetToRectWithTint(pThis, RawPointer(bitmap), .from(swift: destRect), .from(swift: sourceRect), .from(swift: tint)))
            }
        }

        internal func DrawFromSpriteSheetAtOffsetWithTintImpl(_ bitmap: Win2D.CanvasBitmap?, _ offset: WindowsFoundation.Vector2, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawFromSpriteSheetAtOffsetWithTint(pThis, RawPointer(bitmap), .from(swift: offset), .from(swift: sourceRect), .from(swift: tint)))
            }
        }

        internal func DrawFromSpriteSheetWithTransformAndTintImpl(_ bitmap: Win2D.CanvasBitmap?, _ transform: WindowsFoundation.Matrix3x2, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawFromSpriteSheetWithTransformAndTint(pThis, RawPointer(bitmap), .from(swift: transform), .from(swift: sourceRect), .from(swift: tint)))
            }
        }

        internal func DrawFromSpriteSheetToRectWithTintAndFlipImpl(_ bitmap: Win2D.CanvasBitmap?, _ destRect: WindowsFoundation.Rect, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4, _ flip: Win2D.CanvasSpriteFlip) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawFromSpriteSheetToRectWithTintAndFlip(pThis, RawPointer(bitmap), .from(swift: destRect), .from(swift: sourceRect), .from(swift: tint), flip))
            }
        }

        internal func DrawFromSpriteSheetWithTransformAndTintAndFlipImpl(_ bitmap: Win2D.CanvasBitmap?, _ transform: WindowsFoundation.Matrix3x2, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4, _ flip: Win2D.CanvasSpriteFlip) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawFromSpriteSheetWithTransformAndTintAndFlip(pThis, RawPointer(bitmap), .from(swift: transform), .from(swift: sourceRect), .from(swift: tint), flip))
            }
        }

        internal func DrawFromSpriteSheetAtOffsetWithTintAndTransformImpl(_ bitmap: Win2D.CanvasBitmap?, _ offset: WindowsFoundation.Vector2, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4, _ origin: WindowsFoundation.Vector2, _ rotation: Float, _ scale: WindowsFoundation.Vector2, _ flip: Win2D.CanvasSpriteFlip) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawFromSpriteSheetAtOffsetWithTintAndTransform(pThis, RawPointer(bitmap), .from(swift: offset), .from(swift: sourceRect), .from(swift: tint), .from(swift: origin), rotation, .from(swift: scale), flip))
            }
        }

    }

    public class ICanvasSpriteBatchStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics }

        internal func IsSupportedImpl(_ device: Win2D.CanvasDevice?) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupported(pThis, RawPointer(device), &value))
            }
            return .init(from: value)
        }

    }

    public class ICanvasSwapChain: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain }

        internal func PresentImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Present(pThis))
            }
        }

        internal func PresentWithSyncIntervalImpl(_ syncInterval: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PresentWithSyncInterval(pThis, syncInterval))
            }
        }

        internal func ResizeBuffersWithSizeImpl(_ newSize: WindowsFoundation.Size) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeBuffersWithSize(pThis, .from(swift: newSize)))
            }
        }

        internal func ResizeBuffersWithWidthAndHeightImpl(_ newWidth: Float, _ newHeight: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeBuffersWithWidthAndHeight(pThis, newWidth, newHeight))
            }
        }

        internal func ResizeBuffersWithWidthAndHeightAndDpiImpl(_ newWidth: Float, _ newHeight: Float, _ newDpi: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeBuffersWithWidthAndHeightAndDpi(pThis, newWidth, newHeight, newDpi))
            }
        }

        internal func ResizeBuffersWithAllOptionsImpl(_ newWidth: Float, _ newHeight: Float, _ newDpi: Float, _ newFormat: UWP.DirectXPixelFormat, _ bufferCount: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeBuffersWithAllOptions(pThis, newWidth, newHeight, newDpi, newFormat, bufferCount))
            }
        }

        internal func get_SizeImpl() throws -> WindowsFoundation.Size {
            var size: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &size))
            }
            return .from(abi: size)
        }

        internal func get_SizeInPixelsImpl() throws -> UWP.BitmapSize {
            var size: __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SizeInPixels(pThis, &size))
            }
            return .from(abi: size)
        }

        internal func get_FormatImpl() throws -> UWP.DirectXPixelFormat {
            var value: __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Format(pThis, &value))
            }
            return value
        }

        internal func get_BufferCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BufferCount(pThis, &value))
            }
            return value
        }

        internal func get_AlphaModeImpl() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

        internal func get_RotationImpl() throws -> Win2D.CanvasSwapChainRotation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Rotation(pThis, &value))
            }
            return value
        }

        internal func put_RotationImpl(_ value: Win2D.CanvasSwapChainRotation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Rotation(pThis, value))
            }
        }

        internal func get_SourceSizeImpl() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceSize(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_SourceSizeImpl(_ value: WindowsFoundation.Size) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceSize(pThis, .from(swift: value)))
            }
        }

        internal func get_TransformMatrixImpl() throws -> WindowsFoundation.Matrix3x2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransformMatrix(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_TransformMatrixImpl(_ value: WindowsFoundation.Matrix3x2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransformMatrix(pThis, .from(swift: value)))
            }
        }

        internal func CreateDrawingSessionImpl(_ clearColor: UWP.Color) throws -> Win2D.CanvasDrawingSession? {
            let (drawingSession) = try ComPtrs.initialize { drawingSessionAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSession(pThis, .from(swift: clearColor), &drawingSessionAbi))
                }
            }
            return .from(abi: drawingSession)
        }

        internal func WaitForVerticalBlankImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.WaitForVerticalBlank(pThis))
            }
        }

    }

    public class ICanvasSwapChainFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory }

        internal func CreateWithSizeImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ size: WindowsFoundation.Size) throws -> ICanvasSwapChain {
            let (swapChain) = try ComPtrs.initialize { swapChainAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithSize(pThis, _resourceCreator, .from(swift: size), &swapChainAbi))
                }
            }
            return ICanvasSwapChain(swapChain!)
        }

        internal func CreateWithWidthAndHeightImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ width: Float, _ height: Float) throws -> ICanvasSwapChain {
            let (swapChain) = try ComPtrs.initialize { swapChainAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeight(pThis, _resourceCreator, width, height, &swapChainAbi))
                }
            }
            return ICanvasSwapChain(swapChain!)
        }

        internal func CreateWithWidthAndHeightAndDpiImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ width: Float, _ height: Float, _ dpi: Float) throws -> ICanvasSwapChain {
            let (swapChain) = try ComPtrs.initialize { swapChainAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpi(pThis, _resourceCreator, width, height, dpi, &swapChainAbi))
                }
            }
            return ICanvasSwapChain(swapChain!)
        }

        internal func CreateWithAllOptionsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ width: Float, _ height: Float, _ dpi: Float, _ format: UWP.DirectXPixelFormat, _ bufferCount: Int32, _ alphaMode: Win2D.CanvasAlphaMode) throws -> ICanvasSwapChain {
            let (swapChain) = try ComPtrs.initialize { swapChainAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithAllOptions(pThis, _resourceCreator, width, height, dpi, format, bufferCount, alphaMode, &swapChainAbi))
                }
            }
            return ICanvasSwapChain(swapChain!)
        }

    }

    public class ICanvasSwapChainStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics }

        internal func CreateForCoreWindowWithDpiImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ coreWindow: UWP.CoreWindow?, _ dpi: Float) throws -> Win2D.CanvasSwapChain? {
            let (swapChain) = try ComPtrs.initialize { swapChainAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForCoreWindowWithDpi(pThis, _resourceCreator, RawPointer(coreWindow), dpi, &swapChainAbi))
                }
            }
            return .from(abi: swapChain)
        }

        internal func CreateForCoreWindowWithAllOptionsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ coreWindow: UWP.CoreWindow?, _ width: Float, _ height: Float, _ dpi: Float, _ format: UWP.DirectXPixelFormat, _ bufferCount: Int32) throws -> Win2D.CanvasSwapChain? {
            let (swapChain) = try ComPtrs.initialize { swapChainAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForCoreWindowWithAllOptions(pThis, _resourceCreator, RawPointer(coreWindow), width, height, dpi, format, bufferCount, &swapChainAbi))
                }
            }
            return .from(abi: swapChain)
        }

    }

    public class ICanvasVirtualBitmap: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap }

        internal func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsCachedOnDemandImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCachedOnDemand(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SizeInPixelsImpl() throws -> UWP.BitmapSize {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SizeInPixels(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SizeImpl() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_BoundsImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class ICanvasVirtualBitmapStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics }

        internal func LoadAsyncFromFileNameImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ fileName: String) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let _fileName = try! HString(fileName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromFileName(pThis, _resourceCreator, _fileName.get(), &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: value)
        }

        internal func LoadAsyncFromFileNameWithOptionsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ fileName: String, _ options: Win2D.CanvasVirtualBitmapOptions) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let _fileName = try! HString(fileName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromFileNameWithOptions(pThis, _resourceCreator, _fileName.get(), options, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: value)
        }

        internal func LoadAsyncFromFileNameWithOptionsAndAlphaImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ fileName: String, _ options: Win2D.CanvasVirtualBitmapOptions, _ alpha: Win2D.CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let _fileName = try! HString(fileName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromFileNameWithOptionsAndAlpha(pThis, _resourceCreator, _fileName.get(), options, alpha, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: value)
        }

        internal func LoadAsyncFromUriImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ uri: WindowsFoundation.Uri?) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromUri(pThis, _resourceCreator, RawPointer(uri), &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: value)
        }

        internal func LoadAsyncFromUriWithOptionsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ uri: WindowsFoundation.Uri?, _ options: Win2D.CanvasVirtualBitmapOptions) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromUriWithOptions(pThis, _resourceCreator, RawPointer(uri), options, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: value)
        }

        internal func LoadAsyncFromUriWithOptionsAndAlphaImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ uri: WindowsFoundation.Uri?, _ options: Win2D.CanvasVirtualBitmapOptions, _ alpha: Win2D.CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromUriWithOptionsAndAlpha(pThis, _resourceCreator, RawPointer(uri), options, alpha, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: value)
        }

        internal func LoadAsyncFromStreamImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ stream: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromStream(pThis, _resourceCreator, _stream, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: value)
        }

        internal func LoadAsyncFromStreamWithOptionsImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ stream: UWP.AnyIRandomAccessStream?, _ options: Win2D.CanvasVirtualBitmapOptions) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromStreamWithOptions(pThis, _resourceCreator, _stream, options, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: value)
        }

        internal func LoadAsyncFromStreamWithOptionsAndAlphaImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ stream: UWP.AnyIRandomAccessStream?, _ options: Win2D.CanvasVirtualBitmapOptions, _ alpha: Win2D.CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsyncFromStreamWithOptionsAndAlpha(pThis, _resourceCreator, _stream, options, alpha, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: value)
        }

    }

}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgaspectalignment)
public typealias CanvasSvgAspectAlignment = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgaspectscaling)
public typealias CanvasSvgAspectScaling = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdisplay)
public typealias CanvasSvgDisplay = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvglengthunits)
public typealias CanvasSvgLengthUnits = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgoverflow)
public typealias CanvasSvgOverflow = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpainttype)
public typealias CanvasSvgPaintType = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpathcommand)
public typealias CanvasSvgPathCommand = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgunits)
public typealias CanvasSvgUnits = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgvisibility)
public typealias CanvasSvgVisibility = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument)
public final class CanvasSvgDocument : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgDocument
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument>?) -> CanvasSvgDocument? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasSvgDocumentFactory: __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgDocumentFactory = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument"))
    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) {
        super.init(try! Self._ICanvasSvgDocumentFactory.CreateEmptyImpl(resourceCreator))
    }

    private static let _ICanvasSvgDocumentStatics: __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgDocumentStatics = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.loadfromxml)
    public static func loadFromXml(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ xmlString: String) -> CanvasSvgDocument! {
        return try! _ICanvasSvgDocumentStatics.LoadFromXmlImpl(resourceCreator, xmlString)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.loadasync)
    public static func loadAsync(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ stream: UWP.AnyIRandomAccessStream!) -> WindowsFoundation.AnyIAsyncOperation<CanvasSvgDocument?>! {
        return try! _ICanvasSvgDocumentStatics.LoadAsyncImpl(resourceCreator, stream)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.issupported)
    public static func isSupported(_ device: Win2D.CanvasDevice!) -> Bool {
        return try! _ICanvasSvgDocumentStatics.IsSupportedImpl(device)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.getxml)
    public func getXml() throws -> String {
        try _default.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.saveasync)
    public func saveAsync(_ stream: UWP.AnyIRandomAccessStream!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SaveAsyncImpl(stream)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.findelementbyid)
    public func findElementById(_ id: String) throws -> CanvasSvgNamedElement! {
        try _default.FindElementByIdImpl(id)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.createpaintattribute)
    public func createPaintAttribute() throws -> CanvasSvgPaintAttribute! {
        try _default.CreatePaintAttributeWithDefaultsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.createpaintattribute)
    public func createPaintAttribute(_ paintType: CanvasSvgPaintType, _ color: UWP.Color, _ id: String) throws -> CanvasSvgPaintAttribute! {
        try _default.CreatePaintAttributeImpl(paintType, color, id)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.createpathattribute)
    public func createPathAttribute() throws -> CanvasSvgPathAttribute! {
        try _default.CreatePathAttributeWithDefaultsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.createpointsattribute)
    public func createPointsAttribute() throws -> CanvasSvgPointsAttribute! {
        try _default.CreatePointsAttributeWithDefaultsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.createstrokedasharrayattribute)
    public func createStrokeDashArrayAttribute() throws -> CanvasSvgStrokeDashArrayAttribute! {
        try _default.CreateStrokeDashArrayAttributeWithDefaultsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.loadelementfromxml)
    public func loadElementFromXml(_ xmlString: String) throws -> CanvasSvgNamedElement! {
        try _default.LoadElementFromXmlImpl(xmlString)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.loadelementasync)
    public func loadElementAsync(_ stream: UWP.AnyIRandomAccessStream!) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasSvgNamedElement?>! {
        try _default.LoadElementAsyncImpl(stream)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _default.get_DeviceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgdocument.root)
    public var root : CanvasSvgNamedElement! {
        get { try! _default.get_RootImpl() }
        set { try! _default.put_RootImpl(newValue) }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement)
public final class CanvasSvgNamedElement : WinRTClass, WindowsFoundation.IClosable, ICanvasSvgElement {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgNamedElement
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>?) -> CanvasSvgNamedElement? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _ICanvasSvgElement: __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElement! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.containingdocument)
    public var containingDocument : CanvasSvgDocument! {
        get { try! _ICanvasSvgElement.get_ContainingDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasSvgElement.get_DeviceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.parent)
    public var parent : CanvasSvgNamedElement! {
        get { try! _ICanvasSvgElement.get_ParentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.appendchild)
    public func appendChild(_ child: AnyICanvasSvgElement!) throws {
        try _default.AppendChildImpl(child)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.createandappendnamedchildelement)
    public func createAndAppendNamedChildElement(_ childName: String) throws -> CanvasSvgNamedElement! {
        try _default.CreateAndAppendNamedChildElementImpl(childName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.createandappendtextchildelement)
    public func createAndAppendTextChildElement(_ textContent: String) throws -> CanvasSvgTextElement! {
        try _default.CreateAndAppendTextChildElementImpl(textContent)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getprevioussibling)
    public func getPreviousSibling(_ child: AnyICanvasSvgElement!) throws -> AnyICanvasSvgElement! {
        try _default.GetPreviousSiblingImpl(child)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getnextsibling)
    public func getNextSibling(_ child: AnyICanvasSvgElement!) throws -> AnyICanvasSvgElement! {
        try _default.GetNextSiblingImpl(child)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.insertchildbefore)
    public func insertChildBefore(_ child: AnyICanvasSvgElement!, _ referenceChild: AnyICanvasSvgElement!) throws {
        try _default.InsertChildBeforeImpl(child, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.isattributespecified)
    public func isAttributeSpecified(_ attributeName: String) throws -> Bool {
        try _default.IsAttributeSpecifiedImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.isattributespecified)
    public func isAttributeSpecified(_ attributeName: String, _ inherited: Bool) throws -> Bool {
        try _default.IsAttributeSpecifiedWithInherhitedImpl(attributeName, inherited)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.removeattribute)
    public func removeAttribute(_ attributeName: String) throws {
        try _default.RemoveAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.removechild)
    public func removeChild(_ child: AnyICanvasSvgElement!) throws {
        try _default.RemoveChildImpl(child)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.replacechild)
    public func replaceChild(_ newChild: AnyICanvasSvgElement!, _ oldChild: AnyICanvasSvgElement!) throws {
        try _default.ReplaceChildImpl(newChild, oldChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setstringattribute)
    public func setStringAttribute(_ attributeName: String, _ attributeValue: String) throws {
        try _default.SetStringAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getstringattribute)
    public func getStringAttribute(_ attributeName: String) throws -> String {
        try _default.GetStringAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setattribute)
    public func setAttribute(_ attributeName: String, _ attributeValue: AnyICanvasSvgAttribute!) throws {
        try _default.SetAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getattribute)
    public func getAttribute(_ attributeName: String) throws -> AnyICanvasSvgAttribute! {
        try _default.GetAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setidattribute)
    public func setIdAttribute(_ attributeName: String, _ attributeValue: String) throws {
        try _default.SetIdAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getidattribute)
    public func getIdAttribute(_ attributeName: String) throws -> String {
        try _default.GetIdAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setfloatattribute)
    public func setFloatAttribute(_ attributeName: String, _ attributeValue: Float) throws {
        try _default.SetFloatAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getfloatattribute)
    public func getFloatAttribute(_ attributeName: String) throws -> Float {
        try _default.GetFloatAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setcolorattribute)
    public func setColorAttribute(_ attributeName: String, _ attributeValue: UWP.Color) throws {
        try _default.SetColorAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getcolorattribute)
    public func getColorAttribute(_ attributeName: String) throws -> UWP.Color {
        try _default.GetColorAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setfilledregiondeterminationattribute)
    public func setFilledRegionDeterminationAttribute(_ attributeName: String, _ attributeValue: Win2D.CanvasFilledRegionDetermination) throws {
        try _default.SetFilledRegionDeterminationAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getfilledregiondeterminationattribute)
    public func getFilledRegionDeterminationAttribute(_ attributeName: String) throws -> Win2D.CanvasFilledRegionDetermination {
        try _default.GetFilledRegionDeterminationAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setdisplayattribute)
    public func setDisplayAttribute(_ attributeName: String, _ attributeValue: CanvasSvgDisplay) throws {
        try _default.SetDisplayAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getdisplayattribute)
    public func getDisplayAttribute(_ attributeName: String) throws -> CanvasSvgDisplay {
        try _default.GetDisplayAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setoverflowattribute)
    public func setOverflowAttribute(_ attributeName: String, _ attributeValue: CanvasSvgOverflow) throws {
        try _default.SetOverflowAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getoverflowattribute)
    public func getOverflowAttribute(_ attributeName: String) throws -> CanvasSvgOverflow {
        try _default.GetOverflowAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setcapstyleattribute)
    public func setCapStyleAttribute(_ attributeName: String, _ attributeValue: Win2D.CanvasCapStyle) throws {
        try _default.SetCapStyleAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getcapstyleattribute)
    public func getCapStyleAttribute(_ attributeName: String) throws -> Win2D.CanvasCapStyle {
        try _default.GetCapStyleAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setlinejoinattribute)
    public func setLineJoinAttribute(_ attributeName: String, _ attributeValue: Win2D.CanvasLineJoin) throws {
        try _default.SetLineJoinAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getlinejoinattribute)
    public func getLineJoinAttribute(_ attributeName: String) throws -> Win2D.CanvasLineJoin {
        try _default.GetLineJoinAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setvisibilityattribute)
    public func setVisibilityAttribute(_ attributeName: String, _ attributeValue: CanvasSvgVisibility) throws {
        try _default.SetVisibilityAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getvisibilityattribute)
    public func getVisibilityAttribute(_ attributeName: String) throws -> CanvasSvgVisibility {
        try _default.GetVisibilityAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.settransformattribute)
    public func setTransformAttribute(_ attributeName: String, _ attributeValue: WindowsFoundation.Matrix3x2) throws {
        try _default.SetTransformAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.gettransformattribute)
    public func getTransformAttribute(_ attributeName: String) throws -> WindowsFoundation.Matrix3x2 {
        try _default.GetTransformAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setunitsattribute)
    public func setUnitsAttribute(_ attributeName: String, _ attributeValue: CanvasSvgUnits) throws {
        try _default.SetUnitsAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getunitsattribute)
    public func getUnitsAttribute(_ attributeName: String) throws -> CanvasSvgUnits {
        try _default.GetUnitsAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setedgebehaviorattribute)
    public func setEdgeBehaviorAttribute(_ attributeName: String, _ attributeValue: Win2D.CanvasEdgeBehavior) throws {
        try _default.SetEdgeBehaviorAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getedgebehaviorattribute)
    public func getEdgeBehaviorAttribute(_ attributeName: String) throws -> Win2D.CanvasEdgeBehavior {
        try _default.GetEdgeBehaviorAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setrectangleattribute)
    public func setRectangleAttribute(_ attributeName: String, _ attributeValue: WindowsFoundation.Rect) throws {
        try _default.SetRectangleAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getrectangleattribute)
    public func getRectangleAttribute(_ attributeName: String) throws -> WindowsFoundation.Rect {
        try _default.GetRectangleAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setlengthattribute)
    public func setLengthAttribute(_ attributeName: String, _ value: Float, _ units: CanvasSvgLengthUnits) throws {
        try _default.SetLengthAttributeImpl(attributeName, value, units)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getlengthattribute)
    public func getLengthAttribute(_ attributeName: String, _ units: inout CanvasSvgLengthUnits) throws -> Float {
        try _default.GetLengthAttributeImpl(attributeName, &units)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.setaspectratioattribute)
    public func setAspectRatioAttribute(_ attributeName: String, _ alignment: CanvasSvgAspectAlignment, _ meetOrSlice: CanvasSvgAspectScaling) throws {
        try _default.SetAspectRatioAttributeImpl(attributeName, alignment, meetOrSlice)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.getaspectratioattribute)
    public func getAspectRatioAttribute(_ attributeName: String, _ meetOrSlice: inout CanvasSvgAspectScaling) throws -> CanvasSvgAspectAlignment {
        try _default.GetAspectRatioAttributeImpl(attributeName, &meetOrSlice)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.firstchild)
    public var firstChild : AnyICanvasSvgElement! {
        get { try! _default.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.haschildren)
    public var hasChildren : Bool {
        get { try! _default.get_HasChildrenImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.lastchild)
    public var lastChild : AnyICanvasSvgElement! {
        get { try! _default.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgnamedelement.tag)
    public var tag : String {
        get { try! _default.get_TagImpl() }
    }

    deinit {
        _IClosable = nil
        _ICanvasSvgElement = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpaintattribute)
public final class CanvasSvgPaintAttribute : WinRTClass, WindowsFoundation.IClosable, ICanvasSvgAttribute {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgPaintAttribute
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute>?) -> CanvasSvgPaintAttribute? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpaintattribute.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _ICanvasSvgAttribute: __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttribute! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpaintattribute.clone)
    public func clone() throws -> AnyICanvasSvgAttribute! {
        try _ICanvasSvgAttribute.CloneImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpaintattribute.getelement)
    public func getElement() throws -> CanvasSvgNamedElement! {
        try _ICanvasSvgAttribute.GetElementImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpaintattribute.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasSvgAttribute.get_DeviceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpaintattribute.color)
    public var color : UWP.Color {
        get { try! _default.get_ColorImpl() }
        set { try! _default.put_ColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpaintattribute.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
        set { try! _default.put_IdImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpaintattribute.painttype)
    public var paintType : CanvasSvgPaintType {
        get { try! _default.get_PaintTypeImpl() }
        set { try! _default.put_PaintTypeImpl(newValue) }
    }

    deinit {
        _IClosable = nil
        _ICanvasSvgAttribute = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpathattribute)
public final class CanvasSvgPathAttribute : WinRTClass, WindowsFoundation.IClosable, ICanvasSvgAttribute {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgPathAttribute
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute>?) -> CanvasSvgPathAttribute? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpathattribute.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _ICanvasSvgAttribute: __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttribute! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpathattribute.clone)
    public func clone() throws -> AnyICanvasSvgAttribute! {
        try _ICanvasSvgAttribute.CloneImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpathattribute.getelement)
    public func getElement() throws -> CanvasSvgNamedElement! {
        try _ICanvasSvgAttribute.GetElementImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpathattribute.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasSvgAttribute.get_DeviceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpathattribute.createpathgeometry)
    public func createPathGeometry() throws -> Win2D.CanvasGeometry! {
        try _default.CreatePathGeometryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpathattribute.createpathgeometry)
    public func createPathGeometry(_ fill: Win2D.CanvasFilledRegionDetermination) throws -> Win2D.CanvasGeometry! {
        try _default.CreatePathGeometryWithFillImpl(fill)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpathattribute.removecommandsatend)
    public func removeCommandsAtEnd(_ commandsCount: Int32) throws {
        try _default.RemoveCommandsAtEndImpl(commandsCount)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpathattribute.removesegmentdataatend)
    public func removeSegmentDataAtEnd(_ commandsCount: Int32) throws {
        try _default.RemoveSegmentDataAtEndImpl(commandsCount)
    }

    deinit {
        _IClosable = nil
        _ICanvasSvgAttribute = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpointsattribute)
public final class CanvasSvgPointsAttribute : WinRTClass, WindowsFoundation.IClosable, ICanvasSvgAttribute {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgPointsAttribute
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute>?) -> CanvasSvgPointsAttribute? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpointsattribute.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _ICanvasSvgAttribute: __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttribute! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpointsattribute.clone)
    public func clone() throws -> AnyICanvasSvgAttribute! {
        try _ICanvasSvgAttribute.CloneImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpointsattribute.getelement)
    public func getElement() throws -> CanvasSvgNamedElement! {
        try _ICanvasSvgAttribute.GetElementImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpointsattribute.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasSvgAttribute.get_DeviceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgpointsattribute.removepointsatend)
    public func removePointsAtEnd(_ pointCount: Int32) throws {
        try _default.RemovePointsAtEndImpl(pointCount)
    }

    deinit {
        _IClosable = nil
        _ICanvasSvgAttribute = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgstrokedasharrayattribute)
public final class CanvasSvgStrokeDashArrayAttribute : WinRTClass, WindowsFoundation.IClosable, ICanvasSvgAttribute {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgStrokeDashArrayAttribute
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute>?) -> CanvasSvgStrokeDashArrayAttribute? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgstrokedasharrayattribute.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _ICanvasSvgAttribute: __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttribute! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgstrokedasharrayattribute.clone)
    public func clone() throws -> AnyICanvasSvgAttribute! {
        try _ICanvasSvgAttribute.CloneImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgstrokedasharrayattribute.getelement)
    public func getElement() throws -> CanvasSvgNamedElement! {
        try _ICanvasSvgAttribute.GetElementImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgstrokedasharrayattribute.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasSvgAttribute.get_DeviceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgstrokedasharrayattribute.removedashesatend)
    public func removeDashesAtEnd(_ dashCount: Int32) throws {
        try _default.RemoveDashesAtEndImpl(dashCount)
    }

    deinit {
        _IClosable = nil
        _ICanvasSvgAttribute = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgtextelement)
public final class CanvasSvgTextElement : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgTextElement
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement>?) -> CanvasSvgTextElement? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgtextelement.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.canvassvgtextelement.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.icanvassvgattribute)
public protocol ICanvasSvgAttribute : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.icanvassvgattribute.clone)
    func clone() throws -> Win2D.AnyICanvasSvgAttribute!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.icanvassvgattribute.getelement)
    func getElement() throws -> Win2D.CanvasSvgNamedElement!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.icanvassvgattribute.device)
    var device: Win2D.CanvasDevice! { get }
}

extension ICanvasSvgAttribute {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttributeWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgAttributeWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasSvgAttribute = any ICanvasSvgAttribute

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.icanvassvgelement)
public protocol ICanvasSvgElement : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.icanvassvgelement.containingdocument)
    var containingDocument: Win2D.CanvasSvgDocument! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.icanvassvgelement.device)
    var device: Win2D.CanvasDevice! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.svg.icanvassvgelement.parent)
    var parent: Win2D.CanvasSvgNamedElement! { get }
}

extension ICanvasSvgElement {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas_Svg.ICanvasSvgElementWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasSvgElement = any ICanvasSvgElement

extension Win2D.CanvasSvgAspectAlignment {
    public static var none : Win2D.CanvasSvgAspectAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_None
    }
    public static var xminYMin : Win2D.CanvasSvgAspectAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMinYMin
    }
    public static var xmidYMin : Win2D.CanvasSvgAspectAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMidYMin
    }
    public static var xmaxYMin : Win2D.CanvasSvgAspectAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMaxYMin
    }
    public static var xminYMid : Win2D.CanvasSvgAspectAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMinYMid
    }
    public static var xmidYMid : Win2D.CanvasSvgAspectAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMidYMid
    }
    public static var xmaxYMid : Win2D.CanvasSvgAspectAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMaxYMid
    }
    public static var xminYMax : Win2D.CanvasSvgAspectAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMinYMax
    }
    public static var xmidYMax : Win2D.CanvasSvgAspectAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMidYMax
    }
    public static var xmaxYMax : Win2D.CanvasSvgAspectAlignment {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMaxYMax
    }
}
extension Win2D.CanvasSvgAspectAlignment: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasSvgAspectScaling {
    public static var meet : Win2D.CanvasSvgAspectScaling {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling_Meet
    }
    public static var slice : Win2D.CanvasSvgAspectScaling {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling_Slice
    }
}
extension Win2D.CanvasSvgAspectScaling: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasSvgDisplay {
    public static var inline : Win2D.CanvasSvgDisplay {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay_Inline
    }
    public static var none : Win2D.CanvasSvgDisplay {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay_None
    }
}
extension Win2D.CanvasSvgDisplay: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasSvgLengthUnits {
    public static var number : Win2D.CanvasSvgLengthUnits {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits_Number
    }
    public static var percentage : Win2D.CanvasSvgLengthUnits {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits_Percentage
    }
}
extension Win2D.CanvasSvgLengthUnits: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasSvgOverflow {
    public static var doNotClipToViewport : Win2D.CanvasSvgOverflow {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow_DoNotClipToViewport
    }
    public static var clipToViewport : Win2D.CanvasSvgOverflow {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow_ClipToViewport
    }
}
extension Win2D.CanvasSvgOverflow: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasSvgPaintType {
    public static var none : Win2D.CanvasSvgPaintType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_None
    }
    public static var color : Win2D.CanvasSvgPaintType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_Color
    }
    public static var currentColor : Win2D.CanvasSvgPaintType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_CurrentColor
    }
    public static var uri : Win2D.CanvasSvgPaintType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_Uri
    }
    public static var uriThenNone : Win2D.CanvasSvgPaintType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_UriThenNone
    }
    public static var uriThenColor : Win2D.CanvasSvgPaintType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_UriThenColor
    }
    public static var uriThenCurrentColor : Win2D.CanvasSvgPaintType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_UriThenCurrentColor
    }
}
extension Win2D.CanvasSvgPaintType: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasSvgPathCommand {
    public static var closePath : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_ClosePath
    }
    public static var moveAbsolute : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_MoveAbsolute
    }
    public static var moveRelative : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_MoveRelative
    }
    public static var lineAbsolute : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_LineAbsolute
    }
    public static var lineRelative : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_LineRelative
    }
    public static var cubicAbsolute : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_CubicAbsolute
    }
    public static var cubicRelative : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_CubicRelative
    }
    public static var quadraticAbsolute : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_QuadraticAbsolute
    }
    public static var quadraticRelative : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_QuadraticRelative
    }
    public static var arcAbsolute : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_ArcAbsolute
    }
    public static var arcRelative : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_ArcRelative
    }
    public static var horizontalAbsolute : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_HorizontalAbsolute
    }
    public static var horizontalRelative : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_HorizontalRelative
    }
    public static var verticalAbsolute : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_VerticalAbsolute
    }
    public static var verticalRelative : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_VerticalRelative
    }
    public static var cubicSmoothAbsolute : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_CubicSmoothAbsolute
    }
    public static var cubicSmoothRelative : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_CubicSmoothRelative
    }
    public static var quadraticSmoothAbsolute : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_QuadraticSmoothAbsolute
    }
    public static var quadraticSmoothRelative : Win2D.CanvasSvgPathCommand {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_QuadraticSmoothRelative
    }
}
extension Win2D.CanvasSvgPathCommand: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasSvgUnits {
    public static var userSpaceOnUse : Win2D.CanvasSvgUnits {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits_UserSpaceOnUse
    }
    public static var objectBoundingBox : Win2D.CanvasSvgUnits {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits_ObjectBoundingBox
    }
}
extension Win2D.CanvasSvgUnits: @retroactive Hashable, @retroactive Codable {}

extension Win2D.CanvasSvgVisibility {
    public static var visible : Win2D.CanvasSvgVisibility {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility_Visible
    }
    public static var hidden : Win2D.CanvasSvgVisibility {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility_Hidden
    }
}
extension Win2D.CanvasSvgVisibility: @retroactive Hashable, @retroactive Codable {}


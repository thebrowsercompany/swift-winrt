// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace: WindowsFoundation.IID {
    .init(Data1: 0x5199D129, Data2: 0x4EF9, Data3: 0x4DEE, Data4: ( 0xB7,0x4C,0x4D,0xC9,0x10,0x20,0x1A,0x7F ))// 5199D129-4EF9-4DEE-B74C-4DC910201A7F
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat: WindowsFoundation.IID {
    .init(Data1: 0xAF61BFDC, Data2: 0xEABB, Data3: 0x4D38, Data4: ( 0xBA,0x1B,0xAF,0xB3,0x40,0x61,0x2D,0x33 ))// AF61BFDC-EABB-4D38-BA1B-AFB340612D33
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics: WindowsFoundation.IID {
    .init(Data1: 0x8A927515, Data2: 0x33FC, Data3: 0x4C92, Data4: ( 0xA6,0xAA,0x94,0xA8,0xF2,0x9C,0x14,0x0B ))// 8A927515-33FC-4C92-A6AA-94A8F29C140B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject: WindowsFoundation.IID {
    .init(Data1: 0x7A89EE99, Data2: 0xCE2A, Data3: 0x47FA, Data4: ( 0x9D,0xD2,0x0A,0x68,0x25,0xF6,0x05,0x3F ))// 7A89EE99-CE2A-47FA-9DD2-0A6825F6053F
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout: WindowsFoundation.IID {
    .init(Data1: 0xBAE63E54, Data2: 0x48AE, Data3: 0x4446, Data4: ( 0xA2,0xC7,0xB6,0xEF,0x93,0x80,0x6C,0x20 ))// BAE63E54-48AE-4446-A2C7-B6EF93806C20
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory: WindowsFoundation.IID {
    .init(Data1: 0x9C1F7179, Data2: 0xACD0, Data3: 0x4680, Data4: ( 0x93,0xD5,0x95,0xA6,0x24,0x7E,0x8F,0x6B ))// 9C1F7179-ACD0-4680-93D5-95A6247E8F6B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics: WindowsFoundation.IID {
    .init(Data1: 0x7F2B8FFD, Data2: 0x6935, Data3: 0x4F60, Data4: ( 0xB4,0x09,0x63,0x94,0xA1,0x9C,0x5E,0xBC ))// 7F2B8FFD-6935-4F60-B409-6394A19C5EBC
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer: WindowsFoundation.IID {
    .init(Data1: 0x9AAEECE5, Data2: 0x8D09, Data3: 0x4A64, Data4: ( 0xB3,0x22,0xAF,0x03,0x04,0x21,0xB2,0xE4 ))// 9AAEECE5-8D09-4A64-B322-AF030421B2E4
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters: WindowsFoundation.IID {
    .init(Data1: 0xB20BF738, Data2: 0xEDB9, Data3: 0x4EEC, Data4: ( 0xA1,0x2F,0xB6,0xAE,0x32,0xE8,0xAC,0xE6 ))// B20BF738-EDB9-4EEC-A12F-B6AE32E8ACE6
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory: WindowsFoundation.IID {
    .init(Data1: 0xD240AC25, Data2: 0x4D23, Data3: 0x4964, Data4: ( 0x9D,0x9A,0xDB,0x2F,0xC8,0xAF,0x18,0x5D ))// D240AC25-4D23-4964-9D9A-DB2FC8AF185D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography: WindowsFoundation.IID {
    .init(Data1: 0xF15BC312, Data2: 0x447F, Data3: 0x44ED, Data4: ( 0x8B,0xEC,0x7E,0x40,0xF4,0xA4,0xDF,0xC8 ))// F15BC312-447F-44ED-8BEC-7E40F4A4DFC8
}

public enum __ABI_Microsoft_Graphics_Canvas_Text {
    public class ICanvasFontFace: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace }

        internal func GetRecommendedRenderingModeImpl(_ fontSize: Float, _ dpi: Float, _ measuringMode: Win2D.CanvasTextMeasuringMode, _ renderingParameters: Win2D.CanvasTextRenderingParameters?) throws -> Win2D.CanvasTextRenderingMode {
            var renderingMode: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecommendedRenderingMode(pThis, fontSize, dpi, measuringMode, RawPointer(renderingParameters), &renderingMode))
            }
            return renderingMode
        }

        internal func GetRecommendedRenderingModeWithAllOptionsImpl(_ fontSize: Float, _ dpi: Float, _ measuringMode: Win2D.CanvasTextMeasuringMode, _ renderingParameters: Win2D.CanvasTextRenderingParameters?, _ transform: WindowsFoundation.Matrix3x2, _ isSideways: Bool, _ outlineThreshold: Win2D.CanvasAntialiasing) throws -> Win2D.CanvasTextRenderingMode {
            var renderingMode: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecommendedRenderingModeWithAllOptions(pThis, fontSize, dpi, measuringMode, RawPointer(renderingParameters), .from(swift: transform), .init(from: isSideways), outlineThreshold, &renderingMode))
            }
            return renderingMode
        }

        internal func GetRecommendedGridFitImpl(_ fontSize: Float, _ dpi: Float, _ measuringMode: Win2D.CanvasTextMeasuringMode, _ renderingParameters: Win2D.CanvasTextRenderingParameters?, _ transform: WindowsFoundation.Matrix3x2, _ isSideways: Bool, _ outlineThreshold: Win2D.CanvasAntialiasing) throws -> Win2D.CanvasTextGridFit {
            var gridFit: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecommendedGridFit(pThis, fontSize, dpi, measuringMode, RawPointer(renderingParameters), .from(swift: transform), .init(from: isSideways), outlineThreshold, &gridFit))
            }
            return gridFit
        }

        internal func get_GlyphBoxImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphBox(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SubscriptPositionImpl() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubscriptPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SubscriptSizeImpl() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubscriptSize(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SuperscriptPositionImpl() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuperscriptPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SuperscriptSizeImpl() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuperscriptSize(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_HasTypographicMetricsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasTypographicMetrics(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AscentImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Ascent(pThis, &value))
            }
            return value
        }

        internal func get_DescentImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Descent(pThis, &value))
            }
            return value
        }

        internal func get_LineGapImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineGap(pThis, &value))
            }
            return value
        }

        internal func get_CapHeightImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CapHeight(pThis, &value))
            }
            return value
        }

        internal func get_LowercaseLetterHeightImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LowercaseLetterHeight(pThis, &value))
            }
            return value
        }

        internal func get_UnderlinePositionImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlinePosition(pThis, &value))
            }
            return value
        }

        internal func get_UnderlineThicknessImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlineThickness(pThis, &value))
            }
            return value
        }

        internal func get_StrikethroughPositionImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StrikethroughPosition(pThis, &value))
            }
            return value
        }

        internal func get_StrikethroughThicknessImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StrikethroughThickness(pThis, &value))
            }
            return value
        }

        internal func get_CaretSlopeRiseImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaretSlopeRise(pThis, &value))
            }
            return value
        }

        internal func get_CaretSlopeRunImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaretSlopeRun(pThis, &value))
            }
            return value
        }

        internal func get_CaretOffsetImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaretOffset(pThis, &value))
            }
            return value
        }

        internal func get_IsMonospacedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMonospaced(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HasVerticalGlyphVariantsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasVerticalGlyphVariants(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_FileFormatTypeImpl() throws -> Win2D.CanvasFontFileFormatType {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileFormatType(pThis, &value))
            }
            return value
        }

        internal func get_SimulationsImpl() throws -> Win2D.CanvasFontSimulations {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Simulations(pThis, &value))
            }
            return value
        }

        internal func get_IsSymbolFontImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSymbolFont(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_GlyphCountImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphCount(pThis, &value))
            }
            return value
        }

        internal func get_WeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Weight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_StretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stretch(pThis, &value))
            }
            return value
        }

        internal func get_StyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Style(pThis, &value))
            }
            return value
        }

        internal func get_FamilyNamesImpl() throws -> WindowsFoundation.AnyIMapView<String, String>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FamilyNames(pThis, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: values)
        }

        internal func get_FaceNamesImpl() throws -> WindowsFoundation.AnyIMapView<String, String>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FaceNames(pThis, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: values)
        }

        internal func GetInformationalStringsImpl(_ fontInformation: Win2D.CanvasFontInformation) throws -> WindowsFoundation.AnyIMapView<String, String>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetInformationalStrings(pThis, fontInformation, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: values)
        }

        internal func HasCharacterImpl(_ unicodeValue: UInt32) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HasCharacter(pThis, unicodeValue, &value))
            }
            return .init(from: value)
        }

    }

    public class ICanvasTextFormat: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat }

        internal func get_DirectionImpl() throws -> Win2D.CanvasTextDirection {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, &value))
            }
            return value
        }

        internal func put_DirectionImpl(_ value: Win2D.CanvasTextDirection) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Direction(pThis, value))
            }
        }

        internal func get_FontFamilyImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_FontFamilyImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, _value.get()))
            }
        }

        internal func get_FontSizeImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        internal func put_FontSizeImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        internal func get_FontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, &value))
            }
            return value
        }

        internal func put_FontStretchImpl(_ value: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
            }
        }

        internal func get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal func put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal func get_FontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_FontWeightImpl(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        internal func get_IncrementalTabStopImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalTabStop(pThis, &value))
            }
            return value
        }

        internal func put_IncrementalTabStopImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalTabStop(pThis, value))
            }
        }

        internal func get_LineSpacingImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacing(pThis, &value))
            }
            return value
        }

        internal func put_LineSpacingImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacing(pThis, value))
            }
        }

        internal func get_LineSpacingBaselineImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingBaseline(pThis, &value))
            }
            return value
        }

        internal func put_LineSpacingBaselineImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingBaseline(pThis, value))
            }
        }

        internal func get_LocaleNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocaleName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LocaleNameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LocaleName(pThis, _value.get()))
            }
        }

        internal func get_VerticalAlignmentImpl() throws -> Win2D.CanvasVerticalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAlignment(pThis, &value))
            }
            return value
        }

        internal func put_VerticalAlignmentImpl(_ value: Win2D.CanvasVerticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAlignment(pThis, value))
            }
        }

        internal func get_HorizontalAlignmentImpl() throws -> Win2D.CanvasHorizontalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAlignment(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalAlignmentImpl(_ value: Win2D.CanvasHorizontalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAlignment(pThis, value))
            }
        }

        internal func get_TrimmingGranularityImpl() throws -> Win2D.CanvasTextTrimmingGranularity {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingGranularity(pThis, &value))
            }
            return value
        }

        internal func put_TrimmingGranularityImpl(_ value: Win2D.CanvasTextTrimmingGranularity) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingGranularity(pThis, value))
            }
        }

        internal func get_TrimmingDelimiterImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiter(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TrimmingDelimiterImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiter(pThis, _value.get()))
            }
        }

        internal func get_TrimmingDelimiterCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiterCount(pThis, &value))
            }
            return value
        }

        internal func put_TrimmingDelimiterCountImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiterCount(pThis, value))
            }
        }

        internal func get_WordWrappingImpl() throws -> Win2D.CanvasWordWrapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WordWrapping(pThis, &value))
            }
            return value
        }

        internal func put_WordWrappingImpl(_ value: Win2D.CanvasWordWrapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_WordWrapping(pThis, value))
            }
        }

        internal func get_OptionsImpl() throws -> Win2D.CanvasDrawTextOptions {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, &value))
            }
            return value
        }

        internal func put_OptionsImpl(_ value: Win2D.CanvasDrawTextOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Options(pThis, value))
            }
        }

        internal func get_VerticalGlyphOrientationImpl() throws -> Win2D.CanvasVerticalGlyphOrientation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalGlyphOrientation(pThis, &value))
            }
            return value
        }

        internal func put_VerticalGlyphOrientationImpl(_ value: Win2D.CanvasVerticalGlyphOrientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalGlyphOrientation(pThis, value))
            }
        }

        internal func get_OpticalAlignmentImpl() throws -> Win2D.CanvasOpticalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalAlignment(pThis, &value))
            }
            return value
        }

        internal func put_OpticalAlignmentImpl(_ value: Win2D.CanvasOpticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalAlignment(pThis, value))
            }
        }

        internal func get_LastLineWrappingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastLineWrapping(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LastLineWrappingImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LastLineWrapping(pThis, .init(from: value)))
            }
        }

        internal func get_LineSpacingModeImpl() throws -> Win2D.CanvasLineSpacingMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingMode(pThis, &value))
            }
            return value
        }

        internal func put_LineSpacingModeImpl(_ value: Win2D.CanvasLineSpacingMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingMode(pThis, value))
            }
        }

        internal func get_TrimmingSignImpl() throws -> Win2D.CanvasTrimmingSign {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingSign(pThis, &value))
            }
            return value
        }

        internal func put_TrimmingSignImpl(_ value: Win2D.CanvasTrimmingSign) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingSign(pThis, value))
            }
        }

        internal func get_CustomTrimmingSignImpl() throws -> Win2D.AnyICanvasTextInlineObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomTrimmingSign(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.unwrapFrom(abi: value)
        }

        internal func put_CustomTrimmingSignImpl(_ value: Win2D.AnyICanvasTextInlineObject?) throws {
            let valueWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomTrimmingSign(pThis, _value))
            }
        }

    }

    public class ICanvasTextFormatStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics }

    }

    public class ICanvasTextInlineObject: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject }

        open func DrawImpl(_ textRenderer: Win2D.AnyICanvasTextRenderer?, _ point: WindowsFoundation.Vector2, _ isSideways: Bool, _ isRightToLeft: Bool, _ brush: Any?) throws {
            let textRendererWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper(textRenderer)
            let _textRenderer = try! textRendererWrapper?.toABI { $0 }
            let brushWrapper = __ABI_.AnyWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Draw(pThis, _textRenderer, .from(swift: point), .init(from: isSideways), .init(from: isRightToLeft), _brush))
            }
        }

        open func get_SizeImpl() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return .from(abi: value)
        }

        open func get_BaselineImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Baseline(pThis, &value))
            }
            return value
        }

        open func get_SupportsSidewaysImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportsSideways(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_DrawBoundsImpl() throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DrawBounds(pThis, &bounds))
            }
            return .from(abi: bounds)
        }

        open func get_BreakBeforeImpl() throws -> Win2D.CanvasLineBreakCondition {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BreakBefore(pThis, &value))
            }
            return value
        }

        open func get_BreakAfterImpl() throws -> Win2D.CanvasLineBreakCondition {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BreakAfter(pThis, &value))
            }
            return value
        }

    }

    internal static var ICanvasTextInlineObjectVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl = .init(
        QueryInterface: { ICanvasTextInlineObjectWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasTextInlineObjectWrapper.addRef($0) },
        Release: { ICanvasTextInlineObjectWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Draw: {
            do {
                guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let textRenderer: Win2D.AnyICanvasTextRenderer? = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper.unwrapFrom(abi: ComPtr($1))
                let point: WindowsFoundation.Vector2 = .from(abi: $2)
                let isSideways: Bool = .init(from: $3)
                let isRightToLeft: Bool = .init(from: $4)
                let brush: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($5))
                try __unwrapped__instance.draw(textRenderer, point, isSideways, isRightToLeft, brush)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_Size: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.size
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        get_Baseline: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.baseline
            $1?.initialize(to: value)
            return S_OK
        },

        get_SupportsSideways: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.supportsSideways
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_DrawBounds: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let bounds = __unwrapped__instance.drawBounds
            $1?.initialize(to: .from(swift: bounds))
            return S_OK
        },

        get_BreakBefore: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.breakBefore
            $1?.initialize(to: value)
            return S_OK
        },

        get_BreakAfter: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.breakAfter
            $1?.initialize(to: value)
            return S_OK
        }
    )

    public typealias ICanvasTextInlineObjectWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectBridge>
    public class ICanvasTextLayout: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout }

        internal func get_DirectionImpl() throws -> Win2D.CanvasTextDirection {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, &value))
            }
            return value
        }

        internal func put_DirectionImpl(_ value: Win2D.CanvasTextDirection) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Direction(pThis, value))
            }
        }

        internal func get_DefaultFontFamilyImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontFamily(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DefaultFontSizeImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontSize(pThis, &value))
            }
            return value
        }

        internal func get_DefaultFontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontStretch(pThis, &value))
            }
            return value
        }

        internal func get_DefaultFontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontStyle(pThis, &value))
            }
            return value
        }

        internal func get_DefaultFontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_IncrementalTabStopImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalTabStop(pThis, &value))
            }
            return value
        }

        internal func put_IncrementalTabStopImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalTabStop(pThis, value))
            }
        }

        internal func get_LineSpacingImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacing(pThis, &value))
            }
            return value
        }

        internal func put_LineSpacingImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacing(pThis, value))
            }
        }

        internal func get_LineSpacingBaselineImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingBaseline(pThis, &value))
            }
            return value
        }

        internal func put_LineSpacingBaselineImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingBaseline(pThis, value))
            }
        }

        internal func get_DefaultLocaleNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultLocaleName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VerticalAlignmentImpl() throws -> Win2D.CanvasVerticalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAlignment(pThis, &value))
            }
            return value
        }

        internal func put_VerticalAlignmentImpl(_ value: Win2D.CanvasVerticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAlignment(pThis, value))
            }
        }

        internal func get_HorizontalAlignmentImpl() throws -> Win2D.CanvasHorizontalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAlignment(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalAlignmentImpl(_ value: Win2D.CanvasHorizontalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAlignment(pThis, value))
            }
        }

        internal func get_TrimmingGranularityImpl() throws -> Win2D.CanvasTextTrimmingGranularity {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingGranularity(pThis, &value))
            }
            return value
        }

        internal func put_TrimmingGranularityImpl(_ value: Win2D.CanvasTextTrimmingGranularity) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingGranularity(pThis, value))
            }
        }

        internal func get_TrimmingDelimiterImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiter(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TrimmingDelimiterImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiter(pThis, _value.get()))
            }
        }

        internal func get_TrimmingDelimiterCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiterCount(pThis, &value))
            }
            return value
        }

        internal func put_TrimmingDelimiterCountImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiterCount(pThis, value))
            }
        }

        internal func get_WordWrappingImpl() throws -> Win2D.CanvasWordWrapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WordWrapping(pThis, &value))
            }
            return value
        }

        internal func put_WordWrappingImpl(_ value: Win2D.CanvasWordWrapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_WordWrapping(pThis, value))
            }
        }

        internal func get_OptionsImpl() throws -> Win2D.CanvasDrawTextOptions {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, &value))
            }
            return value
        }

        internal func put_OptionsImpl(_ value: Win2D.CanvasDrawTextOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Options(pThis, value))
            }
        }

        internal func get_LineSpacingModeImpl() throws -> Win2D.CanvasLineSpacingMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingMode(pThis, &value))
            }
            return value
        }

        internal func put_LineSpacingModeImpl(_ value: Win2D.CanvasLineSpacingMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingMode(pThis, value))
            }
        }

        internal func get_TrimmingSignImpl() throws -> Win2D.CanvasTrimmingSign {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingSign(pThis, &value))
            }
            return value
        }

        internal func put_TrimmingSignImpl(_ value: Win2D.CanvasTrimmingSign) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingSign(pThis, value))
            }
        }

        internal func get_CustomTrimmingSignImpl() throws -> Win2D.AnyICanvasTextInlineObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomTrimmingSign(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.unwrapFrom(abi: value)
        }

        internal func put_CustomTrimmingSignImpl(_ value: Win2D.AnyICanvasTextInlineObject?) throws {
            let valueWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomTrimmingSign(pThis, _value))
            }
        }

        internal func get_RequestedSizeImpl() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedSize(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_RequestedSizeImpl(_ value: WindowsFoundation.Size) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequestedSize(pThis, .from(swift: value)))
            }
        }

        internal func GetMinimumLineLengthImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMinimumLineLength(pThis, &value))
            }
            return value
        }

        internal func GetBrushImpl(_ characterIndex: Int32) throws -> Win2D.AnyICanvasBrush? {
            let (brush) = try ComPtrs.initialize { brushAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetBrush(pThis, characterIndex, &brushAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper.unwrapFrom(abi: brush)
        }

        internal func GetCustomBrushImpl(_ characterIndex: Int32) throws -> Any? {
            let (brush) = try ComPtrs.initialize { brushAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCustomBrush(pThis, characterIndex, &brushAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: brush)
        }

        internal func GetFontFamilyImpl(_ characterIndex: Int32) throws -> String {
            var fontFamily: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontFamily(pThis, characterIndex, &fontFamily))
            }
            return .init(from: fontFamily)
        }

        internal func GetFontSizeImpl(_ characterIndex: Int32) throws -> Float {
            var fontSize: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontSize(pThis, characterIndex, &fontSize))
            }
            return fontSize
        }

        internal func GetFontStretchImpl(_ characterIndex: Int32) throws -> UWP.FontStretch {
            var fontStretch: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontStretch(pThis, characterIndex, &fontStretch))
            }
            return fontStretch
        }

        internal func GetFontStyleImpl(_ characterIndex: Int32) throws -> UWP.FontStyle {
            var fontStyle: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontStyle(pThis, characterIndex, &fontStyle))
            }
            return fontStyle
        }

        internal func GetFontWeightImpl(_ characterIndex: Int32) throws -> UWP.FontWeight {
            var fontWeight: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontWeight(pThis, characterIndex, &fontWeight))
            }
            return .from(abi: fontWeight)
        }

        internal func GetLocaleNameImpl(_ characterIndex: Int32) throws -> String {
            var localeName: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocaleName(pThis, characterIndex, &localeName))
            }
            return .init(from: localeName)
        }

        internal func GetStrikethroughImpl(_ characterIndex: Int32) throws -> Bool {
            var hasStrikethrough: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetStrikethrough(pThis, characterIndex, &hasStrikethrough))
            }
            return .init(from: hasStrikethrough)
        }

        internal func GetUnderlineImpl(_ characterIndex: Int32) throws -> Bool {
            var hasUnderline: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUnderline(pThis, characterIndex, &hasUnderline))
            }
            return .init(from: hasUnderline)
        }

        internal func GetInlineObjectImpl(_ characterIndex: Int32) throws -> Win2D.AnyICanvasTextInlineObject? {
            let (inlineObject) = try ComPtrs.initialize { inlineObjectAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetInlineObject(pThis, characterIndex, &inlineObjectAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.unwrapFrom(abi: inlineObject)
        }

        internal func SetColorImpl(_ characterIndex: Int32, _ characterCount: Int32, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetColor(pThis, characterIndex, characterCount, .from(swift: color)))
            }
        }

        internal func SetBrushImpl(_ characterIndex: Int32, _ characterCount: Int32, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetBrush(pThis, characterIndex, characterCount, _brush))
            }
        }

        internal func SetCustomBrushImpl(_ characterIndex: Int32, _ characterCount: Int32, _ brush: Any?) throws {
            let brushWrapper = __ABI_.AnyWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetCustomBrush(pThis, characterIndex, characterCount, _brush))
            }
        }

        internal func SetFontFamilyImpl(_ characterIndex: Int32, _ characterCount: Int32, _ fontFamily: String) throws {
            let _fontFamily = try! HString(fontFamily)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontFamily(pThis, characterIndex, characterCount, _fontFamily.get()))
            }
        }

        internal func SetFontSizeImpl(_ characterIndex: Int32, _ characterCount: Int32, _ fontSize: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontSize(pThis, characterIndex, characterCount, fontSize))
            }
        }

        internal func SetFontStretchImpl(_ characterIndex: Int32, _ characterCount: Int32, _ fontStretch: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontStretch(pThis, characterIndex, characterCount, fontStretch))
            }
        }

        internal func SetFontStyleImpl(_ characterIndex: Int32, _ characterCount: Int32, _ fontStyle: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontStyle(pThis, characterIndex, characterCount, fontStyle))
            }
        }

        internal func SetFontWeightImpl(_ characterIndex: Int32, _ characterCount: Int32, _ fontWeight: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontWeight(pThis, characterIndex, characterCount, .from(swift: fontWeight)))
            }
        }

        internal func SetLocaleNameImpl(_ characterIndex: Int32, _ characterCount: Int32, _ name: String) throws {
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetLocaleName(pThis, characterIndex, characterCount, _name.get()))
            }
        }

        internal func SetStrikethroughImpl(_ characterIndex: Int32, _ characterCount: Int32, _ hasStrikethrough: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetStrikethrough(pThis, characterIndex, characterCount, .init(from: hasStrikethrough)))
            }
        }

        internal func SetUnderlineImpl(_ characterIndex: Int32, _ characterCount: Int32, _ hasUnderline: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetUnderline(pThis, characterIndex, characterCount, .init(from: hasUnderline)))
            }
        }

        internal func SetInlineObjectImpl(_ characterIndex: Int32, _ characterCount: Int32, _ inlineObject: Win2D.AnyICanvasTextInlineObject?) throws {
            let inlineObjectWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper(inlineObject)
            let _inlineObject = try! inlineObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetInlineObject(pThis, characterIndex, characterCount, _inlineObject))
            }
        }

        internal func DrawToTextRendererImpl(_ textRenderer: Win2D.AnyICanvasTextRenderer?, _ position: WindowsFoundation.Vector2) throws {
            let textRendererWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper(textRenderer)
            let _textRenderer = try! textRendererWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawToTextRenderer(pThis, _textRenderer, .from(swift: position)))
            }
        }

        internal func DrawToTextRendererWithCoordsImpl(_ textRenderer: Win2D.AnyICanvasTextRenderer?, _ x: Float, _ y: Float) throws {
            let textRendererWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper(textRenderer)
            let _textRenderer = try! textRendererWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawToTextRendererWithCoords(pThis, _textRenderer, x, y))
            }
        }

        internal func SetTypographyImpl(_ characterIndex: Int32, _ characterCount: Int32, _ typography: Win2D.CanvasTypography?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTypography(pThis, characterIndex, characterCount, RawPointer(typography)))
            }
        }

        internal func GetTypographyImpl(_ characterIndex: Int32) throws -> Win2D.CanvasTypography? {
            let (typography) = try ComPtrs.initialize { typographyAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTypography(pThis, characterIndex, &typographyAbi))
                }
            }
            return .from(abi: typography)
        }

        internal func get_LayoutBoundsImpl() throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutBounds(pThis, &bounds))
            }
            return .from(abi: bounds)
        }

        internal func get_LayoutBoundsIncludingTrailingWhitespaceImpl() throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutBoundsIncludingTrailingWhitespace(pThis, &bounds))
            }
            return .from(abi: bounds)
        }

        internal func get_LineCountImpl() throws -> Int32 {
            var lineCount: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineCount(pThis, &lineCount))
            }
            return lineCount
        }

        internal func get_MaximumBidiReorderingDepthImpl() throws -> Int32 {
            var depth: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumBidiReorderingDepth(pThis, &depth))
            }
            return depth
        }

        internal func get_DrawBoundsImpl() throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DrawBounds(pThis, &bounds))
            }
            return .from(abi: bounds)
        }

        internal func HitTestImpl(_ point: WindowsFoundation.Vector2) throws -> Bool {
            var isHit: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTest(pThis, .from(swift: point), &isHit))
            }
            return .init(from: isHit)
        }

        internal func HitTestWithCoordsImpl(_ x: Float, _ y: Float) throws -> Bool {
            var isHit: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithCoords(pThis, x, y, &isHit))
            }
            return .init(from: isHit)
        }

        internal func HitTestWithDescriptionImpl(_ point: WindowsFoundation.Vector2, _ textLayoutRegion: inout Win2D.CanvasTextLayoutRegion) throws -> Bool {
            var isHit: boolean = 0
            var _textLayoutRegion: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescription(pThis, .from(swift: point), &_textLayoutRegion, &isHit))
            }
            textLayoutRegion = .from(abi: _textLayoutRegion)
            return .init(from: isHit)
        }

        internal func HitTestWithDescriptionAndCoordsImpl(_ x: Float, _ y: Float, _ textLayoutRegion: inout Win2D.CanvasTextLayoutRegion) throws -> Bool {
            var isHit: boolean = 0
            var _textLayoutRegion: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescriptionAndCoords(pThis, x, y, &_textLayoutRegion, &isHit))
            }
            textLayoutRegion = .from(abi: _textLayoutRegion)
            return .init(from: isHit)
        }

        internal func HitTestWithDescriptionAndTrailingSideImpl(_ point: WindowsFoundation.Vector2, _ textLayoutRegion: inout Win2D.CanvasTextLayoutRegion, _ trailingSideOfCharacter: inout Bool) throws -> Bool {
            var isHit: boolean = 0
            var _textLayoutRegion: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = .init()
            var _trailingSideOfCharacter: boolean = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescriptionAndTrailingSide(pThis, .from(swift: point), &_textLayoutRegion, &_trailingSideOfCharacter, &isHit))
            }
            textLayoutRegion = .from(abi: _textLayoutRegion)
            trailingSideOfCharacter = .init(from: _trailingSideOfCharacter)
            return .init(from: isHit)
        }

        internal func HitTestWithDescriptionAndCoordsAndTrailingSideImpl(_ x: Float, _ y: Float, _ textLayoutRegion: inout Win2D.CanvasTextLayoutRegion, _ trailingSideOfCharacter: inout Bool) throws -> Bool {
            var isHit: boolean = 0
            var _textLayoutRegion: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = .init()
            var _trailingSideOfCharacter: boolean = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescriptionAndCoordsAndTrailingSide(pThis, x, y, &_textLayoutRegion, &_trailingSideOfCharacter, &isHit))
            }
            textLayoutRegion = .from(abi: _textLayoutRegion)
            trailingSideOfCharacter = .init(from: _trailingSideOfCharacter)
            return .init(from: isHit)
        }

        internal func GetCaretPositionImpl(_ characterIndex: Int32, _ trailingSideOfCharacter: Bool) throws -> WindowsFoundation.Vector2 {
            var location: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCaretPosition(pThis, characterIndex, .init(from: trailingSideOfCharacter), &location))
            }
            return .from(abi: location)
        }

        internal func GetCaretPositionWithDescriptionImpl(_ characterIndex: Int32, _ trailingSideOfCharacter: Bool, _ textLayoutRegion: inout Win2D.CanvasTextLayoutRegion) throws -> WindowsFoundation.Vector2 {
            var location: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            var _textLayoutRegion: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCaretPositionWithDescription(pThis, characterIndex, .init(from: trailingSideOfCharacter), &_textLayoutRegion, &location))
            }
            textLayoutRegion = .from(abi: _textLayoutRegion)
            return .from(abi: location)
        }

        internal func GetPairKerningImpl(_ characterIndex: Int32) throws -> Bool {
            var hasPairKerning: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPairKerning(pThis, characterIndex, &hasPairKerning))
            }
            return .init(from: hasPairKerning)
        }

        internal func SetPairKerningImpl(_ characterIndex: Int32, _ characterCount: Int32, _ hasPairKerning: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPairKerning(pThis, characterIndex, characterCount, .init(from: hasPairKerning)))
            }
        }

        internal func GetLeadingCharacterSpacingImpl(_ characterIndex: Int32) throws -> Float {
            var leadingSpacing: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLeadingCharacterSpacing(pThis, characterIndex, &leadingSpacing))
            }
            return leadingSpacing
        }

        internal func GetTrailingCharacterSpacingImpl(_ characterIndex: Int32) throws -> Float {
            var trailingSpacing: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTrailingCharacterSpacing(pThis, characterIndex, &trailingSpacing))
            }
            return trailingSpacing
        }

        internal func GetMinimumCharacterAdvanceImpl(_ characterIndex: Int32) throws -> Float {
            var minimumAdvance: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMinimumCharacterAdvance(pThis, characterIndex, &minimumAdvance))
            }
            return minimumAdvance
        }

        internal func SetCharacterSpacingImpl(_ characterIndex: Int32, _ characterCount: Int32, _ leadingSpacing: Float, _ trailingSpacing: Float, _ minimumAdvance: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetCharacterSpacing(pThis, characterIndex, characterCount, leadingSpacing, trailingSpacing, minimumAdvance))
            }
        }

        internal func get_VerticalGlyphOrientationImpl() throws -> Win2D.CanvasVerticalGlyphOrientation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalGlyphOrientation(pThis, &value))
            }
            return value
        }

        internal func put_VerticalGlyphOrientationImpl(_ value: Win2D.CanvasVerticalGlyphOrientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalGlyphOrientation(pThis, value))
            }
        }

        internal func get_OpticalAlignmentImpl() throws -> Win2D.CanvasOpticalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalAlignment(pThis, &value))
            }
            return value
        }

        internal func put_OpticalAlignmentImpl(_ value: Win2D.CanvasOpticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalAlignment(pThis, value))
            }
        }

        internal func get_LastLineWrappingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastLineWrapping(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LastLineWrappingImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LastLineWrapping(pThis, .init(from: value)))
            }
        }

        internal func get_DeviceImpl() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICanvasTextLayoutFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory }

        internal func CreateImpl(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ textString: String, _ textFormat: Win2D.CanvasTextFormat?, _ requestedWidth: Float, _ requestedHeight: Float) throws -> ICanvasTextLayout {
            let (canvasTextLayout) = try ComPtrs.initialize { canvasTextLayoutAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let _textString = try! HString(textString)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _resourceCreator, _textString.get(), RawPointer(textFormat), requestedWidth, requestedHeight, &canvasTextLayoutAbi))
                }
            }
            return ICanvasTextLayout(canvasTextLayout!)
        }

    }

    public class ICanvasTextLayoutStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics }

        internal func GetGlyphOrientationTransformImpl(_ glyphOrientation: Win2D.CanvasGlyphOrientation, _ isSideways: Bool, _ position: WindowsFoundation.Vector2) throws -> WindowsFoundation.Matrix3x2 {
            var transform: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphOrientationTransform(pThis, glyphOrientation, .init(from: isSideways), .from(swift: position), &transform))
            }
            return .from(abi: transform)
        }

    }

    public class ICanvasTextRenderer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer }

        open func DrawStrikethroughImpl(_ point: WindowsFoundation.Vector2, _ strikethroughWidth: Float, _ strikethroughThickness: Float, _ strikethroughOffset: Float, _ textDirection: Win2D.CanvasTextDirection, _ brush: Any?, _ textMeasuringMode: Win2D.CanvasTextMeasuringMode, _ localeName: String, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws {
            let brushWrapper = __ABI_.AnyWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            let _localeName = try! HString(localeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawStrikethrough(pThis, .from(swift: point), strikethroughWidth, strikethroughThickness, strikethroughOffset, textDirection, _brush, textMeasuringMode, _localeName.get(), glyphOrientation))
            }
        }

        open func DrawUnderlineImpl(_ point: WindowsFoundation.Vector2, _ underlineWidth: Float, _ underlineThickness: Float, _ underlineOffset: Float, _ runHeight: Float, _ textDirection: Win2D.CanvasTextDirection, _ brush: Any?, _ textMeasuringMode: Win2D.CanvasTextMeasuringMode, _ localeName: String, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws {
            let brushWrapper = __ABI_.AnyWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            let _localeName = try! HString(localeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawUnderline(pThis, .from(swift: point), underlineWidth, underlineThickness, underlineOffset, runHeight, textDirection, _brush, textMeasuringMode, _localeName.get(), glyphOrientation))
            }
        }

        open func DrawInlineObjectImpl(_ point: WindowsFoundation.Vector2, _ inlineObject: Win2D.AnyICanvasTextInlineObject?, _ isSideways: Bool, _ isRightToLeft: Bool, _ brush: Any?, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws {
            let inlineObjectWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper(inlineObject)
            let _inlineObject = try! inlineObjectWrapper?.toABI { $0 }
            let brushWrapper = __ABI_.AnyWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawInlineObject(pThis, .from(swift: point), _inlineObject, .init(from: isSideways), .init(from: isRightToLeft), _brush, glyphOrientation))
            }
        }

        open func get_PixelSnappingDisabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelSnappingDisabled(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_TransformImpl() throws -> WindowsFoundation.Matrix3x2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform(pThis, &value))
            }
            return .from(abi: value)
        }

        open func get_DpiImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Dpi(pThis, &value))
            }
            return value
        }

    }

    internal static var ICanvasTextRendererVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRendererVtbl = .init(
        QueryInterface: { ICanvasTextRendererWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasTextRendererWrapper.addRef($0) },
        Release: { ICanvasTextRendererWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        DrawGlyphRun: { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ in return failWith(err: E_NOTIMPL) },

        DrawStrikethrough: {
            do {
                guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let point: WindowsFoundation.Vector2 = .from(abi: $1)
                let strikethroughWidth: Float = $2
                let strikethroughThickness: Float = $3
                let strikethroughOffset: Float = $4
                let textDirection: Win2D.CanvasTextDirection = $5
                let brush: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($6))
                let textMeasuringMode: Win2D.CanvasTextMeasuringMode = $7
                let localeName: String = .init(from: $8)
                let glyphOrientation: Win2D.CanvasGlyphOrientation = $9
                try __unwrapped__instance.drawStrikethrough(point, strikethroughWidth, strikethroughThickness, strikethroughOffset, textDirection, brush, textMeasuringMode, localeName, glyphOrientation)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        DrawUnderline: {
            do {
                guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let point: WindowsFoundation.Vector2 = .from(abi: $1)
                let underlineWidth: Float = $2
                let underlineThickness: Float = $3
                let underlineOffset: Float = $4
                let runHeight: Float = $5
                let textDirection: Win2D.CanvasTextDirection = $6
                let brush: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($7))
                let textMeasuringMode: Win2D.CanvasTextMeasuringMode = $8
                let localeName: String = .init(from: $9)
                let glyphOrientation: Win2D.CanvasGlyphOrientation = $10
                try __unwrapped__instance.drawUnderline(point, underlineWidth, underlineThickness, underlineOffset, runHeight, textDirection, brush, textMeasuringMode, localeName, glyphOrientation)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        DrawInlineObject: {
            do {
                guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let point: WindowsFoundation.Vector2 = .from(abi: $1)
                let inlineObject: Win2D.AnyICanvasTextInlineObject? = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.unwrapFrom(abi: ComPtr($2))
                let isSideways: Bool = .init(from: $3)
                let isRightToLeft: Bool = .init(from: $4)
                let brush: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($5))
                let glyphOrientation: Win2D.CanvasGlyphOrientation = $6
                try __unwrapped__instance.drawInlineObject(point, inlineObject, isSideways, isRightToLeft, brush, glyphOrientation)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_PixelSnappingDisabled: {
            guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.pixelSnappingDisabled
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_Transform: {
            guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.transform
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        get_Dpi: {
            guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.dpi
            $1?.initialize(to: value)
            return S_OK
        }
    )

    public typealias ICanvasTextRendererWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererBridge>
    public class ICanvasTextRenderingParameters: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters }

        internal func get_RenderingModeImpl() throws -> Win2D.CanvasTextRenderingMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RenderingMode(pThis, &value))
            }
            return value
        }

        internal func get_GridFitImpl() throws -> Win2D.CanvasTextGridFit {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GridFit(pThis, &value))
            }
            return value
        }

    }

    public class ICanvasTextRenderingParametersFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory }

        internal func CreateImpl(_ textRenderingMode: Win2D.CanvasTextRenderingMode, _ gridFit: Win2D.CanvasTextGridFit) throws -> ICanvasTextRenderingParameters {
            let (textRenderingParameters) = try ComPtrs.initialize { textRenderingParametersAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, textRenderingMode, gridFit, &textRenderingParametersAbi))
                }
            }
            return ICanvasTextRenderingParameters(textRenderingParameters!)
        }

    }

    public class ICanvasTypography: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography }

        internal func AddFeatureImpl(_ feature: Win2D.CanvasTypographyFeature) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddFeature(pThis, .from(swift: feature)))
            }
        }

        internal func AddFeatureWithNameAndParameterImpl(_ name: Win2D.CanvasTypographyFeatureName, _ parameter: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddFeatureWithNameAndParameter(pThis, name, parameter))
            }
        }

    }

    public class _ABI_CanvasLineMetrics {
        public var val: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics = .init()
        public init() { }
        public init(from swift: Win2D.CanvasLineMetrics) {
            val.CharacterCount = swift.characterCount
            val.TrailingWhitespaceCount = swift.trailingWhitespaceCount
            val.TerminalNewlineCount = swift.terminalNewlineCount
            val.Height = swift.height
            val.Baseline = swift.baseline
            val.IsTrimmed = .init(from: swift.isTrimmed)
            val.LeadingWhitespaceBefore = swift.leadingWhitespaceBefore
            val.LeadingWhitespaceAfter = swift.leadingWhitespaceAfter
        }

        public func detach() -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics {
            let result = val
            return result
        }

        deinit {
        }
    }
}
extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript {
        public static func from(swift: Win2D.CanvasAnalyzedScript) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript {
            .init(ScriptIdentifier: swift.scriptIdentifier, Shape: swift.shape)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics {
        public static func from(swift: Win2D.CanvasClusterMetrics) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics {
            .init(CharacterCount: swift.characterCount, Width: swift.width, Properties: swift.properties)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph {
        public static func from(swift: Win2D.CanvasGlyph) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph {
            .init(Index: swift.index, Advance: swift.advance, AdvanceOffset: swift.advanceOffset, AscenderOffset: swift.ascenderOffset)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics {
        public static func from(swift: Win2D.CanvasGlyphMetrics) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics {
            .init(LeftSideBearing: swift.leftSideBearing, AdvanceWidth: swift.advanceWidth, RightSideBearing: swift.rightSideBearing, TopSideBearing: swift.topSideBearing, AdvanceHeight: swift.advanceHeight, BottomSideBearing: swift.bottomSideBearing, VerticalOrigin: swift.verticalOrigin, DrawBounds: .from(swift: swift.drawBounds))
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion {
        public static func from(swift: Win2D.CanvasTextLayoutRegion) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion {
            .init(CharacterIndex: swift.characterIndex, CharacterCount: swift.characterCount, LayoutBounds: .from(swift: swift.layoutBounds))
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature {
        public static func from(swift: Win2D.CanvasTypographyFeature) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature {
            .init(Name: swift.name, Parameter: swift.parameter)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange {
        public static func from(swift: Win2D.CanvasUnicodeRange) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange {
            .init(First: swift.first, Last: swift.last)
        }
    }
    
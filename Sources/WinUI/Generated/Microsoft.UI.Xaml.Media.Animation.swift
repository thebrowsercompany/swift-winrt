// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.clockstate)
public typealias ClockState = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CClockState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimationcomponent)
public typealias ConnectedAnimationComponent = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CConnectedAnimationComponent
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingmode)
public typealias EasingMode = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CEasingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.fillbehavior)
public typealias FillBehavior = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CFillBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehaviortype)
public typealias RepeatBehaviorType = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CRepeatBehaviorType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.slidenavigationtransitioneffect)
public typealias SlideNavigationTransitionEffect = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CSlideNavigationTransitionEffect
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.adddeletethemetransition)
public final class AddDeleteThemeTransition : WinUI.Transition {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IAddDeleteThemeTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIAddDeleteThemeTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIAddDeleteThemeTransition>?) -> AddDeleteThemeTransition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.backease)
public final class BackEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IBackEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBackEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBackEase>?) -> BackEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.BackEase")))
    }

    private static let _IBackEaseStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IBackEaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.BackEase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.backease.amplitudeproperty)
    public static var amplitudeProperty : WinUI.DependencyProperty! {
        get { try! _IBackEaseStatics.get_AmplitudePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.backease.amplitude)
    public var amplitude : Double {
        get { try! _default.get_AmplitudeImpl() }
        set { try! _default.put_AmplitudeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.basicconnectedanimationconfiguration)
open class BasicConnectedAnimationConfiguration : WinUI.ConnectedAnimationConfiguration {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IBasicConnectedAnimationConfiguration
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBasicConnectedAnimationConfiguration
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBasicConnectedAnimationConfiguration>?) -> BasicConnectedAnimationConfiguration? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBasicConnectedAnimationConfigurationFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.IBasicConnectedAnimationConfigurationFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBasicConnectedAnimationConfigurationFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IBasicConnectedAnimationConfiguration : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = BasicConnectedAnimationConfiguration
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBasicConnectedAnimationConfiguration
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IBasicConnectedAnimationConfiguration
        }
    }
    internal typealias Composable = IBasicConnectedAnimationConfiguration
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.beginstoryboard)
public final class BeginStoryboard : WinUI.TriggerAction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IBeginStoryboard
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBeginStoryboard
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBeginStoryboard>?) -> BeginStoryboard? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.BeginStoryboard")))
    }

    private static let _IBeginStoryboardStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IBeginStoryboardStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.BeginStoryboard"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.beginstoryboard.storyboardproperty)
    public static var storyboardProperty : WinUI.DependencyProperty! {
        get { try! _IBeginStoryboardStatics.get_StoryboardPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.beginstoryboard.storyboard)
    public var storyboard : Storyboard! {
        get { try! _default.get_StoryboardImpl() }
        set { try! _default.put_StoryboardImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.bounceease)
public final class BounceEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IBounceEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBounceEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIBounceEase>?) -> BounceEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.BounceEase")))
    }

    private static let _IBounceEaseStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IBounceEaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.BounceEase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.bounceease.bouncesproperty)
    public static var bouncesProperty : WinUI.DependencyProperty! {
        get { try! _IBounceEaseStatics.get_BouncesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.bounceease.bouncinessproperty)
    public static var bouncinessProperty : WinUI.DependencyProperty! {
        get { try! _IBounceEaseStatics.get_BouncinessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.bounceease.bounces)
    public var bounces : Int32 {
        get { try! _default.get_BouncesImpl() }
        set { try! _default.put_BouncesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.bounceease.bounciness)
    public var bounciness : Double {
        get { try! _default.get_BouncinessImpl() }
        set { try! _default.put_BouncinessImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.circleease)
public final class CircleEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ICircleEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICircleEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICircleEase>?) -> CircleEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.CircleEase")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation)
public final class ColorAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IColorAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorAnimation>?) -> ColorAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.ColorAnimation")))
    }

    private static let _IColorAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IColorAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ColorAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation.byproperty)
    public static var byProperty : WinUI.DependencyProperty! {
        get { try! _IColorAnimationStatics.get_ByPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation.easingfunctionproperty)
    public static var easingFunctionProperty : WinUI.DependencyProperty! {
        get { try! _IColorAnimationStatics.get_EasingFunctionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation.enabledependentanimationproperty)
    public static var enableDependentAnimationProperty : WinUI.DependencyProperty! {
        get { try! _IColorAnimationStatics.get_EnableDependentAnimationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation.fromproperty)
    public static var fromProperty : WinUI.DependencyProperty! {
        get { try! _IColorAnimationStatics.get_FromPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation.toproperty)
    public static var toProperty : WinUI.DependencyProperty! {
        get { try! _IColorAnimationStatics.get_ToPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation.by)
    public var by : UWP.Color? {
        get { try! _default.get_ByImpl() }
        set { try! _default.put_ByImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation.easingfunction)
    public var easingFunction : EasingFunctionBase! {
        get { try! _default.get_EasingFunctionImpl() }
        set { try! _default.put_EasingFunctionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation.enabledependentanimation)
    public var enableDependentAnimation : Bool {
        get { try! _default.get_EnableDependentAnimationImpl() }
        set { try! _default.put_EnableDependentAnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation.from)
    public var from : UWP.Color? {
        get { try! _default.get_FromImpl() }
        set { try! _default.put_FromImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimation.to)
    public var to : UWP.Color? {
        get { try! _default.get_ToImpl() }
        set { try! _default.put_ToImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimationusingkeyframes)
public final class ColorAnimationUsingKeyFrames : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IColorAnimationUsingKeyFrames
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorAnimationUsingKeyFrames
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorAnimationUsingKeyFrames>?) -> ColorAnimationUsingKeyFrames? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames")))
    }

    private static let _IColorAnimationUsingKeyFramesStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IColorAnimationUsingKeyFramesStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimationusingkeyframes.enabledependentanimationproperty)
    public static var enableDependentAnimationProperty : WinUI.DependencyProperty! {
        get { try! _IColorAnimationUsingKeyFramesStatics.get_EnableDependentAnimationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimationusingkeyframes.enabledependentanimation)
    public var enableDependentAnimation : Bool {
        get { try! _default.get_EnableDependentAnimationImpl() }
        set { try! _default.put_EnableDependentAnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.coloranimationusingkeyframes.keyframes)
    public var keyFrames : ColorKeyFrameCollection! {
        get { try! _default.get_KeyFramesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframe)
open class ColorKeyFrame : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IColorKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorKeyFrame>?) -> ColorKeyFrame? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IColorKeyFrameFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.IColorKeyFrameFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IColorKeyFrameFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IColorKeyFrameStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IColorKeyFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframe.keytimeproperty)
    public class var keyTimeProperty : WinUI.DependencyProperty! {
        get { try! _IColorKeyFrameStatics.get_KeyTimePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframe.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IColorKeyFrameStatics.get_ValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframe.keytime)
    public var keyTime : KeyTime {
        get { try! _default.get_KeyTimeImpl() }
        set { try! _default.put_KeyTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframe.value)
    public var value : UWP.Color {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    internal enum IColorKeyFrame : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ColorKeyFrame
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIColorKeyFrame
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IColorKeyFrame
        }
    }
    internal typealias Composable = IColorKeyFrame
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection)
public final class ColorKeyFrameCollection : WinRTClass, IVector, IIterable {
    public typealias T = ColorKeyFrame?
    private typealias SwiftABI = WinUI.IVectorColorKeyFrame
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CColorKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CColorKeyFrame>?) -> ColorKeyFrameCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.getat)
    public func getAt(_ index: UInt32) -> ColorKeyFrame? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<ColorKeyFrame?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.indexof)
    public func indexOf(_ value: ColorKeyFrame?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.setat)
    public func setAt(_ index: UInt32, _ value: ColorKeyFrame?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: ColorKeyFrame?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.append)
    public func append(_ value: ColorKeyFrame?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableColorKeyFrame! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.colorkeyframecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<ColorKeyFrame?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.commonnavigationtransitioninfo)
public final class CommonNavigationTransitionInfo : WinUI.NavigationTransitionInfo {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ICommonNavigationTransitionInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICommonNavigationTransitionInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICommonNavigationTransitionInfo>?) -> CommonNavigationTransitionInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo")))
    }

    private static let _ICommonNavigationTransitionInfoStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.ICommonNavigationTransitionInfoStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.commonnavigationtransitioninfo.getisstaggerelement)
    public static func getIsStaggerElement(_ element: WinUI.UIElement!) -> Bool {
        return try! _ICommonNavigationTransitionInfoStatics.GetIsStaggerElementImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.commonnavigationtransitioninfo.setisstaggerelement)
    public static func setIsStaggerElement(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _ICommonNavigationTransitionInfoStatics.SetIsStaggerElementImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.commonnavigationtransitioninfo.isstaggerelementproperty)
    public static var isStaggerElementProperty : WinUI.DependencyProperty! {
        get { try! _ICommonNavigationTransitionInfoStatics.get_IsStaggerElementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.commonnavigationtransitioninfo.isstaggeringenabledproperty)
    public static var isStaggeringEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ICommonNavigationTransitionInfoStatics.get_IsStaggeringEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.commonnavigationtransitioninfo.isstaggeringenabled)
    public var isStaggeringEnabled : Bool {
        get { try! _default.get_IsStaggeringEnabledImpl() }
        set { try! _default.put_IsStaggeringEnabledImpl(newValue) }
    }

    internal enum INavigationTransitionInfoOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfoOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverrides
        internal typealias Class = CommonNavigationTransitionInfo
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICommonNavigationTransitionInfo
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ICommonNavigationTransitionInfo
        }
    }
    internal typealias Composable = INavigationTransitionInfoOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimation)
public final class ConnectedAnimation : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IConnectedAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimation>?) -> ConnectedAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimation.trystart)
    public func tryStart(_ destination: WinUI.UIElement!) throws -> Bool {
        try _default.TryStartImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimation.trystart)
    public func tryStart(_ destination: WinUI.UIElement!, _ coordinatedElements: WindowsFoundation.AnyIIterable<WinUI.UIElement?>!) throws -> Bool {
        try _default.TryStartWithCoordinatedElementsImpl(destination, coordinatedElements)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimation.cancel)
    public func cancel() throws {
        try _default.CancelImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimation.setanimationcomponent)
    public func setAnimationComponent(_ component: ConnectedAnimationComponent, _ animation: WinAppSDK.AnyICompositionAnimationBase!) throws {
        try _default.SetAnimationComponentImpl(component, animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimation.configuration)
    public var configuration : ConnectedAnimationConfiguration! {
        get { try! _default.get_ConfigurationImpl() }
        set { try! _default.put_ConfigurationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimation.isscaleanimationenabled)
    public var isScaleAnimationEnabled : Bool {
        get { try! _default.get_IsScaleAnimationEnabledImpl() }
        set { try! _default.put_IsScaleAnimationEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimation.completed)
    public lazy var completed : Event<TypedEventHandler<ConnectedAnimation?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CompletedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimationconfiguration)
open class ConnectedAnimationConfiguration : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IConnectedAnimationConfiguration
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimationConfiguration
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimationConfiguration>?) -> ConnectedAnimationConfiguration? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IConnectedAnimationConfigurationFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.IConnectedAnimationConfigurationFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration"))

    internal enum IConnectedAnimationConfiguration : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ConnectedAnimationConfiguration
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimationConfiguration
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IConnectedAnimationConfiguration
        }
    }
    internal typealias Composable = IConnectedAnimationConfiguration
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimationservice)
public final class ConnectedAnimationService : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IConnectedAnimationService
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimationService
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIConnectedAnimationService>?) -> ConnectedAnimationService? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IConnectedAnimationServiceStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IConnectedAnimationServiceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimationservice.getforcurrentview)
    public static func getForCurrentView() -> ConnectedAnimationService! {
        return try! _IConnectedAnimationServiceStatics.GetForCurrentViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimationservice.preparetoanimate)
    public func prepareToAnimate(_ key: String, _ source: WinUI.UIElement!) throws -> ConnectedAnimation! {
        try _default.PrepareToAnimateImpl(key, source)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimationservice.getanimation)
    public func getAnimation(_ key: String) throws -> ConnectedAnimation! {
        try _default.GetAnimationImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimationservice.defaultduration)
    public var defaultDuration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DefaultDurationImpl() }
        set { try! _default.put_DefaultDurationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.connectedanimationservice.defaulteasingfunction)
    public var defaultEasingFunction : WinAppSDK.CompositionEasingFunction! {
        get { try! _default.get_DefaultEasingFunctionImpl() }
        set { try! _default.put_DefaultEasingFunctionImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.contentthemetransition)
public final class ContentThemeTransition : WinUI.Transition {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IContentThemeTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIContentThemeTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIContentThemeTransition>?) -> ContentThemeTransition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition")))
    }

    private static let _IContentThemeTransitionStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IContentThemeTransitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.contentthemetransition.horizontaloffsetproperty)
    public static var horizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IContentThemeTransitionStatics.get_HorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.contentthemetransition.verticaloffsetproperty)
    public static var verticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IContentThemeTransitionStatics.get_VerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.contentthemetransition.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
        set { try! _default.put_HorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.contentthemetransition.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
        set { try! _default.put_VerticalOffsetImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo)
public final class ContinuumNavigationTransitionInfo : WinUI.NavigationTransitionInfo {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IContinuumNavigationTransitionInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIContinuumNavigationTransitionInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIContinuumNavigationTransitionInfo>?) -> ContinuumNavigationTransitionInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo")))
    }

    private static let _IContinuumNavigationTransitionInfoStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IContinuumNavigationTransitionInfoStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.getisentranceelement)
    public static func getIsEntranceElement(_ element: WinUI.UIElement!) -> Bool {
        return try! _IContinuumNavigationTransitionInfoStatics.GetIsEntranceElementImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.setisentranceelement)
    public static func setIsEntranceElement(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _IContinuumNavigationTransitionInfoStatics.SetIsEntranceElementImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.getisexitelement)
    public static func getIsExitElement(_ element: WinUI.UIElement!) -> Bool {
        return try! _IContinuumNavigationTransitionInfoStatics.GetIsExitElementImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.setisexitelement)
    public static func setIsExitElement(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _IContinuumNavigationTransitionInfoStatics.SetIsExitElementImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.getexitelementcontainer)
    public static func getExitElementContainer(_ element: WinUI.ListViewBase!) -> Bool {
        return try! _IContinuumNavigationTransitionInfoStatics.GetExitElementContainerImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.setexitelementcontainer)
    public static func setExitElementContainer(_ element: WinUI.ListViewBase!, _ value: Bool) {
        try! _IContinuumNavigationTransitionInfoStatics.SetExitElementContainerImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.exitelementcontainerproperty)
    public static var exitElementContainerProperty : WinUI.DependencyProperty! {
        get { try! _IContinuumNavigationTransitionInfoStatics.get_ExitElementContainerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.exitelementproperty)
    public static var exitElementProperty : WinUI.DependencyProperty! {
        get { try! _IContinuumNavigationTransitionInfoStatics.get_ExitElementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.isentranceelementproperty)
    public static var isEntranceElementProperty : WinUI.DependencyProperty! {
        get { try! _IContinuumNavigationTransitionInfoStatics.get_IsEntranceElementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.isexitelementproperty)
    public static var isExitElementProperty : WinUI.DependencyProperty! {
        get { try! _IContinuumNavigationTransitionInfoStatics.get_IsExitElementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.continuumnavigationtransitioninfo.exitelement)
    public var exitElement : WinUI.UIElement! {
        get { try! _default.get_ExitElementImpl() }
        set { try! _default.put_ExitElementImpl(newValue) }
    }

    internal enum INavigationTransitionInfoOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfoOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverrides
        internal typealias Class = ContinuumNavigationTransitionInfo
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIContinuumNavigationTransitionInfo
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IContinuumNavigationTransitionInfo
        }
    }
    internal typealias Composable = INavigationTransitionInfoOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.cubicease)
public final class CubicEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ICubicEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICubicEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CICubicEase>?) -> CubicEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.CubicEase")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.directconnectedanimationconfiguration)
open class DirectConnectedAnimationConfiguration : WinUI.ConnectedAnimationConfiguration {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDirectConnectedAnimationConfiguration
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDirectConnectedAnimationConfiguration
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDirectConnectedAnimationConfiguration>?) -> DirectConnectedAnimationConfiguration? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IDirectConnectedAnimationConfigurationFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.IDirectConnectedAnimationConfigurationFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IDirectConnectedAnimationConfigurationFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IDirectConnectedAnimationConfiguration : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = DirectConnectedAnimationConfiguration
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDirectConnectedAnimationConfiguration
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDirectConnectedAnimationConfiguration
        }
    }
    internal typealias Composable = IDirectConnectedAnimationConfiguration
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.discretecolorkeyframe)
public final class DiscreteColorKeyFrame : WinUI.ColorKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDiscreteColorKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteColorKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteColorKeyFrame>?) -> DiscreteColorKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.discretedoublekeyframe)
public final class DiscreteDoubleKeyFrame : WinUI.DoubleKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDiscreteDoubleKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteDoubleKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteDoubleKeyFrame>?) -> DiscreteDoubleKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.discreteobjectkeyframe)
public final class DiscreteObjectKeyFrame : WinUI.ObjectKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDiscreteObjectKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteObjectKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscreteObjectKeyFrame>?) -> DiscreteObjectKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.discretepointkeyframe)
public final class DiscretePointKeyFrame : WinUI.PointKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDiscretePointKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscretePointKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDiscretePointKeyFrame>?) -> DiscretePointKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation)
public final class DoubleAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDoubleAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleAnimation>?) -> DoubleAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DoubleAnimation")))
    }

    private static let _IDoubleAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IDoubleAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.DoubleAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation.byproperty)
    public static var byProperty : WinUI.DependencyProperty! {
        get { try! _IDoubleAnimationStatics.get_ByPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation.easingfunctionproperty)
    public static var easingFunctionProperty : WinUI.DependencyProperty! {
        get { try! _IDoubleAnimationStatics.get_EasingFunctionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation.enabledependentanimationproperty)
    public static var enableDependentAnimationProperty : WinUI.DependencyProperty! {
        get { try! _IDoubleAnimationStatics.get_EnableDependentAnimationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation.fromproperty)
    public static var fromProperty : WinUI.DependencyProperty! {
        get { try! _IDoubleAnimationStatics.get_FromPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation.toproperty)
    public static var toProperty : WinUI.DependencyProperty! {
        get { try! _IDoubleAnimationStatics.get_ToPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation.by)
    public var by : Double? {
        get { try! _default.get_ByImpl() }
        set { try! _default.put_ByImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation.easingfunction)
    public var easingFunction : EasingFunctionBase! {
        get { try! _default.get_EasingFunctionImpl() }
        set { try! _default.put_EasingFunctionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation.enabledependentanimation)
    public var enableDependentAnimation : Bool {
        get { try! _default.get_EnableDependentAnimationImpl() }
        set { try! _default.put_EnableDependentAnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation.from)
    public var from : Double? {
        get { try! _default.get_FromImpl() }
        set { try! _default.put_FromImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimation.to)
    public var to : Double? {
        get { try! _default.get_ToImpl() }
        set { try! _default.put_ToImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimationusingkeyframes)
public final class DoubleAnimationUsingKeyFrames : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDoubleAnimationUsingKeyFrames
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleAnimationUsingKeyFrames
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleAnimationUsingKeyFrames>?) -> DoubleAnimationUsingKeyFrames? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames")))
    }

    private static let _IDoubleAnimationUsingKeyFramesStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IDoubleAnimationUsingKeyFramesStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimationusingkeyframes.enabledependentanimationproperty)
    public static var enableDependentAnimationProperty : WinUI.DependencyProperty! {
        get { try! _IDoubleAnimationUsingKeyFramesStatics.get_EnableDependentAnimationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimationusingkeyframes.enabledependentanimation)
    public var enableDependentAnimation : Bool {
        get { try! _default.get_EnableDependentAnimationImpl() }
        set { try! _default.put_EnableDependentAnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doubleanimationusingkeyframes.keyframes)
    public var keyFrames : DoubleKeyFrameCollection! {
        get { try! _default.get_KeyFramesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframe)
open class DoubleKeyFrame : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDoubleKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleKeyFrame>?) -> DoubleKeyFrame? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IDoubleKeyFrameFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.IDoubleKeyFrameFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IDoubleKeyFrameFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IDoubleKeyFrameStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IDoubleKeyFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframe.keytimeproperty)
    public class var keyTimeProperty : WinUI.DependencyProperty! {
        get { try! _IDoubleKeyFrameStatics.get_KeyTimePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframe.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IDoubleKeyFrameStatics.get_ValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframe.keytime)
    public var keyTime : KeyTime {
        get { try! _default.get_KeyTimeImpl() }
        set { try! _default.put_KeyTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframe.value)
    public var value : Double {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    internal enum IDoubleKeyFrame : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = DoubleKeyFrame
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDoubleKeyFrame
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDoubleKeyFrame
        }
    }
    internal typealias Composable = IDoubleKeyFrame
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection)
public final class DoubleKeyFrameCollection : WinRTClass, IVector, IIterable {
    public typealias T = DoubleKeyFrame?
    private typealias SwiftABI = WinUI.IVectorDoubleKeyFrame
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CDoubleKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CDoubleKeyFrame>?) -> DoubleKeyFrameCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.getat)
    public func getAt(_ index: UInt32) -> DoubleKeyFrame? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<DoubleKeyFrame?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.indexof)
    public func indexOf(_ value: DoubleKeyFrame?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.setat)
    public func setAt(_ index: UInt32, _ value: DoubleKeyFrame?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: DoubleKeyFrame?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.append)
    public func append(_ value: DoubleKeyFrame?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableDoubleKeyFrame! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.doublekeyframecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<DoubleKeyFrame?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.dragitemthemeanimation)
public final class DragItemThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDragItemThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDragItemThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDragItemThemeAnimation>?) -> DragItemThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation")))
    }

    private static let _IDragItemThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IDragItemThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.dragitemthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IDragItemThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.dragitemthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.dragoverthemeanimation)
public final class DragOverThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDragOverThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDragOverThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDragOverThemeAnimation>?) -> DragOverThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation")))
    }

    private static let _IDragOverThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IDragOverThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.dragoverthemeanimation.directionproperty)
    public static var directionProperty : WinUI.DependencyProperty! {
        get { try! _IDragOverThemeAnimationStatics.get_DirectionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.dragoverthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IDragOverThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.dragoverthemeanimation.tooffsetproperty)
    public static var toOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IDragOverThemeAnimationStatics.get_ToOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.dragoverthemeanimation.direction)
    public var direction : WinUI.AnimationDirection {
        get { try! _default.get_DirectionImpl() }
        set { try! _default.put_DirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.dragoverthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.dragoverthemeanimation.tooffset)
    public var toOffset : Double {
        get { try! _default.get_ToOffsetImpl() }
        set { try! _default.put_ToOffsetImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drillinnavigationtransitioninfo)
public final class DrillInNavigationTransitionInfo : WinUI.NavigationTransitionInfo {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDrillInNavigationTransitionInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillInNavigationTransitionInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillInNavigationTransitionInfo>?) -> DrillInNavigationTransitionInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo")))
    }

    internal enum INavigationTransitionInfoOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfoOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverrides
        internal typealias Class = DrillInNavigationTransitionInfo
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillInNavigationTransitionInfo
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDrillInNavigationTransitionInfo
        }
    }
    internal typealias Composable = INavigationTransitionInfoOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drillinthemeanimation)
public final class DrillInThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDrillInThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillInThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillInThemeAnimation>?) -> DrillInThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation")))
    }

    private static let _IDrillInThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IDrillInThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drillinthemeanimation.entrancetargetnameproperty)
    public static var entranceTargetNameProperty : WinUI.DependencyProperty! {
        get { try! _IDrillInThemeAnimationStatics.get_EntranceTargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drillinthemeanimation.entrancetargetproperty)
    public static var entranceTargetProperty : WinUI.DependencyProperty! {
        get { try! _IDrillInThemeAnimationStatics.get_EntranceTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drillinthemeanimation.exittargetnameproperty)
    public static var exitTargetNameProperty : WinUI.DependencyProperty! {
        get { try! _IDrillInThemeAnimationStatics.get_ExitTargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drillinthemeanimation.exittargetproperty)
    public static var exitTargetProperty : WinUI.DependencyProperty! {
        get { try! _IDrillInThemeAnimationStatics.get_ExitTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drillinthemeanimation.entrancetarget)
    public var entranceTarget : WinUI.DependencyObject! {
        get { try! _default.get_EntranceTargetImpl() }
        set { try! _default.put_EntranceTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drillinthemeanimation.entrancetargetname)
    public var entranceTargetName : String {
        get { try! _default.get_EntranceTargetNameImpl() }
        set { try! _default.put_EntranceTargetNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drillinthemeanimation.exittarget)
    public var exitTarget : WinUI.DependencyObject! {
        get { try! _default.get_ExitTargetImpl() }
        set { try! _default.put_ExitTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drillinthemeanimation.exittargetname)
    public var exitTargetName : String {
        get { try! _default.get_ExitTargetNameImpl() }
        set { try! _default.put_ExitTargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drilloutthemeanimation)
public final class DrillOutThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDrillOutThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillOutThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDrillOutThemeAnimation>?) -> DrillOutThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation")))
    }

    private static let _IDrillOutThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IDrillOutThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drilloutthemeanimation.entrancetargetnameproperty)
    public static var entranceTargetNameProperty : WinUI.DependencyProperty! {
        get { try! _IDrillOutThemeAnimationStatics.get_EntranceTargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drilloutthemeanimation.entrancetargetproperty)
    public static var entranceTargetProperty : WinUI.DependencyProperty! {
        get { try! _IDrillOutThemeAnimationStatics.get_EntranceTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drilloutthemeanimation.exittargetnameproperty)
    public static var exitTargetNameProperty : WinUI.DependencyProperty! {
        get { try! _IDrillOutThemeAnimationStatics.get_ExitTargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drilloutthemeanimation.exittargetproperty)
    public static var exitTargetProperty : WinUI.DependencyProperty! {
        get { try! _IDrillOutThemeAnimationStatics.get_ExitTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drilloutthemeanimation.entrancetarget)
    public var entranceTarget : WinUI.DependencyObject! {
        get { try! _default.get_EntranceTargetImpl() }
        set { try! _default.put_EntranceTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drilloutthemeanimation.entrancetargetname)
    public var entranceTargetName : String {
        get { try! _default.get_EntranceTargetNameImpl() }
        set { try! _default.put_EntranceTargetNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drilloutthemeanimation.exittarget)
    public var exitTarget : WinUI.DependencyObject! {
        get { try! _default.get_ExitTargetImpl() }
        set { try! _default.put_ExitTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.drilloutthemeanimation.exittargetname)
    public var exitTargetName : String {
        get { try! _default.get_ExitTargetNameImpl() }
        set { try! _default.put_ExitTargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.droptargetitemthemeanimation)
public final class DropTargetItemThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IDropTargetItemThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDropTargetItemThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIDropTargetItemThemeAnimation>?) -> DropTargetItemThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation")))
    }

    private static let _IDropTargetItemThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IDropTargetItemThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.droptargetitemthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IDropTargetItemThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.droptargetitemthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingcolorkeyframe)
public final class EasingColorKeyFrame : WinUI.ColorKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingColorKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingColorKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingColorKeyFrame>?) -> EasingColorKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame")))
    }

    private static let _IEasingColorKeyFrameStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingColorKeyFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingcolorkeyframe.easingfunctionproperty)
    public static var easingFunctionProperty : WinUI.DependencyProperty! {
        get { try! _IEasingColorKeyFrameStatics.get_EasingFunctionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingcolorkeyframe.easingfunction)
    public var easingFunction : EasingFunctionBase! {
        get { try! _default.get_EasingFunctionImpl() }
        set { try! _default.put_EasingFunctionImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingdoublekeyframe)
public final class EasingDoubleKeyFrame : WinUI.DoubleKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingDoubleKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingDoubleKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingDoubleKeyFrame>?) -> EasingDoubleKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame")))
    }

    private static let _IEasingDoubleKeyFrameStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingDoubleKeyFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingdoublekeyframe.easingfunctionproperty)
    public static var easingFunctionProperty : WinUI.DependencyProperty! {
        get { try! _IEasingDoubleKeyFrameStatics.get_EasingFunctionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingdoublekeyframe.easingfunction)
    public var easingFunction : EasingFunctionBase! {
        get { try! _default.get_EasingFunctionImpl() }
        set { try! _default.put_EasingFunctionImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingfunctionbase)
open class EasingFunctionBase : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingFunctionBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase>?) -> EasingFunctionBase? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IEasingFunctionBaseFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingFunctionBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase"))

    private static let _IEasingFunctionBaseStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingFunctionBaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingfunctionbase.easingmodeproperty)
    public class var easingModeProperty : WinUI.DependencyProperty! {
        get { try! _IEasingFunctionBaseStatics.get_EasingModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingfunctionbase.ease)
    public func ease(_ normalizedTime: Double) throws -> Double {
        try _default.EaseImpl(normalizedTime)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingfunctionbase.easingmode)
    public var easingMode : EasingMode {
        get { try! _default.get_EasingModeImpl() }
        set { try! _default.put_EasingModeImpl(newValue) }
    }

    internal enum IEasingFunctionBase : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = EasingFunctionBase
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingFunctionBase
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingFunctionBase
        }
    }
    internal typealias Composable = IEasingFunctionBase
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingpointkeyframe)
public final class EasingPointKeyFrame : WinUI.PointKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingPointKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingPointKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEasingPointKeyFrame>?) -> EasingPointKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame")))
    }

    private static let _IEasingPointKeyFrameStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IEasingPointKeyFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingpointkeyframe.easingfunctionproperty)
    public static var easingFunctionProperty : WinUI.DependencyProperty! {
        get { try! _IEasingPointKeyFrameStatics.get_EasingFunctionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.easingpointkeyframe.easingfunction)
    public var easingFunction : EasingFunctionBase! {
        get { try! _default.get_EasingFunctionImpl() }
        set { try! _default.put_EasingFunctionImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.edgeuithemetransition)
public final class EdgeUIThemeTransition : WinUI.Transition {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IEdgeUIThemeTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEdgeUIThemeTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEdgeUIThemeTransition>?) -> EdgeUIThemeTransition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition")))
    }

    private static let _IEdgeUIThemeTransitionStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IEdgeUIThemeTransitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.edgeuithemetransition.edgeproperty)
    public static var edgeProperty : WinUI.DependencyProperty! {
        get { try! _IEdgeUIThemeTransitionStatics.get_EdgePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.edgeuithemetransition.edge)
    public var edge : WinUI.EdgeTransitionLocation {
        get { try! _default.get_EdgeImpl() }
        set { try! _default.put_EdgeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.elasticease)
public final class ElasticEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IElasticEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIElasticEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIElasticEase>?) -> ElasticEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.ElasticEase")))
    }

    private static let _IElasticEaseStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IElasticEaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ElasticEase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.elasticease.oscillationsproperty)
    public static var oscillationsProperty : WinUI.DependencyProperty! {
        get { try! _IElasticEaseStatics.get_OscillationsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.elasticease.springinessproperty)
    public static var springinessProperty : WinUI.DependencyProperty! {
        get { try! _IElasticEaseStatics.get_SpringinessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.elasticease.oscillations)
    public var oscillations : Int32 {
        get { try! _default.get_OscillationsImpl() }
        set { try! _default.put_OscillationsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.elasticease.springiness)
    public var springiness : Double {
        get { try! _default.get_SpringinessImpl() }
        set { try! _default.put_SpringinessImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancenavigationtransitioninfo)
public final class EntranceNavigationTransitionInfo : WinUI.NavigationTransitionInfo {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IEntranceNavigationTransitionInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEntranceNavigationTransitionInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEntranceNavigationTransitionInfo>?) -> EntranceNavigationTransitionInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo")))
    }

    private static let _IEntranceNavigationTransitionInfoStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IEntranceNavigationTransitionInfoStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancenavigationtransitioninfo.getistargetelement)
    public static func getIsTargetElement(_ element: WinUI.UIElement!) -> Bool {
        return try! _IEntranceNavigationTransitionInfoStatics.GetIsTargetElementImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancenavigationtransitioninfo.setistargetelement)
    public static func setIsTargetElement(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _IEntranceNavigationTransitionInfoStatics.SetIsTargetElementImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancenavigationtransitioninfo.istargetelementproperty)
    public static var isTargetElementProperty : WinUI.DependencyProperty! {
        get { try! _IEntranceNavigationTransitionInfoStatics.get_IsTargetElementPropertyImpl() }
    }

    internal enum INavigationTransitionInfoOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfoOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverrides
        internal typealias Class = EntranceNavigationTransitionInfo
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEntranceNavigationTransitionInfo
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IEntranceNavigationTransitionInfo
        }
    }
    internal typealias Composable = INavigationTransitionInfoOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancethemetransition)
public final class EntranceThemeTransition : WinUI.Transition {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IEntranceThemeTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEntranceThemeTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIEntranceThemeTransition>?) -> EntranceThemeTransition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition")))
    }

    private static let _IEntranceThemeTransitionStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IEntranceThemeTransitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancethemetransition.fromhorizontaloffsetproperty)
    public static var fromHorizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IEntranceThemeTransitionStatics.get_FromHorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancethemetransition.fromverticaloffsetproperty)
    public static var fromVerticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IEntranceThemeTransitionStatics.get_FromVerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancethemetransition.isstaggeringenabledproperty)
    public static var isStaggeringEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IEntranceThemeTransitionStatics.get_IsStaggeringEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancethemetransition.fromhorizontaloffset)
    public var fromHorizontalOffset : Double {
        get { try! _default.get_FromHorizontalOffsetImpl() }
        set { try! _default.put_FromHorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancethemetransition.fromverticaloffset)
    public var fromVerticalOffset : Double {
        get { try! _default.get_FromVerticalOffsetImpl() }
        set { try! _default.put_FromVerticalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.entrancethemetransition.isstaggeringenabled)
    public var isStaggeringEnabled : Bool {
        get { try! _default.get_IsStaggeringEnabledImpl() }
        set { try! _default.put_IsStaggeringEnabledImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.exponentialease)
public final class ExponentialEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IExponentialEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIExponentialEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIExponentialEase>?) -> ExponentialEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.ExponentialEase")))
    }

    private static let _IExponentialEaseStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IExponentialEaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ExponentialEase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.exponentialease.exponentproperty)
    public static var exponentProperty : WinUI.DependencyProperty! {
        get { try! _IExponentialEaseStatics.get_ExponentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.exponentialease.exponent)
    public var exponent : Double {
        get { try! _default.get_ExponentImpl() }
        set { try! _default.put_ExponentImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.fadeinthemeanimation)
public final class FadeInThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IFadeInThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIFadeInThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIFadeInThemeAnimation>?) -> FadeInThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation")))
    }

    private static let _IFadeInThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IFadeInThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.fadeinthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IFadeInThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.fadeinthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.fadeoutthemeanimation)
public final class FadeOutThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IFadeOutThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIFadeOutThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIFadeOutThemeAnimation>?) -> FadeOutThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation")))
    }

    private static let _IFadeOutThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IFadeOutThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.fadeoutthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IFadeOutThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.fadeoutthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.gravityconnectedanimationconfiguration)
open class GravityConnectedAnimationConfiguration : WinUI.ConnectedAnimationConfiguration {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IGravityConnectedAnimationConfiguration
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIGravityConnectedAnimationConfiguration
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIGravityConnectedAnimationConfiguration>?) -> GravityConnectedAnimationConfiguration? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGravityConnectedAnimationConfigurationFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.IGravityConnectedAnimationConfigurationFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGravityConnectedAnimationConfigurationFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.gravityconnectedanimationconfiguration.isshadowenabled)
    public var isShadowEnabled : Bool {
        get { try! _default.get_IsShadowEnabledImpl() }
        set { try! _default.put_IsShadowEnabledImpl(newValue) }
    }

    internal enum IGravityConnectedAnimationConfiguration : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = GravityConnectedAnimationConfiguration
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIGravityConnectedAnimationConfiguration
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IGravityConnectedAnimationConfiguration
        }
    }
    internal typealias Composable = IGravityConnectedAnimationConfiguration
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.keyspline)
public final class KeySpline : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IKeySpline
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIKeySpline
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIKeySpline>?) -> KeySpline? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.KeySpline")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.keyspline.controlpoint1)
    public var controlPoint1 : WindowsFoundation.Point {
        get { try! _default.get_ControlPoint1Impl() }
        set { try! _default.put_ControlPoint1Impl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.keyspline.controlpoint2)
    public var controlPoint2 : WindowsFoundation.Point {
        get { try! _default.get_ControlPoint2Impl() }
        set { try! _default.put_ControlPoint2Impl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.keytimehelper)
public final class KeyTimeHelper : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IKeyTimeHelper
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIKeyTimeHelper
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIKeyTimeHelper>?) -> KeyTimeHelper? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IKeyTimeHelperStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IKeyTimeHelperStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.KeyTimeHelper"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.keytimehelper.fromtimespan)
    public static func fromTimeSpan(_ timeSpan: WindowsFoundation.TimeSpan) -> KeyTime {
        return try! _IKeyTimeHelperStatics.FromTimeSpanImpl(timeSpan)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.linearcolorkeyframe)
public final class LinearColorKeyFrame : WinUI.ColorKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ILinearColorKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearColorKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearColorKeyFrame>?) -> LinearColorKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.lineardoublekeyframe)
public final class LinearDoubleKeyFrame : WinUI.DoubleKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ILinearDoubleKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearDoubleKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearDoubleKeyFrame>?) -> LinearDoubleKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.linearpointkeyframe)
public final class LinearPointKeyFrame : WinUI.PointKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ILinearPointKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearPointKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CILinearPointKeyFrame>?) -> LinearPointKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.navigationthemetransition)
public final class NavigationThemeTransition : WinUI.Transition {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationThemeTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationThemeTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationThemeTransition>?) -> NavigationThemeTransition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition")))
    }

    private static let _INavigationThemeTransitionStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationThemeTransitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.navigationthemetransition.defaultnavigationtransitioninfoproperty)
    public static var defaultNavigationTransitionInfoProperty : WinUI.DependencyProperty! {
        get { try! _INavigationThemeTransitionStatics.get_DefaultNavigationTransitionInfoPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.navigationthemetransition.defaultnavigationtransitioninfo)
    public var defaultNavigationTransitionInfo : NavigationTransitionInfo! {
        get { try! _default.get_DefaultNavigationTransitionInfoImpl() }
        set { try! _default.put_DefaultNavigationTransitionInfoImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.navigationtransitioninfo)
open class NavigationTransitionInfo : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfo>?) -> NavigationTransitionInfo? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _INavigationTransitionInfoFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._INavigationTransitionInfoFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private lazy var _INavigationTransitionInfoOverrides: __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.navigationtransitioninfo.getnavigationstatecore)
    open func getNavigationStateCore() throws -> String {
        try _INavigationTransitionInfoOverrides.GetNavigationStateCoreImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.navigationtransitioninfo.setnavigationstatecore)
    open func setNavigationStateCore(_ navigationState: String) throws {
        try _INavigationTransitionInfoOverrides.SetNavigationStateCoreImpl(navigationState)
    }

    internal enum INavigationTransitionInfoOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfoOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverrides
        internal typealias Class = NavigationTransitionInfo
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfo
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfo
        }
    }
    internal typealias Composable = INavigationTransitionInfoOverrides
    deinit {
        _default = nil
        _INavigationTransitionInfoOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectanimationusingkeyframes)
public final class ObjectAnimationUsingKeyFrames : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IObjectAnimationUsingKeyFrames
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIObjectAnimationUsingKeyFrames
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIObjectAnimationUsingKeyFrames>?) -> ObjectAnimationUsingKeyFrames? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames")))
    }

    private static let _IObjectAnimationUsingKeyFramesStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IObjectAnimationUsingKeyFramesStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectanimationusingkeyframes.enabledependentanimationproperty)
    public static var enableDependentAnimationProperty : WinUI.DependencyProperty! {
        get { try! _IObjectAnimationUsingKeyFramesStatics.get_EnableDependentAnimationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectanimationusingkeyframes.enabledependentanimation)
    public var enableDependentAnimation : Bool {
        get { try! _default.get_EnableDependentAnimationImpl() }
        set { try! _default.put_EnableDependentAnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectanimationusingkeyframes.keyframes)
    public var keyFrames : ObjectKeyFrameCollection! {
        get { try! _default.get_KeyFramesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframe)
open class ObjectKeyFrame : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IObjectKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIObjectKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIObjectKeyFrame>?) -> ObjectKeyFrame? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IObjectKeyFrameFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.IObjectKeyFrameFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IObjectKeyFrameFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IObjectKeyFrameStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IObjectKeyFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframe.keytimeproperty)
    public class var keyTimeProperty : WinUI.DependencyProperty! {
        get { try! _IObjectKeyFrameStatics.get_KeyTimePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframe.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IObjectKeyFrameStatics.get_ValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframe.keytime)
    public var keyTime : KeyTime {
        get { try! _default.get_KeyTimeImpl() }
        set { try! _default.put_KeyTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframe.value)
    public var value : Any! {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    internal enum IObjectKeyFrame : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ObjectKeyFrame
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIObjectKeyFrame
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IObjectKeyFrame
        }
    }
    internal typealias Composable = IObjectKeyFrame
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection)
public final class ObjectKeyFrameCollection : WinRTClass, IVector, IIterable {
    public typealias T = ObjectKeyFrame?
    private typealias SwiftABI = WinUI.IVectorObjectKeyFrame
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CObjectKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CObjectKeyFrame>?) -> ObjectKeyFrameCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.getat)
    public func getAt(_ index: UInt32) -> ObjectKeyFrame? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<ObjectKeyFrame?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.indexof)
    public func indexOf(_ value: ObjectKeyFrame?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.setat)
    public func setAt(_ index: UInt32, _ value: ObjectKeyFrame?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: ObjectKeyFrame?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.append)
    public func append(_ value: ObjectKeyFrame?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableObjectKeyFrame! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.objectkeyframecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<ObjectKeyFrame?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.panethemetransition)
public final class PaneThemeTransition : WinUI.Transition {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPaneThemeTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPaneThemeTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPaneThemeTransition>?) -> PaneThemeTransition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition")))
    }

    private static let _IPaneThemeTransitionStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IPaneThemeTransitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.panethemetransition.edgeproperty)
    public static var edgeProperty : WinUI.DependencyProperty! {
        get { try! _IPaneThemeTransitionStatics.get_EdgePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.panethemetransition.edge)
    public var edge : WinUI.EdgeTransitionLocation {
        get { try! _default.get_EdgeImpl() }
        set { try! _default.put_EdgeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation)
public final class PointAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPointAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointAnimation>?) -> PointAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.PointAnimation")))
    }

    private static let _IPointAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IPointAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PointAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation.byproperty)
    public static var byProperty : WinUI.DependencyProperty! {
        get { try! _IPointAnimationStatics.get_ByPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation.easingfunctionproperty)
    public static var easingFunctionProperty : WinUI.DependencyProperty! {
        get { try! _IPointAnimationStatics.get_EasingFunctionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation.enabledependentanimationproperty)
    public static var enableDependentAnimationProperty : WinUI.DependencyProperty! {
        get { try! _IPointAnimationStatics.get_EnableDependentAnimationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation.fromproperty)
    public static var fromProperty : WinUI.DependencyProperty! {
        get { try! _IPointAnimationStatics.get_FromPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation.toproperty)
    public static var toProperty : WinUI.DependencyProperty! {
        get { try! _IPointAnimationStatics.get_ToPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation.by)
    public var by : WindowsFoundation.Point? {
        get { try! _default.get_ByImpl() }
        set { try! _default.put_ByImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation.easingfunction)
    public var easingFunction : EasingFunctionBase! {
        get { try! _default.get_EasingFunctionImpl() }
        set { try! _default.put_EasingFunctionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation.enabledependentanimation)
    public var enableDependentAnimation : Bool {
        get { try! _default.get_EnableDependentAnimationImpl() }
        set { try! _default.put_EnableDependentAnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation.from)
    public var from : WindowsFoundation.Point? {
        get { try! _default.get_FromImpl() }
        set { try! _default.put_FromImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimation.to)
    public var to : WindowsFoundation.Point? {
        get { try! _default.get_ToImpl() }
        set { try! _default.put_ToImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimationusingkeyframes)
public final class PointAnimationUsingKeyFrames : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPointAnimationUsingKeyFrames
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointAnimationUsingKeyFrames
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointAnimationUsingKeyFrames>?) -> PointAnimationUsingKeyFrames? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames")))
    }

    private static let _IPointAnimationUsingKeyFramesStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IPointAnimationUsingKeyFramesStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimationusingkeyframes.enabledependentanimationproperty)
    public static var enableDependentAnimationProperty : WinUI.DependencyProperty! {
        get { try! _IPointAnimationUsingKeyFramesStatics.get_EnableDependentAnimationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimationusingkeyframes.enabledependentanimation)
    public var enableDependentAnimation : Bool {
        get { try! _default.get_EnableDependentAnimationImpl() }
        set { try! _default.put_EnableDependentAnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointanimationusingkeyframes.keyframes)
    public var keyFrames : PointKeyFrameCollection! {
        get { try! _default.get_KeyFramesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframe)
open class PointKeyFrame : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPointKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointKeyFrame>?) -> PointKeyFrame? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPointKeyFrameFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.IPointKeyFrameFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PointKeyFrame"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPointKeyFrameFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IPointKeyFrameStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IPointKeyFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PointKeyFrame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframe.keytimeproperty)
    public class var keyTimeProperty : WinUI.DependencyProperty! {
        get { try! _IPointKeyFrameStatics.get_KeyTimePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframe.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IPointKeyFrameStatics.get_ValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframe.keytime)
    public var keyTime : KeyTime {
        get { try! _default.get_KeyTimeImpl() }
        set { try! _default.put_KeyTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframe.value)
    public var value : WindowsFoundation.Point {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    internal enum IPointKeyFrame : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = PointKeyFrame
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointKeyFrame
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPointKeyFrame
        }
    }
    internal typealias Composable = IPointKeyFrame
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection)
public final class PointKeyFrameCollection : WinRTClass, IVector, IIterable {
    public typealias T = PointKeyFrame?
    private typealias SwiftABI = WinUI.IVectorPointKeyFrame
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CPointKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CPointKeyFrame>?) -> PointKeyFrameCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.getat)
    public func getAt(_ index: UInt32) -> PointKeyFrame? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<PointKeyFrame?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.indexof)
    public func indexOf(_ value: PointKeyFrame?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.setat)
    public func setAt(_ index: UInt32, _ value: PointKeyFrame?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: PointKeyFrame?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.append)
    public func append(_ value: PointKeyFrame?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterablePointKeyFrame! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointkeyframecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<PointKeyFrame?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointerdownthemeanimation)
public final class PointerDownThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPointerDownThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointerDownThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointerDownThemeAnimation>?) -> PointerDownThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation")))
    }

    private static let _IPointerDownThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IPointerDownThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointerdownthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IPointerDownThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointerdownthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointerupthemeanimation)
public final class PointerUpThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPointerUpThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointerUpThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPointerUpThemeAnimation>?) -> PointerUpThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation")))
    }

    private static let _IPointerUpThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IPointerUpThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointerupthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IPointerUpThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.pointerupthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popinthemeanimation)
public final class PopInThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPopInThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopInThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopInThemeAnimation>?) -> PopInThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation")))
    }

    private static let _IPopInThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IPopInThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popinthemeanimation.fromhorizontaloffsetproperty)
    public static var fromHorizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IPopInThemeAnimationStatics.get_FromHorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popinthemeanimation.fromverticaloffsetproperty)
    public static var fromVerticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IPopInThemeAnimationStatics.get_FromVerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popinthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IPopInThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popinthemeanimation.fromhorizontaloffset)
    public var fromHorizontalOffset : Double {
        get { try! _default.get_FromHorizontalOffsetImpl() }
        set { try! _default.put_FromHorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popinthemeanimation.fromverticaloffset)
    public var fromVerticalOffset : Double {
        get { try! _default.get_FromVerticalOffsetImpl() }
        set { try! _default.put_FromVerticalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popinthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popoutthemeanimation)
public final class PopOutThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPopOutThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopOutThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopOutThemeAnimation>?) -> PopOutThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation")))
    }

    private static let _IPopOutThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IPopOutThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popoutthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IPopOutThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popoutthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popupthemetransition)
public final class PopupThemeTransition : WinUI.Transition {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPopupThemeTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopupThemeTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPopupThemeTransition>?) -> PopupThemeTransition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition")))
    }

    private static let _IPopupThemeTransitionStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IPopupThemeTransitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popupthemetransition.fromhorizontaloffsetproperty)
    public static var fromHorizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IPopupThemeTransitionStatics.get_FromHorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popupthemetransition.fromverticaloffsetproperty)
    public static var fromVerticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IPopupThemeTransitionStatics.get_FromVerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popupthemetransition.fromhorizontaloffset)
    public var fromHorizontalOffset : Double {
        get { try! _default.get_FromHorizontalOffsetImpl() }
        set { try! _default.put_FromHorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.popupthemetransition.fromverticaloffset)
    public var fromVerticalOffset : Double {
        get { try! _default.get_FromVerticalOffsetImpl() }
        set { try! _default.put_FromVerticalOffsetImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.powerease)
public final class PowerEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IPowerEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPowerEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIPowerEase>?) -> PowerEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.PowerEase")))
    }

    private static let _IPowerEaseStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IPowerEaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.PowerEase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.powerease.powerproperty)
    public static var powerProperty : WinUI.DependencyProperty! {
        get { try! _IPowerEaseStatics.get_PowerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.powerease.power)
    public var power : Double {
        get { try! _default.get_PowerImpl() }
        set { try! _default.put_PowerImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.quadraticease)
public final class QuadraticEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IQuadraticEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuadraticEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuadraticEase>?) -> QuadraticEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.QuadraticEase")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.quarticease)
public final class QuarticEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IQuarticEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuarticEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuarticEase>?) -> QuarticEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.QuarticEase")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.quinticease)
public final class QuinticEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IQuinticEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuinticEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIQuinticEase>?) -> QuinticEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.QuinticEase")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.reorderthemetransition)
public final class ReorderThemeTransition : WinUI.Transition {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IReorderThemeTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIReorderThemeTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIReorderThemeTransition>?) -> ReorderThemeTransition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehaviorhelper)
public final class RepeatBehaviorHelper : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IRepeatBehaviorHelper
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepeatBehaviorHelper
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepeatBehaviorHelper>?) -> RepeatBehaviorHelper? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IRepeatBehaviorHelperStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IRepeatBehaviorHelperStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorHelper"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehaviorhelper.fromcount)
    public static func fromCount(_ count: Double) -> RepeatBehavior {
        return try! _IRepeatBehaviorHelperStatics.FromCountImpl(count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehaviorhelper.fromduration)
    public static func fromDuration(_ duration: WindowsFoundation.TimeSpan) -> RepeatBehavior {
        return try! _IRepeatBehaviorHelperStatics.FromDurationImpl(duration)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehaviorhelper.gethascount)
    public static func getHasCount(_ target: RepeatBehavior) -> Bool {
        return try! _IRepeatBehaviorHelperStatics.GetHasCountImpl(target)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehaviorhelper.gethasduration)
    public static func getHasDuration(_ target: RepeatBehavior) -> Bool {
        return try! _IRepeatBehaviorHelperStatics.GetHasDurationImpl(target)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehaviorhelper.equals)
    public static func equals(_ target: RepeatBehavior, _ value: RepeatBehavior) -> Bool {
        return try! _IRepeatBehaviorHelperStatics.EqualsImpl(target, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehaviorhelper.forever)
    public static var forever : RepeatBehavior {
        get { try! _IRepeatBehaviorHelperStatics.get_ForeverImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repositionthemeanimation)
public final class RepositionThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IRepositionThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepositionThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepositionThemeAnimation>?) -> RepositionThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation")))
    }

    private static let _IRepositionThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IRepositionThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repositionthemeanimation.fromhorizontaloffsetproperty)
    public static var fromHorizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IRepositionThemeAnimationStatics.get_FromHorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repositionthemeanimation.fromverticaloffsetproperty)
    public static var fromVerticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IRepositionThemeAnimationStatics.get_FromVerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repositionthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IRepositionThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repositionthemeanimation.fromhorizontaloffset)
    public var fromHorizontalOffset : Double {
        get { try! _default.get_FromHorizontalOffsetImpl() }
        set { try! _default.put_FromHorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repositionthemeanimation.fromverticaloffset)
    public var fromVerticalOffset : Double {
        get { try! _default.get_FromVerticalOffsetImpl() }
        set { try! _default.put_FromVerticalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repositionthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repositionthemetransition)
public final class RepositionThemeTransition : WinUI.Transition {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IRepositionThemeTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepositionThemeTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIRepositionThemeTransition>?) -> RepositionThemeTransition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition")))
    }

    private static let _IRepositionThemeTransitionStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IRepositionThemeTransitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repositionthemetransition.isstaggeringenabledproperty)
    public static var isStaggeringEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IRepositionThemeTransitionStatics.get_IsStaggeringEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repositionthemetransition.isstaggeringenabled)
    public var isStaggeringEnabled : Bool {
        get { try! _default.get_IsStaggeringEnabledImpl() }
        set { try! _default.put_IsStaggeringEnabledImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.sineease)
public final class SineEase : WinUI.EasingFunctionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISineEase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISineEase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISineEase>?) -> SineEase? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.SineEase")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.slidenavigationtransitioninfo)
public final class SlideNavigationTransitionInfo : WinUI.NavigationTransitionInfo {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISlideNavigationTransitionInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISlideNavigationTransitionInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISlideNavigationTransitionInfo>?) -> SlideNavigationTransitionInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo")))
    }

    private static let _ISlideNavigationTransitionInfoStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.ISlideNavigationTransitionInfoStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.slidenavigationtransitioninfo.effectproperty)
    public static var effectProperty : WinUI.DependencyProperty! {
        get { try! _ISlideNavigationTransitionInfoStatics.get_EffectPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.slidenavigationtransitioninfo.effect)
    public var effect : SlideNavigationTransitionEffect {
        get { try! _default.get_EffectImpl() }
        set { try! _default.put_EffectImpl(newValue) }
    }

    internal enum INavigationTransitionInfoOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfoOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverrides
        internal typealias Class = SlideNavigationTransitionInfo
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISlideNavigationTransitionInfo
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISlideNavigationTransitionInfo
        }
    }
    internal typealias Composable = INavigationTransitionInfoOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splinecolorkeyframe)
public final class SplineColorKeyFrame : WinUI.ColorKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISplineColorKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplineColorKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplineColorKeyFrame>?) -> SplineColorKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame")))
    }

    private static let _ISplineColorKeyFrameStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.ISplineColorKeyFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splinecolorkeyframe.keysplineproperty)
    public static var keySplineProperty : WinUI.DependencyProperty! {
        get { try! _ISplineColorKeyFrameStatics.get_KeySplinePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splinecolorkeyframe.keyspline)
    public var keySpline : KeySpline! {
        get { try! _default.get_KeySplineImpl() }
        set { try! _default.put_KeySplineImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splinedoublekeyframe)
public final class SplineDoubleKeyFrame : WinUI.DoubleKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISplineDoubleKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplineDoubleKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplineDoubleKeyFrame>?) -> SplineDoubleKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame")))
    }

    private static let _ISplineDoubleKeyFrameStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.ISplineDoubleKeyFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splinedoublekeyframe.keysplineproperty)
    public static var keySplineProperty : WinUI.DependencyProperty! {
        get { try! _ISplineDoubleKeyFrameStatics.get_KeySplinePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splinedoublekeyframe.keyspline)
    public var keySpline : KeySpline! {
        get { try! _default.get_KeySplineImpl() }
        set { try! _default.put_KeySplineImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splinepointkeyframe)
public final class SplinePointKeyFrame : WinUI.PointKeyFrame {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISplinePointKeyFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplinePointKeyFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplinePointKeyFrame>?) -> SplinePointKeyFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame")))
    }

    private static let _ISplinePointKeyFrameStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.ISplinePointKeyFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splinepointkeyframe.keysplineproperty)
    public static var keySplineProperty : WinUI.DependencyProperty! {
        get { try! _ISplinePointKeyFrameStatics.get_KeySplinePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splinepointkeyframe.keyspline)
    public var keySpline : KeySpline! {
        get { try! _default.get_KeySplineImpl() }
        set { try! _default.put_KeySplineImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation)
public final class SplitCloseThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISplitCloseThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplitCloseThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplitCloseThemeAnimation>?) -> SplitCloseThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation")))
    }

    private static let _ISplitCloseThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.ISplitCloseThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.closedlengthproperty)
    public static var closedLengthProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_ClosedLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.closedtargetnameproperty)
    public static var closedTargetNameProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_ClosedTargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.closedtargetproperty)
    public static var closedTargetProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_ClosedTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.contenttargetnameproperty)
    public static var contentTargetNameProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_ContentTargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.contenttargetproperty)
    public static var contentTargetProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_ContentTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.contenttranslationdirectionproperty)
    public static var contentTranslationDirectionProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_ContentTranslationDirectionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.contenttranslationoffsetproperty)
    public static var contentTranslationOffsetProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_ContentTranslationOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.offsetfromcenterproperty)
    public static var offsetFromCenterProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_OffsetFromCenterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.openedlengthproperty)
    public static var openedLengthProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_OpenedLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.openedtargetnameproperty)
    public static var openedTargetNameProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_OpenedTargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.openedtargetproperty)
    public static var openedTargetProperty : WinUI.DependencyProperty! {
        get { try! _ISplitCloseThemeAnimationStatics.get_OpenedTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.closedlength)
    public var closedLength : Double {
        get { try! _default.get_ClosedLengthImpl() }
        set { try! _default.put_ClosedLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.closedtarget)
    public var closedTarget : WinUI.DependencyObject! {
        get { try! _default.get_ClosedTargetImpl() }
        set { try! _default.put_ClosedTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.closedtargetname)
    public var closedTargetName : String {
        get { try! _default.get_ClosedTargetNameImpl() }
        set { try! _default.put_ClosedTargetNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.contenttarget)
    public var contentTarget : WinUI.DependencyObject! {
        get { try! _default.get_ContentTargetImpl() }
        set { try! _default.put_ContentTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.contenttargetname)
    public var contentTargetName : String {
        get { try! _default.get_ContentTargetNameImpl() }
        set { try! _default.put_ContentTargetNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.contenttranslationdirection)
    public var contentTranslationDirection : WinUI.AnimationDirection {
        get { try! _default.get_ContentTranslationDirectionImpl() }
        set { try! _default.put_ContentTranslationDirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.contenttranslationoffset)
    public var contentTranslationOffset : Double {
        get { try! _default.get_ContentTranslationOffsetImpl() }
        set { try! _default.put_ContentTranslationOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.offsetfromcenter)
    public var offsetFromCenter : Double {
        get { try! _default.get_OffsetFromCenterImpl() }
        set { try! _default.put_OffsetFromCenterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.openedlength)
    public var openedLength : Double {
        get { try! _default.get_OpenedLengthImpl() }
        set { try! _default.put_OpenedLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.openedtarget)
    public var openedTarget : WinUI.DependencyObject! {
        get { try! _default.get_OpenedTargetImpl() }
        set { try! _default.put_OpenedTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitclosethemeanimation.openedtargetname)
    public var openedTargetName : String {
        get { try! _default.get_OpenedTargetNameImpl() }
        set { try! _default.put_OpenedTargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation)
public final class SplitOpenThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISplitOpenThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplitOpenThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISplitOpenThemeAnimation>?) -> SplitOpenThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation")))
    }

    private static let _ISplitOpenThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.ISplitOpenThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.closedlengthproperty)
    public static var closedLengthProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_ClosedLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.closedtargetnameproperty)
    public static var closedTargetNameProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_ClosedTargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.closedtargetproperty)
    public static var closedTargetProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_ClosedTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.contenttargetnameproperty)
    public static var contentTargetNameProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_ContentTargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.contenttargetproperty)
    public static var contentTargetProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_ContentTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.contenttranslationdirectionproperty)
    public static var contentTranslationDirectionProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_ContentTranslationDirectionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.contenttranslationoffsetproperty)
    public static var contentTranslationOffsetProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_ContentTranslationOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.offsetfromcenterproperty)
    public static var offsetFromCenterProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_OffsetFromCenterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.openedlengthproperty)
    public static var openedLengthProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_OpenedLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.openedtargetnameproperty)
    public static var openedTargetNameProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_OpenedTargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.openedtargetproperty)
    public static var openedTargetProperty : WinUI.DependencyProperty! {
        get { try! _ISplitOpenThemeAnimationStatics.get_OpenedTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.closedlength)
    public var closedLength : Double {
        get { try! _default.get_ClosedLengthImpl() }
        set { try! _default.put_ClosedLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.closedtarget)
    public var closedTarget : WinUI.DependencyObject! {
        get { try! _default.get_ClosedTargetImpl() }
        set { try! _default.put_ClosedTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.closedtargetname)
    public var closedTargetName : String {
        get { try! _default.get_ClosedTargetNameImpl() }
        set { try! _default.put_ClosedTargetNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.contenttarget)
    public var contentTarget : WinUI.DependencyObject! {
        get { try! _default.get_ContentTargetImpl() }
        set { try! _default.put_ContentTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.contenttargetname)
    public var contentTargetName : String {
        get { try! _default.get_ContentTargetNameImpl() }
        set { try! _default.put_ContentTargetNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.contenttranslationdirection)
    public var contentTranslationDirection : WinUI.AnimationDirection {
        get { try! _default.get_ContentTranslationDirectionImpl() }
        set { try! _default.put_ContentTranslationDirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.contenttranslationoffset)
    public var contentTranslationOffset : Double {
        get { try! _default.get_ContentTranslationOffsetImpl() }
        set { try! _default.put_ContentTranslationOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.offsetfromcenter)
    public var offsetFromCenter : Double {
        get { try! _default.get_OffsetFromCenterImpl() }
        set { try! _default.put_OffsetFromCenterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.openedlength)
    public var openedLength : Double {
        get { try! _default.get_OpenedLengthImpl() }
        set { try! _default.put_OpenedLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.openedtarget)
    public var openedTarget : WinUI.DependencyObject! {
        get { try! _default.get_OpenedTargetImpl() }
        set { try! _default.put_OpenedTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.splitopenthemeanimation.openedtargetname)
    public var openedTargetName : String {
        get { try! _default.get_OpenedTargetNameImpl() }
        set { try! _default.put_OpenedTargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard)
public final class Storyboard : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.IStoryboard
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIStoryboard
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CIStoryboard>?) -> Storyboard? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.Storyboard")))
    }

    private static let _IStoryboardStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.IStoryboardStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.Storyboard"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.gettargetproperty)
    public static func getTargetProperty(_ element: Timeline!) -> String {
        return try! _IStoryboardStatics.GetTargetPropertyImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.settargetproperty)
    public static func setTargetProperty(_ element: Timeline!, _ path: String) {
        try! _IStoryboardStatics.SetTargetPropertyImpl(element, path)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.gettargetname)
    public static func getTargetName(_ element: Timeline!) -> String {
        return try! _IStoryboardStatics.GetTargetNameImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.settargetname)
    public static func setTargetName(_ element: Timeline!, _ name: String) {
        try! _IStoryboardStatics.SetTargetNameImpl(element, name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.settarget)
    public static func setTarget(_ timeline: Timeline!, _ target: WinUI.DependencyObject!) {
        try! _IStoryboardStatics.SetTargetImpl(timeline, target)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _IStoryboardStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.targetpropertyproperty)
    public static var targetPropertyProperty : WinUI.DependencyProperty! {
        get { try! _IStoryboardStatics.get_TargetPropertyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.seek)
    public func seek(_ offset: WindowsFoundation.TimeSpan) throws {
        try _default.SeekImpl(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.stop)
    public func stop() throws {
        try _default.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.begin)
    public func begin() throws {
        try _default.BeginImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.pause)
    public func pause() throws {
        try _default.PauseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.resume)
    public func resume() throws {
        try _default.ResumeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.getcurrentstate)
    public func getCurrentState() throws -> ClockState {
        try _default.GetCurrentStateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.getcurrenttime)
    public func getCurrentTime() throws -> WindowsFoundation.TimeSpan {
        try _default.GetCurrentTimeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.seekalignedtolasttick)
    public func seekAlignedToLastTick(_ offset: WindowsFoundation.TimeSpan) throws {
        try _default.SeekAlignedToLastTickImpl(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.skiptofill)
    public func skipToFill() throws {
        try _default.SkipToFillImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.storyboard.children)
    public var children : TimelineCollection! {
        get { try! _default.get_ChildrenImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.suppressnavigationtransitioninfo)
public final class SuppressNavigationTransitionInfo : WinUI.NavigationTransitionInfo {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISuppressNavigationTransitionInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISuppressNavigationTransitionInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISuppressNavigationTransitionInfo>?) -> SuppressNavigationTransitionInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo")))
    }

    internal enum INavigationTransitionInfoOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CINavigationTransitionInfoOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.INavigationTransitionInfoOverrides
        internal typealias Class = SuppressNavigationTransitionInfo
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISuppressNavigationTransitionInfo
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISuppressNavigationTransitionInfo
        }
    }
    internal typealias Composable = INavigationTransitionInfoOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipebackthemeanimation)
public final class SwipeBackThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISwipeBackThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISwipeBackThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISwipeBackThemeAnimation>?) -> SwipeBackThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation")))
    }

    private static let _ISwipeBackThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.ISwipeBackThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipebackthemeanimation.fromhorizontaloffsetproperty)
    public static var fromHorizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeBackThemeAnimationStatics.get_FromHorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipebackthemeanimation.fromverticaloffsetproperty)
    public static var fromVerticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeBackThemeAnimationStatics.get_FromVerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipebackthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeBackThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipebackthemeanimation.fromhorizontaloffset)
    public var fromHorizontalOffset : Double {
        get { try! _default.get_FromHorizontalOffsetImpl() }
        set { try! _default.put_FromHorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipebackthemeanimation.fromverticaloffset)
    public var fromVerticalOffset : Double {
        get { try! _default.get_FromVerticalOffsetImpl() }
        set { try! _default.put_FromVerticalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipebackthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipehintthemeanimation)
public final class SwipeHintThemeAnimation : WinUI.Timeline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ISwipeHintThemeAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISwipeHintThemeAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CISwipeHintThemeAnimation>?) -> SwipeHintThemeAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation")))
    }

    private static let _ISwipeHintThemeAnimationStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.ISwipeHintThemeAnimationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipehintthemeanimation.targetnameproperty)
    public static var targetNameProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeHintThemeAnimationStatics.get_TargetNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipehintthemeanimation.tohorizontaloffsetproperty)
    public static var toHorizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeHintThemeAnimationStatics.get_ToHorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipehintthemeanimation.toverticaloffsetproperty)
    public static var toVerticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeHintThemeAnimationStatics.get_ToVerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipehintthemeanimation.targetname)
    public var targetName : String {
        get { try! _default.get_TargetNameImpl() }
        set { try! _default.put_TargetNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipehintthemeanimation.tohorizontaloffset)
    public var toHorizontalOffset : Double {
        get { try! _default.get_ToHorizontalOffsetImpl() }
        set { try! _default.put_ToHorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.swipehintthemeanimation.toverticaloffset)
    public var toVerticalOffset : Double {
        get { try! _default.get_ToVerticalOffsetImpl() }
        set { try! _default.put_ToVerticalOffsetImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline)
open class Timeline : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ITimeline
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITimeline
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITimeline>?) -> Timeline? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITimelineFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.ITimelineFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.Timeline"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITimelineFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITimelineStatics: __ABI_Microsoft_UI_Xaml_Media_Animation.ITimelineStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.Timeline"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.allowdependentanimations)
    public class var allowDependentAnimations : Bool {
        get { try! _ITimelineStatics.get_AllowDependentAnimationsImpl() }
        set { try! _ITimelineStatics.put_AllowDependentAnimationsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.autoreverseproperty)
    public class var autoReverseProperty : WinUI.DependencyProperty! {
        get { try! _ITimelineStatics.get_AutoReversePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.begintimeproperty)
    public class var beginTimeProperty : WinUI.DependencyProperty! {
        get { try! _ITimelineStatics.get_BeginTimePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.durationproperty)
    public class var durationProperty : WinUI.DependencyProperty! {
        get { try! _ITimelineStatics.get_DurationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.fillbehaviorproperty)
    public class var fillBehaviorProperty : WinUI.DependencyProperty! {
        get { try! _ITimelineStatics.get_FillBehaviorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.repeatbehaviorproperty)
    public class var repeatBehaviorProperty : WinUI.DependencyProperty! {
        get { try! _ITimelineStatics.get_RepeatBehaviorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.speedratioproperty)
    public class var speedRatioProperty : WinUI.DependencyProperty! {
        get { try! _ITimelineStatics.get_SpeedRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.autoreverse)
    public var autoReverse : Bool {
        get { try! _default.get_AutoReverseImpl() }
        set { try! _default.put_AutoReverseImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.begintime)
    public var beginTime : WindowsFoundation.TimeSpan? {
        get { try! _default.get_BeginTimeImpl() }
        set { try! _default.put_BeginTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.duration)
    public var duration : WinUI.Duration {
        get { try! _default.get_DurationImpl() }
        set { try! _default.put_DurationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.fillbehavior)
    public var fillBehavior : FillBehavior {
        get { try! _default.get_FillBehaviorImpl() }
        set { try! _default.put_FillBehaviorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.repeatbehavior)
    public var repeatBehavior : RepeatBehavior {
        get { try! _default.get_RepeatBehaviorImpl() }
        set { try! _default.put_RepeatBehaviorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.speedratio)
    public var speedRatio : Double {
        get { try! _default.get_SpeedRatioImpl() }
        set { try! _default.put_SpeedRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timeline.completed)
    public lazy var completed : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CompletedImpl($0)
       }
      )
    }()

    internal enum ITimeline : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = Timeline
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITimeline
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ITimeline
        }
    }
    internal typealias Composable = ITimeline
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection)
public final class TimelineCollection : WinRTClass, IVector, IIterable {
    public typealias T = Timeline?
    private typealias SwiftABI = WinUI.IVectorTimeline
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CTimeline
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CTimeline>?) -> TimelineCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.TimelineCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.getat)
    public func getAt(_ index: UInt32) -> Timeline? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<Timeline?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.indexof)
    public func indexOf(_ value: Timeline?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.setat)
    public func setAt(_ index: UInt32, _ value: Timeline?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: Timeline?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.append)
    public func append(_ value: Timeline?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableTimeline! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.timelinecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Timeline?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transition)
open class Transition : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ITransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition>?) -> Transition? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITransitionFactory : __ABI_Microsoft_UI_Xaml_Media_Animation.ITransitionFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Animation.Transition"))

    internal enum ITransition : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = Transition
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media_Animation.ITransition
        }
    }
    internal typealias Composable = ITransition
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection)
public final class TransitionCollection : WinRTClass, IVector, IIterable {
    public typealias T = Transition?
    private typealias SwiftABI = WinUI.IVectorTransition
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CAnimation__CTransition>?) -> TransitionCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.Animation.TransitionCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.getat)
    public func getAt(_ index: UInt32) -> Transition? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<Transition?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.indexof)
    public func indexOf(_ value: Transition?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.setat)
    public func setAt(_ index: UInt32, _ value: Transition?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.insertat)
    public func insertAt(_ index: UInt32, _ value: Transition?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.append)
    public func append(_ value: Transition?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableTransition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.transitioncollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Transition?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.keytime)
public struct KeyTime: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.keytime.timespan)
    public var timeSpan: WindowsFoundation.TimeSpan = .init()
    public init() {}
    public init(timeSpan: WindowsFoundation.TimeSpan) {
        self.timeSpan = timeSpan
    }
    public static func from(abi: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CKeyTime) -> KeyTime {
        .init(timeSpan: .from(abi: abi.TimeSpan))
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehavior)
public struct RepeatBehavior: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehavior.count)
    public var count: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehavior.duration)
    public var duration: WindowsFoundation.TimeSpan = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.animation.repeatbehavior.type)
    public var type: RepeatBehaviorType = .init(0)
    public init() {}
    public init(count: Double, duration: WindowsFoundation.TimeSpan, type: RepeatBehaviorType) {
        self.count = count
        self.duration = duration
        self.type = type
    }
    public static func from(abi: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CRepeatBehavior) -> RepeatBehavior {
        .init(count: abi.Count, duration: .from(abi: abi.Duration), type: abi.Type)
    }
}

extension WinUI.ClockState {
    public static var active : WinUI.ClockState {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CClockState_Active
    }
    public static var filling : WinUI.ClockState {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CClockState_Filling
    }
    public static var stopped : WinUI.ClockState {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CClockState_Stopped
    }
}
extension WinUI.ClockState: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ConnectedAnimationComponent {
    public static var offsetX : WinUI.ConnectedAnimationComponent {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CConnectedAnimationComponent_OffsetX
    }
    public static var offsetY : WinUI.ConnectedAnimationComponent {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CConnectedAnimationComponent_OffsetY
    }
    public static var crossFade : WinUI.ConnectedAnimationComponent {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CConnectedAnimationComponent_CrossFade
    }
    public static var scale : WinUI.ConnectedAnimationComponent {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CConnectedAnimationComponent_Scale
    }
}
extension WinUI.ConnectedAnimationComponent: @retroactive Hashable, @retroactive Codable {}

extension WinUI.EasingMode {
    public static var easeOut : WinUI.EasingMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CEasingMode_EaseOut
    }
    public static var easeIn : WinUI.EasingMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CEasingMode_EaseIn
    }
    public static var easeInOut : WinUI.EasingMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CEasingMode_EaseInOut
    }
}
extension WinUI.EasingMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.FillBehavior {
    public static var holdEnd : WinUI.FillBehavior {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CFillBehavior_HoldEnd
    }
    public static var stop : WinUI.FillBehavior {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CFillBehavior_Stop
    }
}
extension WinUI.FillBehavior: @retroactive Hashable, @retroactive Codable {}

extension WinUI.RepeatBehaviorType {
    public static var count : WinUI.RepeatBehaviorType {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CRepeatBehaviorType_Count
    }
    public static var duration : WinUI.RepeatBehaviorType {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CRepeatBehaviorType_Duration
    }
    public static var forever : WinUI.RepeatBehaviorType {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CRepeatBehaviorType_Forever
    }
}
extension WinUI.RepeatBehaviorType: @retroactive Hashable, @retroactive Codable {}

extension WinUI.SlideNavigationTransitionEffect {
    public static var fromBottom : WinUI.SlideNavigationTransitionEffect {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CSlideNavigationTransitionEffect_FromBottom
    }
    public static var fromLeft : WinUI.SlideNavigationTransitionEffect {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CSlideNavigationTransitionEffect_FromLeft
    }
    public static var fromRight : WinUI.SlideNavigationTransitionEffect {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CSlideNavigationTransitionEffect_FromRight
    }
}
extension WinUI.SlideNavigationTransitionEffect: @retroactive Hashable, @retroactive Codable {}


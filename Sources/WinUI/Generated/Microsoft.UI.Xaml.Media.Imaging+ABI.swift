// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage: WindowsFoundation.IID {
    .init(Data1: 0x5CC29916, Data2: 0xA411, Data3: 0x5BC2, Data4: ( 0xA3,0xC5,0xA0,0x0D,0x99,0xA5,0x9D,0xA8 ))// 5CC29916-A411-5BC2-A3C5-A00D99A59DA8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory: WindowsFoundation.IID {
    .init(Data1: 0xF037E0E9, Data2: 0xF229, Data3: 0x522E, Data4: ( 0x95,0xC9,0xDA,0x22,0x11,0xA1,0x4B,0x05 ))// F037E0E9-F229-522E-95C9-DA2211A14B05
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics: WindowsFoundation.IID {
    .init(Data1: 0x4BCF71A9, Data2: 0x1897, Data3: 0x51DC, Data4: ( 0x8E,0x3F,0x2C,0x5C,0x79,0x6D,0x1C,0xD9 ))// 4BCF71A9-1897-51DC-8E3F-2C5C796D1CD9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource: WindowsFoundation.IID {
    .init(Data1: 0x8424269D, Data2: 0x9B82, Data3: 0x534F, Data4: ( 0x8F,0xEA,0xAF,0x5B,0x5E,0xF9,0x6B,0xF2 ))// 8424269D-9B82-534F-8FEA-AF5B5EF96BF2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0x0392F025, Data2: 0x1868, Data3: 0x5876, Data4: ( 0xAD,0x67,0x12,0xE9,0x4A,0x8D,0xA5,0xBF ))// 0392F025-1868-5876-AD67-12E94A8DA5BF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0xEFA3745E, Data2: 0x4400, Data3: 0x5F0B, Data4: ( 0xBD,0xC7,0x3F,0x29,0x11,0xA3,0xD7,0x19 ))// EFA3745E-4400-5F0B-BDC7-3F2911A3D719
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9A0EA80B, Data2: 0x1A17, Data3: 0x50D5, Data4: ( 0x83,0xF3,0x37,0x77,0x38,0x21,0x26,0x19 ))// 9A0EA80B-1A17-50D5-83F3-377738212619
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmap: WindowsFoundation.IID {
    .init(Data1: 0xCF10407D, Data2: 0xFA8B, Data3: 0x57A3, Data4: ( 0x95,0x74,0x71,0x05,0x29,0xAE,0x0B,0x04 ))// CF10407D-FA8B-57A3-9574-710529AE0B04
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmapStatics: WindowsFoundation.IID {
    .init(Data1: 0x83E822E4, Data2: 0x9F84, Data3: 0x5986, Data4: ( 0x93,0xB0,0xE4,0xF7,0x01,0x9C,0x36,0x7D ))// 83E822E4-9F84-5986-93B0-E4F7019C367D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISoftwareBitmapSource: WindowsFoundation.IID {
    .init(Data1: 0xA6ACA802, Data2: 0x1F24, Data3: 0x5A1E, Data4: ( 0xBF,0x08,0x78,0x1A,0x85,0xED,0x55,0x11 ))// A6ACA802-1F24-5A1E-BF08-781A85ED5511
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSource: WindowsFoundation.IID {
    .init(Data1: 0xAC078D9C, Data2: 0xD0E0, Data3: 0x5FF9, Data4: ( 0xB7,0x3E,0x98,0xE8,0x2E,0x4C,0x8D,0x36 ))// AC078D9C-D0E0-5FF9-B73E-98E82E4C8D36
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0x09A26ED2, Data2: 0x11B3, Data3: 0x5EF1, Data4: ( 0xAC,0x56,0x20,0xD0,0x64,0xCC,0xCA,0x34 ))// 09A26ED2-11B3-5EF1-AC56-20D064CCCA34
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource: WindowsFoundation.IID {
    .init(Data1: 0xD5B61D3C, Data2: 0xB68D, Data3: 0x53A2, Data4: ( 0xB0,0x7B,0xBA,0x6A,0xDF,0xDD,0x58,0x87 ))// D5B61D3C-B68D-53A2-B07B-BA6ADFDD5887
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0x2F85673F, Data2: 0xAC64, Data3: 0x570D, Data4: ( 0x9B,0xDA,0x94,0xFA,0x08,0x2E,0xEA,0xD9 ))// 2F85673F-AC64-570D-9BDA-94FA082EEAD9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceFailedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x76E66278, Data2: 0x7804, Data3: 0x5439, Data4: ( 0xA5,0x0D,0x14,0xC5,0xBA,0x89,0x67,0x14 ))// 76E66278-7804-5439-A50D-14C5BA896714
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceOpenedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1C9860D5, Data2: 0x38D0, Data3: 0x5B21, Data4: ( 0x8D,0x48,0x07,0x2F,0x1E,0x25,0x4E,0x39 ))// 1C9860D5-38D0-5B21-8D48-072F1E254E39
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0xE3AD1068, Data2: 0xF4C6, Data3: 0x5513, Data4: ( 0xA7,0x77,0x29,0x80,0xF0,0xBA,0x41,0xBD ))// E3AD1068-F4C6-5513-A777-2980F0BA41BD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource: WindowsFoundation.IID {
    .init(Data1: 0xE4FF96A6, Data2: 0xFEDE, Data3: 0x589C, Data4: ( 0xA0,0x07,0x41,0x78,0xB5,0x3B,0x67,0x39 ))// E4FF96A6-FEDE-589C-A007-4178B53B6739
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0x08490F2C, Data2: 0x04A8, Data3: 0x5031, Data4: ( 0xB9,0xC7,0x70,0x70,0x60,0xD7,0xCD,0x48 ))// 08490F2C-04A8-5031-B9C7-707060D7CD48
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIWriteableBitmap: WindowsFoundation.IID {
    .init(Data1: 0x78C824A9, Data2: 0x0E43, Data3: 0x5F1E, Data4: ( 0x93,0xBC,0xD0,0x46,0xCC,0xA8,0x2B,0x7E ))// 78C824A9-0E43-5F1E-93BC-D046CCA82B7E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIWriteableBitmapFactory: WindowsFoundation.IID {
    .init(Data1: 0x26E861D9, Data2: 0xB080, Data3: 0x512B, Data4: ( 0x96,0xC4,0x80,0x05,0x0E,0x7E,0x08,0xD1 ))// 26E861D9-B080-512B-96C4-80050E7E08D1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTask: WindowsFoundation.IID {
    .init(Data1: 0x7807000C, Data2: 0xA050, Data3: 0x5121, Data4: ( 0xAC,0x74,0x33,0x22,0xD5,0x35,0x8E,0x39 ))// 7807000C-A050-5121-AC74-3322D5358E39
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTaskFactory: WindowsFoundation.IID {
    .init(Data1: 0x205247A3, Data2: 0x9FFE, Data3: 0x599A, Data4: ( 0xA2,0x1A,0x71,0x81,0x44,0x2A,0x9D,0x75 ))// 205247A3-9FFE-599A-A21A-7181442A9D75
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTaskOverrides: WindowsFoundation.IID {
    .init(Data1: 0x18733237, Data2: 0x324B, Data3: 0x57C0, Data4: ( 0x89,0xB2,0x58,0x75,0x47,0x2A,0xCC,0x80 ))// 18733237-324B-57C0-89B2-5875472ACC80
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x9A8E4AF5, Data2: 0xB124, Data3: 0x5205, Data4: ( 0x8A,0xE9,0x34,0x96,0xE0,0x63,0xC5,0x69 ))// 9A8E4AF5-B124-5205-8AE9-3496E063C569
}

public enum __ABI_Microsoft_UI_Xaml_Media_Imaging {
    public class IBitmapImage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage }

        internal func get_CreateOptionsImpl() throws -> WinUI.BitmapCreateOptions {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CreateOptions(pThis, &value))
            }
            return value
        }

        internal func put_CreateOptionsImpl(_ value: WinUI.BitmapCreateOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CreateOptions(pThis, value))
            }
        }

        internal func get_UriSourceImpl() throws -> WindowsFoundation.Uri? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UriSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_UriSourceImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UriSource(pThis, RawPointer(value)))
            }
        }

        internal func get_DecodePixelWidthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelWidth(pThis, &value))
            }
            return value
        }

        internal func put_DecodePixelWidthImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DecodePixelWidth(pThis, value))
            }
        }

        internal func get_DecodePixelHeightImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelHeight(pThis, &value))
            }
            return value
        }

        internal func put_DecodePixelHeightImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DecodePixelHeight(pThis, value))
            }
        }

        internal func get_DecodePixelTypeImpl() throws -> WinUI.DecodePixelType {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelType(pThis, &value))
            }
            return value
        }

        internal func put_DecodePixelTypeImpl(_ value: WinUI.DecodePixelType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DecodePixelType(pThis, value))
            }
        }

        internal func get_IsAnimatedBitmapImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAnimatedBitmap(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsPlayingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPlaying(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AutoPlayImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoPlay(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AutoPlayImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoPlay(pThis, .init(from: value)))
            }
        }

        internal func add_DownloadProgressImpl(_ handler: WinUI.DownloadProgressEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Media_Imaging.DownloadProgressEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DownloadProgress(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DownloadProgressImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DownloadProgress(pThis, token))
            }
        }

        internal func add_ImageOpenedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImageOpened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ImageOpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImageOpened(pThis, token))
            }
        }

        internal func add_ImageFailedImpl(_ handler: WinUI.ExceptionRoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.ExceptionRoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImageFailed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ImageFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImageFailed(pThis, token))
            }
        }

        internal func PlayImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Play(pThis))
            }
        }

        internal func StopImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

    }

    public class IBitmapImageFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory }

        internal func CreateInstanceWithUriSourceImpl(_ uriSource: WindowsFoundation.Uri?) throws -> IBitmapImage {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithUriSource(pThis, RawPointer(uriSource), &valueAbi))
                }
            }
            return IBitmapImage(value!)
        }

    }

    public class IBitmapImageStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics }

        internal func get_CreateOptionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CreateOptionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_UriSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UriSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DecodePixelWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DecodePixelHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DecodePixelTypePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelTypeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsAnimatedBitmapPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAnimatedBitmapProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsPlayingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPlayingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AutoPlayPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoPlayProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IBitmapSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource }

        internal func get_PixelWidthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelWidth(pThis, &value))
            }
            return value
        }

        internal func get_PixelHeightImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelHeight(pThis, &value))
            }
            return value
        }

        internal func SetSourceImpl(_ streamSource: UWP.AnyIRandomAccessStream?) throws {
            let streamSourceWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(streamSource)
            let _streamSource = try! streamSourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetSource(pThis, _streamSource))
            }
        }

        internal func SetSourceAsyncImpl(_ streamSource: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let streamSourceWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(streamSource)
                let _streamSource = try! streamSourceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetSourceAsync(pThis, _streamSource, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IBitmapSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.BitmapSource.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IBitmapSource {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IBitmapSource(value!)
        }

    }

    public class IBitmapSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics }

        internal func get_PixelWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PixelHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IDownloadProgressEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs }

        internal func get_ProgressImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Progress(pThis, &value))
            }
            return value
        }

        internal func put_ProgressImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Progress(pThis, value))
            }
        }

    }

    public class IRenderTargetBitmap: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmap }

        internal func get_PixelWidthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelWidth(pThis, &value))
            }
            return value
        }

        internal func get_PixelHeightImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelHeight(pThis, &value))
            }
            return value
        }

        internal func RenderAsyncImpl(_ element: WinUI.UIElement?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RenderAsync(pThis, RawPointer(element), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func RenderToSizeAsyncImpl(_ element: WinUI.UIElement?, _ scaledWidth: Int32, _ scaledHeight: Int32) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RenderToSizeAsync(pThis, RawPointer(element), scaledWidth, scaledHeight, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func GetPixelsAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIBuffer?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPixelsAsync(pThis, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIBufferWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IRenderTargetBitmapStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmapStatics }

        internal func get_PixelWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PixelHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIRenderTargetBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ISoftwareBitmapSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISoftwareBitmapSource }

        internal func SetBitmapAsyncImpl(_ softwareBitmap: UWP.SoftwareBitmap?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISoftwareBitmapSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetBitmapAsync(pThis, RawPointer(softwareBitmap), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ISurfaceImageSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSource }

    }

    public class ISurfaceImageSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSourceFactory }

        internal func CreateInstanceWithDimensionsImpl(_ pixelWidth: Int32, _ pixelHeight: Int32, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.SurfaceImageSource.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISurfaceImageSource {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSourceFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithDimensions(pThis, pixelWidth, pixelHeight, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISurfaceImageSource(value!)
        }

        internal func CreateInstanceWithDimensionsAndOpacityImpl(_ pixelWidth: Int32, _ pixelHeight: Int32, _ isOpaque: Bool, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.SurfaceImageSource.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISurfaceImageSource {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSourceFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithDimensionsAndOpacity(pThis, pixelWidth, pixelHeight, .init(from: isOpaque), _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISurfaceImageSource(value!)
        }

    }

    public class ISvgImageSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource }

        internal func get_UriSourceImpl() throws -> WindowsFoundation.Uri? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UriSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_UriSourceImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UriSource(pThis, RawPointer(value)))
            }
        }

        internal func get_RasterizePixelWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RasterizePixelWidth(pThis, &value))
            }
            return value
        }

        internal func put_RasterizePixelWidthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RasterizePixelWidth(pThis, value))
            }
        }

        internal func get_RasterizePixelHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RasterizePixelHeight(pThis, &value))
            }
            return value
        }

        internal func put_RasterizePixelHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RasterizePixelHeight(pThis, value))
            }
        }

        internal func add_OpenedImpl(_ handler: TypedEventHandler<WinUI.SvgImageSource?, WinUI.SvgImageSourceOpenedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CImaging__CSvgImageSource___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CImaging__CSvgImageSourceOpenedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Opened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Opened(pThis, token))
            }
        }

        internal func add_OpenFailedImpl(_ handler: TypedEventHandler<WinUI.SvgImageSource?, WinUI.SvgImageSourceFailedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CImaging__CSvgImageSource___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CImaging__CSvgImageSourceFailedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_OpenFailed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_OpenFailed(pThis, token))
            }
        }

        internal func SetSourceAsyncImpl(_ streamSource: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.SvgImageSourceLoadStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let streamSourceWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(streamSource)
                let _streamSource = try! streamSourceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetSourceAsync(pThis, _streamSource, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CImaging__CSvgImageSourceLoadStatusWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ISvgImageSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.SvgImageSource.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISvgImageSource {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISvgImageSource(value!)
        }

        internal func CreateInstanceWithUriSourceImpl(_ uriSource: WindowsFoundation.Uri?, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.SvgImageSource.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISvgImageSource {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithUriSource(pThis, RawPointer(uriSource), _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISvgImageSource(value!)
        }

    }

    public class ISvgImageSourceFailedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceFailedEventArgs }

        internal func get_StatusImpl() throws -> WinUI.SvgImageSourceLoadStatus {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CSvgImageSourceLoadStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceFailedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

    }

    public class ISvgImageSourceOpenedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceOpenedEventArgs }

    }

    public class ISvgImageSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceStatics }

        internal func get_UriSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UriSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_RasterizePixelWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RasterizePixelWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_RasterizePixelHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISvgImageSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RasterizePixelHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IVirtualSurfaceImageSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource }

    }

    public class IVirtualSurfaceImageSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSourceFactory }

        internal func CreateInstanceWithDimensionsImpl(_ pixelWidth: Int32, _ pixelHeight: Int32) throws -> IVirtualSurfaceImageSource {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithDimensions(pThis, pixelWidth, pixelHeight, &valueAbi))
                }
            }
            return IVirtualSurfaceImageSource(value!)
        }

        internal func CreateInstanceWithDimensionsAndOpacityImpl(_ pixelWidth: Int32, _ pixelHeight: Int32, _ isOpaque: Bool) throws -> IVirtualSurfaceImageSource {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithDimensionsAndOpacity(pThis, pixelWidth, pixelHeight, .init(from: isOpaque), &valueAbi))
                }
            }
            return IVirtualSurfaceImageSource(value!)
        }

    }

    public class IWriteableBitmap: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIWriteableBitmap }

        internal func get_PixelBufferImpl() throws -> UWP.AnyIBuffer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIWriteableBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelBuffer(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IBufferWrapper.unwrapFrom(abi: value)
        }

        internal func InvalidateImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIWriteableBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invalidate(pThis))
            }
        }

    }

    public class IWriteableBitmapFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIWriteableBitmapFactory }

        internal func CreateInstanceWithDimensionsImpl(_ pixelWidth: Int32, _ pixelHeight: Int32) throws -> IWriteableBitmap {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIWriteableBitmapFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithDimensions(pThis, pixelWidth, pixelHeight, &valueAbi))
                }
            }
            return IWriteableBitmap(value!)
        }

    }

    public class IXamlRenderingBackgroundTask: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTask }

    }

    public class IXamlRenderingBackgroundTaskFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTaskFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.XamlRenderingBackgroundTask.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IXamlRenderingBackgroundTask {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTaskFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IXamlRenderingBackgroundTask(value!)
        }

    }

    public class IXamlRenderingBackgroundTaskOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTaskOverrides }

        internal func OnRunImpl(_ taskInstance: UWP.AnyIBackgroundTaskInstance?) throws {
            let taskInstanceWrapper = __ABI_Windows_ApplicationModel_Background.IBackgroundTaskInstanceWrapper(taskInstance)
            let _taskInstance = try! taskInstanceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTaskOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnRun(pThis, _taskInstance))
            }
        }

    }

    internal typealias IXamlRenderingBackgroundTaskOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.XamlRenderingBackgroundTask.IXamlRenderingBackgroundTaskOverrides>
    internal static var IXamlRenderingBackgroundTaskOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTaskOverridesVtbl = .init(
        QueryInterface: { IXamlRenderingBackgroundTaskOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXamlRenderingBackgroundTaskOverridesWrapper.addRef($0) },
        Release: { IXamlRenderingBackgroundTaskOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Media_Imaging.IXamlRenderingBackgroundTaskOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IXamlRenderingBackgroundTaskOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnRun: {
            do {
                guard let __unwrapped__instance = IXamlRenderingBackgroundTaskOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let taskInstance: UWP.AnyIBackgroundTaskInstance? = __ABI_Windows_ApplicationModel_Background.IBackgroundTaskInstanceWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onRun(taskInstance)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIXamlRenderingBackgroundTaskOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Media_Imaging.IXamlRenderingBackgroundTaskOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
// MARK - DownloadProgressEventHandler
extension __ABI_Microsoft_UI_Xaml_Media_Imaging {
    public class DownloadProgressEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.DownloadProgressEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias DownloadProgressEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Media_Imaging.DownloadProgressEventHandlerBridge>
    internal static var DownloadProgressEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandlerVtbl = .init(
        QueryInterface: { DownloadProgressEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { DownloadProgressEventHandlerWrapper.addRef($0) },
        Release: { DownloadProgressEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = DownloadProgressEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.DownloadProgressEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Media_Imaging.DownloadProgressEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


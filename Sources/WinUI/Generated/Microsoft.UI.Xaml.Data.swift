// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.bindingmode)
public typealias BindingMode = __x_ABI_CMicrosoft_CUI_CXaml_CData_CBindingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.relativesourcemode)
public typealias RelativeSourceMode = __x_ABI_CMicrosoft_CUI_CXaml_CData_CRelativeSourceMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.updatesourcetrigger)
public typealias UpdateSourceTrigger = __x_ABI_CMicrosoft_CUI_CXaml_CData_CUpdateSourceTrigger
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding)
open class Binding : WinUI.BindingBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBinding
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBinding
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIBinding>?) -> Binding? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBindingFactory : __ABI_Microsoft_UI_Xaml_Data.IBindingFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Data.Binding"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBindingFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.converter)
    public var converter : AnyIValueConverter! {
        get { try! _default.get_ConverterImpl() }
        set { try! _default.put_ConverterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.converterlanguage)
    public var converterLanguage : String {
        get { try! _default.get_ConverterLanguageImpl() }
        set { try! _default.put_ConverterLanguageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.converterparameter)
    public var converterParameter : Any! {
        get { try! _default.get_ConverterParameterImpl() }
        set { try! _default.put_ConverterParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.elementname)
    public var elementName : String {
        get { try! _default.get_ElementNameImpl() }
        set { try! _default.put_ElementNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.fallbackvalue)
    public var fallbackValue : Any! {
        get { try! _default.get_FallbackValueImpl() }
        set { try! _default.put_FallbackValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.mode)
    public var mode : BindingMode {
        get { try! _default.get_ModeImpl() }
        set { try! _default.put_ModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.path)
    public var path : WinUI.PropertyPath! {
        get { try! _default.get_PathImpl() }
        set { try! _default.put_PathImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.relativesource)
    public var relativeSource : RelativeSource! {
        get { try! _default.get_RelativeSourceImpl() }
        set { try! _default.put_RelativeSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.source)
    public var source : Any! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.targetnullvalue)
    public var targetNullValue : Any! {
        get { try! _default.get_TargetNullValueImpl() }
        set { try! _default.put_TargetNullValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.binding.updatesourcetrigger)
    public var updateSourceTrigger : UpdateSourceTrigger {
        get { try! _default.get_UpdateSourceTriggerImpl() }
        set { try! _default.put_UpdateSourceTriggerImpl(newValue) }
    }

    internal enum IBinding : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = Binding
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBinding
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBinding
        }
    }
    internal typealias Composable = IBinding
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.bindingbase)
open class BindingBase : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBindingBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingBase>?) -> BindingBase? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBindingBaseFactory : __ABI_Microsoft_UI_Xaml_Data.IBindingBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Data.BindingBase"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBindingBaseFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IBindingBase : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = BindingBase
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingBase
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBindingBase
        }
    }
    internal typealias Composable = IBindingBase
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.bindingexpression)
open class BindingExpression : WinUI.BindingExpressionBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBindingExpression
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpression
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpression>?) -> BindingExpression? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBindingExpressionFactory : __ABI_Microsoft_UI_Xaml_Data.IBindingExpressionFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Data.BindingExpression"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.bindingexpression.updatesource)
    public func updateSource() throws {
        try _default.UpdateSourceImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.bindingexpression.dataitem)
    public var dataItem : Any! {
        get { try! _default.get_DataItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.bindingexpression.parentbinding)
    public var parentBinding : Binding! {
        get { try! _default.get_ParentBindingImpl() }
    }

    internal enum IBindingExpression : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = BindingExpression
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpression
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBindingExpression
        }
    }
    internal typealias Composable = IBindingExpression
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.bindingexpressionbase)
open class BindingExpressionBase : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBindingExpressionBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase>?) -> BindingExpressionBase? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBindingExpressionBaseFactory : __ABI_Microsoft_UI_Xaml_Data.IBindingExpressionBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Data.BindingExpressionBase"))

    internal enum IBindingExpressionBase : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = BindingExpressionBase
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IBindingExpressionBase
        }
    }
    internal typealias Composable = IBindingExpressionBase
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.itemindexrange)
open class ItemIndexRange : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IItemIndexRange
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIItemIndexRange
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIItemIndexRange>?) -> ItemIndexRange? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IItemIndexRangeFactory : __ABI_Microsoft_UI_Xaml_Data.IItemIndexRangeFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Data.ItemIndexRange"))

    public init(_ firstIndex: Int32, _ length: UInt32) {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IItemIndexRangeFactory.CreateInstanceImpl(firstIndex, length, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.itemindexrange.firstindex)
    public var firstIndex : Int32 {
        get { try! _default.get_FirstIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.itemindexrange.lastindex)
    public var lastIndex : Int32 {
        get { try! _default.get_LastIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.itemindexrange.length)
    public var length : UInt32 {
        get { try! _default.get_LengthImpl() }
    }

    internal enum IItemIndexRange : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ItemIndexRange
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIItemIndexRange
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IItemIndexRange
        }
    }
    internal typealias Composable = IItemIndexRange
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.propertychangedeventargs)
open class PropertyChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IPropertyChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIPropertyChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIPropertyChangedEventArgs>?) -> PropertyChangedEventArgs? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPropertyChangedEventArgsFactory : __ABI_Microsoft_UI_Xaml_Data.IPropertyChangedEventArgsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Data.PropertyChangedEventArgs"))

    public init(_ name: String) {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IPropertyChangedEventArgsFactory.CreateInstanceImpl(name, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.propertychangedeventargs.propertyname)
    public var propertyName : String {
        get { try! _default.get_PropertyNameImpl() }
    }

    internal enum IPropertyChangedEventArgs : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = PropertyChangedEventArgs
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIPropertyChangedEventArgs
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IPropertyChangedEventArgs
        }
    }
    internal typealias Composable = IPropertyChangedEventArgs
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.relativesource)
open class RelativeSource : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IRelativeSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIRelativeSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CData_CIRelativeSource>?) -> RelativeSource? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRelativeSourceFactory : __ABI_Microsoft_UI_Xaml_Data.IRelativeSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Data.RelativeSource"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRelativeSourceFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.relativesource.mode)
    public var mode : RelativeSourceMode {
        get { try! _default.get_ModeImpl() }
        set { try! _default.put_ModeImpl(newValue) }
    }

    internal enum IRelativeSource : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = RelativeSource
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIRelativeSource
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Data.IRelativeSource
        }
    }
    internal typealias Composable = IRelativeSource
    deinit {
        _default = nil
    }
}

public typealias PropertyChangedEventHandler = (Any?, PropertyChangedEventArgs?) -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.loadmoreitemsresult)
public struct LoadMoreItemsResult: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.loadmoreitemsresult.count)
    public var count: UInt32 = 0
    public init() {}
    public init(count: UInt32) {
        self.count = count
    }
    public static func from(abi: __x_ABI_CMicrosoft_CUI_CXaml_CData_CLoadMoreItemsResult) -> LoadMoreItemsResult {
        .init(count: abi.Count)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.inotifypropertychanged)
public protocol INotifyPropertyChanged : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.inotifypropertychanged.propertychanged)
    var propertyChanged: Event<PropertyChangedEventHandler> { get }
}

public extension EventSource where Handler == PropertyChangedEventHandler {
    func invoke(_ sender: Any!, _ e: PropertyChangedEventArgs!) {
        for handler in getInvocationList() {
            handler(sender, e)
        }
    }
}

extension INotifyPropertyChanged {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChangedWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChangedWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyINotifyPropertyChanged = any INotifyPropertyChanged

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.ivalueconverter)
public protocol IValueConverter : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.ivalueconverter.convert)
    func convert(_ value: Any!, _ targetType: WinUI.TypeName, _ parameter: Any!, _ language: String) throws -> Any!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.ivalueconverter.convertback)
    func convertBack(_ value: Any!, _ targetType: WinUI.TypeName, _ parameter: Any!, _ language: String) throws -> Any!
}

extension IValueConverter {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Data.IValueConverterWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Data.IValueConverterWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIValueConverter = any IValueConverter

extension WinUI.BindingMode {
    public static var oneWay : WinUI.BindingMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CData_CBindingMode_OneWay
    }
    public static var oneTime : WinUI.BindingMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CData_CBindingMode_OneTime
    }
    public static var twoWay : WinUI.BindingMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CData_CBindingMode_TwoWay
    }
}
extension WinUI.BindingMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.RelativeSourceMode {
    public static var none : WinUI.RelativeSourceMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CData_CRelativeSourceMode_None
    }
    public static var templatedParent : WinUI.RelativeSourceMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CData_CRelativeSourceMode_TemplatedParent
    }
    public static var `self` : WinUI.RelativeSourceMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CData_CRelativeSourceMode_Self
    }
}
extension WinUI.RelativeSourceMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.UpdateSourceTrigger {
    public static var `default` : WinUI.UpdateSourceTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CData_CUpdateSourceTrigger_Default
    }
    public static var propertyChanged : WinUI.UpdateSourceTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CData_CUpdateSourceTrigger_PropertyChanged
    }
    public static var explicit : WinUI.UpdateSourceTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CData_CUpdateSourceTrigger_Explicit
    }
    public static var lostFocus : WinUI.UpdateSourceTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CData_CUpdateSourceTrigger_LostFocus
    }
}
extension WinUI.UpdateSourceTrigger: @retroactive Hashable, @retroactive Codable {}


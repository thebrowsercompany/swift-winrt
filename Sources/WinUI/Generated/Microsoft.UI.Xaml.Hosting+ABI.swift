// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource: WindowsFoundation.IID {
    .init(Data1: 0x553AF92C, Data2: 0x1381, Data3: 0x51D6, Data4: ( 0xBE,0xE0,0xF3,0x4B,0xEB,0x04,0x2E,0xA8 ))// 553AF92C-1381-51D6-BEE0-F34BEB042EA8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0x7D2DB617, Data2: 0x14E7, Data3: 0x5D49, Data4: ( 0xAE,0xEC,0xAE,0x10,0x88,0x7E,0x59,0x5D ))// 7D2DB617-14E7-5D49-AEEC-AE10887E595D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceGotFocusEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xCC63D863, Data2: 0x2071, Data3: 0x5F6B, Data4: ( 0xAE,0xF9,0xC0,0xBA,0x35,0xF3,0xB8,0xDF ))// CC63D863-2071-5F6B-AEF9-C0BA35F3B8DF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceTakeFocusRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x4F5A0E2C, Data2: 0x4DDC, Data3: 0x5C03, Data4: ( 0x93,0x9F,0x6F,0x3B,0xDA,0x56,0x03,0x63 ))// 4F5A0E2C-4DDC-5C03-939F-6F3BDA560363
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreview: WindowsFoundation.IID {
    .init(Data1: 0xC8AD1EF4, Data2: 0xA93F, Data3: 0x5A25, Data4: ( 0x85,0xBD,0x7C,0x49,0x8D,0x98,0x56,0xD3 ))// C8AD1EF4-A93F-5A25-85BD-7C498D9856D3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreviewStatics: WindowsFoundation.IID {
    .init(Data1: 0x84DA5A6C, Data2: 0x0CFA, Data3: 0x532B, Data4: ( 0x9B,0x15,0xCC,0xD9,0x86,0x37,0x43,0x42 ))// 84DA5A6C-0CFA-532B-9B15-CCD986374342
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManager: WindowsFoundation.IID {
    .init(Data1: 0x85A2E562, Data2: 0x7E8F, Data3: 0x5333, Data4: ( 0xA1,0x04,0xA3,0xE6,0x72,0xA2,0xFF,0xEE ))// 85A2E562-7E8F-5333-A104-A3E672A2FFEE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManager2: WindowsFoundation.IID {
    .init(Data1: 0xBD67CFF5, Data2: 0xB887, Data3: 0x56DA, Data4: ( 0xB0,0xA2,0xDA,0xD1,0x0A,0x65,0x20,0xE9 ))// BD67CFF5-B887-56DA-B0A2-DAD10A6520E9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManagerStatics: WindowsFoundation.IID {
    .init(Data1: 0x56CB591D, Data2: 0xDE97, Data3: 0x539F, Data4: ( 0x88,0x1D,0x8C,0xCD,0xC4,0x4F,0xA6,0xC4 ))// 56CB591D-DE97-539F-881D-8CCDC44FA6C4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManagerStatics2: WindowsFoundation.IID {
    .init(Data1: 0x1062430E, Data2: 0x0898, Data3: 0x5240, Data4: ( 0xBA,0x52,0x89,0xD9,0x22,0x5E,0x7E,0x58 ))// 1062430E-0898-5240-BA52-89D9225E7E58
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlShutdownCompletedOnThreadEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xACCD20E5, Data2: 0x3576, Data3: 0x5262, Data4: ( 0xA3,0xDD,0x99,0x06,0x57,0x68,0x1F,0x1F ))// ACCD20E5-3576-5262-A3DD-990657681F1F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequest: WindowsFoundation.IID {
    .init(Data1: 0xC883EA8B, Data2: 0x4CE2, Data3: 0x58BE, Data4: ( 0xB5,0x47,0x66,0xDE,0xDF,0x62,0x03,0x12 ))// C883EA8B-4CE2-58BE-B547-66DEDF620312
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequestFactory: WindowsFoundation.IID {
    .init(Data1: 0x7A5124DD, Data2: 0x2876, Data3: 0x5ED8, Data4: ( 0xB5,0x64,0x58,0x67,0x73,0x1D,0x7F,0x1E ))// 7A5124DD-2876-5ED8-B564-5867731D7F1E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationResult: WindowsFoundation.IID {
    .init(Data1: 0xD6BF378E, Data2: 0x2AAC, Data3: 0x5E5B, Data4: ( 0xAC,0x8A,0x6C,0x5D,0x9A,0x4C,0x1C,0xB8 ))// D6BF378E-2AAC-5E5B-AC8A-6C5D9A4C1CB8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationResultFactory: WindowsFoundation.IID {
    .init(Data1: 0xF533F53B, Data2: 0x5C00, Data3: 0x5C88, Data4: ( 0x9A,0x41,0x38,0x88,0xCB,0x86,0xE4,0x95 ))// F533F53B-5C00-5C88-9A41-3888CB86E495
}

public enum __ABI_Microsoft_UI_Xaml_Hosting {
    public class IDesktopWindowXamlSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource }

        internal func get_ContentImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, RawPointer(value)))
            }
        }

        internal func get_HasFocusImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SystemBackdropImpl() throws -> WinUI.SystemBackdrop? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemBackdrop(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SystemBackdropImpl(_ value: WinUI.SystemBackdrop?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SystemBackdrop(pThis, RawPointer(value)))
            }
        }

        internal func get_SiteBridgeImpl() throws -> WinAppSDK.DesktopChildSiteBridge? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SiteBridge(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_TakeFocusRequestedImpl(_ handler: TypedEventHandler<WinUI.DesktopWindowXamlSource?, WinUI.DesktopWindowXamlSourceTakeFocusRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CHosting__CDesktopWindowXamlSource___x_ABI_CMicrosoft__CUI__CXaml__CHosting__CDesktopWindowXamlSourceTakeFocusRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TakeFocusRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TakeFocusRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TakeFocusRequested(pThis, token))
            }
        }

        internal func add_GotFocusImpl(_ handler: TypedEventHandler<WinUI.DesktopWindowXamlSource?, WinUI.DesktopWindowXamlSourceGotFocusEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CHosting__CDesktopWindowXamlSource___x_ABI_CMicrosoft__CUI__CXaml__CHosting__CDesktopWindowXamlSourceGotFocusEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_GotFocus(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_GotFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GotFocus(pThis, token))
            }
        }

        internal func NavigateFocusImpl(_ request: WinUI.XamlSourceFocusNavigationRequest?) throws -> WinUI.XamlSourceFocusNavigationResult? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.NavigateFocus(pThis, RawPointer(request), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func InitializeImpl(_ parentWindowId: WinAppSDK.WindowId) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Initialize(pThis, .from(swift: parentWindowId)))
            }
        }

    }

    public class IDesktopWindowXamlSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.DesktopWindowXamlSource.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IDesktopWindowXamlSource {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IDesktopWindowXamlSource(value!)
        }

    }

    public class IDesktopWindowXamlSourceGotFocusEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceGotFocusEventArgs }

        internal func get_RequestImpl() throws -> WinUI.XamlSourceFocusNavigationRequest? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceGotFocusEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IDesktopWindowXamlSourceTakeFocusRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceTakeFocusRequestedEventArgs }

        internal func get_RequestImpl() throws -> WinUI.XamlSourceFocusNavigationRequest? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceTakeFocusRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IElementCompositionPreview: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreview }

    }

    public class IElementCompositionPreviewStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreviewStatics }

        internal func GetElementVisualImpl(_ element: WinUI.UIElement?) throws -> WinAppSDK.Visual? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreviewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetElementVisual(pThis, RawPointer(element), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetElementChildVisualImpl(_ element: WinUI.UIElement?) throws -> WinAppSDK.Visual? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreviewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetElementChildVisual(pThis, RawPointer(element), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func SetElementChildVisualImpl(_ element: WinUI.UIElement?, _ visual: WinAppSDK.Visual?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreviewStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetElementChildVisual(pThis, RawPointer(element), RawPointer(visual)))
            }
        }

        internal func GetScrollViewerManipulationPropertySetImpl(_ scrollViewer: WinUI.ScrollViewer?) throws -> WinAppSDK.CompositionPropertySet? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreviewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetScrollViewerManipulationPropertySet(pThis, RawPointer(scrollViewer), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func SetImplicitShowAnimationImpl(_ element: WinUI.UIElement?, _ animation: WinAppSDK.AnyICompositionAnimationBase?) throws {
            let animationWrapper = __ABI_Microsoft_UI_Composition.ICompositionAnimationBaseWrapper(animation)
            let _animation = try! animationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreviewStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetImplicitShowAnimation(pThis, RawPointer(element), _animation))
            }
        }

        internal func SetImplicitHideAnimationImpl(_ element: WinUI.UIElement?, _ animation: WinAppSDK.AnyICompositionAnimationBase?) throws {
            let animationWrapper = __ABI_Microsoft_UI_Composition.ICompositionAnimationBaseWrapper(animation)
            let _animation = try! animationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreviewStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetImplicitHideAnimation(pThis, RawPointer(element), _animation))
            }
        }

        internal func SetIsTranslationEnabledImpl(_ element: WinUI.UIElement?, _ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreviewStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsTranslationEnabled(pThis, RawPointer(element), .init(from: value)))
            }
        }

        internal func GetPointerPositionPropertySetImpl(_ targetElement: WinUI.UIElement?) throws -> WinAppSDK.CompositionPropertySet? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreviewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPointerPositionPropertySet(pThis, RawPointer(targetElement), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IWindowsXamlManager: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManager }

    }

    public class IWindowsXamlManager2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManager2 }

        internal func add_XamlShutdownCompletedOnThreadImpl(_ handler: TypedEventHandler<WinUI.WindowsXamlManager?, WinUI.XamlShutdownCompletedOnThreadEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CHosting__CWindowsXamlManager___x_ABI_CMicrosoft__CUI__CXaml__CHosting__CXamlShutdownCompletedOnThreadEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManager2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_XamlShutdownCompletedOnThread(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_XamlShutdownCompletedOnThreadImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManager2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_XamlShutdownCompletedOnThread(pThis, token))
            }
        }

    }

    public class IWindowsXamlManagerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManagerStatics }

        internal func InitializeForCurrentThreadImpl() throws -> WinUI.WindowsXamlManager? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InitializeForCurrentThread(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IWindowsXamlManagerStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManagerStatics2 }

        internal func GetForCurrentThreadImpl() throws -> WinUI.WindowsXamlManager? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManagerStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForCurrentThread(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IXamlShutdownCompletedOnThreadEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlShutdownCompletedOnThreadEventArgs }

        internal func GetDispatcherQueueDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlShutdownCompletedOnThreadEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDispatcherQueueDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IXamlSourceFocusNavigationRequest: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequest }

        internal func get_ReasonImpl() throws -> WinUI.XamlSourceFocusNavigationReason {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CXamlSourceFocusNavigationReason = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

        internal func get_HintRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HintRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_CorrelationIdImpl() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IXamlSourceFocusNavigationRequestFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequestFactory }

        internal func CreateInstanceImpl(_ reason: WinUI.XamlSourceFocusNavigationReason) throws -> IXamlSourceFocusNavigationRequest {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequestFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, reason, &valueAbi))
                }
            }
            return IXamlSourceFocusNavigationRequest(value!)
        }

        internal func CreateInstanceWithHintRectImpl(_ reason: WinUI.XamlSourceFocusNavigationReason, _ hintRect: WindowsFoundation.Rect) throws -> IXamlSourceFocusNavigationRequest {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequestFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithHintRect(pThis, reason, .from(swift: hintRect), &valueAbi))
                }
            }
            return IXamlSourceFocusNavigationRequest(value!)
        }

        internal func CreateInstanceWithHintRectAndCorrelationIdImpl(_ reason: WinUI.XamlSourceFocusNavigationReason, _ hintRect: WindowsFoundation.Rect, _ correlationId: Foundation.UUID) throws -> IXamlSourceFocusNavigationRequest {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequestFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithHintRectAndCorrelationId(pThis, reason, .from(swift: hintRect), .init(from: correlationId), &valueAbi))
                }
            }
            return IXamlSourceFocusNavigationRequest(value!)
        }

    }

    public class IXamlSourceFocusNavigationResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationResult }

        internal func get_WasFocusMovedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WasFocusMoved(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IXamlSourceFocusNavigationResultFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationResultFactory }

        internal func CreateInstanceImpl(_ focusMoved: Bool) throws -> IXamlSourceFocusNavigationResult {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationResultFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, .init(from: focusMoved), &valueAbi))
                }
            }
            return IXamlSourceFocusNavigationResult(value!)
        }

    }

}

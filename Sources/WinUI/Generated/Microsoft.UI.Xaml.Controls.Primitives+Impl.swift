// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Microsoft_UI_Xaml_Controls_Primitives {
    public enum IScrollControllerBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollController
        public typealias SwiftProjection = AnyIScrollController
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IScrollControllerImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IScrollControllerImpl: IScrollController, WinRTAbiImpl {
        fileprivate typealias Bridge = IScrollControllerBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.setisscrollable)
        fileprivate func setIsScrollable(_ isScrollable: Bool) throws {
            try _default.SetIsScrollableImpl(isScrollable)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.setvalues)
        fileprivate func setValues(_ minOffset: Double, _ maxOffset: Double, _ offset: Double, _ viewportLength: Double) throws {
            try _default.SetValuesImpl(minOffset, maxOffset, offset, viewportLength)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.getscrollanimation)
        fileprivate func getScrollAnimation(_ correlationId: Int32, _ startPosition: WindowsFoundation.Vector2, _ endPosition: WindowsFoundation.Vector2, _ defaultAnimation: WinAppSDK.CompositionAnimation!) throws -> WinAppSDK.CompositionAnimation! {
            try _default.GetScrollAnimationImpl(correlationId, startPosition, endPosition, defaultAnimation)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.notifyrequestedscrollcompleted)
        fileprivate func notifyRequestedScrollCompleted(_ correlationId: Int32) throws {
            try _default.NotifyRequestedScrollCompletedImpl(correlationId)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.canscroll)
        fileprivate var canScroll : Bool {
            get { try! _default.get_CanScrollImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.isscrollingwithmouse)
        fileprivate var isScrollingWithMouse : Bool {
            get { try! _default.get_IsScrollingWithMouseImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.panninginfo)
        fileprivate var panningInfo : AnyIScrollControllerPanningInfo! {
            get { try! _default.get_PanningInfoImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.addscrollvelocityrequested)
        fileprivate lazy var addScrollVelocityRequested : Event<TypedEventHandler<IScrollController?, ScrollControllerAddScrollVelocityRequestedEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_AddScrollVelocityRequestedImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_AddScrollVelocityRequestedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.canscrollchanged)
        fileprivate lazy var canScrollChanged : Event<TypedEventHandler<IScrollController?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_CanScrollChangedImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_CanScrollChangedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.isscrollingwithmousechanged)
        fileprivate lazy var isScrollingWithMouseChanged : Event<TypedEventHandler<IScrollController?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_IsScrollingWithMouseChangedImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_IsScrollingWithMouseChangedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.scrollbyrequested)
        fileprivate lazy var scrollByRequested : Event<TypedEventHandler<IScrollController?, ScrollControllerScrollByRequestedEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_ScrollByRequestedImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_ScrollByRequestedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontroller.scrolltorequested)
        fileprivate lazy var scrollToRequested : Event<TypedEventHandler<IScrollController?, ScrollControllerScrollToRequestedEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_ScrollToRequestedImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_ScrollToRequestedImpl($0)
           }
          )
        }()

    }

    public enum IScrollControllerPanningInfoBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfo
        public typealias SwiftProjection = AnyIScrollControllerPanningInfo
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IScrollControllerPanningInfoImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfoVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IScrollControllerPanningInfoImpl: IScrollControllerPanningInfo, WinRTAbiImpl {
        fileprivate typealias Bridge = IScrollControllerPanningInfoBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.setpanningelementexpressionanimationsources)
        fileprivate func setPanningElementExpressionAnimationSources(_ propertySet: WinAppSDK.CompositionPropertySet!, _ minOffsetPropertyName: String, _ maxOffsetPropertyName: String, _ offsetPropertyName: String, _ multiplierPropertyName: String) throws {
            try _default.SetPanningElementExpressionAnimationSourcesImpl(propertySet, minOffsetPropertyName, maxOffsetPropertyName, offsetPropertyName, multiplierPropertyName)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.israilenabled)
        fileprivate var isRailEnabled : Bool {
            get { try! _default.get_IsRailEnabledImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.panorientation)
        fileprivate var panOrientation : WinUI.Orientation {
            get { try! _default.get_PanOrientationImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.panningelementancestor)
        fileprivate var panningElementAncestor : WinUI.UIElement! {
            get { try! _default.get_PanningElementAncestorImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.changed)
        fileprivate lazy var changed : Event<TypedEventHandler<IScrollControllerPanningInfo?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_ChangedImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_ChangedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollcontrollerpanninginfo.panrequested)
        fileprivate lazy var panRequested : Event<TypedEventHandler<IScrollControllerPanningInfo?, ScrollControllerPanRequestedEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_PanRequestedImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_PanRequestedImpl($0)
           }
          )
        }()

    }

    public enum IScrollSnapPointsInfoBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfo
        public typealias SwiftProjection = AnyIScrollSnapPointsInfo
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IScrollSnapPointsInfoImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfoVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IScrollSnapPointsInfoImpl: IScrollSnapPointsInfo, WinRTAbiImpl {
        fileprivate typealias Bridge = IScrollSnapPointsInfoBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.getirregularsnappoints)
        fileprivate func getIrregularSnapPoints(_ orientation: WinUI.Orientation, _ alignment: SnapPointsAlignment) throws -> WindowsFoundation.AnyIVectorView<Float>! {
            try _default.GetIrregularSnapPointsImpl(orientation, alignment)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.getregularsnappoints)
        fileprivate func getRegularSnapPoints(_ orientation: WinUI.Orientation, _ alignment: SnapPointsAlignment, _ offset: inout Float) throws -> Float {
            try _default.GetRegularSnapPointsImpl(orientation, alignment, &offset)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.arehorizontalsnappointsregular)
        fileprivate var areHorizontalSnapPointsRegular : Bool {
            get { try! _default.get_AreHorizontalSnapPointsRegularImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.areverticalsnappointsregular)
        fileprivate var areVerticalSnapPointsRegular : Bool {
            get { try! _default.get_AreVerticalSnapPointsRegularImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.horizontalsnappointschanged)
        fileprivate lazy var horizontalSnapPointsChanged : Event<EventHandler<Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_HorizontalSnapPointsChangedImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_HorizontalSnapPointsChangedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.primitives.iscrollsnappointsinfo.verticalsnappointschanged)
        fileprivate lazy var verticalSnapPointsChanged : Event<EventHandler<Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_VerticalSnapPointsChangedImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_VerticalSnapPointsChangedImpl($0)
           }
          )
        }()

    }

    public class ItemsChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ItemsChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ItemsChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class RangeBaseValueChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = RangeBaseValueChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.RangeBaseValueChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Microsoft_UI_Xaml_Controls {
    public enum IInsertionPanelBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanel
        public typealias SwiftProjection = AnyIInsertionPanel
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IInsertionPanelImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IInsertionPanelVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IInsertionPanelImpl: IInsertionPanel, WinRTAbiImpl {
        fileprivate typealias Bridge = IInsertionPanelBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iinsertionpanel.getinsertionindexes)
        fileprivate func getInsertionIndexes(_ position: WindowsFoundation.Point, _ first: inout Int32, _ second: inout Int32) throws {
            try _default.GetInsertionIndexesImpl(position, &first, &second)
        }

    }

    public enum IItemContainerMappingBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMapping
        public typealias SwiftProjection = AnyIItemContainerMapping
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IItemContainerMappingImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IItemContainerMappingVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IItemContainerMappingImpl: IItemContainerMapping, WinRTAbiImpl {
        fileprivate typealias Bridge = IItemContainerMappingBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.itemfromcontainer)
        fileprivate func itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
            try _default.ItemFromContainerImpl(container)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.containerfromitem)
        fileprivate func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
            try _default.ContainerFromItemImpl(item)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.indexfromcontainer)
        fileprivate func indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32 {
            try _default.IndexFromContainerImpl(container)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.containerfromindex)
        fileprivate func containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject! {
            try _default.ContainerFromIndexImpl(index)
        }

    }

    public enum IKeyIndexMappingBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMapping
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMapping
        public typealias SwiftProjection = AnyIKeyIndexMapping
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IKeyIndexMappingImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMappingVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IKeyIndexMappingImpl: IKeyIndexMapping, WinRTAbiImpl {
        fileprivate typealias Bridge = IKeyIndexMappingBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping.keyfromindex)
        fileprivate func keyFromIndex(_ index: Int32) throws -> String {
            try _default.KeyFromIndexImpl(index)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping.indexfromkey)
        fileprivate func indexFromKey(_ key: String) throws -> Int32 {
            try _default.IndexFromKeyImpl(key)
        }

    }

    public enum INavigateBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigate
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigate
        public typealias SwiftProjection = AnyINavigate
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return INavigateImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.INavigateVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class INavigateImpl: INavigate, WinRTAbiImpl {
        fileprivate typealias Bridge = INavigateBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.inavigate.navigate)
        fileprivate func navigate(_ sourcePageType: WinUI.TypeName) throws -> Bool {
            try _default.NavigateImpl(sourcePageType)
        }

    }

    public enum IScrollAnchorProviderBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProvider
        public typealias SwiftProjection = AnyIScrollAnchorProvider
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IScrollAnchorProviderImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IScrollAnchorProviderImpl: IScrollAnchorProvider, WinRTAbiImpl {
        fileprivate typealias Bridge = IScrollAnchorProviderBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.registeranchorcandidate)
        fileprivate func registerAnchorCandidate(_ element: WinUI.UIElement!) throws {
            try _default.RegisterAnchorCandidateImpl(element)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.unregisteranchorcandidate)
        fileprivate func unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws {
            try _default.UnregisterAnchorCandidateImpl(element)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.currentanchor)
        fileprivate var currentAnchor : WinUI.UIElement! {
            get { try! _default.get_CurrentAnchorImpl() }
        }

    }

    public enum ISemanticZoomInformationBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformation
        public typealias SwiftProjection = AnyISemanticZoomInformation
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ISemanticZoomInformationImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ISemanticZoomInformationImpl: ISemanticZoomInformation, WinRTAbiImpl {
        fileprivate typealias Bridge = ISemanticZoomInformationBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.initializeviewchange)
        fileprivate func initializeViewChange() throws {
            try _default.InitializeViewChangeImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchange)
        fileprivate func completeViewChange() throws {
            try _default.CompleteViewChangeImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.makevisible)
        fileprivate func makeVisible(_ item: SemanticZoomLocation!) throws {
            try _default.MakeVisibleImpl(item)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.startviewchangefrom)
        fileprivate func startViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
            try _default.StartViewChangeFromImpl(source, destination)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.startviewchangeto)
        fileprivate func startViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
            try _default.StartViewChangeToImpl(source, destination)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchangefrom)
        fileprivate func completeViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
            try _default.CompleteViewChangeFromImpl(source, destination)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchangeto)
        fileprivate func completeViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
            try _default.CompleteViewChangeToImpl(source, destination)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.isactiveview)
        fileprivate var isActiveView : Bool {
            get { try! _default.get_IsActiveViewImpl() }
            set { try! _default.put_IsActiveViewImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.iszoomedinview)
        fileprivate var isZoomedInView : Bool {
            get { try! _default.get_IsZoomedInViewImpl() }
            set { try! _default.put_IsZoomedInViewImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.semanticzoomowner)
        fileprivate var semanticZoomOwner : SemanticZoom! {
            get { try! _default.get_SemanticZoomOwnerImpl() }
            set { try! _default.put_SemanticZoomOwnerImpl(newValue) }
        }

    }

    public class ContextMenuOpeningEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ContextMenuOpeningEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class DragItemsStartingEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = DragItemsStartingEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.DragItemsStartingEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class ItemClickEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ItemClickEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ItemClickEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class SelectionChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = SelectionChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.SelectionChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class SemanticZoomViewChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = SemanticZoomViewChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.SemanticZoomViewChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class TextChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = TextChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.TextChangedEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class TextControlPasteEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = TextControlPasteEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandler
        public typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.TextControlPasteEventHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
}

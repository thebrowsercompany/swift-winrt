// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brushmappingmode)
public typealias BrushMappingMode = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.colorinterpolationmode)
public typealias ColorInterpolationMode = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.elementcompositemode)
public typealias ElementCompositeMode = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.fastplayfallbackbehaviour)
public typealias FastPlayFallbackBehaviour = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFastPlayFallbackBehaviour
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.fillrule)
public typealias FillRule = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFillRule
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientspreadmethod)
public typealias GradientSpreadMethod = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.penlinecap)
public typealias PenLineCap = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineCap
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.penlinejoin)
public typealias PenLineJoin = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineJoin
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.stretch)
public typealias Stretch = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush)
open class AcrylicBrush : WinUI.XamlCompositionBrushBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIAcrylicBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIAcrylicBrush>?) -> AcrylicBrush? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAcrylicBrushFactory : __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrushFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.AcrylicBrush"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAcrylicBrushFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IAcrylicBrushStatics: __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrushStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.AcrylicBrush"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.alwaysusefallbackproperty)
    public class var alwaysUseFallbackProperty : WinUI.DependencyProperty! {
        get { try! _IAcrylicBrushStatics.get_AlwaysUseFallbackPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintcolorproperty)
    public class var tintColorProperty : WinUI.DependencyProperty! {
        get { try! _IAcrylicBrushStatics.get_TintColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintopacityproperty)
    public class var tintOpacityProperty : WinUI.DependencyProperty! {
        get { try! _IAcrylicBrushStatics.get_TintOpacityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tinttransitiondurationproperty)
    public class var tintTransitionDurationProperty : WinUI.DependencyProperty! {
        get { try! _IAcrylicBrushStatics.get_TintTransitionDurationPropertyImpl() }
    }

    private static let _IAcrylicBrushStatics2: __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrushStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.AcrylicBrush"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintluminosityopacityproperty)
    public class var tintLuminosityOpacityProperty : WinUI.DependencyProperty! {
        get { try! _IAcrylicBrushStatics2.get_TintLuminosityOpacityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.alwaysusefallback)
    public var alwaysUseFallback : Bool {
        get { try! _default.get_AlwaysUseFallbackImpl() }
        set { try! _default.put_AlwaysUseFallbackImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintcolor)
    public var tintColor : UWP.Color {
        get { try! _default.get_TintColorImpl() }
        set { try! _default.put_TintColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintopacity)
    public var tintOpacity : Double {
        get { try! _default.get_TintOpacityImpl() }
        set { try! _default.put_TintOpacityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tinttransitionduration)
    public var tintTransitionDuration : WindowsFoundation.TimeSpan {
        get { try! _default.get_TintTransitionDurationImpl() }
        set { try! _default.put_TintTransitionDurationImpl(newValue) }
    }

    private lazy var _IAcrylicBrush2: __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrush2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.acrylicbrush.tintluminosityopacity)
    public var tintLuminosityOpacity : Double? {
        get { try! _IAcrylicBrush2.get_TintLuminosityOpacityImpl() }
        set { try! _IAcrylicBrush2.put_TintLuminosityOpacityImpl(newValue) }
    }

    internal enum IXamlCompositionBrushBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlCompositionBrushBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseOverrides
        internal typealias Class = AcrylicBrush
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIAcrylicBrush
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IAcrylicBrush
        }
    }
    internal typealias Composable = IXamlCompositionBrushBaseOverrides
    deinit {
        _default = nil
        _IAcrylicBrush2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush)
open class Brush : WinUI.DependencyObject, WinAppSDK.IAnimationObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIBrush>?) -> Brush? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media.IBrushOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media.IBrushOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IBrushFactory : __ABI_Microsoft_UI_Xaml_Media.IBrushFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Brush"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBrushFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IBrushStatics: __ABI_Microsoft_UI_Xaml_Media.IBrushStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Brush"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.opacityproperty)
    public class var opacityProperty : WinUI.DependencyProperty! {
        get { try! _IBrushStatics.get_OpacityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.relativetransformproperty)
    public class var relativeTransformProperty : WinUI.DependencyProperty! {
        get { try! _IBrushStatics.get_RelativeTransformPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.transformproperty)
    public class var transformProperty : WinUI.DependencyProperty! {
        get { try! _IBrushStatics.get_TransformPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.opacity)
    public var opacity : Double {
        get { try! _default.get_OpacityImpl() }
        set { try! _default.put_OpacityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.relativetransform)
    public var relativeTransform : Transform! {
        get { try! _default.get_RelativeTransformImpl() }
        set { try! _default.put_RelativeTransformImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.transform)
    public var transform : Transform! {
        get { try! _default.get_TransformImpl() }
        set { try! _default.put_TransformImpl(newValue) }
    }

    private lazy var _IBrushOverrides: __ABI_Microsoft_UI_Xaml_Media.IBrushOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.populatepropertyinfooverride)
    open func populatePropertyInfoOverride(_ propertyName: String, _ animationPropertyInfo: WinAppSDK.AnimationPropertyInfo!) throws {
        try _IBrushOverrides.PopulatePropertyInfoOverrideImpl(propertyName, animationPropertyInfo)
    }

    internal enum IBrushOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IBrushOverrides
        internal typealias Class = Brush
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIBrush
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IBrush
        }
    }
    internal typealias Composable = IBrushOverrides
    private lazy var _IAnimationObject: __ABI_Microsoft_UI_Composition.IAnimationObject! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.brush.populatepropertyinfo)
    public func populatePropertyInfo(_ propertyName: String, _ propertyInfo: WinAppSDK.AnimationPropertyInfo!) throws {
        try _IAnimationObject.PopulatePropertyInfoImpl(propertyName, propertyInfo)
    }

    deinit {
        _default = nil
        _IBrushOverrides = nil
        _IAnimationObject = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.cachemode)
open class CacheMode : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ICacheMode
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICacheMode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICacheMode>?) -> CacheMode? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICacheModeFactory : __ABI_Microsoft_UI_Xaml_Media.ICacheModeFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.CacheMode"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICacheModeFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum ICacheMode : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CacheMode
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICacheMode
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ICacheMode
        }
    }
    internal typealias Composable = ICacheMode
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform)
public final class CompositeTransform : WinUI.Transform {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ICompositeTransform
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICompositeTransform
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICompositeTransform>?) -> CompositeTransform? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.CompositeTransform")))
    }

    private static let _ICompositeTransformStatics: __ABI_Microsoft_UI_Xaml_Media.ICompositeTransformStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.CompositeTransform"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.centerxproperty)
    public static var centerXProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_CenterXPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.centeryproperty)
    public static var centerYProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_CenterYPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.rotationproperty)
    public static var rotationProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_RotationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.scalexproperty)
    public static var scaleXProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_ScaleXPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.scaleyproperty)
    public static var scaleYProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_ScaleYPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.skewxproperty)
    public static var skewXProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_SkewXPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.skewyproperty)
    public static var skewYProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_SkewYPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.translatexproperty)
    public static var translateXProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_TranslateXPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.translateyproperty)
    public static var translateYProperty : WinUI.DependencyProperty! {
        get { try! _ICompositeTransformStatics.get_TranslateYPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.centerx)
    public var centerX : Double {
        get { try! _default.get_CenterXImpl() }
        set { try! _default.put_CenterXImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.centery)
    public var centerY : Double {
        get { try! _default.get_CenterYImpl() }
        set { try! _default.put_CenterYImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.rotation)
    public var rotation : Double {
        get { try! _default.get_RotationImpl() }
        set { try! _default.put_RotationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.scalex)
    public var scaleX : Double {
        get { try! _default.get_ScaleXImpl() }
        set { try! _default.put_ScaleXImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.scaley)
    public var scaleY : Double {
        get { try! _default.get_ScaleYImpl() }
        set { try! _default.put_ScaleYImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.skewx)
    public var skewX : Double {
        get { try! _default.get_SkewXImpl() }
        set { try! _default.put_SkewXImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.skewy)
    public var skewY : Double {
        get { try! _default.get_SkewYImpl() }
        set { try! _default.put_SkewYImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.translatex)
    public var translateX : Double {
        get { try! _default.get_TranslateXImpl() }
        set { try! _default.put_TranslateXImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositetransform.translatey)
    public var translateY : Double {
        get { try! _default.get_TranslateYImpl() }
        set { try! _default.put_TranslateYImpl(newValue) }
    }

    internal enum IGeneralTransformOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformOverrides
        internal typealias Class = CompositeTransform
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICompositeTransform
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ICompositeTransform
        }
    }
    internal typealias Composable = IGeneralTransformOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositiontarget)
public final class CompositionTarget : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ICompositionTarget
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICompositionTarget
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CICompositionTarget>?) -> CompositionTarget? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICompositionTargetStatics: __ABI_Microsoft_UI_Xaml_Media.ICompositionTargetStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.CompositionTarget"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositiontarget.getcompositorforcurrentthread)
    public static func getCompositorForCurrentThread() -> WinAppSDK.Compositor! {
        return try! _ICompositionTargetStatics.GetCompositorForCurrentThreadImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositiontarget.rendered)
    public static var rendered : Event<EventHandler<RenderedEventArgs?>> = {
      .init(
        add: { try! _ICompositionTargetStatics.add_RenderedImpl($0) },
        remove: { try? _ICompositionTargetStatics.remove_RenderedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositiontarget.rendering)
    public static var rendering : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _ICompositionTargetStatics.add_RenderingImpl($0) },
        remove: { try? _ICompositionTargetStatics.remove_RenderingImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.compositiontarget.surfacecontentslost)
    public static var surfaceContentsLost : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _ICompositionTargetStatics.add_SurfaceContentsLostImpl($0) },
        remove: { try? _ICompositionTargetStatics.remove_SurfaceContentsLostImpl($0) }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection)
public final class DoubleCollection : WinRTClass, IVector, IIterable {
    public typealias T = Double
    private typealias SwiftABI = WinUI.IVectorDouble
    private typealias CABI = __x_ABI_C__FIVector_1_double
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1_double>?) -> DoubleCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.DoubleCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.getat)
    public func getAt(_ index: UInt32) -> Double {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<Double>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.indexof)
    public func indexOf(_ value: Double, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.setat)
    public func setAt(_ index: UInt32, _ value: Double) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: Double) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.append)
    public func append(_ value: Double) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableDouble! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.doublecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Double>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.fontfamily)
open class FontFamily : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IFontFamily
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>?) -> FontFamily? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFontFamilyFactory : __ABI_Microsoft_UI_Xaml_Media.IFontFamilyFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.FontFamily"))

    public init(_ familyName: String) {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IFontFamilyFactory.CreateInstanceWithNameImpl(familyName, baseInterface, &innerInterface)
        }
    }

    private static let _IFontFamilyStatics: __ABI_Microsoft_UI_Xaml_Media.IFontFamilyStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.FontFamily"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.fontfamily.xamlautofontfamily)
    public class var xamlAutoFontFamily : FontFamily! {
        get { try! _IFontFamilyStatics.get_XamlAutoFontFamilyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.fontfamily.source)
    public var source : String {
        get { try! _default.get_SourceImpl() }
    }

    internal enum IFontFamily : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = FontFamily
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IFontFamily
        }
    }
    internal typealias Composable = IFontFamily
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform)
open class GeneralTransform : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGeneralTransform
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform>?) -> GeneralTransform? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IGeneralTransformFactory : __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.GeneralTransform"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGeneralTransformFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.transformpoint)
    public func transformPoint(_ point: WindowsFoundation.Point) throws -> WindowsFoundation.Point {
        try _default.TransformPointImpl(point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.trytransform)
    public func tryTransform(_ inPoint: WindowsFoundation.Point, _ outPoint: inout WindowsFoundation.Point) throws -> Bool {
        try _default.TryTransformImpl(inPoint, &outPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.transformbounds)
    public func transformBounds(_ rect: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _default.TransformBoundsImpl(rect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.inverse)
    public var inverse : GeneralTransform! {
        get { try! _default.get_InverseImpl() }
    }

    private lazy var _IGeneralTransformOverrides: __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.trytransformcore)
    open func tryTransformCore(_ inPoint: WindowsFoundation.Point, _ outPoint: inout WindowsFoundation.Point) throws -> Bool {
        try _IGeneralTransformOverrides.TryTransformCoreImpl(inPoint, &outPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.transformboundscore)
    open func transformBoundsCore(_ rect: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _IGeneralTransformOverrides.TransformBoundsCoreImpl(rect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.generaltransform.inversecore)
    open var inverseCore : GeneralTransform! {
        get { try! _IGeneralTransformOverrides.get_InverseCoreImpl() }
    }

    internal enum IGeneralTransformOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformOverrides
        internal typealias Class = GeneralTransform
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGeneralTransform
        }
    }
    internal typealias Composable = IGeneralTransformOverrides
    deinit {
        _default = nil
        _IGeneralTransformOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry)
open class Geometry : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeometry>?) -> Geometry? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGeometryFactory : __ABI_Microsoft_UI_Xaml_Media.IGeometryFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Geometry"))

    private static let _IGeometryStatics: __ABI_Microsoft_UI_Xaml_Media.IGeometryStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Geometry"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry.empty)
    public class var empty : Geometry! {
        get { try! _IGeometryStatics.get_EmptyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry.standardflatteningtolerance)
    public class var standardFlatteningTolerance : Double {
        get { try! _IGeometryStatics.get_StandardFlatteningToleranceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry.transformproperty)
    public class var transformProperty : WinUI.DependencyProperty! {
        get { try! _IGeometryStatics.get_TransformPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_BoundsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.geometry.transform)
    public var transform : Transform! {
        get { try! _default.get_TransformImpl() }
        set { try! _default.put_TransformImpl(newValue) }
    }

    internal enum IGeometry : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = Geometry
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeometry
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGeometry
        }
    }
    internal typealias Composable = IGeometry
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush)
open class GradientBrush : WinUI.Brush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGradientBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush>?) -> GradientBrush? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGradientBrushFactory : __ABI_Microsoft_UI_Xaml_Media.IGradientBrushFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.GradientBrush"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGradientBrushFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IGradientBrushStatics: __ABI_Microsoft_UI_Xaml_Media.IGradientBrushStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.GradientBrush"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.colorinterpolationmodeproperty)
    public class var colorInterpolationModeProperty : WinUI.DependencyProperty! {
        get { try! _IGradientBrushStatics.get_ColorInterpolationModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.gradientstopsproperty)
    public class var gradientStopsProperty : WinUI.DependencyProperty! {
        get { try! _IGradientBrushStatics.get_GradientStopsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.mappingmodeproperty)
    public class var mappingModeProperty : WinUI.DependencyProperty! {
        get { try! _IGradientBrushStatics.get_MappingModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.spreadmethodproperty)
    public class var spreadMethodProperty : WinUI.DependencyProperty! {
        get { try! _IGradientBrushStatics.get_SpreadMethodPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.colorinterpolationmode)
    public var colorInterpolationMode : ColorInterpolationMode {
        get { try! _default.get_ColorInterpolationModeImpl() }
        set { try! _default.put_ColorInterpolationModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.gradientstops)
    public var gradientStops : GradientStopCollection! {
        get { try! _default.get_GradientStopsImpl() }
        set { try! _default.put_GradientStopsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.mappingmode)
    public var mappingMode : BrushMappingMode {
        get { try! _default.get_MappingModeImpl() }
        set { try! _default.put_MappingModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientbrush.spreadmethod)
    public var spreadMethod : GradientSpreadMethod {
        get { try! _default.get_SpreadMethodImpl() }
        set { try! _default.put_SpreadMethodImpl(newValue) }
    }

    internal enum IBrushOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IBrushOverrides
        internal typealias Class = GradientBrush
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGradientBrush
        }
    }
    internal typealias Composable = IBrushOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstop)
public final class GradientStop : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGradientStop
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop>?) -> GradientStop? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.GradientStop")))
    }

    private static let _IGradientStopStatics: __ABI_Microsoft_UI_Xaml_Media.IGradientStopStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.GradientStop"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstop.colorproperty)
    public static var colorProperty : WinUI.DependencyProperty! {
        get { try! _IGradientStopStatics.get_ColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstop.offsetproperty)
    public static var offsetProperty : WinUI.DependencyProperty! {
        get { try! _IGradientStopStatics.get_OffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstop.color)
    public var color : UWP.Color {
        get { try! _default.get_ColorImpl() }
        set { try! _default.put_ColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstop.offset)
    public var offset : Double {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection)
public final class GradientStopCollection : WinRTClass, IVector, IIterable {
    public typealias T = GradientStop?
    private typealias SwiftABI = WinUI.IVectorGradientStop
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CGradientStop
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CGradientStop>?) -> GradientStopCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.GradientStopCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.getat)
    public func getAt(_ index: UInt32) -> GradientStop? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<GradientStop?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.indexof)
    public func indexOf(_ value: GradientStop?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.setat)
    public func setAt(_ index: UInt32, _ value: GradientStop?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: GradientStop?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.append)
    public func append(_ value: GradientStop?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableGradientStop! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.gradientstopcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<GradientStop?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.imagesource)
open class ImageSource : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IImageSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIImageSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIImageSource>?) -> ImageSource? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IImageSourceFactory : __ABI_Microsoft_UI_Xaml_Media.IImageSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.ImageSource"))

    internal enum IImageSource : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ImageSource
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIImageSource
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IImageSource
        }
    }
    internal typealias Composable = IImageSource
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.linesegment)
public final class LineSegment : WinUI.PathSegment {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ILineSegment
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CILineSegment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CILineSegment>?) -> LineSegment? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.LineSegment")))
    }

    private static let _ILineSegmentStatics: __ABI_Microsoft_UI_Xaml_Media.ILineSegmentStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.LineSegment"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.linesegment.pointproperty)
    public static var pointProperty : WinUI.DependencyProperty! {
        get { try! _ILineSegmentStatics.get_PointPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.linesegment.point)
    public var point : WindowsFoundation.Point {
        get { try! _default.get_PointImpl() }
        set { try! _default.put_PointImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.lineargradientbrush)
public final class LinearGradientBrush : WinUI.GradientBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ILinearGradientBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush>?) -> LinearGradientBrush? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.LinearGradientBrush")))
    }

    private static let _ILinearGradientBrushFactory: __ABI_Microsoft_UI_Xaml_Media.ILinearGradientBrushFactory = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.LinearGradientBrush"))
    public init(_ gradientStopCollection: GradientStopCollection!, _ angle: Double) {
        super.init(fromAbi: try! Self._ILinearGradientBrushFactory.CreateInstanceWithGradientStopCollectionAndAngleImpl(gradientStopCollection, angle))
    }

    private static let _ILinearGradientBrushStatics: __ABI_Microsoft_UI_Xaml_Media.ILinearGradientBrushStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.LinearGradientBrush"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.lineargradientbrush.endpointproperty)
    public static var endPointProperty : WinUI.DependencyProperty! {
        get { try! _ILinearGradientBrushStatics.get_EndPointPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.lineargradientbrush.startpointproperty)
    public static var startPointProperty : WinUI.DependencyProperty! {
        get { try! _ILinearGradientBrushStatics.get_StartPointPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.lineargradientbrush.endpoint)
    public var endPoint : WindowsFoundation.Point {
        get { try! _default.get_EndPointImpl() }
        set { try! _default.put_EndPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.lineargradientbrush.startpoint)
    public var startPoint : WindowsFoundation.Point {
        get { try! _default.get_StartPointImpl() }
        set { try! _default.put_StartPointImpl(newValue) }
    }

    internal enum IBrushOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IBrushOverrides
        internal typealias Class = LinearGradientBrush
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ILinearGradientBrush
        }
    }
    internal typealias Composable = IBrushOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.mediatransportcontrolsthumbnailrequestedeventargs)
public final class MediaTransportControlsThumbnailRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IMediaTransportControlsThumbnailRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIMediaTransportControlsThumbnailRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIMediaTransportControlsThumbnailRequestedEventArgs>?) -> MediaTransportControlsThumbnailRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.mediatransportcontrolsthumbnailrequestedeventargs.setthumbnailimage)
    public func setThumbnailImage(_ source: UWP.AnyIInputStream!) throws {
        try _default.SetThumbnailImageImpl(source)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.mediatransportcontrolsthumbnailrequestedeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.micabackdrop)
open class MicaBackdrop : WinUI.SystemBackdrop {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IMicaBackdrop
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIMicaBackdrop
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIMicaBackdrop>?) -> MicaBackdrop? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMicaBackdropFactory : __ABI_Microsoft_UI_Xaml_Media.IMicaBackdropFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.MicaBackdrop"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMicaBackdropFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMicaBackdropStatics: __ABI_Microsoft_UI_Xaml_Media.IMicaBackdropStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.MicaBackdrop"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.micabackdrop.kindproperty)
    public class var kindProperty : WinUI.DependencyProperty! {
        get { try! _IMicaBackdropStatics.get_KindPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.micabackdrop.kind)
    public var kind : WinAppSDK.MicaKind {
        get { try! _default.get_KindImpl() }
        set { try! _default.put_KindImpl(newValue) }
    }

    internal enum ISystemBackdropOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CISystemBackdropOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ISystemBackdropOverrides
        internal typealias Class = MicaBackdrop
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIMicaBackdrop
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IMicaBackdrop
        }
    }
    internal typealias Composable = ISystemBackdropOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure)
public final class PathFigure : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IPathFigure
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPathFigure
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPathFigure>?) -> PathFigure? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.PathFigure")))
    }

    private static let _IPathFigureStatics: __ABI_Microsoft_UI_Xaml_Media.IPathFigureStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.PathFigure"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.isclosedproperty)
    public static var isClosedProperty : WinUI.DependencyProperty! {
        get { try! _IPathFigureStatics.get_IsClosedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.isfilledproperty)
    public static var isFilledProperty : WinUI.DependencyProperty! {
        get { try! _IPathFigureStatics.get_IsFilledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.segmentsproperty)
    public static var segmentsProperty : WinUI.DependencyProperty! {
        get { try! _IPathFigureStatics.get_SegmentsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.startpointproperty)
    public static var startPointProperty : WinUI.DependencyProperty! {
        get { try! _IPathFigureStatics.get_StartPointPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.isclosed)
    public var isClosed : Bool {
        get { try! _default.get_IsClosedImpl() }
        set { try! _default.put_IsClosedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.isfilled)
    public var isFilled : Bool {
        get { try! _default.get_IsFilledImpl() }
        set { try! _default.put_IsFilledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.segments)
    public var segments : PathSegmentCollection! {
        get { try! _default.get_SegmentsImpl() }
        set { try! _default.put_SegmentsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigure.startpoint)
    public var startPoint : WindowsFoundation.Point {
        get { try! _default.get_StartPointImpl() }
        set { try! _default.put_StartPointImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection)
public final class PathFigureCollection : WinRTClass, IVector, IIterable {
    public typealias T = PathFigure?
    private typealias SwiftABI = WinUI.IVectorPathFigure
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CPathFigure
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CPathFigure>?) -> PathFigureCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.PathFigureCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.getat)
    public func getAt(_ index: UInt32) -> PathFigure? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<PathFigure?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.indexof)
    public func indexOf(_ value: PathFigure?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.setat)
    public func setAt(_ index: UInt32, _ value: PathFigure?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: PathFigure?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.append)
    public func append(_ value: PathFigure?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterablePathFigure! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathfigurecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<PathFigure?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathgeometry)
public final class PathGeometry : WinUI.Geometry {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IPathGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPathGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPathGeometry>?) -> PathGeometry? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.PathGeometry")))
    }

    private static let _IPathGeometryStatics: __ABI_Microsoft_UI_Xaml_Media.IPathGeometryStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.PathGeometry"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathgeometry.figuresproperty)
    public static var figuresProperty : WinUI.DependencyProperty! {
        get { try! _IPathGeometryStatics.get_FiguresPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathgeometry.fillruleproperty)
    public static var fillRuleProperty : WinUI.DependencyProperty! {
        get { try! _IPathGeometryStatics.get_FillRulePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathgeometry.figures)
    public var figures : PathFigureCollection! {
        get { try! _default.get_FiguresImpl() }
        set { try! _default.put_FiguresImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathgeometry.fillrule)
    public var fillRule : FillRule {
        get { try! _default.get_FillRuleImpl() }
        set { try! _default.put_FillRuleImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegment)
open class PathSegment : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IPathSegment
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPathSegment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPathSegment>?) -> PathSegment? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPathSegmentFactory : __ABI_Microsoft_UI_Xaml_Media.IPathSegmentFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.PathSegment"))

    internal enum IPathSegment : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = PathSegment
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPathSegment
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IPathSegment
        }
    }
    internal typealias Composable = IPathSegment
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection)
public final class PathSegmentCollection : WinRTClass, IVector, IIterable {
    public typealias T = PathSegment?
    private typealias SwiftABI = WinUI.IVectorPathSegment
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CPathSegment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CPathSegment>?) -> PathSegmentCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.PathSegmentCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.getat)
    public func getAt(_ index: UInt32) -> PathSegment? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<PathSegment?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.indexof)
    public func indexOf(_ value: PathSegment?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.setat)
    public func setAt(_ index: UInt32, _ value: PathSegment?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: PathSegment?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.append)
    public func append(_ value: PathSegment?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterablePathSegment! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pathsegmentcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<PathSegment?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection)
public final class PointCollection : WinRTClass, IVector, IIterable {
    public typealias T = WindowsFoundation.Point
    private typealias SwiftABI = WinUI.IVectorPoint
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CPoint>?) -> PointCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.PointCollection")))
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.getat)
    public func getAt(_ index: UInt32) -> WindowsFoundation.Point {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<WindowsFoundation.Point>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.indexof)
    public func indexOf(_ value: WindowsFoundation.Point, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.setat)
    public func setAt(_ index: UInt32, _ value: WindowsFoundation.Point) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: WindowsFoundation.Point) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.append)
    public func append(_ value: WindowsFoundation.Point) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterablePoint! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.pointcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.Point>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.polybeziersegment)
public final class PolyBezierSegment : WinUI.PathSegment {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IPolyBezierSegment
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPolyBezierSegment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIPolyBezierSegment>?) -> PolyBezierSegment? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.PolyBezierSegment")))
    }

    private static let _IPolyBezierSegmentStatics: __ABI_Microsoft_UI_Xaml_Media.IPolyBezierSegmentStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.PolyBezierSegment"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.polybeziersegment.pointsproperty)
    public static var pointsProperty : WinUI.DependencyProperty! {
        get { try! _IPolyBezierSegmentStatics.get_PointsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.polybeziersegment.points)
    public var points : PointCollection! {
        get { try! _default.get_PointsImpl() }
        set { try! _default.put_PointsImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.projection)
open class Projection : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IProjection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIProjection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIProjection>?) -> Projection? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IProjectionFactory : __ABI_Microsoft_UI_Xaml_Media.IProjectionFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Projection"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IProjectionFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IProjection : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = Projection
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIProjection
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IProjection
        }
    }
    internal typealias Composable = IProjection
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.rectanglegeometry)
public final class RectangleGeometry : WinUI.Geometry {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IRectangleGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry>?) -> RectangleGeometry? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.RectangleGeometry")))
    }

    private static let _IRectangleGeometryStatics: __ABI_Microsoft_UI_Xaml_Media.IRectangleGeometryStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.RectangleGeometry"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.rectanglegeometry.rectproperty)
    public static var rectProperty : WinUI.DependencyProperty! {
        get { try! _IRectangleGeometryStatics.get_RectPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.rectanglegeometry.rect)
    public var rect : WindowsFoundation.Rect {
        get { try! _default.get_RectImpl() }
        set { try! _default.put_RectImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.renderedeventargs)
public final class RenderedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IRenderedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIRenderedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIRenderedEventArgs>?) -> RenderedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.renderedeventargs.frameduration)
    public var frameDuration : WindowsFoundation.TimeSpan {
        get { try! _default.get_FrameDurationImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.shadow)
open class Shadow : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IShadow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIShadow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIShadow>?) -> Shadow? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IShadowFactory : __ABI_Microsoft_UI_Xaml_Media.IShadowFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Shadow"))

    internal enum IShadow : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = Shadow
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIShadow
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IShadow
        }
    }
    internal typealias Composable = IShadow
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.solidcolorbrush)
public final class SolidColorBrush : WinUI.Brush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ISolidColorBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>?) -> SolidColorBrush? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.SolidColorBrush")))
    }

    private static let _ISolidColorBrushFactory: __ABI_Microsoft_UI_Xaml_Media.ISolidColorBrushFactory = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.SolidColorBrush"))
    public init(_ color: UWP.Color) {
        super.init(fromAbi: try! Self._ISolidColorBrushFactory.CreateInstanceWithColorImpl(color))
    }

    private static let _ISolidColorBrushStatics: __ABI_Microsoft_UI_Xaml_Media.ISolidColorBrushStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.SolidColorBrush"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.solidcolorbrush.colorproperty)
    public static var colorProperty : WinUI.DependencyProperty! {
        get { try! _ISolidColorBrushStatics.get_ColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.solidcolorbrush.color)
    public var color : UWP.Color {
        get { try! _default.get_ColorImpl() }
        set { try! _default.put_ColorImpl(newValue) }
    }

    internal enum IBrushOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IBrushOverrides
        internal typealias Class = SolidColorBrush
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ISolidColorBrush
        }
    }
    internal typealias Composable = IBrushOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.systembackdrop)
open class SystemBackdrop : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ISystemBackdrop
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CISystemBackdrop
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CISystemBackdrop>?) -> SystemBackdrop? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media.ISystemBackdropOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media.ISystemBackdropOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _ISystemBackdropFactory : __ABI_Microsoft_UI_Xaml_Media.ISystemBackdropFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.SystemBackdrop"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISystemBackdropFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.systembackdrop.getdefaultsystembackdropconfiguration)
    public func getDefaultSystemBackdropConfiguration(_ target: WinAppSDK.AnyICompositionSupportsSystemBackdrop!, _ xamlRoot: WinUI.XamlRoot!) throws -> WinAppSDK.SystemBackdropConfiguration! {
        try _default.GetDefaultSystemBackdropConfigurationImpl(target, xamlRoot)
    }

    private lazy var _ISystemBackdropOverrides: __ABI_Microsoft_UI_Xaml_Media.ISystemBackdropOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.systembackdrop.ontargetconnected)
    open func onTargetConnected(_ connectedTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop!, _ xamlRoot: WinUI.XamlRoot!) throws {
        try _ISystemBackdropOverrides.OnTargetConnectedImpl(connectedTarget, xamlRoot)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.systembackdrop.ontargetdisconnected)
    open func onTargetDisconnected(_ disconnectedTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop!) throws {
        try _ISystemBackdropOverrides.OnTargetDisconnectedImpl(disconnectedTarget)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.systembackdrop.ondefaultsystembackdropconfigurationchanged)
    open func onDefaultSystemBackdropConfigurationChanged(_ target: WinAppSDK.AnyICompositionSupportsSystemBackdrop!, _ xamlRoot: WinUI.XamlRoot!) throws {
        try _ISystemBackdropOverrides.OnDefaultSystemBackdropConfigurationChangedImpl(target, xamlRoot)
    }

    internal enum ISystemBackdropOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CISystemBackdropOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ISystemBackdropOverrides
        internal typealias Class = SystemBackdrop
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CISystemBackdrop
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ISystemBackdrop
        }
    }
    internal typealias Composable = ISystemBackdropOverrides
    deinit {
        _default = nil
        _ISystemBackdropOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.themeshadow)
open class ThemeShadow : WinUI.Shadow {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IThemeShadow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIThemeShadow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIThemeShadow>?) -> ThemeShadow? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IThemeShadowFactory : __ABI_Microsoft_UI_Xaml_Media.IThemeShadowFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.ThemeShadow"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IThemeShadowFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.themeshadow.receivers)
    public var receivers : WinUI.UIElementWeakCollection! {
        get { try! _default.get_ReceiversImpl() }
    }

    internal enum IThemeShadow : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ThemeShadow
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIThemeShadow
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IThemeShadow
        }
    }
    internal typealias Composable = IThemeShadow
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.transform)
open class Transform : WinUI.GeneralTransform {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ITransform
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CITransform
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CITransform>?) -> Transform? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITransformFactory : __ABI_Microsoft_UI_Xaml_Media.ITransformFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Transform"))

    internal enum IGeneralTransformOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformOverrides
        internal typealias Class = Transform
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CITransform
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ITransform
        }
    }
    internal typealias Composable = IGeneralTransformOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.translatetransform)
public final class TranslateTransform : WinUI.Transform {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ITranslateTransform
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CITranslateTransform
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CITranslateTransform>?) -> TranslateTransform? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Media.TranslateTransform")))
    }

    private static let _ITranslateTransformStatics: __ABI_Microsoft_UI_Xaml_Media.ITranslateTransformStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.TranslateTransform"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.translatetransform.xproperty)
    public static var xproperty : WinUI.DependencyProperty! {
        get { try! _ITranslateTransformStatics.get_XPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.translatetransform.yproperty)
    public static var yproperty : WinUI.DependencyProperty! {
        get { try! _ITranslateTransformStatics.get_YPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.translatetransform.x)
    public var x : Double {
        get { try! _default.get_XImpl() }
        set { try! _default.put_XImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.translatetransform.y)
    public var y : Double {
        get { try! _default.get_YImpl() }
        set { try! _default.put_YImpl(newValue) }
    }

    internal enum IGeneralTransformOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IGeneralTransformOverrides
        internal typealias Class = TranslateTransform
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CITranslateTransform
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.ITranslateTransform
        }
    }
    internal typealias Composable = IGeneralTransformOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper)
public final class VisualTreeHelper : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IVisualTreeHelper
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIVisualTreeHelper
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIVisualTreeHelper>?) -> VisualTreeHelper? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IVisualTreeHelperStatics: __ABI_Microsoft_UI_Xaml_Media.IVisualTreeHelperStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.VisualTreeHelper"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.findelementsinhostcoordinates)
    public static func findElementsInHostCoordinates(_ intersectingPoint: WindowsFoundation.Point, _ subtree: WinUI.UIElement!) -> WindowsFoundation.AnyIIterable<WinUI.UIElement?>! {
        return try! _IVisualTreeHelperStatics.FindElementsInHostCoordinatesPointImpl(intersectingPoint, subtree)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.findelementsinhostcoordinates)
    public static func findElementsInHostCoordinates(_ intersectingRect: WindowsFoundation.Rect, _ subtree: WinUI.UIElement!) -> WindowsFoundation.AnyIIterable<WinUI.UIElement?>! {
        return try! _IVisualTreeHelperStatics.FindElementsInHostCoordinatesRectImpl(intersectingRect, subtree)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.findelementsinhostcoordinates)
    public static func findElementsInHostCoordinates(_ intersectingPoint: WindowsFoundation.Point, _ subtree: WinUI.UIElement!, _ includeAllElements: Bool) -> WindowsFoundation.AnyIIterable<WinUI.UIElement?>! {
        return try! _IVisualTreeHelperStatics.FindAllElementsInHostCoordinatesPointImpl(intersectingPoint, subtree, includeAllElements)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.findelementsinhostcoordinates)
    public static func findElementsInHostCoordinates(_ intersectingRect: WindowsFoundation.Rect, _ subtree: WinUI.UIElement!, _ includeAllElements: Bool) -> WindowsFoundation.AnyIIterable<WinUI.UIElement?>! {
        return try! _IVisualTreeHelperStatics.FindAllElementsInHostCoordinatesRectImpl(intersectingRect, subtree, includeAllElements)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.getchild)
    public static func getChild(_ reference: WinUI.DependencyObject!, _ childIndex: Int32) -> WinUI.DependencyObject! {
        return try! _IVisualTreeHelperStatics.GetChildImpl(reference, childIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.getchildrencount)
    public static func getChildrenCount(_ reference: WinUI.DependencyObject!) -> Int32 {
        return try! _IVisualTreeHelperStatics.GetChildrenCountImpl(reference)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.getparent)
    public static func getParent(_ reference: WinUI.DependencyObject!) -> WinUI.DependencyObject! {
        return try! _IVisualTreeHelperStatics.GetParentImpl(reference)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.disconnectchildrenrecursive)
    public static func disconnectChildrenRecursive(_ element: WinUI.UIElement!) {
        try! _IVisualTreeHelperStatics.DisconnectChildrenRecursiveImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.getopenpopups)
    public static func getOpenPopups(_ window: WinUI.Window!) -> WindowsFoundation.AnyIVectorView<WinUI.Popup?>! {
        return try! _IVisualTreeHelperStatics.GetOpenPopupsImpl(window)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.visualtreehelper.getopenpopupsforxamlroot)
    public static func getOpenPopupsForXamlRoot(_ xamlRoot: WinUI.XamlRoot!) -> WindowsFoundation.AnyIVectorView<WinUI.Popup?>! {
        return try! _IVisualTreeHelperStatics.GetOpenPopupsForXamlRootImpl(xamlRoot)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase)
open class XamlCompositionBrushBase : WinUI.Brush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlCompositionBrushBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlCompositionBrushBase>?) -> XamlCompositionBrushBase? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IXamlCompositionBrushBaseFactory : __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.XamlCompositionBrushBase"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IXamlCompositionBrushBaseFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IXamlCompositionBrushBaseStatics: __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.XamlCompositionBrushBase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase.fallbackcolorproperty)
    public class var fallbackColorProperty : WinUI.DependencyProperty! {
        get { try! _IXamlCompositionBrushBaseStatics.get_FallbackColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase.fallbackcolor)
    public var fallbackColor : UWP.Color {
        get { try! _default.get_FallbackColorImpl() }
        set { try! _default.put_FallbackColorImpl(newValue) }
    }

    private lazy var _IXamlCompositionBrushBaseProtected: __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase.compositionbrush)
    public var compositionBrush : WinAppSDK.CompositionBrush! {
        get { try! _IXamlCompositionBrushBaseProtected.get_CompositionBrushImpl() }
        set { try! _IXamlCompositionBrushBaseProtected.put_CompositionBrushImpl(newValue) }
    }

    private lazy var _IXamlCompositionBrushBaseOverrides: __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase.onconnected)
    open func onConnected() throws {
        try _IXamlCompositionBrushBaseOverrides.OnConnectedImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamlcompositionbrushbase.ondisconnected)
    open func onDisconnected() throws {
        try _IXamlCompositionBrushBaseOverrides.OnDisconnectedImpl()
    }

    internal enum IXamlCompositionBrushBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlCompositionBrushBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBaseOverrides
        internal typealias Class = XamlCompositionBrushBase
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlCompositionBrushBase
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IXamlCompositionBrushBase
        }
    }
    internal typealias Composable = IXamlCompositionBrushBaseOverrides
    deinit {
        _default = nil
        _IXamlCompositionBrushBaseProtected = nil
        _IXamlCompositionBrushBaseOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight)
open class XamlLight : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IXamlLight
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight>?) -> XamlLight? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Media.IXamlLightOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Media.IXamlLightOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IXamlLightFactory : __ABI_Microsoft_UI_Xaml_Media.IXamlLightFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.XamlLight"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IXamlLightFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IXamlLightStatics: __ABI_Microsoft_UI_Xaml_Media.IXamlLightStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.XamlLight"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.addtargetelement)
    public class func addTargetElement(_ lightId: String, _ element: WinUI.UIElement!) {
        try! _IXamlLightStatics.AddTargetElementImpl(lightId, element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.removetargetelement)
    public class func removeTargetElement(_ lightId: String, _ element: WinUI.UIElement!) {
        try! _IXamlLightStatics.RemoveTargetElementImpl(lightId, element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.addtargetbrush)
    public class func addTargetBrush(_ lightId: String, _ brush: Brush!) {
        try! _IXamlLightStatics.AddTargetBrushImpl(lightId, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.removetargetbrush)
    public class func removeTargetBrush(_ lightId: String, _ brush: Brush!) {
        try! _IXamlLightStatics.RemoveTargetBrushImpl(lightId, brush)
    }

    private lazy var _IXamlLightProtected: __ABI_Microsoft_UI_Xaml_Media.IXamlLightProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.compositionlight)
    public var compositionLight : WinAppSDK.CompositionLight! {
        get { try! _IXamlLightProtected.get_CompositionLightImpl() }
        set { try! _IXamlLightProtected.put_CompositionLightImpl(newValue) }
    }

    private lazy var _IXamlLightOverrides: __ABI_Microsoft_UI_Xaml_Media.IXamlLightOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.getid)
    open func getId() throws -> String {
        try _IXamlLightOverrides.GetIdImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.onconnected)
    open func onConnected(_ newElement: WinUI.UIElement!) throws {
        try _IXamlLightOverrides.OnConnectedImpl(newElement)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.media.xamllight.ondisconnected)
    open func onDisconnected(_ oldElement: WinUI.UIElement!) throws {
        try _IXamlLightOverrides.OnDisconnectedImpl(oldElement)
    }

    internal enum IXamlLightOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IXamlLightOverrides
        internal typealias Class = XamlLight
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Media.IXamlLight
        }
    }
    internal typealias Composable = IXamlLightOverrides
    deinit {
        _default = nil
        _IXamlLightProtected = nil
        _IXamlLightOverrides = nil
    }
}

extension WinUI.BrushMappingMode {
    public static var absolute : WinUI.BrushMappingMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode_Absolute
    }
    public static var relativeToBoundingBox : WinUI.BrushMappingMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode_RelativeToBoundingBox
    }
}
extension WinUI.BrushMappingMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ColorInterpolationMode {
    public static var scRgbLinearInterpolation : WinUI.ColorInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode_ScRgbLinearInterpolation
    }
    public static var srgbLinearInterpolation : WinUI.ColorInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode_SRgbLinearInterpolation
    }
}
extension WinUI.ColorInterpolationMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ElementCompositeMode {
    public static var inherit : WinUI.ElementCompositeMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_Inherit
    }
    public static var sourceOver : WinUI.ElementCompositeMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_SourceOver
    }
    public static var minBlend : WinUI.ElementCompositeMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_MinBlend
    }
}
extension WinUI.ElementCompositeMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.FastPlayFallbackBehaviour {
    public static var skip : WinUI.FastPlayFallbackBehaviour {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFastPlayFallbackBehaviour_Skip
    }
    public static var hide : WinUI.FastPlayFallbackBehaviour {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFastPlayFallbackBehaviour_Hide
    }
    public static var disable : WinUI.FastPlayFallbackBehaviour {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFastPlayFallbackBehaviour_Disable
    }
}
extension WinUI.FastPlayFallbackBehaviour: @retroactive Hashable, @retroactive Codable {}

extension WinUI.FillRule {
    public static var evenOdd : WinUI.FillRule {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFillRule_EvenOdd
    }
    public static var nonzero : WinUI.FillRule {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFillRule_Nonzero
    }
}
extension WinUI.FillRule: @retroactive Hashable, @retroactive Codable {}

extension WinUI.GradientSpreadMethod {
    public static var pad : WinUI.GradientSpreadMethod {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Pad
    }
    public static var reflect : WinUI.GradientSpreadMethod {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Reflect
    }
    public static var `repeat` : WinUI.GradientSpreadMethod {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Repeat
    }
}
extension WinUI.GradientSpreadMethod: @retroactive Hashable, @retroactive Codable {}

extension WinUI.PenLineCap {
    public static var flat : WinUI.PenLineCap {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineCap_Flat
    }
    public static var square : WinUI.PenLineCap {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineCap_Square
    }
    public static var round : WinUI.PenLineCap {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineCap_Round
    }
    public static var triangle : WinUI.PenLineCap {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineCap_Triangle
    }
}
extension WinUI.PenLineCap: @retroactive Hashable, @retroactive Codable {}

extension WinUI.PenLineJoin {
    public static var miter : WinUI.PenLineJoin {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineJoin_Miter
    }
    public static var bevel : WinUI.PenLineJoin {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineJoin_Bevel
    }
    public static var round : WinUI.PenLineJoin {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CPenLineJoin_Round
    }
}
extension WinUI.PenLineJoin: @retroactive Hashable, @retroactive Codable {}

extension WinUI.Stretch {
    public static var none : WinUI.Stretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch_None
    }
    public static var fill : WinUI.Stretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch_Fill
    }
    public static var uniform : WinUI.Stretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch_Uniform
    }
    public static var uniformToFill : WinUI.Stretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch_UniformToFill
    }
}
extension WinUI.Stretch: @retroactive Hashable, @retroactive Codable {}


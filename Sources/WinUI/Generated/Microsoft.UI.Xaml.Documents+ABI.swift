// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink: WindowsFoundation.IID {
    .init(Data1: 0xAC09BD16, Data2: 0xCDFA, Data3: 0x54C2, Data4: ( 0x8D,0x03,0xA4,0x74,0x18,0x15,0x45,0xB1 ))// AC09BD16-CDFA-54C2-8D03-A474181545B1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkClickEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xF8F89552, Data2: 0x873D, Data3: 0x5EF5, Data4: ( 0x82,0xBF,0xC7,0x9A,0x95,0x09,0xB0,0x7C ))// F8F89552-873D-5EF5-82BF-C79A9509B07C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics: WindowsFoundation.IID {
    .init(Data1: 0xE13598F4, Data2: 0x7BC7, Data3: 0x5AB9, Data4: ( 0x88,0x5B,0x70,0xF3,0x2F,0x8C,0x95,0x31 ))// E13598F4-7BC7-5AB9-885B-70F32F8C9531
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIInline: WindowsFoundation.IID {
    .init(Data1: 0x813D427A, Data2: 0x8980, Data3: 0x5A79, Data4: ( 0xA8,0xFA,0xF2,0x79,0x19,0xCF,0xB2,0x4F ))// 813D427A-8980-5A79-A8FA-F27919CFB24F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory: WindowsFoundation.IID {
    .init(Data1: 0xFD253A36, Data2: 0xFA2B, Data3: 0x5B30, Data4: ( 0x89,0xA8,0x9F,0x57,0x78,0x71,0xEC,0x07 ))// FD253A36-FA2B-5B30-89A8-9F577871EC07
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRun: WindowsFoundation.IID {
    .init(Data1: 0x1F905239, Data2: 0x37CB, Data3: 0x590B, Data4: ( 0x91,0x32,0x3F,0xFB,0x77,0x41,0x90,0x6E ))// 1F905239-37CB-590B-9132-3FFB7741906E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRunStatics: WindowsFoundation.IID {
    .init(Data1: 0x051B3C5B, Data2: 0x7600, Data3: 0x51A5, Data4: ( 0x80,0xC5,0x93,0xEB,0x50,0xFD,0x68,0x4F ))// 051B3C5B-7600-51A5-80C5-93EB50FD684F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CISpan: WindowsFoundation.IID {
    .init(Data1: 0x91B93D4D, Data2: 0x4E28, Data3: 0x57B9, Data4: ( 0xBF,0xFB,0x35,0x66,0xC2,0xA3,0xC2,0xA1 ))// 91B93D4D-4E28-57B9-BFFB-3566C2A3C2A1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CISpanFactory: WindowsFoundation.IID {
    .init(Data1: 0xA6E87C16, Data2: 0xC175, Data3: 0x55C8, Data4: ( 0xBB,0xD3,0xCE,0x40,0xF9,0xD0,0xA6,0x80 ))// A6E87C16-C175-55C8-BBD3-CE40F9D0A680
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement: WindowsFoundation.IID {
    .init(Data1: 0xA122BA22, Data2: 0x833F, Data3: 0x5220, Data4: ( 0xA4,0x7E,0x6C,0xD5,0x07,0x53,0x1A,0xBE ))// A122BA22-833F-5220-A47E-6CD507531ABE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementFactory: WindowsFoundation.IID {
    .init(Data1: 0xDF51FB95, Data2: 0xA5E6, Data3: 0x5B16, Data4: ( 0x8E,0x88,0x9F,0x7C,0xBF,0xA2,0x34,0xB1 ))// DF51FB95-A5E6-5B16-8E88-9F7CBFA234B1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementOverrides: WindowsFoundation.IID {
    .init(Data1: 0x41B01380, Data2: 0xE49F, Data3: 0x5FDA, Data4: ( 0x8C,0x72,0xAC,0xC1,0xAC,0x1E,0x91,0xDF ))// 41B01380-E49F-5FDA-8C72-ACC1AC1E91DF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics: WindowsFoundation.IID {
    .init(Data1: 0xC9B55919, Data2: 0xE1FE, Data3: 0x5ACD, Data4: ( 0xBA,0xC7,0xC9,0xD7,0xF4,0x13,0xB3,0x5C ))// C9B55919-E1FE-5ACD-BAC7-C9D7F413B35C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter: WindowsFoundation.IID {
    .init(Data1: 0xB756E861, Data2: 0x1D2B, Data3: 0x5F6F, Data4: ( 0x81,0xFD,0xC5,0x1A,0x5B,0xC0,0x68,0xFF ))// B756E861-1D2B-5F6F-81FD-C51A5BC068FF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory: WindowsFoundation.IID {
    .init(Data1: 0x69C7311F, Data2: 0xC019, Data3: 0x5B93, Data4: ( 0xB5,0x11,0x81,0x41,0x85,0x43,0xBA,0xB7 ))// 69C7311F-C019-5B93-B511-81418543BAB7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterStatics: WindowsFoundation.IID {
    .init(Data1: 0x4975047A, Data2: 0x87AD, Data3: 0x51A2, Data4: ( 0x97,0x7C,0xE7,0x71,0xDE,0x4F,0x40,0x35 ))// 4975047A-87AD-51A2-977C-E771DE4F4035
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer: WindowsFoundation.IID {
    .init(Data1: 0x842EB385, Data2: 0xEE41, Data3: 0x5930, Data4: ( 0x97,0x9B,0x43,0x8F,0xA7,0x52,0x5A,0x51 ))// 842EB385-EE41-5930-979B-438FA7525A51
}

public enum __ABI_Microsoft_UI_Xaml_Documents {
    public class IHyperlink: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink }

        internal func get_NavigateUriImpl() throws -> WindowsFoundation.Uri? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigateUri(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_NavigateUriImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NavigateUri(pThis, RawPointer(value)))
            }
        }

        internal func get_UnderlineStyleImpl() throws -> WinUI.UnderlineStyle {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CUnderlineStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlineStyle(pThis, &value))
            }
            return value
        }

        internal func put_UnderlineStyleImpl(_ value: WinUI.UnderlineStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UnderlineStyle(pThis, value))
            }
        }

        internal func get_XYFocusLeftImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusLeft(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_XYFocusLeftImpl(_ value: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusLeft(pThis, RawPointer(value)))
            }
        }

        internal func get_XYFocusRightImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusRight(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_XYFocusRightImpl(_ value: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusRight(pThis, RawPointer(value)))
            }
        }

        internal func get_XYFocusUpImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusUp(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_XYFocusUpImpl(_ value: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusUp(pThis, RawPointer(value)))
            }
        }

        internal func get_XYFocusDownImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusDown(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_XYFocusDownImpl(_ value: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusDown(pThis, RawPointer(value)))
            }
        }

        internal func get_ElementSoundModeImpl() throws -> WinUI.ElementSoundMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundMode(pThis, &value))
            }
            return value
        }

        internal func put_ElementSoundModeImpl(_ value: WinUI.ElementSoundMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ElementSoundMode(pThis, value))
            }
        }

        internal func get_FocusStateImpl() throws -> WinUI.FocusState {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CFocusState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusState(pThis, &value))
            }
            return value
        }

        internal func get_XYFocusUpNavigationStrategyImpl() throws -> WinUI.XYFocusNavigationStrategy {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusUpNavigationStrategy(pThis, &value))
            }
            return value
        }

        internal func put_XYFocusUpNavigationStrategyImpl(_ value: WinUI.XYFocusNavigationStrategy) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusUpNavigationStrategy(pThis, value))
            }
        }

        internal func get_XYFocusDownNavigationStrategyImpl() throws -> WinUI.XYFocusNavigationStrategy {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusDownNavigationStrategy(pThis, &value))
            }
            return value
        }

        internal func put_XYFocusDownNavigationStrategyImpl(_ value: WinUI.XYFocusNavigationStrategy) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusDownNavigationStrategy(pThis, value))
            }
        }

        internal func get_XYFocusLeftNavigationStrategyImpl() throws -> WinUI.XYFocusNavigationStrategy {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusLeftNavigationStrategy(pThis, &value))
            }
            return value
        }

        internal func put_XYFocusLeftNavigationStrategyImpl(_ value: WinUI.XYFocusNavigationStrategy) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusLeftNavigationStrategy(pThis, value))
            }
        }

        internal func get_XYFocusRightNavigationStrategyImpl() throws -> WinUI.XYFocusNavigationStrategy {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusRightNavigationStrategy(pThis, &value))
            }
            return value
        }

        internal func put_XYFocusRightNavigationStrategyImpl(_ value: WinUI.XYFocusNavigationStrategy) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusRightNavigationStrategy(pThis, value))
            }
        }

        internal func get_IsTabStopImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTabStop(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsTabStopImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTabStop(pThis, .init(from: value)))
            }
        }

        internal func get_TabIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabIndex(pThis, &value))
            }
            return value
        }

        internal func put_TabIndexImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TabIndex(pThis, value))
            }
        }

        internal func add_ClickImpl(_ handler: TypedEventHandler<WinUI.Hyperlink?, WinUI.HyperlinkClickEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CDocuments__CHyperlink___x_ABI_CMicrosoft__CUI__CXaml__CDocuments__CHyperlinkClickEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Click(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Click(pThis, token))
            }
        }

        internal func add_GotFocusImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_GotFocus(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_GotFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GotFocus(pThis, token))
            }
        }

        internal func add_LostFocusImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_LostFocus(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_LostFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LostFocus(pThis, token))
            }
        }

        internal func FocusImpl(_ value: WinUI.FocusState) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Focus(pThis, value, &result))
            }
            return .init(from: result)
        }

    }

    public class IHyperlinkClickEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkClickEventArgs }

    }

    public class IHyperlinkStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics }

        internal func get_NavigateUriPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigateUriProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_UnderlineStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlineStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_XYFocusLeftPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusLeftProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_XYFocusRightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusRightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_XYFocusUpPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusUpProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_XYFocusDownPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusDownProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ElementSoundModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FocusStatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusStateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_XYFocusUpNavigationStrategyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusUpNavigationStrategyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_XYFocusDownNavigationStrategyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusDownNavigationStrategyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_XYFocusLeftNavigationStrategyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusLeftNavigationStrategyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_XYFocusRightNavigationStrategyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusRightNavigationStrategyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTabStopPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTabStopProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TabIndexPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabIndexProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IInline: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIInline }

    }

    public class IInlineFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Inline.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IInline {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IInline(value!)
        }

    }

    public class IRun: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRun }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRun.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRun.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal func get_FlowDirectionImpl() throws -> WinUI.FlowDirection {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CFlowDirection = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRun.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlowDirection(pThis, &value))
            }
            return value
        }

        internal func put_FlowDirectionImpl(_ value: WinUI.FlowDirection) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRun.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FlowDirection(pThis, value))
            }
        }

    }

    public class IRunStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRunStatics }

        internal func get_FlowDirectionPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRunStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlowDirectionProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ISpan: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CISpan }

        internal func get_InlinesImpl() throws -> WinUI.InlineCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CISpan.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Inlines(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_InlinesImpl(_ value: WinUI.InlineCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CISpan.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Inlines(pThis, RawPointer(value)))
            }
        }

    }

    public class ISpanFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CISpanFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Span.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISpan {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CISpanFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISpan(value!)
        }

    }

    public class ITextElement: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_FontSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        internal func put_FontSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        internal func get_FontFamilyImpl() throws -> WinUI.FontFamily? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FontFamilyImpl(_ value: WinUI.FontFamily?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, RawPointer(value)))
            }
        }

        internal func get_FontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_FontWeightImpl(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        internal func get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal func put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal func get_FontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, &value))
            }
            return value
        }

        internal func put_FontStretchImpl(_ value: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
            }
        }

        internal func get_CharacterSpacingImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, &value))
            }
            return value
        }

        internal func put_CharacterSpacingImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
            }
        }

        internal func get_ForegroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

        internal func get_LanguageImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LanguageImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, _value.get()))
            }
        }

        internal func get_IsTextScaleFactorEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsTextScaleFactorEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_TextDecorationsImpl() throws -> UWP.TextDecorations {
            var value: __x_ABI_CWindows_CUI_CText_CTextDecorations = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextDecorations(pThis, &value))
            }
            return value
        }

        internal func put_TextDecorationsImpl(_ value: UWP.TextDecorations) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextDecorations(pThis, value))
            }
        }

        internal func get_ContentStartImpl() throws -> WinUI.TextPointer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentStart(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentEndImpl() throws -> WinUI.TextPointer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentEnd(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ElementStartImpl() throws -> WinUI.TextPointer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementStart(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ElementEndImpl() throws -> WinUI.TextPointer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementEnd(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AllowFocusOnInteractionImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowFocusOnInteraction(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AllowFocusOnInteractionImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowFocusOnInteraction(pThis, .init(from: value)))
            }
        }

        internal func get_AccessKeyImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessKey(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AccessKeyImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AccessKey(pThis, _value.get()))
            }
        }

        internal func get_ExitDisplayModeOnAccessKeyInvokedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExitDisplayModeOnAccessKeyInvoked(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ExitDisplayModeOnAccessKeyInvokedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExitDisplayModeOnAccessKeyInvoked(pThis, .init(from: value)))
            }
        }

        internal func get_IsAccessKeyScopeImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAccessKeyScope(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsAccessKeyScopeImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsAccessKeyScope(pThis, .init(from: value)))
            }
        }

        internal func get_AccessKeyScopeOwnerImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessKeyScopeOwner(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_AccessKeyScopeOwnerImpl(_ value: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AccessKeyScopeOwner(pThis, RawPointer(value)))
            }
        }

        internal func get_KeyTipPlacementModeImpl() throws -> WinUI.KeyTipPlacementMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipPlacementMode(pThis, &value))
            }
            return value
        }

        internal func put_KeyTipPlacementModeImpl(_ value: WinUI.KeyTipPlacementMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyTipPlacementMode(pThis, value))
            }
        }

        internal func get_KeyTipHorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipHorizontalOffset(pThis, &value))
            }
            return value
        }

        internal func put_KeyTipHorizontalOffsetImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyTipHorizontalOffset(pThis, value))
            }
        }

        internal func get_KeyTipVerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipVerticalOffset(pThis, &value))
            }
            return value
        }

        internal func put_KeyTipVerticalOffsetImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyTipVerticalOffset(pThis, value))
            }
        }

        internal func get_XamlRootImpl() throws -> WinUI.XamlRoot? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XamlRoot(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_XamlRootImpl(_ value: WinUI.XamlRoot?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XamlRoot(pThis, RawPointer(value)))
            }
        }

        internal func add_AccessKeyDisplayRequestedImpl(_ handler: TypedEventHandler<WinUI.TextElement?, WinUI.AccessKeyDisplayRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CDocuments__CTextElement___x_ABI_CMicrosoft__CUI__CXaml__CInput__CAccessKeyDisplayRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AccessKeyDisplayRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AccessKeyDisplayRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AccessKeyDisplayRequested(pThis, token))
            }
        }

        internal func add_AccessKeyDisplayDismissedImpl(_ handler: TypedEventHandler<WinUI.TextElement?, WinUI.AccessKeyDisplayDismissedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CDocuments__CTextElement___x_ABI_CMicrosoft__CUI__CXaml__CInput__CAccessKeyDisplayDismissedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AccessKeyDisplayDismissed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AccessKeyDisplayDismissedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AccessKeyDisplayDismissed(pThis, token))
            }
        }

        internal func add_AccessKeyInvokedImpl(_ handler: TypedEventHandler<WinUI.TextElement?, WinUI.AccessKeyInvokedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CDocuments__CTextElement___x_ABI_CMicrosoft__CUI__CXaml__CInput__CAccessKeyInvokedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AccessKeyInvoked(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AccessKeyInvokedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AccessKeyInvoked(pThis, token))
            }
        }

        internal func FindNameImpl(_ name: String) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindName(pThis, _name.get(), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

    }

    public class ITextElementFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementFactory }

    }

    public class ITextElementOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementOverrides }

        internal func OnDisconnectVisualChildrenImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDisconnectVisualChildren(pThis))
            }
        }

    }

    public class ITextElementStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics }

        internal func get_FontSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontFamilyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontWeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontStretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CharacterSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LanguagePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LanguageProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTextScaleFactorEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextDecorationsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextDecorationsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AllowFocusOnInteractionPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowFocusOnInteractionProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AccessKeyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessKeyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ExitDisplayModeOnAccessKeyInvokedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExitDisplayModeOnAccessKeyInvokedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsAccessKeyScopePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAccessKeyScopeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AccessKeyScopeOwnerPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessKeyScopeOwnerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_KeyTipPlacementModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipPlacementModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_KeyTipHorizontalOffsetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipHorizontalOffsetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_KeyTipVerticalOffsetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipVerticalOffsetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITextHighlighter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter }

        internal func get_RangesImpl() throws -> WindowsFoundation.AnyIVector<WinUI.TextRange>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Ranges(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CDocuments__CTextRangeWrapper.unwrapFrom(abi: value)
        }

        internal func get_ForegroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

        internal func get_BackgroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

    }

    public class ITextHighlighterFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.TextHighlighter.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ITextHighlighter {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ITextHighlighter(value!)
        }

    }

    public class ITextHighlighterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterStatics }

        internal func get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITextPointer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer }

        internal func get_ParentImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parent(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VisualParentImpl() throws -> WinUI.FrameworkElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VisualParent(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LogicalDirectionImpl() throws -> WinUI.LogicalDirection {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CLogicalDirection = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LogicalDirection(pThis, &value))
            }
            return value
        }

        internal func get_OffsetImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Offset(pThis, &value))
            }
            return value
        }

        internal func GetCharacterRectImpl(_ direction: WinUI.LogicalDirection) throws -> WindowsFoundation.Rect {
            var result: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCharacterRect(pThis, direction, &result))
            }
            return .from(abi: result)
        }

        internal func GetPositionAtOffsetImpl(_ offset: Int32, _ direction: WinUI.LogicalDirection) throws -> WinUI.TextPointer? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPositionAtOffset(pThis, offset, direction, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    internal typealias ITextElementOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.TextElement.ITextElementOverrides>
    internal static var ITextElementOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementOverridesVtbl = .init(
        QueryInterface: { ITextElementOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { ITextElementOverridesWrapper.addRef($0) },
        Release: { ITextElementOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Documents.ITextElementOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = ITextElementOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnDisconnectVisualChildren: {
            do {
                guard let __unwrapped__instance = ITextElementOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onDisconnectVisualChildren()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
}
extension __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CTextRange {
        public static func from(swift: WinUI.TextRange) -> __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CTextRange {
            .init(StartIndex: swift.startIndex, Length: swift.length)
        }
    }
    extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Documents.ITextElementOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnector: WindowsFoundation.IID {
    .init(Data1: 0xAD401812, Data2: 0xB091, Data3: 0x51D0, Data4: ( 0xB9,0x15,0x2D,0x68,0x2C,0xD2,0xAF,0x10 ))// AD401812-B091-51D0-B915-2D682CD2AF10
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponent: WindowsFoundation.IID {
    .init(Data1: 0x1743DDF7, Data2: 0x38BA, Data3: 0x58C9, Data4: ( 0xA2,0xA6,0xB0,0xAE,0x28,0x71,0x3B,0xEE ))// 1743DDF7-38BA-58C9-A2A6-B0AE28713BEE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelper: WindowsFoundation.IID {
    .init(Data1: 0x607A9BF2, Data2: 0x5A6D, Data3: 0x5C89, Data4: ( 0xA7,0x56,0xBB,0x44,0xF2,0x4F,0x28,0xF8 ))// 607A9BF2-5A6D-5C89-A756-BB44F24F28F8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics: WindowsFoundation.IID {
    .init(Data1: 0x93C7DAD3, Data2: 0xF9C2, Data3: 0x5372, Data4: ( 0x84,0xDC,0x9E,0x9C,0x46,0x61,0xD0,0x83 ))// 93C7DAD3-F9C2-5372-84DC-9E9C4661D083
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember: WindowsFoundation.IID {
    .init(Data1: 0xBF3A2913, Data2: 0x5C63, Data3: 0x50EC, Data4: ( 0x86,0x60,0x61,0x80,0x9B,0xE7,0xB9,0xB9 ))// BF3A2913-5C63-50EC-8660-61809BE7B9B9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider: WindowsFoundation.IID {
    .init(Data1: 0xA96251F0, Data2: 0x2214, Data3: 0x5D53, Data4: ( 0x87,0x46,0xCE,0x99,0xA2,0x59,0x3C,0xD7 ))// A96251F0-2214-5D53-8746-CE99A2593CD7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlReader: WindowsFoundation.IID {
    .init(Data1: 0x54CE54C8, Data2: 0x38C6, Data3: 0x50D9, Data4: ( 0xAC,0x98,0x4B,0x03,0xED,0xDB,0xDE,0x9F ))// 54CE54C8-38C6-50D9-AC98-4B03EDDBDE9F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlReaderStatics: WindowsFoundation.IID {
    .init(Data1: 0x82A4CD9E, Data2: 0x435E, Data3: 0x5AEB, Data4: ( 0x8C,0x4F,0x30,0x0C,0xEC,0xE4,0x5C,0xAE ))// 82A4CD9E-435E-5AEB-8C4F-300CECE45CAE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType: WindowsFoundation.IID {
    .init(Data1: 0xD24219DF, Data2: 0x7EC9, Data3: 0x57F1, Data4: ( 0xA2,0x7B,0x6A,0xF2,0x51,0xD9,0xC5,0xBC ))// D24219DF-7EC9-57F1-A27B-6AF251D9C5BC
}

public enum __ABI_Microsoft_UI_Xaml_Markup {
    public class IComponentConnector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnector }

        open func ConnectImpl(_ connectionId: Int32, _ target: Any?) throws {
            let targetWrapper = __ABI_.AnyWrapper(target)
            let _target = try! targetWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Connect(pThis, connectionId, _target))
            }
        }

        open func GetBindingConnectorImpl(_ connectionId: Int32, _ target: Any?) throws -> WinUI.AnyIComponentConnector? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let targetWrapper = __ABI_.AnyWrapper(target)
                let _target = try! targetWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetBindingConnector(pThis, connectionId, _target, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IComponentConnectorWrapper.unwrapFrom(abi: result)
        }

    }

    internal static var IComponentConnectorVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnectorVtbl = .init(
        QueryInterface: { IComponentConnectorWrapper.queryInterface($0, $1, $2) },
        AddRef: { IComponentConnectorWrapper.addRef($0) },
        Release: { IComponentConnectorWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Markup.IComponentConnectorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Markup.IComponentConnector").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Connect: {
            do {
                guard let __unwrapped__instance = IComponentConnectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let connectionId: Int32 = $1
                let target: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.connect(connectionId, target)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetBindingConnector: {
            do {
                guard let __unwrapped__instance = IComponentConnectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let connectionId: Int32 = $1
                let target: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                let result = try __unwrapped__instance.getBindingConnector(connectionId, target)
                let resultWrapper = __ABI_Microsoft_UI_Xaml_Markup.IComponentConnectorWrapper(result)
                resultWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IComponentConnectorWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Markup.IComponentConnectorBridge>
    public class IDataTemplateComponent: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponent }

        open func RecycleImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponent.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Recycle(pThis))
            }
        }

        open func ProcessBindingsImpl(_ item: Any?, _ itemIndex: Int32, _ phase: Int32, _ nextPhase: inout Int32) throws {
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponent.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ProcessBindings(pThis, _item, itemIndex, phase, &nextPhase))
            }
        }

    }

    internal static var IDataTemplateComponentVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponentVtbl = .init(
        QueryInterface: { IDataTemplateComponentWrapper.queryInterface($0, $1, $2) },
        AddRef: { IDataTemplateComponentWrapper.addRef($0) },
        Release: { IDataTemplateComponentWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Markup.IDataTemplateComponentWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Markup.IDataTemplateComponent").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Recycle: {
            do {
                guard let __unwrapped__instance = IDataTemplateComponentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.recycle()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ProcessBindings: {
            do {
                guard let __unwrapped__instance = IDataTemplateComponentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let itemIndex: Int32 = $2
                let phase: Int32 = $3
                var nextPhase: Int32 = 0
                try __unwrapped__instance.processBindings(item, itemIndex, phase, &nextPhase)
                $4?.initialize(to: nextPhase)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IDataTemplateComponentWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Markup.IDataTemplateComponentBridge>
    public class IXamlBindingHelper: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelper }

    }

    public class IXamlBindingHelperStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics }

        internal func get_DataTemplateComponentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataTemplateComponentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetDataTemplateComponentImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.AnyIDataTemplateComponent? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDataTemplateComponent(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IDataTemplateComponentWrapper.unwrapFrom(abi: result)
        }

        internal func SetDataTemplateComponentImpl(_ element: WinUI.DependencyObject?, _ value: WinUI.AnyIDataTemplateComponent?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IDataTemplateComponentWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDataTemplateComponent(pThis, RawPointer(element), _value))
            }
        }

        internal func SuspendRenderingImpl(_ target: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SuspendRendering(pThis, RawPointer(target)))
            }
        }

        internal func ResumeRenderingImpl(_ target: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResumeRendering(pThis, RawPointer(target)))
            }
        }

        internal func ConvertValueImpl(_ type: WinUI.TypeName, _ value: Any?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _type = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: type)
                let valueWrapper = __ABI_.AnyWrapper(value)
                let _value = try! valueWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ConvertValue(pThis, _type.val, _value, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetPropertyFromStringImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: String) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromString(pThis, _dependencyObject, RawPointer(propertyToSet), _value.get()))
            }
        }

        internal func SetPropertyFromBooleanImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: Bool) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromBoolean(pThis, _dependencyObject, RawPointer(propertyToSet), .init(from: value)))
            }
        }

        internal func SetPropertyFromChar16Impl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: Character) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromChar16(pThis, _dependencyObject, RawPointer(propertyToSet), .init(from: value)))
            }
        }

        internal func SetPropertyFromDateTimeImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: WindowsFoundation.DateTime) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromDateTime(pThis, _dependencyObject, RawPointer(propertyToSet), .from(swift: value)))
            }
        }

        internal func SetPropertyFromDoubleImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: Double) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromDouble(pThis, _dependencyObject, RawPointer(propertyToSet), value))
            }
        }

        internal func SetPropertyFromInt32Impl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: Int32) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromInt32(pThis, _dependencyObject, RawPointer(propertyToSet), value))
            }
        }

        internal func SetPropertyFromUInt32Impl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: UInt32) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromUInt32(pThis, _dependencyObject, RawPointer(propertyToSet), value))
            }
        }

        internal func SetPropertyFromInt64Impl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: Int64) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromInt64(pThis, _dependencyObject, RawPointer(propertyToSet), value))
            }
        }

        internal func SetPropertyFromUInt64Impl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: UInt64) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromUInt64(pThis, _dependencyObject, RawPointer(propertyToSet), value))
            }
        }

        internal func SetPropertyFromSingleImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: Float) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromSingle(pThis, _dependencyObject, RawPointer(propertyToSet), value))
            }
        }

        internal func SetPropertyFromPointImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: WindowsFoundation.Point) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromPoint(pThis, _dependencyObject, RawPointer(propertyToSet), .from(swift: value)))
            }
        }

        internal func SetPropertyFromRectImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: WindowsFoundation.Rect) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromRect(pThis, _dependencyObject, RawPointer(propertyToSet), .from(swift: value)))
            }
        }

        internal func SetPropertyFromSizeImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: WindowsFoundation.Size) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromSize(pThis, _dependencyObject, RawPointer(propertyToSet), .from(swift: value)))
            }
        }

        internal func SetPropertyFromTimeSpanImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: WindowsFoundation.TimeSpan) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromTimeSpan(pThis, _dependencyObject, RawPointer(propertyToSet), .from(swift: value)))
            }
        }

        internal func SetPropertyFromByteImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: UInt8) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromByte(pThis, _dependencyObject, RawPointer(propertyToSet), value))
            }
        }

        internal func SetPropertyFromUriImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: WindowsFoundation.Uri?) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromUri(pThis, _dependencyObject, RawPointer(propertyToSet), RawPointer(value)))
            }
        }

        internal func SetPropertyFromObjectImpl(_ dependencyObject: Any?, _ propertyToSet: WinUI.DependencyProperty?, _ value: Any?) throws {
            let dependencyObjectWrapper = __ABI_.AnyWrapper(dependencyObject)
            let _dependencyObject = try! dependencyObjectWrapper?.toABI { $0 }
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlBindingHelperStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyFromObject(pThis, _dependencyObject, RawPointer(propertyToSet), _value))
            }
        }

    }

    public class IXamlMember: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember }

        open func get_IsAttachableImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAttachable(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsDependencyPropertyImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDependencyProperty(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsReadOnlyImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsReadOnly(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_TargetTypeImpl() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetType(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func get_TypeImpl() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func GetValueImpl(_ instance: Any?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let instanceWrapper = __ABI_.AnyWrapper(instance)
                let _instance = try! instanceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetValue(pThis, _instance, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func SetValueImpl(_ instance: Any?, _ value: Any?) throws {
            let instanceWrapper = __ABI_.AnyWrapper(instance)
            let _instance = try! instanceWrapper?.toABI { $0 }
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetValue(pThis, _instance, _value))
            }
        }

    }

    internal static var IXamlMemberVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMemberVtbl = .init(
        QueryInterface: { IXamlMemberWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXamlMemberWrapper.addRef($0) },
        Release: { IXamlMemberWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Markup.IXamlMemberWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Markup.IXamlMember").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_IsAttachable: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isAttachable
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsDependencyProperty: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isDependencyProperty
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsReadOnly: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isReadOnly
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_Name: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.name
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        get_TargetType: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.targetType
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_Type: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.type
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        GetValue: {
            do {
                guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let instance: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.getValue(instance)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetValue: {
            do {
                guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let instance: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.setValue(instance, value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IXamlMemberWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Markup.IXamlMemberBridge>
    public class IXamlMetadataProvider: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider }

        open func GetXamlTypeImpl(_ type: WinUI.TypeName) throws -> WinUI.AnyIXamlType? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _type = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: type)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetXamlType(pThis, _type.val, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: result)
        }

        open func GetXamlTypeByFullNameImpl(_ fullName: String) throws -> WinUI.AnyIXamlType? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _fullName = try! HString(fullName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetXamlTypeByFullName(pThis, _fullName.get(), &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: result)
        }

    }

    internal static var IXamlMetadataProviderVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProviderVtbl = .init(
        QueryInterface: { IXamlMetadataProviderWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXamlMetadataProviderWrapper.addRef($0) },
        Release: { IXamlMetadataProviderWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Markup.IXamlMetadataProviderWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Markup.IXamlMetadataProvider").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetXamlType: {
            do {
                guard let __unwrapped__instance = IXamlMetadataProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let type: WinUI.TypeName = .from(abi: $1)
                let result = try __unwrapped__instance.getXamlType(type)
                let resultWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetXamlTypeByFullName: {
            do {
                guard let __unwrapped__instance = IXamlMetadataProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let fullName: String = .init(from: $1)
                let result = try __unwrapped__instance.getXamlType(fullName)
                let resultWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetXmlnsDefinitions: { _, _, _ in return failWith(err: E_NOTIMPL) }
    )

    public typealias IXamlMetadataProviderWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Markup.IXamlMetadataProviderBridge>
    public class IXamlReader: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlReader }

    }

    public class IXamlReaderStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlReaderStatics }

        internal func LoadImpl(_ xaml: String) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _xaml = try! HString(xaml)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlReaderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Load(pThis, _xaml.get(), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func LoadWithInitialTemplateValidationImpl(_ xaml: String) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _xaml = try! HString(xaml)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlReaderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadWithInitialTemplateValidation(pThis, _xaml.get(), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

    }

    public class IXamlType: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType }

        open func get_BaseTypeImpl() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseType(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func get_ContentPropertyImpl() throws -> WinUI.AnyIXamlMember? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlMemberWrapper.unwrapFrom(abi: value)
        }

        open func get_FullNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FullName(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsArrayImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsArray(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsCollectionImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCollection(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsConstructibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsConstructible(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsDictionaryImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDictionary(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsMarkupExtensionImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMarkupExtension(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsBindableImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBindable(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_ItemTypeImpl() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemType(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func get_KeyTypeImpl() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyType(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func get_BoxedTypeImpl() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BoxedType(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func get_UnderlyingTypeImpl() throws -> WinUI.TypeName {
            var value: __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlyingType(pThis, &value))
            }
            return .from(abi: value)
        }

        open func ActivateInstanceImpl() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ActivateInstance(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func CreateFromStringImpl(_ value: String) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, _value.get(), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func GetMemberImpl(_ name: String) throws -> WinUI.AnyIXamlMember? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetMember(pThis, _name.get(), &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlMemberWrapper.unwrapFrom(abi: result)
        }

        open func AddToVectorImpl(_ instance: Any?, _ value: Any?) throws {
            let instanceWrapper = __ABI_.AnyWrapper(instance)
            let _instance = try! instanceWrapper?.toABI { $0 }
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddToVector(pThis, _instance, _value))
            }
        }

        open func AddToMapImpl(_ instance: Any?, _ key: Any?, _ value: Any?) throws {
            let instanceWrapper = __ABI_.AnyWrapper(instance)
            let _instance = try! instanceWrapper?.toABI { $0 }
            let keyWrapper = __ABI_.AnyWrapper(key)
            let _key = try! keyWrapper?.toABI { $0 }
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddToMap(pThis, _instance, _key, _value))
            }
        }

        open func RunInitializerImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RunInitializer(pThis))
            }
        }

    }

    internal static var IXamlTypeVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlTypeVtbl = .init(
        QueryInterface: { IXamlTypeWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXamlTypeWrapper.addRef($0) },
        Release: { IXamlTypeWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Markup.IXamlType").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_BaseType: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.baseType
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_ContentProperty: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.contentProperty
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlMemberWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_FullName: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.fullName
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        get_IsArray: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isArray
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsCollection: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isCollection
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsConstructible: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isConstructible
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsDictionary: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isDictionary
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsMarkupExtension: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isMarkupExtension
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsBindable: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isBindable
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_ItemType: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.itemType
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_KeyType: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.keyType
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_BoxedType: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.boxedType
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_UnderlyingType: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.underlyingType
            let _value = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: value)
            	$1?.initialize(to: _value.detach())
            return S_OK
        },

        ActivateInstance: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.activateInstance()
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        CreateFromString: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: String = .init(from: $1)
                let result = try __unwrapped__instance.createFromString(value)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetMember: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let name: String = .init(from: $1)
                let result = try __unwrapped__instance.getMember(name)
                let resultWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlMemberWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        AddToVector: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let instance: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.addToVector(instance, value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        AddToMap: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let instance: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let key: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($3))
                try __unwrapped__instance.addToMap(instance, key, value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        RunInitializer: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.runInitializer()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IXamlTypeWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Markup.IXamlTypeBridge>
    public class _ABI_XmlnsDefinition {
        public var val: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CXmlnsDefinition = .init()
        public init() { }
        public init(from swift: WinUI.XmlnsDefinition) {
            val.XmlNamespace = try! HString(swift.xmlNamespace).detach()
            val.Namespace = try! HString(swift.namespace).detach()
        }

        public func detach() -> __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CXmlnsDefinition {
            let result = val
            val.XmlNamespace = nil
            val.Namespace = nil
            return result
        }

        deinit {
            WindowsDeleteString(val.XmlNamespace)
            WindowsDeleteString(val.Namespace)
        }
    }
}

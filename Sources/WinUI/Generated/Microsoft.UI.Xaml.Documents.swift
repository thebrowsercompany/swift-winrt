// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.logicaldirection)
public typealias LogicalDirection = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CLogicalDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.underlinestyle)
public typealias UnderlineStyle = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CUnderlineStyle
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink)
public final class Hyperlink : WinUI.Span {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.IHyperlink
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink>?) -> Hyperlink? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Documents.Hyperlink")))
    }

    private static let _IHyperlinkStatics: __ABI_Microsoft_UI_Xaml_Documents.IHyperlinkStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Documents.Hyperlink"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.elementsoundmodeproperty)
    public static var elementSoundModeProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_ElementSoundModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.focusstateproperty)
    public static var focusStateProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_FocusStatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.istabstopproperty)
    public static var isTabStopProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_IsTabStopPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.navigateuriproperty)
    public static var navigateUriProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_NavigateUriPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.tabindexproperty)
    public static var tabIndexProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_TabIndexPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.underlinestyleproperty)
    public static var underlineStyleProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_UnderlineStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusdownnavigationstrategyproperty)
    public static var xyFocusDownNavigationStrategyProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_XYFocusDownNavigationStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusdownproperty)
    public static var xyFocusDownProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_XYFocusDownPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusleftnavigationstrategyproperty)
    public static var xyFocusLeftNavigationStrategyProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_XYFocusLeftNavigationStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusleftproperty)
    public static var xyFocusLeftProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_XYFocusLeftPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusrightnavigationstrategyproperty)
    public static var xyFocusRightNavigationStrategyProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_XYFocusRightNavigationStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusrightproperty)
    public static var xyFocusRightProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_XYFocusRightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusupnavigationstrategyproperty)
    public static var xyFocusUpNavigationStrategyProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_XYFocusUpNavigationStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusupproperty)
    public static var xyFocusUpProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkStatics.get_XYFocusUpPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.focus)
    public func focus(_ value: WinUI.FocusState) throws -> Bool {
        try _default.FocusImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.elementsoundmode)
    public var elementSoundMode : WinUI.ElementSoundMode {
        get { try! _default.get_ElementSoundModeImpl() }
        set { try! _default.put_ElementSoundModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.focusstate)
    public var focusState : WinUI.FocusState {
        get { try! _default.get_FocusStateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.istabstop)
    public var isTabStop : Bool {
        get { try! _default.get_IsTabStopImpl() }
        set { try! _default.put_IsTabStopImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.navigateuri)
    public var navigateUri : WindowsFoundation.Uri! {
        get { try! _default.get_NavigateUriImpl() }
        set { try! _default.put_NavigateUriImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.tabindex)
    public var tabIndex : Int32 {
        get { try! _default.get_TabIndexImpl() }
        set { try! _default.put_TabIndexImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.underlinestyle)
    public var underlineStyle : UnderlineStyle {
        get { try! _default.get_UnderlineStyleImpl() }
        set { try! _default.put_UnderlineStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusdown)
    public var xyFocusDown : WinUI.DependencyObject! {
        get { try! _default.get_XYFocusDownImpl() }
        set { try! _default.put_XYFocusDownImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusdownnavigationstrategy)
    public var xyFocusDownNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusDownNavigationStrategyImpl() }
        set { try! _default.put_XYFocusDownNavigationStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusleft)
    public var xyFocusLeft : WinUI.DependencyObject! {
        get { try! _default.get_XYFocusLeftImpl() }
        set { try! _default.put_XYFocusLeftImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusleftnavigationstrategy)
    public var xyFocusLeftNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusLeftNavigationStrategyImpl() }
        set { try! _default.put_XYFocusLeftNavigationStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusright)
    public var xyFocusRight : WinUI.DependencyObject! {
        get { try! _default.get_XYFocusRightImpl() }
        set { try! _default.put_XYFocusRightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusrightnavigationstrategy)
    public var xyFocusRightNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusRightNavigationStrategyImpl() }
        set { try! _default.put_XYFocusRightNavigationStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusup)
    public var xyFocusUp : WinUI.DependencyObject! {
        get { try! _default.get_XYFocusUpImpl() }
        set { try! _default.put_XYFocusUpImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.xyfocusupnavigationstrategy)
    public var xyFocusUpNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusUpNavigationStrategyImpl() }
        set { try! _default.put_XYFocusUpNavigationStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.click)
    public lazy var click : Event<TypedEventHandler<Hyperlink?, HyperlinkClickEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.gotfocus)
    public lazy var gotFocus : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_GotFocusImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_GotFocusImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlink.lostfocus)
    public lazy var lostFocus : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_LostFocusImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_LostFocusImpl($0)
       }
      )
    }()

    internal enum ITextElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ITextElementOverrides
        internal typealias Class = Hyperlink
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlink
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.IHyperlink
        }
    }
    internal typealias Composable = ITextElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.hyperlinkclickeventargs)
public final class HyperlinkClickEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.IHyperlinkClickEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkClickEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIHyperlinkClickEventArgs>?) -> HyperlinkClickEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inline)
open class Inline : WinUI.TextElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.IInline
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIInline
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIInline>?) -> Inline? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInlineFactory : __ABI_Microsoft_UI_Xaml_Documents.IInlineFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Documents.Inline"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IInlineFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum ITextElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ITextElementOverrides
        internal typealias Class = Inline
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIInline
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.IInline
        }
    }
    internal typealias Composable = ITextElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection)
public final class InlineCollection : WinRTClass, IVector, IIterable {
    public typealias T = Inline?
    private typealias SwiftABI = WinUI.IVectorInline
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CDocuments__CInline
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CDocuments__CInline>?) -> InlineCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.getat)
    public func getAt(_ index: UInt32) -> Inline? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<Inline?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.indexof)
    public func indexOf(_ value: Inline?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.setat)
    public func setAt(_ index: UInt32, _ value: Inline?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: Inline?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.append)
    public func append(_ value: Inline?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableInline! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.inlinecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Inline?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.run)
public final class Run : WinUI.Inline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.IRun
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRun
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRun>?) -> Run? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Documents.Run")))
    }

    private static let _IRunStatics: __ABI_Microsoft_UI_Xaml_Documents.IRunStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Documents.Run"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.run.flowdirectionproperty)
    public static var flowDirectionProperty : WinUI.DependencyProperty! {
        get { try! _IRunStatics.get_FlowDirectionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.run.flowdirection)
    public var flowDirection : WinUI.FlowDirection {
        get { try! _default.get_FlowDirectionImpl() }
        set { try! _default.put_FlowDirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.run.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    internal enum ITextElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ITextElementOverrides
        internal typealias Class = Run
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CIRun
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.IRun
        }
    }
    internal typealias Composable = ITextElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.span)
open class Span : WinUI.Inline {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ISpan
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CISpan
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CISpan>?) -> Span? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISpanFactory : __ABI_Microsoft_UI_Xaml_Documents.ISpanFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Documents.Span"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISpanFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.span.inlines)
    public var inlines : InlineCollection! {
        get { try! _default.get_InlinesImpl() }
        set { try! _default.put_InlinesImpl(newValue) }
    }

    internal enum ITextElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ITextElementOverrides
        internal typealias Class = Span
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CISpan
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ISpan
        }
    }
    internal typealias Composable = ITextElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement)
open class TextElement : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ITextElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement>?) -> TextElement? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Documents.ITextElementOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Documents.ITextElementOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _ITextElementFactory : __ABI_Microsoft_UI_Xaml_Documents.ITextElementFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Documents.TextElement"))

    private static let _ITextElementStatics: __ABI_Microsoft_UI_Xaml_Documents.ITextElementStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Documents.TextElement"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.accesskeyproperty)
    public class var accessKeyProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_AccessKeyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.accesskeyscopeownerproperty)
    public class var accessKeyScopeOwnerProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_AccessKeyScopeOwnerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.allowfocusoninteractionproperty)
    public class var allowFocusOnInteractionProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_AllowFocusOnInteractionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.characterspacingproperty)
    public class var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_CharacterSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.exitdisplaymodeonaccesskeyinvokedproperty)
    public class var exitDisplayModeOnAccessKeyInvokedProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_ExitDisplayModeOnAccessKeyInvokedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_FontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_FontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.fontstretchproperty)
    public class var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_FontStretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_FontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_FontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.isaccesskeyscopeproperty)
    public class var isAccessKeyScopeProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_IsAccessKeyScopePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_IsTextScaleFactorEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.keytiphorizontaloffsetproperty)
    public class var keyTipHorizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_KeyTipHorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.keytipplacementmodeproperty)
    public class var keyTipPlacementModeProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_KeyTipPlacementModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.keytipverticaloffsetproperty)
    public class var keyTipVerticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_KeyTipVerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.languageproperty)
    public class var languageProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_LanguagePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.textdecorationsproperty)
    public class var textDecorationsProperty : WinUI.DependencyProperty! {
        get { try! _ITextElementStatics.get_TextDecorationsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.findname)
    public func findName(_ name: String) throws -> Any! {
        try _default.FindNameImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.accesskey)
    public var accessKey : String {
        get { try! _default.get_AccessKeyImpl() }
        set { try! _default.put_AccessKeyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.accesskeyscopeowner)
    public var accessKeyScopeOwner : WinUI.DependencyObject! {
        get { try! _default.get_AccessKeyScopeOwnerImpl() }
        set { try! _default.put_AccessKeyScopeOwnerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.allowfocusoninteraction)
    public var allowFocusOnInteraction : Bool {
        get { try! _default.get_AllowFocusOnInteractionImpl() }
        set { try! _default.put_AllowFocusOnInteractionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacingImpl() }
        set { try! _default.put_CharacterSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.contentend)
    public var contentEnd : TextPointer! {
        get { try! _default.get_ContentEndImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.contentstart)
    public var contentStart : TextPointer! {
        get { try! _default.get_ContentStartImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.elementend)
    public var elementEnd : TextPointer! {
        get { try! _default.get_ElementEndImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.elementstart)
    public var elementStart : TextPointer! {
        get { try! _default.get_ElementStartImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.exitdisplaymodeonaccesskeyinvoked)
    public var exitDisplayModeOnAccessKeyInvoked : Bool {
        get { try! _default.get_ExitDisplayModeOnAccessKeyInvokedImpl() }
        set { try! _default.put_ExitDisplayModeOnAccessKeyInvokedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretchImpl() }
        set { try! _default.put_FontStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.isaccesskeyscope)
    public var isAccessKeyScope : Bool {
        get { try! _default.get_IsAccessKeyScopeImpl() }
        set { try! _default.put_IsAccessKeyScopeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabledImpl() }
        set { try! _default.put_IsTextScaleFactorEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.keytiphorizontaloffset)
    public var keyTipHorizontalOffset : Double {
        get { try! _default.get_KeyTipHorizontalOffsetImpl() }
        set { try! _default.put_KeyTipHorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.keytipplacementmode)
    public var keyTipPlacementMode : WinUI.KeyTipPlacementMode {
        get { try! _default.get_KeyTipPlacementModeImpl() }
        set { try! _default.put_KeyTipPlacementModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.keytipverticaloffset)
    public var keyTipVerticalOffset : Double {
        get { try! _default.get_KeyTipVerticalOffsetImpl() }
        set { try! _default.put_KeyTipVerticalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.language)
    public var language : String {
        get { try! _default.get_LanguageImpl() }
        set { try! _default.put_LanguageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.name)
    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.textdecorations)
    public var textDecorations : UWP.TextDecorations {
        get { try! _default.get_TextDecorationsImpl() }
        set { try! _default.put_TextDecorationsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.xamlroot)
    public var xamlRoot : WinUI.XamlRoot! {
        get { try! _default.get_XamlRootImpl() }
        set { try! _default.put_XamlRootImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.accesskeydisplaydismissed)
    public lazy var accessKeyDisplayDismissed : Event<TypedEventHandler<TextElement?, AccessKeyDisplayDismissedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AccessKeyDisplayDismissedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AccessKeyDisplayDismissedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.accesskeydisplayrequested)
    public lazy var accessKeyDisplayRequested : Event<TypedEventHandler<TextElement?, AccessKeyDisplayRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AccessKeyDisplayRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AccessKeyDisplayRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.accesskeyinvoked)
    public lazy var accessKeyInvoked : Event<TypedEventHandler<TextElement?, AccessKeyInvokedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AccessKeyInvokedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AccessKeyInvokedImpl($0)
       }
      )
    }()

    private lazy var _ITextElementOverrides: __ABI_Microsoft_UI_Xaml_Documents.ITextElementOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textelement.ondisconnectvisualchildren)
    open func onDisconnectVisualChildren() throws {
        try _ITextElementOverrides.OnDisconnectVisualChildrenImpl()
    }

    internal enum ITextElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ITextElementOverrides
        internal typealias Class = TextElement
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextElement
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ITextElement
        }
    }
    internal typealias Composable = ITextElementOverrides
    deinit {
        _default = nil
        _ITextElementOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.texthighlighter)
open class TextHighlighter : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ITextHighlighter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter>?) -> TextHighlighter? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITextHighlighterFactory : __ABI_Microsoft_UI_Xaml_Documents.ITextHighlighterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Documents.TextHighlighter"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._ITextHighlighterFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITextHighlighterStatics: __ABI_Microsoft_UI_Xaml_Documents.ITextHighlighterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Documents.TextHighlighter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.texthighlighter.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _ITextHighlighterStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.texthighlighter.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _ITextHighlighterStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.texthighlighter.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.texthighlighter.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.texthighlighter.ranges)
    public var ranges : WindowsFoundation.AnyIVector<TextRange>! {
        get { try! _default.get_RangesImpl() }
    }

    internal enum ITextHighlighter : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = TextHighlighter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ITextHighlighter
        }
    }
    internal typealias Composable = ITextHighlighter
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textpointer)
public final class TextPointer : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Documents.ITextPointer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>?) -> TextPointer? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textpointer.getcharacterrect)
    public func getCharacterRect(_ direction: LogicalDirection) throws -> WindowsFoundation.Rect {
        try _default.GetCharacterRectImpl(direction)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textpointer.getpositionatoffset)
    public func getPositionAtOffset(_ offset: Int32, _ direction: LogicalDirection) throws -> TextPointer! {
        try _default.GetPositionAtOffsetImpl(offset, direction)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textpointer.logicaldirection)
    public var logicalDirection : LogicalDirection {
        get { try! _default.get_LogicalDirectionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textpointer.offset)
    public var offset : Int32 {
        get { try! _default.get_OffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textpointer.parent)
    public var parent : WinUI.DependencyObject! {
        get { try! _default.get_ParentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textpointer.visualparent)
    public var visualParent : WinUI.FrameworkElement! {
        get { try! _default.get_VisualParentImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textrange)
public struct TextRange: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textrange.startindex)
    public var startIndex: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.documents.textrange.length)
    public var length: Int32 = 0
    public init() {}
    public init(startIndex: Int32, length: Int32) {
        self.startIndex = startIndex
        self.length = length
    }
    public static func from(abi: __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CTextRange) -> TextRange {
        .init(startIndex: abi.StartIndex, length: abi.Length)
    }
}

extension WinUI.LogicalDirection {
    public static var backward : WinUI.LogicalDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CLogicalDirection_Backward
    }
    public static var forward : WinUI.LogicalDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CLogicalDirection_Forward
    }
}
extension WinUI.LogicalDirection: @retroactive Hashable, @retroactive Codable {}

extension WinUI.UnderlineStyle {
    public static var none : WinUI.UnderlineStyle {
        __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CUnderlineStyle_None
    }
    public static var single : WinUI.UnderlineStyle {
        __x_ABI_CMicrosoft_CUI_CXaml_CDocuments_CUnderlineStyle_Single
    }
}
extension WinUI.UnderlineStyle: @retroactive Hashable, @retroactive Codable {}


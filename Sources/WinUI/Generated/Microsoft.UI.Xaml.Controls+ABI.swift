// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WebView2Core
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xD5645E80, Data2: 0xD4D3, Data3: 0x5DF8, Data4: ( 0xA3,0xAC,0x1F,0x9B,0xEE,0xB2,0xBC,0xEF ))// D5645E80-D4D3-5DF8-A3AC-1F9BEEB2BCEF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar: WindowsFoundation.IID {
    .init(Data1: 0x3D8C2927, Data2: 0x5AC5, Data3: 0x51BB, Data4: ( 0x8B,0xEC,0x13,0xFF,0x4C,0x1B,0xD6,0xC8 ))// 3D8C2927-5AC5-51BB-8BEC-13FF4C1BD6C8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarFactory: WindowsFoundation.IID {
    .init(Data1: 0x66B96B53, Data2: 0x755B, Data3: 0x5472, Data4: ( 0xB2,0xC4,0x86,0x24,0xE9,0x77,0xD6,0x5B ))// 66B96B53-755B-5472-B2C4-8624E977D65B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverrides: WindowsFoundation.IID {
    .init(Data1: 0x67F17798, Data2: 0xE281, Data3: 0x5E53, Data4: ( 0x8E,0xDF,0x42,0xC2,0x9C,0x35,0x4D,0x63 ))// 67F17798-E281-5E53-8EDF-42C29C354D63
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarStatics: WindowsFoundation.IID {
    .init(Data1: 0x0DC7172C, Data2: 0xA03D, Data3: 0x5AE4, Data4: ( 0x95,0x38,0xFF,0xD8,0x04,0x82,0x3B,0xCE ))// 0DC7172C-A03D-5AE4-9538-FFD804823BCE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon: WindowsFoundation.IID {
    .init(Data1: 0xC370BC29, Data2: 0x805B, Data3: 0x5BAD, Data4: ( 0xB6,0x15,0xEC,0x64,0x0E,0x57,0x9D,0xBB ))// C370BC29-805B-5BAD-B615-EC640E579DBB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIconFactory: WindowsFoundation.IID {
    .init(Data1: 0xB43B5DDC, Data2: 0xCDB5, Data3: 0x5AD6, Data4: ( 0x8A,0xC1,0x2F,0xCC,0xA3,0x3B,0xE3,0x9E ))// B43B5DDC-CDB5-5AD6-8AC1-2FCCA33BE39E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIconStatics: WindowsFoundation.IID {
    .init(Data1: 0x01C67EB2, Data2: 0x327E, Data3: 0x5C4E, Data4: ( 0xAF,0xB4,0x38,0xB0,0x2E,0xD1,0x28,0x86 ))// 01C67EB2-327E-5C4E-AFB4-38B02ED12886
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder: WindowsFoundation.IID {
    .init(Data1: 0x1CA13B47, Data2: 0xFF5C, Data3: 0x5ABC, Data4: ( 0xA4,0x11,0xA1,0x77,0xDF,0x94,0x82,0xA9 ))// 1CA13B47-FF5C-5ABC-A411-A177DF9482A9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics: WindowsFoundation.IID {
    .init(Data1: 0x9385CD66, Data2: 0xC178, Data3: 0x5176, Data4: ( 0xB4,0xA5,0x16,0x0E,0x00,0xE9,0x39,0x35 ))// 9385CD66-C178-5176-B4A5-160E00E93935
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton: WindowsFoundation.IID {
    .init(Data1: 0x216C183D, Data2: 0xD07A, Data3: 0x5AA5, Data4: ( 0xB8,0xA4,0x03,0x00,0xA2,0x68,0x3E,0x87 ))// 216C183D-D07A-5AA5-B8A4-0300A2683E87
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory: WindowsFoundation.IID {
    .init(Data1: 0xFE393422, Data2: 0xD91C, Data3: 0x57B1, Data4: ( 0x9A,0x9C,0x2C,0x7E,0x3F,0x41,0xF7,0x7C ))// FE393422-D91C-57B1-9A9C-2C7E3F41F77C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics: WindowsFoundation.IID {
    .init(Data1: 0x57823D25, Data2: 0xB26A, Data3: 0x5E0F, Data4: ( 0x94,0xF6,0xBB,0xAE,0x70,0x68,0x3D,0xC5 ))// 57823D25-B26A-5E0F-94F6-BBAE70683DC5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB76FAF94, Data2: 0x3172, Data3: 0x5C50, Data4: ( 0x95,0x07,0x26,0xCD,0x87,0x38,0x15,0xA1 ))// B76FAF94-3172-5C50-9507-26CD873815A1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas: WindowsFoundation.IID {
    .init(Data1: 0x457BA139, Data2: 0x1146, Data3: 0x51D2, Data4: ( 0x80,0x7E,0xD9,0xD6,0x5C,0x92,0x70,0x60 ))// 457BA139-1146-51D2-807E-D9D65C927060
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasFactory: WindowsFoundation.IID {
    .init(Data1: 0x374C5050, Data2: 0x3481, Data3: 0x5557, Data4: ( 0x99,0x48,0x80,0x4C,0x0B,0x8E,0xEA,0x89 ))// 374C5050-3481-5557-9948-804C0B8EEA89
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics: WindowsFoundation.IID {
    .init(Data1: 0xC00D5E0F, Data2: 0x77E3, Data3: 0x5C59, Data4: ( 0x8F,0xCD,0x86,0x76,0x1F,0x0C,0x66,0x07 ))// C00D5E0F-77E3-5C59-8FCD-86761F0C6607
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox: WindowsFoundation.IID {
    .init(Data1: 0xC5830000, Data2: 0x4C9D, Data3: 0x5FDD, Data4: ( 0x93,0x46,0x67,0x4C,0x71,0xCD,0x80,0xC5 ))// C5830000-4C9D-5FDD-9346-674C71CD80C5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBoxFactory: WindowsFoundation.IID {
    .init(Data1: 0xF43FF58D, Data2: 0x31D5, Data3: 0x5835, Data4: ( 0xAF,0x7B,0x37,0x5B,0xC6,0xA9,0xBC,0xF3 ))// F43FF58D-31D5-5835-AF7B-375BC6A9BCF3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x2DB1B0B0, Data2: 0xAEE9, Data3: 0x55FA, Data4: ( 0x8C,0x30,0xC9,0x8F,0x00,0x64,0x3D,0x00 ))// 2DB1B0B0-AEE9-55FA-8C30-C98F00643D00
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB479B9D2, Data2: 0xA63F, Data3: 0x5638, Data4: ( 0x94,0x86,0x8C,0xCC,0x1F,0x40,0x25,0x1E ))// B479B9D2-A63F-5638-9486-8CCC1F40251E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition: WindowsFoundation.IID {
    .init(Data1: 0x454CEA14, Data2: 0x87EC, Data3: 0x5890, Data4: ( 0xBB,0x62,0xF1,0xD8,0x2A,0x94,0x75,0x8E ))// 454CEA14-87EC-5890-BB62-F1D82A94758E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionStatics: WindowsFoundation.IID {
    .init(Data1: 0xABA4B755, Data2: 0xCA63, Data3: 0x5ED7, Data4: ( 0xAE,0x31,0x45,0xF9,0xF9,0x19,0x20,0xB0 ))// ABA4B755-CA63-5ED7-AE31-45F9F91920B0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox: WindowsFoundation.IID {
    .init(Data1: 0xC77DA58B, Data2: 0x4FD7, Data3: 0x51E0, Data4: ( 0xA4,0x31,0xF8,0x46,0x58,0xA8,0x3E,0x9E ))// C77DA58B-4FD7-51E0-A431-F84658A83E9E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxFactory: WindowsFoundation.IID {
    .init(Data1: 0x71C1014B, Data2: 0xACDF, Data3: 0x5C03, Data4: ( 0xB5,0xED,0x02,0x87,0x1C,0xAA,0xEB,0x6B ))// 71C1014B-ACDF-5C03-B5ED-02871CAAEB6B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides: WindowsFoundation.IID {
    .init(Data1: 0xA6AFBC7A, Data2: 0x284F, Data3: 0x5B9A, Data4: ( 0x89,0xFE,0xA3,0x34,0xB6,0x13,0xF8,0x95 ))// A6AFBC7A-284F-5B9A-89FE-A334B613F895
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics: WindowsFoundation.IID {
    .init(Data1: 0x7DA7CD09, Data2: 0xE256, Data3: 0x5238, Data4: ( 0x9F,0xED,0x02,0xB2,0xF3,0xAF,0xBA,0x25 ))// 7DA7CD09-E256-5238-9FED-02B2F3AFBA25
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x0D7A9794, Data2: 0x73B5, Data3: 0x585E, Data4: ( 0xBF,0xBB,0xDE,0x6D,0xF7,0xEB,0x9F,0xCF ))// 0D7A9794-73B5-585E-BFBB-DE6DF7EB9FCF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xF4C8C937, Data2: 0xB070, Data3: 0x53CE, Data4: ( 0xA7,0x6C,0x07,0x4E,0xE5,0x75,0x0A,0x71 ))// F4C8C937-B070-53CE-A76C-074EE5750A71
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl: WindowsFoundation.IID {
    .init(Data1: 0x07E81761, Data2: 0x11B2, Data3: 0x52AE, Data4: ( 0x8F,0x8B,0x4D,0x53,0xD2,0xB5,0x90,0x0A ))// 07E81761-11B2-52AE-8F8B-4D53D2B5900A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory: WindowsFoundation.IID {
    .init(Data1: 0x3DEA958E, Data2: 0x5ACD, Data3: 0x5F80, Data4: ( 0x89,0x38,0x38,0x63,0x4F,0x51,0x49,0x3A ))// 3DEA958E-5ACD-5F80-8938-38634F51493A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides: WindowsFoundation.IID {
    .init(Data1: 0x2504174A, Data2: 0x017E, Data3: 0x5A2D, Data4: ( 0x9C,0x28,0xD9,0x7C,0x66,0xAE,0x99,0x37 ))// 2504174A-017E-5A2D-9C28-D97C66AE9937
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics: WindowsFoundation.IID {
    .init(Data1: 0xF25484F4, Data2: 0x2FED, Data3: 0x5A0A, Data4: ( 0x88,0x64,0x7D,0x6D,0x4A,0xC4,0x3E,0xF8 ))// F25484F4-2FED-5A0A-8864-7D6D4AC43EF8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog: WindowsFoundation.IID {
    .init(Data1: 0xAC2145A3, Data2: 0x4A32, Data3: 0x5305, Data4: ( 0xA8,0x1D,0x47,0x50,0x95,0x15,0xBF,0xCE ))// AC2145A3-4A32-5305-A81D-47509515BFCE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral: WindowsFoundation.IID {
    .init(Data1: 0xDDCA6D2E, Data2: 0xA81A, Data3: 0x5F61, Data4: ( 0x8B,0x87,0xE4,0xB6,0xEC,0x5F,0xA3,0x98 ))// DDCA6D2E-A81A-5F61-8B87-E4B6EC5FA398
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xBAE6261C, Data2: 0x362F, Data3: 0x5342, Data4: ( 0xBA,0x26,0x5F,0x69,0x90,0xEF,0x72,0x6C ))// BAE6261C-362F-5342-BA26-5F6990EF726C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9B84E681, Data2: 0x1AB6, Data3: 0x5485, Data4: ( 0x88,0xB2,0xD0,0xD3,0xC0,0x5B,0x29,0xF3 ))// 9B84E681-1AB6-5485-88B2-D0D3C05B29F3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral: WindowsFoundation.IID {
    .init(Data1: 0x9D74ECC1, Data2: 0x67D3, Data3: 0x5F02, Data4: ( 0x9B,0x30,0x56,0xF3,0xB2,0xE8,0xB0,0xA6 ))// 9D74ECC1-67D3-5F02-9B30-56F3B2E8B0A6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x12782103, Data2: 0x3B80, Data3: 0x511C, Data4: ( 0x91,0x28,0x12,0xCB,0x8C,0xDA,0xC4,0x44 ))// 12782103-3B80-511C-9128-12CB8CDAC444
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogFactory: WindowsFoundation.IID {
    .init(Data1: 0xA05B3AD7, Data2: 0xC60E, Data3: 0x545A, Data4: ( 0x9E,0xE4,0xF0,0x98,0x22,0x0E,0xD8,0x16 ))// A05B3AD7-C60E-545A-9EE4-F098220ED816
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xD1355ED8, Data2: 0x64ED, Data3: 0x5BBC, Data4: ( 0x94,0x11,0x5F,0x4D,0xBC,0xA7,0xD9,0x3F ))// D1355ED8-64ED-5BBC-9411-5F4DBCA7D93F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics: WindowsFoundation.IID {
    .init(Data1: 0x397B18DD, Data2: 0x6964, Data3: 0x5056, Data4: ( 0x97,0xC3,0xD6,0x9C,0xD7,0x71,0x6A,0x4B ))// 397B18DD-6964-5056-97C3-D69CD7716A4B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter: WindowsFoundation.IID {
    .init(Data1: 0x075E6CA8, Data2: 0xDA46, Data3: 0x5EC6, Data4: ( 0x8C,0x64,0x03,0xB3,0xDD,0xEA,0xF7,0x4F ))// 075E6CA8-DA46-5EC6-8C64-03B3DDEAF74F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterFactory: WindowsFoundation.IID {
    .init(Data1: 0x730B1D5E, Data2: 0x2540, Data3: 0x5A3D, Data4: ( 0xA6,0xC7,0x88,0x8A,0xA8,0x61,0x46,0x10 ))// 730B1D5E-2540-5A3D-A6C7-888AA8614610
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides: WindowsFoundation.IID {
    .init(Data1: 0x00E96954, Data2: 0xD6E0, Data3: 0x510F, Data4: ( 0xA2,0xD2,0x38,0xA0,0x32,0xB9,0x62,0x36 ))// 00E96954-D6E0-510F-A2D2-38A032B96236
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics: WindowsFoundation.IID {
    .init(Data1: 0xC3E55F6C, Data2: 0x7ABE, Data3: 0x568F, Data4: ( 0xB6,0x7B,0x8E,0xBD,0x32,0x74,0xF3,0x3E ))// C3E55F6C-7ABE-568F-B67B-8EBD3274F33E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x65637BB3, Data2: 0xE279, Data3: 0x5507, Data4: ( 0xBD,0x16,0x6F,0x7B,0xA6,0x70,0x5F,0x31 ))// 65637BB3-E279-5507-BD16-6F7BA6705F31
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl: WindowsFoundation.IID {
    .init(Data1: 0x857D6E8A, Data2: 0xD45A, Data3: 0x5C69, Data4: ( 0xA9,0x9C,0xBF,0x6A,0x5C,0x54,0xFB,0x38 ))// 857D6E8A-D45A-5C69-A99C-BF6A5C54FB38
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlFactory: WindowsFoundation.IID {
    .init(Data1: 0x25159233, Data2: 0x9438, Data3: 0x5534, Data4: ( 0xAE,0xB9,0x00,0xEB,0x05,0x9C,0xF7,0x3F ))// 25159233-9438-5534-AEB9-00EB059CF73F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides: WindowsFoundation.IID {
    .init(Data1: 0x5F644395, Data2: 0x2177, Data3: 0x5161, Data4: ( 0x9F,0x87,0xC6,0xC7,0x49,0xC7,0x3A,0x03 ))// 5F644395-2177-5161-9F87-C6C749C73A03
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlProtected: WindowsFoundation.IID {
    .init(Data1: 0x5C750339, Data2: 0x1789, Data3: 0x5095, Data4: ( 0xA2,0x14,0xDD,0x9D,0x05,0x64,0xE5,0x79 ))// 5C750339-1789-5095-A214-DD9D0564E579
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics: WindowsFoundation.IID {
    .init(Data1: 0xC3AE388D, Data2: 0xAA36, Data3: 0x5E10, Data4: ( 0xAC,0xAC,0x98,0x41,0x5F,0x47,0xBC,0xC7 ))// C3AE388D-AA36-5E10-ACAC-98415F47BCC7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate: WindowsFoundation.IID {
    .init(Data1: 0x3A192751, Data2: 0x2106, Data3: 0x547A, Data4: ( 0xAC,0xA0,0xF1,0x5A,0xE8,0x92,0x6E,0xA0 ))// 3A192751-2106-547A-ACA0-F15AE8926EA0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICoreWebView2InitializedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xEE59D277, Data2: 0x8B2E, Data3: 0x57AB, Data4: ( 0x86,0x31,0x91,0xD2,0x7B,0x12,0xEB,0xD9 ))// EE59D277-8B2E-57AB-8631-91D27B12EBD9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector: WindowsFoundation.IID {
    .init(Data1: 0x86CA4FA4, Data2: 0x7DE0, Data3: 0x5049, Data4: ( 0x82,0xF5,0x39,0xEC,0x78,0x56,0x90,0x28 ))// 86CA4FA4-7DE0-5049-82F5-39EC78569028
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory: WindowsFoundation.IID {
    .init(Data1: 0x43217EDA, Data2: 0x6F7F, Data3: 0x5B80, Data4: ( 0xA7,0x0B,0x94,0x45,0x11,0xB3,0x54,0xAB ))// 43217EDA-6F7F-5B80-A70B-944511B354AB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides: WindowsFoundation.IID {
    .init(Data1: 0x980448CC, Data2: 0xC114, Data3: 0x5B89, Data4: ( 0x8E,0x09,0x61,0xB0,0xF2,0x64,0xE5,0x92 ))// 980448CC-C114-5B89-8E09-61B0F264E592
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC0138552, Data2: 0xF467, Data3: 0x5C3E, Data4: ( 0x8A,0xF4,0x59,0x36,0x07,0x76,0x28,0x44 ))// C0138552-F467-5C3E-8AF4-593607762844
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA6938886, Data2: 0x20DF, Data3: 0x558E, Data4: ( 0xAC,0x74,0xBB,0x5B,0x7F,0x2F,0x7E,0x90 ))// A6938886-20DF-558E-AC74-BB5B7F2F7E90
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView: WindowsFoundation.IID {
    .init(Data1: 0x96C35E7F, Data2: 0xCC48, Data3: 0x5ACC, Data4: ( 0xB3,0xB4,0x8A,0xB4,0xBD,0xF1,0xFE,0x17 ))// 96C35E7F-CC48-5ACC-B3B4-8AB4BDF1FE17
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewFactory: WindowsFoundation.IID {
    .init(Data1: 0xF3A89BE6, Data2: 0x81E3, Data3: 0x53C4, Data4: ( 0x9D,0xC9,0x98,0xA5,0xA4,0xE7,0x9B,0x13 ))// F3A89BE6-81E3-53C4-9DC9-98A5A4E79B13
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItem: WindowsFoundation.IID {
    .init(Data1: 0x516F2058, Data2: 0xAF67, Data3: 0x5EB3, Data4: ( 0xB7,0x96,0xE7,0x5B,0x34,0xF3,0xFD,0x92 ))// 516F2058-AF67-5EB3-B796-E75B34F3FD92
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItemFactory: WindowsFoundation.IID {
    .init(Data1: 0xDEB2CD5F, Data2: 0x9D76, Data3: 0x5678, Data4: ( 0xB1,0xCA,0x02,0x67,0x75,0x7C,0x4F,0xED ))// DEB2CD5F-9D76-5678-B1CA-0267757C4FED
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewStatics: WindowsFoundation.IID {
    .init(Data1: 0x1E98FC86, Data2: 0x2BC1, Data3: 0x5C89, Data4: ( 0x83,0x05,0x25,0x1A,0xD5,0x6A,0x9C,0xDB ))// 1E98FC86-2BC1-5C89-8305-251AD56A9CDB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout: WindowsFoundation.IID {
    .init(Data1: 0xD4A1EB7D, Data2: 0x59B8, Data3: 0x5DF9, Data4: ( 0x87,0xC3,0xBD,0x5E,0x38,0x56,0x92,0x3F ))// D4A1EB7D-59B8-5DF9-87C3-BD5E3856923F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutFactory: WindowsFoundation.IID {
    .init(Data1: 0xFD19002E, Data2: 0x66B3, Data3: 0x5656, Data4: ( 0xB4,0x9C,0xB2,0xAC,0xA1,0x1E,0x96,0x02 ))// FD19002E-66B3-5656-B49C-B2ACA11E9602
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter: WindowsFoundation.IID {
    .init(Data1: 0x70259825, Data2: 0x7F56, Data3: 0x5107, Data4: ( 0x91,0x7E,0x71,0x94,0xB1,0xEF,0x1B,0x81 ))// 70259825-7F56-5107-917E-7194B1EF1B81
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterFactory: WindowsFoundation.IID {
    .init(Data1: 0xE9539A80, Data2: 0x74ED, Data3: 0x5158, Data4: ( 0x9F,0x93,0x89,0x36,0x69,0xCB,0x04,0x6F ))// E9539A80-74ED-5158-9F93-893669CB046F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterStatics: WindowsFoundation.IID {
    .init(Data1: 0xB415A2EC, Data2: 0x1BDD, Data3: 0x5F94, Data4: ( 0x95,0x00,0x25,0x72,0x23,0x64,0x64,0x69 ))// B415A2EC-1BDD-5F94-9500-257223646469
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutStatics: WindowsFoundation.IID {
    .init(Data1: 0x23AE001A, Data2: 0xAAA6, Data3: 0x5D19, Data4: ( 0x99,0x47,0x91,0x7E,0xCB,0xD8,0x83,0xCA ))// 23AE001A-AAA6-5D19-9947-917ECBD883CA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC0B4B88C, Data2: 0xC195, Data3: 0x5064, Data4: ( 0x84,0xC7,0x33,0xCB,0x26,0x2C,0xB2,0x40 ))// C0B4B88C-C195-5064-84C7-33CB262CB240
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1E71E8E4, Data2: 0x74B2, Data3: 0x50A1, Data4: ( 0x8F,0x2B,0x42,0xC0,0x11,0x8A,0xB0,0xEA ))// 1E71E8E4-74B2-50A1-8F2B-42C0118AB0EA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon: WindowsFoundation.IID {
    .init(Data1: 0x6EBA5ED9, Data2: 0xD233, Data3: 0x5F5E, Data4: ( 0x91,0xA8,0xF5,0x13,0x42,0x92,0x65,0x8A ))// 6EBA5ED9-D233-5F5E-91A8-F5134292658A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconFactory: WindowsFoundation.IID {
    .init(Data1: 0xAA9A24FE, Data2: 0xBEF8, Data3: 0x564A, Data4: ( 0xB2,0x00,0x69,0x4C,0xD6,0xF6,0xBA,0x4E ))// AA9A24FE-BEF8-564A-B200-694CD6F6BA4E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource: WindowsFoundation.IID {
    .init(Data1: 0xB89D614C, Data2: 0xE9B5, Data3: 0x5B6A, Data4: ( 0x9B,0xEC,0xAD,0x78,0xB1,0xA1,0x4B,0x74 ))// B89D614C-E9B5-5B6A-9BEC-AD78B1A14B74
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0xBB40EEEE, Data2: 0x64D1, Data3: 0x5133, Data4: ( 0xB1,0xD6,0xAE,0x13,0xC2,0x1B,0x66,0x78 ))// BB40EEEE-64D1-5133-B1D6-AE13C21B6678
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0xC309C231, Data2: 0xF7BF, Data3: 0x5C06, Data4: ( 0xA2,0xD2,0x56,0x50,0x2C,0xFD,0x33,0xE5 ))// C309C231-F7BF-5C06-A2D2-56502CFD33E5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconStatics: WindowsFoundation.IID {
    .init(Data1: 0x55564030, Data2: 0x2F80, Data3: 0x5BE5, Data4: ( 0x8C,0x2A,0xEB,0xB6,0xEC,0xBA,0x07,0xE8 ))// 55564030-2F80-5BE5-8C2A-EBB6ECBA07E8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame: WindowsFoundation.IID {
    .init(Data1: 0xE6D50443, Data2: 0x621E, Data3: 0x5360, Data4: ( 0x85,0x6A,0x75,0xB0,0x1E,0x1F,0xCD,0x22 ))// E6D50443-621E-5360-856A-75B01E1FCD22
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameFactory: WindowsFoundation.IID {
    .init(Data1: 0x53A3070F, Data2: 0x19D9, Data3: 0x59BC, Data4: ( 0xBD,0xD6,0x4D,0xBF,0x13,0x9E,0x7D,0xA5 ))// 53A3070F-19D9-59BC-BDD6-4DBF139E7DA5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics: WindowsFoundation.IID {
    .init(Data1: 0x8A974D00, Data2: 0x8DA2, Data3: 0x588A, Data4: ( 0xA1,0x82,0x1F,0x76,0x21,0xEE,0x65,0x0B ))// 8A974D00-8DA2-588A-A182-1F7621EE650B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid: WindowsFoundation.IID {
    .init(Data1: 0xC4496219, Data2: 0x9014, Data3: 0x58A1, Data4: ( 0xB4,0xAD,0xC5,0x04,0x49,0x13,0xA5,0xBB ))// C4496219-9014-58A1-B4AD-C5044913A5BB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridFactory: WindowsFoundation.IID {
    .init(Data1: 0xB16BF561, Data2: 0xFC6C, Data3: 0x57C6, Data4: ( 0x8E,0xBC,0x0B,0x06,0xCE,0x45,0x13,0xAA ))// B16BF561-FC6C-57C6-8EBC-0B06CE4513AA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics: WindowsFoundation.IID {
    .init(Data1: 0xEF9CF81D, Data2: 0xA431, Data3: 0x50F4, Data4: ( 0xAB,0xF5,0x30,0x23,0xFE,0x44,0x77,0x04 ))// EF9CF81D-A431-50F4-ABF5-3023FE447704
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridView: WindowsFoundation.IID {
    .init(Data1: 0xD495F2FA, Data2: 0x594D, Data3: 0x5170, Data4: ( 0xB1,0xE8,0x86,0x29,0xA1,0x79,0xF9,0xFB ))// D495F2FA-594D-5170-B1E8-8629A179F9FB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewFactory: WindowsFoundation.IID {
    .init(Data1: 0x892947EA, Data2: 0x6B86, Data3: 0x5F17, Data4: ( 0xA9,0xB8,0x21,0x21,0xB2,0x25,0x12,0x71 ))// 892947EA-6B86-5F17-A9B8-2121B2251271
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle: WindowsFoundation.IID {
    .init(Data1: 0xA77D937E, Data2: 0x0188, Data3: 0x584C, Data4: ( 0xAB,0x1D,0x9D,0xF1,0x91,0x6E,0xDC,0x75 ))// A77D937E-0188-584C-AB1D-9DF1916EDC75
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleFactory: WindowsFoundation.IID {
    .init(Data1: 0xDC884AA2, Data2: 0xE2A8, Data3: 0x57AB, Data4: ( 0x8C,0xBC,0xB1,0xD8,0xEC,0x54,0x0B,0x0C ))// DC884AA2-E2A8-57AB-8CBC-B1D8EC540B0C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector: WindowsFoundation.IID {
    .init(Data1: 0x524F5086, Data2: 0x3E02, Data3: 0x5B71, Data4: ( 0xBE,0x7C,0x8A,0x8F,0xA0,0xFE,0xAA,0x2C ))// 524F5086-3E02-5B71-BE7C-8A8FA0FEAA2C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorFactory: WindowsFoundation.IID {
    .init(Data1: 0x0E0699BE, Data2: 0x50C2, Data3: 0x5C15, Data4: ( 0xAE,0xD3,0xE7,0xBD,0x66,0x3E,0x5F,0xAD ))// 0E0699BE-50C2-5C15-AED3-E7BD663E5FAD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides: WindowsFoundation.IID {
    .init(Data1: 0x80594304, Data2: 0xEBEB, Data3: 0x5A5D, Data4: ( 0xA7,0x94,0xAC,0xDC,0x21,0x4C,0xBC,0x94 ))// 80594304-EBEB-5A5D-A794-ACDC214CBC94
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton: WindowsFoundation.IID {
    .init(Data1: 0x6DBEE605, Data2: 0x8DF0, Data3: 0x50CC, Data4: ( 0x9A,0x42,0x25,0x0E,0xB1,0x38,0xF0,0xC6 ))// 6DBEE605-8DF0-50CC-9A42-250EB138F0C6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonFactory: WindowsFoundation.IID {
    .init(Data1: 0x01F775EA, Data2: 0xC5ED, Data3: 0x514A, Data4: ( 0xA2,0x3D,0x89,0xC4,0x94,0xA8,0xF0,0x9D ))// 01F775EA-C5ED-514A-A23D-89C494A8F09D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonStatics: WindowsFoundation.IID {
    .init(Data1: 0xAB5C7B77, Data2: 0x7C4C, Data3: 0x5B26, Data4: ( 0x9C,0x7C,0x76,0x3F,0x8D,0x95,0x25,0x8E ))// AB5C7B77-7C4C-5B26-9C7C-763F8D95258E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement: WindowsFoundation.IID {
    .init(Data1: 0x18F69350, Data2: 0x279E, Data3: 0x50EA, Data4: ( 0x8D,0x23,0x13,0x8E,0x71,0x7E,0xD9,0x39 ))// 18F69350-279E-50EA-8D23-138E717ED939
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElementFactory: WindowsFoundation.IID {
    .init(Data1: 0x7161EEFF, Data2: 0x2CC3, Data3: 0x59C9, Data4: ( 0xB3,0x55,0xF7,0x52,0xEF,0x20,0x30,0xFB ))// 7161EEFF-2CC3-59C9-B355-F752EF2030FB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElementStatics: WindowsFoundation.IID {
    .init(Data1: 0x4CCFDC81, Data2: 0x9D9D, Data3: 0x5A02, Data4: ( 0xB9,0x5B,0xAD,0x1A,0xDD,0x92,0x17,0x50 ))// 4CCFDC81-9D9D-5A02-B95B-AD1ADD921750
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource: WindowsFoundation.IID {
    .init(Data1: 0x39E6B320, Data2: 0xA2AF, Data3: 0x5EE3, Data4: ( 0xB7,0xE9,0x4B,0xA4,0xAA,0x80,0x54,0x1A ))// 39E6B320-A2AF-5EE3-B7E9-4BA4AA80541A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement: WindowsFoundation.IID {
    .init(Data1: 0xAB6F4473, Data2: 0x1F6B, Data3: 0x5B24, Data4: ( 0x82,0x59,0x1D,0x38,0xE9,0x0A,0x11,0x0A ))// AB6F4473-1F6B-5B24-8259-1D38E90A110A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElementFactory: WindowsFoundation.IID {
    .init(Data1: 0x13E1A240, Data2: 0xAD47, Data3: 0x51AE, Data4: ( 0x96,0x32,0x71,0x5F,0x4B,0x7E,0xA5,0x2E ))// 13E1A240-AD47-51AE-9632-715F4B7EA52E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElementStatics: WindowsFoundation.IID {
    .init(Data1: 0x2CC2539F, Data2: 0x69FC, Data3: 0x5160, Data4: ( 0xAB,0x84,0x37,0xE7,0xE0,0x4E,0x26,0x91 ))// 2CC2539F-69FC-5160-AB84-37E7E04E2691
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0xE8BC19C6, Data2: 0x9A64, Data3: 0x5C54, Data4: ( 0x93,0x38,0xE1,0x8E,0x07,0x68,0x75,0xBF ))// E8BC19C6-9A64-5C54-9338-E18E076875BF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides: WindowsFoundation.IID {
    .init(Data1: 0x9A02D369, Data2: 0x1C79, Data3: 0x5A81, Data4: ( 0x87,0x1B,0x0B,0x90,0x94,0x6B,0xA7,0xF0 ))// 9A02D369-1C79-5A81-871B-0B90946BA7F0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0xEED55973, Data2: 0x7E15, Data3: 0x575F, Data4: ( 0xAF,0x8E,0xAE,0x2B,0x9B,0x97,0x5D,0xD7 ))// EED55973-7E15-575F-AF8E-AE2B9B975DD7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage: WindowsFoundation.IID {
    .init(Data1: 0x220D3D8D, Data2: 0x66DE, Data3: 0x53A1, Data4: ( 0xA2,0x15,0xBA,0x9C,0x16,0x55,0x65,0xAB ))// 220D3D8D-66DE-53A1-A215-BA9C165565AB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon: WindowsFoundation.IID {
    .init(Data1: 0x78A7B526, Data2: 0xE635, Data3: 0x59C6, Data4: ( 0x93,0xA1,0xD7,0xE3,0xC2,0xFA,0xC6,0xD5 ))// 78A7B526-E635-59C6-93A1-D7E3C2FAC6D5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIconFactory: WindowsFoundation.IID {
    .init(Data1: 0x235E0279, Data2: 0xA7D0, Data3: 0x5FDA, Data4: ( 0xA3,0x08,0x9B,0x7C,0xB9,0xC4,0xC9,0x12 ))// 235E0279-A7D0-5FDA-A308-9B7CB9C4C912
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIconStatics: WindowsFoundation.IID {
    .init(Data1: 0x6BD31828, Data2: 0xF8F9, Data3: 0x5D86, Data4: ( 0x80,0xD5,0xE7,0x42,0x35,0x46,0xDA,0x7D ))// 6BD31828-F8F9-5D86-80D5-E7423546DA7D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageStatics: WindowsFoundation.IID {
    .init(Data1: 0xCB5378A8, Data2: 0x996B, Data3: 0x547E, Data4: ( 0x9C,0x4C,0x7B,0xBF,0xD9,0xDB,0xE7,0xDC ))// CB5378A8-996B-547E-9C4C-7BBFD9DBE7DC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar: WindowsFoundation.IID {
    .init(Data1: 0xC1C3A438, Data2: 0xDD79, Data3: 0x5D22, Data4: ( 0x9E,0x42,0x5A,0x3C,0xDF,0x81,0x13,0xA9 ))// C1C3A438-DD79-5D22-9E42-5A3CDF8113A9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x593AF0B3, Data2: 0xBDED, Data3: 0x53DA, Data4: ( 0x8F,0x56,0x80,0xED,0x3C,0x64,0x32,0x2C ))// 593AF0B3-BDED-53DA-8F56-80ED3C64322C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0x42FE1F7E, Data2: 0x6D68, Data3: 0x5A85, Data4: ( 0x8A,0x5C,0xAB,0xB7,0xEF,0xFC,0xDF,0x26 ))// 42FE1F7E-6D68-5A85-8A5C-ABB7EFFCDF26
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x062D01D6, Data2: 0x61AF, Data3: 0x5435, Data4: ( 0x8C,0x4B,0xC5,0x11,0x06,0x58,0x3B,0x5B ))// 062D01D6-61AF-5435-8C4B-C51106583B5B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0xD6CFCC14, Data2: 0x5206, Data3: 0x5C9D, Data4: ( 0x80,0x1C,0x3A,0x90,0xB4,0xE2,0xEB,0xE4 ))// D6CFCC14-5206-5C9D-801C-3A90B4E2EBE4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarFactory: WindowsFoundation.IID {
    .init(Data1: 0x60618A60, Data2: 0x9BE7, Data3: 0x5DF5, Data4: ( 0xBE,0x0D,0x93,0x3D,0x34,0xDD,0xB4,0x4C ))// 60618A60-9BE7-5DF5-BE0D-933D34DDB44C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics: WindowsFoundation.IID {
    .init(Data1: 0x5FB1E80D, Data2: 0xEA5D, Data3: 0x57BA, Data4: ( 0x99,0x15,0xB6,0x78,0x2B,0x98,0x2A,0xCA ))// 5FB1E80D-EA5D-57BA-9915-B6782B982ACA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0x926F7292, Data2: 0x9882, Data3: 0x5056, Data4: ( 0x80,0x97,0x6D,0xA2,0xA7,0xEA,0x27,0xCD ))// 926F7292-9882-5056-8097-6DA2A7EA27CD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettingsFactory: WindowsFoundation.IID {
    .init(Data1: 0x29517DAF, Data2: 0xC763, Data3: 0x56CE, Data4: ( 0x8D,0x54,0xEE,0xFC,0xAF,0x7F,0x2E,0x01 ))// 29517DAF-C763-56CE-8D54-EEFCAF7F2E01
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettingsStatics: WindowsFoundation.IID {
    .init(Data1: 0x57671639, Data2: 0x43E8, Data3: 0x506D, Data4: ( 0xB9,0xA7,0x53,0x9A,0x60,0x5A,0x1C,0x67 ))// 57671639-43E8-506D-B9A7-539A605A1C67
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel: WindowsFoundation.IID {
    .init(Data1: 0x84E13E27, Data2: 0x2D24, Data3: 0x59C4, Data4: ( 0xA0,0x0E,0x16,0xC7,0x25,0x59,0x01,0xE2 ))// 84E13E27-2D24-59C4-A00E-16C7255901E2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x3C709B2F, Data2: 0x16BA, Data3: 0x55D2, Data4: ( 0xB6,0xF6,0xDF,0xC5,0x4A,0x1E,0xD0,0x21 ))// 3C709B2F-16BA-55D2-B6F6-DFC54A1ED021
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1CF87A70, Data2: 0x6348, Data3: 0x57EC, Data4: ( 0x9E,0xAC,0xFA,0x05,0x65,0xAD,0xC6,0x0F ))// 1CF87A70-6348-57EC-9EAC-FA0565ADC60F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition: WindowsFoundation.IID {
    .init(Data1: 0x63A8D310, Data2: 0x4D8A, Data3: 0x515E, Data4: ( 0xA9,0x00,0x04,0x16,0xD9,0x37,0x45,0x75 ))// 63A8D310-4D8A-515E-A900-0416D9374575
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB43CA4F6, Data2: 0x7AE5, Data3: 0x576F, Data4: ( 0xB7,0x4D,0xEC,0x70,0xB1,0xC5,0x84,0x88 ))// B43CA4F6-7AE5-576F-B74D-EC70B1C58488
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProgress: WindowsFoundation.IID {
    .init(Data1: 0x4DA82DDE, Data2: 0xC778, Data3: 0x57F6, Data4: ( 0xA0,0xE7,0xA7,0x67,0xEF,0x08,0x59,0x1D ))// 4DA82DDE-C778-57F6-A0E7-A767EF08591D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider: WindowsFoundation.IID {
    .init(Data1: 0x32132262, Data2: 0xE07D, Data3: 0x51F7, Data4: ( 0xA6,0x88,0x95,0x28,0x04,0x2F,0x7E,0x0B ))// 32132262-E07D-51F7-A688-9528042F7E0B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderFactory: WindowsFoundation.IID {
    .init(Data1: 0xF1B53104, Data2: 0x24BE, Data3: 0x510D, Data4: ( 0x9E,0xB1,0x34,0x01,0xDE,0x36,0x1D,0xBC ))// F1B53104-24BE-510D-9EB1-3401DE361DBC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderOverrides: WindowsFoundation.IID {
    .init(Data1: 0x6935222B, Data2: 0xEF83, Data3: 0x5872, Data4: ( 0xA9,0xD4,0x83,0x19,0xBC,0xD6,0x7A,0x67 ))// 6935222B-EF83-5872-A9D4-8319BCD67A67
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator: WindowsFoundation.IID {
    .init(Data1: 0xC4C5D5AE, Data2: 0xED98, Data3: 0x510F, Data4: ( 0xAF,0xAE,0x8A,0x0A,0xC6,0x06,0x7A,0x3B ))// C4C5D5AE-ED98-510F-AFAE-8A0AC6067A3B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping: WindowsFoundation.IID {
    .init(Data1: 0xB3E03A32, Data2: 0xEA83, Data3: 0x5626, Data4: ( 0xBF,0xDA,0xD3,0x27,0xA1,0xC7,0x55,0x0C ))// B3E03A32-EA83-5626-BFDA-D327A1C7550C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl: WindowsFoundation.IID {
    .init(Data1: 0xBF1CCB54, Data2: 0x83E2, Data3: 0x5B98, Data4: ( 0xAC,0xBC,0x73,0x6F,0x87,0x6C,0x3D,0x35 ))// BF1CCB54-83E2-5B98-ACBC-736F876C3D35
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlFactory: WindowsFoundation.IID {
    .init(Data1: 0xB2686273, Data2: 0x2DD3, Data3: 0x5454, Data4: ( 0x9F,0x25,0x24,0x7E,0x66,0x27,0x03,0x36 ))// B2686273-2DD3-5454-9F25-247E66270336
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides: WindowsFoundation.IID {
    .init(Data1: 0x285C215F, Data2: 0x64B2, Data3: 0x5F7D, Data4: ( 0x88,0xD2,0x56,0xC6,0x65,0x8F,0x73,0xEE ))// 285C215F-64B2-5F7D-88D2-56C6658F73EE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics: WindowsFoundation.IID {
    .init(Data1: 0x4FB961E1, Data2: 0x5F91, Data3: 0x5585, Data4: ( 0xA6,0x92,0x68,0x25,0xCD,0xE3,0xED,0x1E ))// 4FB961E1-5F91-5585-A692-6825CDE3ED1E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate: WindowsFoundation.IID {
    .init(Data1: 0x6153AF2F, Data2: 0xF095, Data3: 0x5E8C, Data4: ( 0x89,0xD4,0x9E,0x03,0x20,0x3B,0x9C,0xC2 ))// 6153AF2F-F095-5E8C-89D4-9E03203B9CC2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater: WindowsFoundation.IID {
    .init(Data1: 0x9DABAC84, Data2: 0xFE81, Data3: 0x53D1, Data4: ( 0xA0,0x41,0x7A,0x3B,0xEF,0xEA,0x50,0x5F ))// 9DABAC84-FE81-53D1-A041-7A3BEFEA505F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater2: WindowsFoundation.IID {
    .init(Data1: 0x265E249A, Data2: 0x2812, Data3: 0x55B6, Data4: ( 0xA1,0x91,0xCB,0x96,0x08,0x9B,0x51,0xAC ))// 265E249A-2812-55B6-A191-CB96089B51AC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementClearingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x8F394A59, Data2: 0x07C6, Data3: 0x54CE, Data4: ( 0x80,0xD1,0xBB,0x0B,0x71,0xDA,0xEF,0xA0 ))// 8F394A59-07C6-54CE-80D1-BB0B71DAEFA0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementIndexChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x38E3D613, Data2: 0x48FB, Data3: 0x5906, Data4: ( 0xBF,0x18,0xF7,0x13,0x03,0x01,0xFC,0xC3 ))// 38E3D613-48FB-5906-BF18-F7130301FCC3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementPreparedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x612DB572, Data2: 0xC2E7, Data3: 0x58FC, Data4: ( 0x94,0x8A,0xB7,0xDC,0x0E,0x1F,0xC1,0x3A ))// 612DB572-C2E7-58FC-948A-B7DC0E1FC13A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterFactory: WindowsFoundation.IID {
    .init(Data1: 0xC3C1F244, Data2: 0x67A8, Data3: 0x568F, Data4: ( 0xA6,0xF7,0x5D,0xA8,0xB0,0xEA,0xDD,0x49 ))// C3C1F244-67A8-568F-A6F7-5DA8B0EADD49
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics: WindowsFoundation.IID {
    .init(Data1: 0xED8C4CB7, Data2: 0x2EDC, Data3: 0x5416, Data4: ( 0xAF,0xBF,0x87,0xA9,0xAA,0x2A,0xF2,0x6E ))// ED8C4CB7-2EDC-5416-AFBF-87A9AA2AF26E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics2: WindowsFoundation.IID {
    .init(Data1: 0x83D8B5EA, Data2: 0xCA31, Data3: 0x5192, Data4: ( 0xB9,0xA9,0x2A,0x62,0xE6,0x01,0x94,0xE7 ))// 83D8B5EA-CA31-5192-B9A9-2A62E60194E7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView: WindowsFoundation.IID {
    .init(Data1: 0xF7F802DE, Data2: 0xE79C, Data3: 0x5C5F, Data4: ( 0xAB,0xF8,0xCC,0xBD,0x48,0x6B,0x89,0xD6 ))// F7F802DE-E79C-5C5F-ABF8-CCBD486B89D6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceViewFactory: WindowsFoundation.IID {
    .init(Data1: 0xAADC6FDD, Data2: 0xEB00, Data3: 0x5E58, Data4: ( 0xB9,0x5D,0x12,0x0F,0x89,0x1D,0x73,0x3F ))// AADC6FDD-EB00-5E58-B95D-120F891D733F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMapping: WindowsFoundation.IID {
    .init(Data1: 0xB1F3BBA0, Data2: 0x108E, Data3: 0x560D, Data4: ( 0x96,0x81,0x26,0x39,0x1B,0x4B,0xC3,0x0D ))// B1F3BBA0-108E-560D-9681-26391B4BC30D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout: WindowsFoundation.IID {
    .init(Data1: 0x24E50C1C, Data2: 0x9C51, Data3: 0x5144, Data4: ( 0x9D,0xDC,0x3F,0x50,0x01,0x91,0xC2,0x62 ))// 24E50C1C-9C51-5144-9DDC-3F500191C262
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout2: WindowsFoundation.IID {
    .init(Data1: 0xCC545FF5, Data2: 0x0C41, Data3: 0x5C14, Data4: ( 0x95,0x65,0x25,0x57,0xCC,0xC8,0x41,0x32 ))// CC545FF5-0C41-5C14-9565-2557CCC84132
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext: WindowsFoundation.IID {
    .init(Data1: 0xB45A2E55, Data2: 0x2ECC, Data3: 0x5462, Data4: ( 0xBB,0x26,0xD4,0x7C,0x45,0x5B,0xB4,0x8E ))// B45A2E55-2ECC-5462-BB26-D47C455BB48E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContextFactory: WindowsFoundation.IID {
    .init(Data1: 0xF7664771, Data2: 0x9242, Data3: 0x599E, Data4: ( 0xA7,0xDD,0x07,0x05,0x56,0x5D,0xEF,0x98 ))// F7664771-9242-599E-A7DD-0705565DEF98
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContextOverrides: WindowsFoundation.IID {
    .init(Data1: 0xFDA70E44, Data2: 0x6526, Data3: 0x5535, Data4: ( 0xBE,0x2B,0xEC,0x27,0x43,0x67,0x0A,0xE2 ))// FDA70E44-6526-5535-BE2B-EC2743670AE2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutFactory: WindowsFoundation.IID {
    .init(Data1: 0xEAF956B4, Data2: 0x59C9, Data3: 0x5E13, Data4: ( 0xA4,0x9D,0xF3,0x5B,0x17,0x1D,0x8F,0xC9 ))// EAF956B4-59C9-5E13-A49D-F35B171D8FC9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutOverrides: WindowsFoundation.IID {
    .init(Data1: 0x441D00C3, Data2: 0xDD50, Data3: 0x5348, Data4: ( 0x85,0x2D,0x85,0x60,0x8C,0xC7,0xDC,0xE1 ))// 441D00C3-DD50-5348-852D-85608CC7DCE1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutProtected: WindowsFoundation.IID {
    .init(Data1: 0xE46FF416, Data2: 0x741E, Data3: 0x5176, Data4: ( 0xA1,0xD4,0x57,0x18,0xD2,0x34,0x22,0x43 ))// E46FF416-741E-5176-A1D4-5718D2342243
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutProtected2: WindowsFoundation.IID {
    .init(Data1: 0x3FFFE35F, Data2: 0x6F2E, Data3: 0x501F, Data4: ( 0xA2,0xAD,0xE7,0x5A,0x4E,0x1C,0xD5,0x92 ))// 3FFFE35F-6F2E-501F-A2AD-E75A4E1CD592
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox: WindowsFoundation.IID {
    .init(Data1: 0xF3E7DEDF, Data2: 0x7A3C, Data3: 0x59F1, Data4: ( 0x9E,0x05,0xAE,0x50,0x26,0xB5,0x42,0x93 ))// F3E7DEDF-7A3C-59F1-9E05-AE5026B54293
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxFactory: WindowsFoundation.IID {
    .init(Data1: 0xD048E0BC, Data2: 0x4692, Data3: 0x5C60, Data4: ( 0xB2,0xE9,0x07,0xC4,0x43,0x3C,0xE0,0x50 ))// D048E0BC-4692-5C60-B2E9-07C4433CE050
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItem: WindowsFoundation.IID {
    .init(Data1: 0xCC67FB35, Data2: 0x04F1, Data3: 0x5EAD, Data4: ( 0x96,0xC5,0xB2,0xEA,0x67,0xB2,0x25,0xC6 ))// CC67FB35-04F1-5EAD-96C5-B2EA67B225C6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x8E9E0E6D, Data2: 0x4597, Data3: 0x5EFA, Data4: ( 0x94,0xBC,0x7F,0xFA,0xDC,0x26,0x4C,0x28 ))// 8E9E0E6D-4597-5EFA-94BC-7FFADC264C28
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxStatics: WindowsFoundation.IID {
    .init(Data1: 0x763A4986, Data2: 0xDB3A, Data3: 0x5A94, Data4: ( 0x85,0x05,0xAE,0xE2,0xF2,0x29,0xAF,0x85 ))// 763A4986-DB3A-5A94-8505-AEE2F229AF85
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView: WindowsFoundation.IID {
    .init(Data1: 0xF6015DB1, Data2: 0xDF63, Data3: 0x52FD, Data4: ( 0xA1,0x64,0x0D,0xF4,0x47,0x15,0xEE,0x0A ))// F6015DB1-DF63-52FD-A164-0DF44715EE0A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase: WindowsFoundation.IID {
    .init(Data1: 0x775C57AC, Data2: 0xABCE, Data3: 0x5BEB, Data4: ( 0x8E,0x34,0x3B,0x81,0x58,0xAE,0xDD,0x80 ))// 775C57AC-ABCE-5BEB-8E34-3B8158AEDD80
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x44092863, Data2: 0xC09E, Data3: 0x551E, Data4: ( 0x85,0xBF,0x95,0x1B,0x55,0x29,0x50,0xC8 ))// 44092863-C09E-551E-85BF-951B552950C8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem: WindowsFoundation.IID {
    .init(Data1: 0x9220C4FF, Data2: 0x1974, Data3: 0x53FD, Data4: ( 0xAD,0x74,0xC2,0x9E,0x7B,0x36,0x0A,0x06 ))// 9220C4FF-1974-53FD-AD74-C29E7B360A06
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x228FC10A, Data2: 0xB86F, Data3: 0x5B57, Data4: ( 0x96,0xF4,0x34,0xD9,0xF9,0xFB,0x87,0x11 ))// 228FC10A-B86F-5B57-96F4-34D9F9FB8711
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics: WindowsFoundation.IID {
    .init(Data1: 0xB8487E94, Data2: 0x010F, Data3: 0x56D4, Data4: ( 0x9F,0x76,0x94,0xBF,0x8C,0x46,0x27,0x45 ))// B8487E94-010F-56D4-9F76-94BF8C462745
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewFactory: WindowsFoundation.IID {
    .init(Data1: 0x03EBEFB8, Data2: 0xF64A, Data3: 0x5BF9, Data4: ( 0x95,0x70,0xCB,0x09,0xEE,0xEA,0x23,0x35 ))// 03EBEFB8-F64A-5BF9-9570-CB09EEEA2335
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem: WindowsFoundation.IID {
    .init(Data1: 0x05FE41C2, Data2: 0x0451, Data3: 0x5D38, Data4: ( 0x9C,0x55,0x5D,0x10,0xCF,0xD0,0x88,0x89 ))// 05FE41C2-0451-5D38-9C55-5D10CFD08889
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItemFactory: WindowsFoundation.IID {
    .init(Data1: 0xD9F4D0B8, Data2: 0xEE59, Data3: 0x5036, Data4: ( 0xBD,0x7A,0x7C,0x89,0xCF,0x0B,0xC2,0xAC ))// D9F4D0B8-EE59-5036-BD7A-7C89CF0BC2AC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement: WindowsFoundation.IID {
    .init(Data1: 0xC314A38C, Data2: 0x780C, Data3: 0x558A, Data4: ( 0x98,0xCD,0x0A,0x8D,0xEB,0x46,0x7F,0xCF ))// C314A38C-780C-558A-98CD-0A8DEB467FCF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementFactory: WindowsFoundation.IID {
    .init(Data1: 0x51ACA342, Data2: 0x65A0, Data3: 0x5DB6, Data4: ( 0x80,0x82,0xBD,0x54,0xA8,0xD1,0x49,0x99 ))// 51ACA342-65A0-5DB6-8082-BD54A8D14999
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementStatics: WindowsFoundation.IID {
    .init(Data1: 0x6F77BBA8, Data2: 0xFB23, Data3: 0x5E27, Data4: ( 0x97,0xC1,0x16,0xD4,0x37,0xD0,0x70,0x2F ))// 6F77BBA8-FB23-5E27-97C1-16D437D0702F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls: WindowsFoundation.IID {
    .init(Data1: 0xC99C110B, Data2: 0x9DEE, Data3: 0x5A6B, Data4: ( 0xBB,0x9E,0x61,0xBF,0xCA,0xAA,0xFA,0x3E ))// C99C110B-9DEE-5A6B-BB9E-61BFCAAAFA3E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsFactory: WindowsFoundation.IID {
    .init(Data1: 0xA3F9A254, Data2: 0x1BCF, Data3: 0x57B5, Data4: ( 0x94,0x81,0xC1,0x9C,0x45,0x83,0xAC,0x0E ))// A3F9A254-1BCF-57B5-9481-C19C4583AC0E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics: WindowsFoundation.IID {
    .init(Data1: 0xF497067E, Data2: 0x7C41, Data3: 0x5083, Data4: ( 0x96,0xC5,0xB6,0x88,0x1D,0x88,0xB1,0x87 ))// F497067E-7C41-5083-96C5-B6881D88B187
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar: WindowsFoundation.IID {
    .init(Data1: 0xBA97F337, Data2: 0x8F1E, Data3: 0x5141, Data4: ( 0xB5,0x3F,0xE7,0x7A,0x8B,0xA3,0xEB,0xBD ))// BA97F337-8F1E-5141-B53F-E77A8BA3EBBD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarFactory: WindowsFoundation.IID {
    .init(Data1: 0x76AA8759, Data2: 0x04EE, Data3: 0x5A4C, Data4: ( 0xB9,0x8C,0xD0,0x37,0x42,0xD4,0x7C,0xDB ))// 76AA8759-04EE-5A4C-B98C-D03742D47CDB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem: WindowsFoundation.IID {
    .init(Data1: 0xA7900980, Data2: 0x51CC, Data3: 0x531D, Data4: ( 0x97,0xC5,0x35,0x6B,0x13,0x57,0x33,0x98 ))// A7900980-51CC-531D-97C5-356B13573398
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x87D02172, Data2: 0x83CB, Data3: 0x5459, Data4: ( 0x94,0x0F,0x17,0x3F,0x75,0x01,0xB3,0x00 ))// 87D02172-83CB-5459-940F-173F7501B300
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemStatics: WindowsFoundation.IID {
    .init(Data1: 0xC8A33F46, Data2: 0x2E1C, Data3: 0x5CE0, Data4: ( 0xBC,0x09,0x45,0x24,0xE6,0x89,0x41,0xC8 ))// C8A33F46-2E1C-5CE0-BC09-4524E68941C8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarStatics: WindowsFoundation.IID {
    .init(Data1: 0x79AA0B84, Data2: 0x5554, Data3: 0x5F7C, Data4: ( 0x80,0xD9,0x79,0x70,0xAA,0x03,0x01,0x25 ))// 79AA0B84-5554-5F7C-80D9-7970AA030125
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout: WindowsFoundation.IID {
    .init(Data1: 0xF4C77C6C, Data2: 0x1FA5, Data3: 0x5D85, Data4: ( 0x85,0x59,0x5D,0x02,0xB7,0xD4,0xE5,0xE7 ))// F4C77C6C-1FA5-5D85-8559-5D02B7D4E5E7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutFactory: WindowsFoundation.IID {
    .init(Data1: 0xA3D225DE, Data2: 0x6B35, Data3: 0x5442, Data4: ( 0xB6,0xC9,0x06,0xFD,0x24,0x13,0x9A,0x63 ))// A3D225DE-6B35-5442-B6C9-06FD24139A63
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem: WindowsFoundation.IID {
    .init(Data1: 0x4252DF5A, Data2: 0x44F9, Data3: 0x5EE8, Data4: ( 0xB1,0xCC,0x53,0xDE,0x9A,0xAA,0x40,0x95 ))// 4252DF5A-44F9-5EE8-B1CC-53DE9AAA4095
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase: WindowsFoundation.IID {
    .init(Data1: 0x4BEE2715, Data2: 0x44A1, Data3: 0x5F94, Data4: ( 0x86,0xE8,0x02,0xDD,0xBE,0x3D,0xC6,0xB9 ))// 4BEE2715-44A1-5F94-86E8-02DDBE3DC6B9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x33F4EAD3, Data2: 0xAB54, Data3: 0x505D, Data4: ( 0xBC,0x5F,0x45,0xE7,0xC3,0x5F,0x20,0xF8 ))// 33F4EAD3-AB54-505D-BC5F-45E7C35F20F8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x9C3C9A1F, Data2: 0x89AF, Data3: 0x521A, Data4: ( 0x81,0xA5,0x8A,0x01,0xDB,0x7A,0x79,0xAF ))// 9C3C9A1F-89AF-521A-81A5-8A01DB7A79AF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics: WindowsFoundation.IID {
    .init(Data1: 0x9D7953D6, Data2: 0xE6A6, Data3: 0x5154, Data4: ( 0x91,0xF4,0x67,0xF4,0xD6,0x04,0x2A,0x4F ))// 9D7953D6-E6A6-5154-91F4-67F4D6042A4F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator: WindowsFoundation.IID {
    .init(Data1: 0x3EAF5FD5, Data2: 0x935E, Data3: 0x5ED7, Data4: ( 0x8D,0x05,0xF6,0xBA,0xFA,0x93,0x6D,0x25 ))// 3EAF5FD5-935E-5ED7-8D05-F6BAFA936D25
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparatorFactory: WindowsFoundation.IID {
    .init(Data1: 0x26156C9C, Data2: 0x95EF, Data3: 0x5E55, Data4: ( 0x83,0x42,0x77,0x3F,0xC4,0x3B,0xAA,0xC3 ))// 26156C9C-95EF-5E55-8342-773FC43BAAC3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutStatics: WindowsFoundation.IID {
    .init(Data1: 0x6959E683, Data2: 0x16F6, Data3: 0x5208, Data4: ( 0x84,0xE0,0xB0,0xBE,0x92,0xD9,0xF6,0xDD ))// 6959E683-16F6-5208-84E0-B0BE92D9F6DD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem: WindowsFoundation.IID {
    .init(Data1: 0x6B0688C1, Data2: 0x47B0, Data3: 0x53B5, Data4: ( 0xB6,0xF9,0x5E,0xC5,0xD6,0x62,0x3B,0x84 ))// 6B0688C1-47B0-53B5-B6F9-5EC5D6623B84
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItemStatics: WindowsFoundation.IID {
    .init(Data1: 0xF59A8DDF, Data2: 0x804B, Data3: 0x5F56, Data4: ( 0xBC,0x42,0xF2,0x7F,0x98,0x7D,0xB2,0x91 ))// F59A8DDF-804B-5F56-BC42-F27F987DB291
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigate: WindowsFoundation.IID {
    .init(Data1: 0xDD06F030, Data2: 0x5D47, Data3: 0x533C, Data4: ( 0x95,0xCF,0xDE,0x25,0x6A,0x0F,0x37,0x3A ))// DD06F030-5D47-533C-95CF-DE256A0F373A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage: WindowsFoundation.IID {
    .init(Data1: 0xEB42988E, Data2: 0x6CB5, Data3: 0x5DD6, Data4: ( 0x9E,0x59,0x4C,0x04,0xE5,0xCA,0xEC,0x6D ))// EB42988E-6CB5-5DD6-9E59-4C04E5CAEC6D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageFactory: WindowsFoundation.IID {
    .init(Data1: 0xFF4357D5, Data2: 0xDDCD, Data3: 0x5129, Data4: ( 0x9D,0x0F,0xD8,0xAE,0xD2,0xAD,0xC1,0xA9 ))// FF4357D5-DDCD-5129-9D0F-D8AED2ADC1A9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageOverrides: WindowsFoundation.IID {
    .init(Data1: 0x9B8445F7, Data2: 0xD938, Data3: 0x5626, Data4: ( 0x85,0x0A,0x86,0xE9,0x1C,0xA8,0x9E,0x98 ))// 9B8445F7-D938-5626-850A-86E91CA89E98
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageStatics: WindowsFoundation.IID {
    .init(Data1: 0xB6241486, Data2: 0xA374, Data3: 0x5D09, Data4: ( 0xA0,0x1F,0x9A,0xBE,0x31,0x1C,0x08,0x84 ))// B6241486-A374-5D09-A01F-9ABE311C0884
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel: WindowsFoundation.IID {
    .init(Data1: 0x27A1B418, Data2: 0x56F3, Data3: 0x525E, Data4: ( 0xB8,0x83,0xCE,0xFE,0xD9,0x05,0xEE,0xD3 ))// 27A1B418-56F3-525E-B883-CEFED905EED3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory: WindowsFoundation.IID {
    .init(Data1: 0xF5E7E21C, Data2: 0x4C97, Data3: 0x5D20, Data4: ( 0xBE,0xE6,0x3E,0x4F,0xC6,0xAB,0x14,0xE9 ))// F5E7E21C-4C97-5D20-BEE6-3E4FC6AB14E9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics: WindowsFoundation.IID {
    .init(Data1: 0x76A9CAA7, Data2: 0xA5D4, Data3: 0x5061, Data4: ( 0xA3,0x25,0x17,0xC7,0x6F,0x66,0xDE,0x51 ))// 76A9CAA7-A5D4-5061-A325-17C76F66DE51
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox: WindowsFoundation.IID {
    .init(Data1: 0x6D3CCFF7, Data2: 0xAAEE, Data3: 0x5ADC, Data4: ( 0x82,0x98,0x33,0x30,0x0F,0xA1,0x19,0xDA ))// 6D3CCFF7-AAEE-5ADC-8298-33300FA119DA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9A2F3B79, Data2: 0xC00C, Data3: 0x5D27, Data4: ( 0xBB,0x67,0x92,0xCA,0xB3,0xDB,0x04,0x77 ))// 9A2F3B79-C00C-5D27-BB67-92CAB3DB0477
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics: WindowsFoundation.IID {
    .init(Data1: 0x90E6559C, Data2: 0x5F74, Data3: 0x5CD1, Data4: ( 0x87,0xB6,0xC0,0x51,0x40,0x85,0xAB,0x42 ))// 90E6559C-5F74-5CD1-87B6-C0514085AB42
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager: WindowsFoundation.IID {
    .init(Data1: 0xDE7FC5D5, Data2: 0x9446, Data3: 0x5693, Data4: ( 0xBB,0xF3,0xFD,0x7F,0x94,0x3A,0x56,0x7C ))// DE7FC5D5-9446-5693-BBF3-FD7F943A567C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerFactory: WindowsFoundation.IID {
    .init(Data1: 0x020722CD, Data2: 0x813A, Data3: 0x5165, Data4: ( 0xA8,0x99,0x3D,0xF9,0xAD,0xCD,0x80,0x5E ))// 020722CD-813A-5165-A899-3DF9ADCD805E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerSelectedIndexChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6C2CE4FC, Data2: 0xBF52, Data3: 0x5CA6, Data4: ( 0x9D,0xA4,0xB0,0xBD,0x5B,0x92,0x8D,0x97 ))// 6C2CE4FC-BF52-5CA6-9DA4-B0BD5B928D97
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics: WindowsFoundation.IID {
    .init(Data1: 0x37714CD8, Data2: 0xFBA6, Data3: 0x5D98, Data4: ( 0xA3,0x95,0x0A,0x7A,0x3E,0xA6,0x48,0x67 ))// 37714CD8-FBA6-5D98-A395-0A7A3EA64867
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0x9D8C1252, Data2: 0x56C5, Data3: 0x57AF, Data4: ( 0x9A,0x3A,0x08,0xE9,0xB9,0x47,0xE5,0xFA ))// 9D8C1252-56C5-57AF-9A3A-08E9B947E5FA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar: WindowsFoundation.IID {
    .init(Data1: 0x87555C8C, Data2: 0x0AAF, Data3: 0x52C1, Data4: ( 0x83,0x90,0x0D,0xB1,0x7F,0x40,0x43,0x8E ))// 87555C8C-0AAF-52C1-8390-0DB17F40438E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarFactory: WindowsFoundation.IID {
    .init(Data1: 0x189826AD, Data2: 0xF6F2, Data3: 0x533E, Data4: ( 0x9D,0xDB,0xB6,0x60,0x0E,0x88,0x67,0x5B ))// 189826AD-F6F2-533E-9DDB-B6600E88675B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarStatics: WindowsFoundation.IID {
    .init(Data1: 0x61BBB127, Data2: 0xE4C4, Data3: 0x5E22, Data4: ( 0xA8,0xDC,0xCF,0xCF,0x95,0x72,0x36,0xD0 ))// 61BBB127-E4C4-5E22-A8DC-CFCF957236D0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0xFBEA95C9, Data2: 0x9EF9, Data3: 0x5E79, Data4: ( 0xAF,0x54,0x44,0xDE,0xD2,0x80,0x35,0xD5 ))// FBEA95C9-9EF9-5E79-AF54-44DED28035D5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing: WindowsFoundation.IID {
    .init(Data1: 0x2670D03F, Data2: 0xE28C, Data3: 0x5652, Data4: ( 0xBE,0xE2,0xB5,0x21,0x2E,0xBD,0xF7,0xFF ))// 2670D03F-E28C-5652-BEE2-B5212EBDF7FF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingFactory: WindowsFoundation.IID {
    .init(Data1: 0x092FA98C, Data2: 0x62A7, Data3: 0x5DBC, Data4: ( 0x9A,0x85,0x3E,0x55,0x6B,0xA8,0x1F,0x79 ))// 092FA98C-62A7-5DBC-9A85-3E556BA81F79
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics: WindowsFoundation.IID {
    .init(Data1: 0x4BA1166A, Data2: 0xCEC2, Data3: 0x50E2, Data4: ( 0xB2,0x6B,0x66,0xB6,0x9D,0xC2,0xE3,0x71 ))// 4BA1166A-CEC2-50E2-B26B-66B69DC2E371
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0x34020D86, Data2: 0xE1C1, Data3: 0x5D7C, Data4: ( 0xB2,0x23,0xAC,0xD7,0xF8,0x62,0xFF,0xD5 ))// 34020D86-E1C1-5D7C-B223-ACD7F862FFD5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton: WindowsFoundation.IID {
    .init(Data1: 0x38F30CEE, Data2: 0xE75A, Data3: 0x5BA1, Data4: ( 0xAE,0x64,0x44,0x74,0xA3,0xAB,0xEA,0xC7 ))// 38F30CEE-E75A-5BA1-AE64-4474A3ABEAC7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonFactory: WindowsFoundation.IID {
    .init(Data1: 0x5772C79A, Data2: 0xB3EB, Data3: 0x5719, Data4: ( 0x80,0x05,0x2A,0x51,0x34,0x29,0x49,0x5A ))// 5772C79A-B3EB-5719-8005-2A513429495A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonStatics: WindowsFoundation.IID {
    .init(Data1: 0xA8BCE4D4, Data2: 0x68FE, Data3: 0x53D9, Data4: ( 0xA3,0x17,0x74,0xAB,0x40,0x9C,0xD4,0xEE ))// A8BCE4D4-68FE-53D9-A317-74AB409CD4EE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons: WindowsFoundation.IID {
    .init(Data1: 0x966DAF80, Data2: 0xEE85, Data3: 0x5D90, Data4: ( 0xB6,0xB3,0x80,0xBE,0xC9,0x13,0x46,0x73 ))// 966DAF80-EE85-5D90-B6B3-80BEC9134673
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsFactory: WindowsFoundation.IID {
    .init(Data1: 0x2CF95EFB, Data2: 0xA7A2, Data3: 0x5D85, Data4: ( 0x8E,0xAD,0xEA,0x22,0x2B,0xAA,0x3C,0x55 ))// 2CF95EFB-A7A2-5D85-8EAD-EA222BAA3C55
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics: WindowsFoundation.IID {
    .init(Data1: 0xDE0BF0CA, Data2: 0x9AE8, Data3: 0x5B8A, Data4: ( 0x97,0x38,0x7D,0x98,0xB3,0x44,0xC0,0x39 ))// DE0BF0CA-9AE8-5B8A-9738-7D98B344C039
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel: WindowsFoundation.IID {
    .init(Data1: 0xC432FCC4, Data2: 0x88F2, Data3: 0x59D8, Data4: ( 0x9D,0x0E,0xA2,0x37,0xBE,0xAE,0xB0,0x7F ))// C432FCC4-88F2-59D8-9D0E-A237BEAEB07F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelFactory: WindowsFoundation.IID {
    .init(Data1: 0xC85F1443, Data2: 0xD973, Data3: 0x50FD, Data4: ( 0x94,0x97,0xB8,0x67,0xF4,0x92,0x46,0x8F ))// C85F1443-D973-50FD-9497-B867F492468F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics: WindowsFoundation.IID {
    .init(Data1: 0xBDD929A2, Data2: 0x76CC, Data3: 0x59C4, Data4: ( 0x82,0xC1,0xF1,0x4B,0x5D,0xA4,0x22,0x1A ))// BDD929A2-76CC-59C4-82C1-F14B5DA4221A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition: WindowsFoundation.IID {
    .init(Data1: 0xFE870F2F, Data2: 0x89EF, Data3: 0x5DAC, Data4: ( 0x9F,0x33,0x96,0x8D,0x0D,0xC5,0x77,0xC3 ))// FE870F2F-89EF-5DAC-9F33-968D0DC577C3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionStatics: WindowsFoundation.IID {
    .init(Data1: 0x7317C7C5, Data2: 0xFD6F, Data3: 0x58D9, Data4: ( 0x9B,0x53,0x49,0x78,0xDB,0xAC,0xDE,0x23 ))// 7317C7C5-FD6F-58D9-9B53-4978DBACDE23
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider: WindowsFoundation.IID {
    .init(Data1: 0x885DF41F, Data2: 0xF240, Data3: 0x5B7B, Data4: ( 0xA7,0x03,0xBF,0xAF,0x39,0xC6,0xA2,0xCD ))// 885DF41F-F240-5B7B-A703-BFAF39C6A2CD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView: WindowsFoundation.IID {
    .init(Data1: 0x8C98C86D, Data2: 0x378A, Data3: 0x5102, Data4: ( 0xA1,0xE3,0x33,0x52,0x28,0x0F,0xA0,0x10 ))// 8C98C86D-378A-5102-A1E3-3352280FA010
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewFactory: WindowsFoundation.IID {
    .init(Data1: 0xF3547344, Data2: 0x22E4, Data3: 0x5E6C, Data4: ( 0x9E,0xCE,0x66,0x50,0x4E,0xF7,0x33,0xED ))// F3547344-22E4-5E6C-9ECE-66504EF733ED
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics: WindowsFoundation.IID {
    .init(Data1: 0xAC966C50, Data2: 0x31F1, Data3: 0x5485, Data4: ( 0x8E,0x08,0xEE,0x7A,0x7E,0x9A,0x6F,0xD0 ))// AC966C50-31F1-5485-8E08-EE7A7E9A6FD0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer: WindowsFoundation.IID {
    .init(Data1: 0x1DC28C2E, Data2: 0x996C, Data3: 0x5394, Data4: ( 0x89,0xC3,0x4D,0xC6,0x56,0xB4,0xAD,0x46 ))// 1DC28C2E-996C-5394-89C3-4DC656B4AD46
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics: WindowsFoundation.IID {
    .init(Data1: 0xD971FD86, Data2: 0x0A96, Data3: 0x50C4, Data4: ( 0xA6,0xE1,0x99,0x75,0xFA,0xA2,0xA1,0x42 ))// D971FD86-0A96-50C4-A6E1-9975FAA2A142
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView: WindowsFoundation.IID {
    .init(Data1: 0x1E9F68EE, Data2: 0x6CE5, Data3: 0x5CBF, Data4: ( 0xBB,0xFE,0xB8,0xCD,0x28,0x4B,0x9C,0x23 ))// 1E9F68EE-6CE5-5CBF-BBFE-B8CD284B9C23
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xBF7BB85B, Data2: 0x1D46, Data3: 0x5004, Data4: ( 0xA3,0x70,0xEC,0xB6,0x26,0x63,0x05,0x88 ))// BF7BB85B-1D46-5004-A370-ECB626630588
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xAEE37D7C, Data2: 0x4696, Data3: 0x55F1, Data4: ( 0x96,0xCA,0x65,0x68,0x32,0xFC,0x0F,0xD2 ))// AEE37D7C-4696-55F1-96CA-656832FC0FD2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6A46CB4B, Data2: 0xAB26, Data3: 0x55B2, Data4: ( 0xAA,0x76,0x9B,0x33,0x7A,0x4F,0x8E,0x8E ))// 6A46CB4B-AB26-55B2-AA76-9B337A4F8E8E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x09760D99, Data2: 0xD60C, Data3: 0x5C76, Data4: ( 0x80,0x33,0x12,0x7B,0x20,0x85,0x35,0x8C ))// 09760D99-D60C-5C76-8033-127B2085358C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x7ACB0423, Data2: 0x6FC7, Data3: 0x516B, Data4: ( 0xAB,0x67,0x03,0xA4,0xA4,0x28,0x5A,0x90 ))// 7ACB0423-6FC7-516B-AB67-03A4A4285A90
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9BDEAE9C, Data2: 0x972C, Data3: 0x54AE, Data4: ( 0x9C,0x62,0xFC,0x1A,0x03,0xFF,0x3F,0xA8 ))// 9BDEAE9C-972C-54AE-9C62-FC1A03FF3FA8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions: WindowsFoundation.IID {
    .init(Data1: 0x30B2E77B, Data2: 0x2553, Data3: 0x5B09, Data4: ( 0xB3,0x08,0xB4,0xB0,0x6F,0xC8,0xF9,0xAF ))// 30B2E77B-2553-5B09-B308-B4B06FC8F9AF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptionsFactory: WindowsFoundation.IID {
    .init(Data1: 0x31EB58FE, Data2: 0x0F6A, Data3: 0x51EC, Data4: ( 0x90,0xDB,0x5C,0xCA,0xA0,0xA2,0x88,0xA6 ))// 31EB58FE-0F6A-51EC-90DB-5CCAA0A288A6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x59BFB77B, Data2: 0x47C9, Data3: 0x5691, Data4: ( 0xBD,0xCD,0x53,0x6F,0xBE,0x8E,0xB8,0xC1 ))// 59BFB77B-47C9-5691-BDCD-536FBE8EB8C1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC821207E, Data2: 0xAB2A, Data3: 0x5F6C, Data4: ( 0x90,0x74,0x41,0x18,0x40,0xA6,0x8D,0x55 ))// C821207E-AB2A-5F6C-9074-411840A68D55
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions: WindowsFoundation.IID {
    .init(Data1: 0xE4ACE0B2, Data2: 0x9B0C, Data3: 0x5EDA, Data4: ( 0x88,0xA2,0xC3,0x1B,0x1B,0x84,0xF8,0x29 ))// E4ACE0B2-9B0C-5EDA-88A2-C31B1B84F829
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptionsFactory: WindowsFoundation.IID {
    .init(Data1: 0xD1C82E57, Data2: 0xD5E8, Data3: 0x58F5, Data4: ( 0xA2,0xC0,0xEE,0x70,0xC6,0x41,0x43,0xBE ))// D1C82E57-D5E8-58F5-A2C0-EE70C64143BE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB6C18076, Data2: 0x4B76, Data3: 0x5416, Data4: ( 0xAD,0x29,0xE2,0xDC,0x20,0xC4,0x62,0x46 ))// B6C18076-4B76-5416-AD29-E2DC20C46246
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0x0FCD041D, Data2: 0x465F, Data3: 0x5745, Data4: ( 0x98,0x82,0x0C,0x83,0x48,0xE4,0x13,0x5D ))// 0FCD041D-465F-5745-9882-0C8348E4135D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom: WindowsFoundation.IID {
    .init(Data1: 0x7E14616D, Data2: 0x55EF, Data3: 0x548C, Data4: ( 0xA9,0x97,0xC9,0x23,0xE3,0x02,0x71,0x8F ))// 7E14616D-55EF-548C-A997-C923E302718F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation: WindowsFoundation.IID {
    .init(Data1: 0x12D62B04, Data2: 0xBB13, Data3: 0x50F2, Data4: ( 0x9D,0x8B,0xE5,0x7C,0x02,0xB4,0xBD,0xE4 ))// 12D62B04-BB13-50F2-9D8B-E57C02B4BDE4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation: WindowsFoundation.IID {
    .init(Data1: 0x41C1DEC7, Data2: 0xF34F, Data3: 0x51DB, Data4: ( 0x95,0x25,0x5C,0x14,0x9B,0x05,0xA5,0x27 ))// 41C1DEC7-F34F-51DB-9525-5C149B05A527
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics: WindowsFoundation.IID {
    .init(Data1: 0xE4FBD358, Data2: 0x9342, Data3: 0x56D3, Data4: ( 0xB5,0xC2,0xBF,0x80,0xDE,0x6F,0x47,0xED ))// E4FBD358-9342-56D3-B5C2-BF80DE6F47ED
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xCF62D53D, Data2: 0x97D3, Data3: 0x5CEF, Data4: ( 0x96,0xF3,0x1C,0x41,0x3F,0x52,0x4E,0xCA ))// CF62D53D-97D3-5CEF-96F3-1C413F524ECA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider: WindowsFoundation.IID {
    .init(Data1: 0xF7418ECF, Data2: 0x7C35, Data3: 0x5216, Data4: ( 0x8B,0xF1,0xD8,0x2D,0x47,0xCC,0xE5,0xDF ))// F7418ECF-7C35-5216-8BF1-D82D47CCE5DF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderFactory: WindowsFoundation.IID {
    .init(Data1: 0x06604D71, Data2: 0x34CA, Data3: 0x5F39, Data4: ( 0x96,0x56,0x29,0xD8,0x1D,0x3C,0x11,0x0C ))// 06604D71-34CA-5F39-9656-29D81D3C110C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics: WindowsFoundation.IID {
    .init(Data1: 0xF0541F7B, Data2: 0x6D81, Data3: 0x59E2, Data4: ( 0x99,0x7A,0x2E,0x65,0xFB,0xCC,0xCD,0x21 ))// F0541F7B-6D81-59E2-997A-2E65FBCCCD21
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView: WindowsFoundation.IID {
    .init(Data1: 0x10AE18F7, Data2: 0x1666, Data3: 0x5897, Data4: ( 0xBB,0xCE,0x1E,0x68,0x7E,0x77,0x84,0xA8 ))// 10AE18F7-1666-5897-BBCE-1E687E7784A8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewFactory: WindowsFoundation.IID {
    .init(Data1: 0x389ECE72, Data2: 0x75CE, Data3: 0x561B, Data4: ( 0xAA,0xD3,0xC5,0x21,0x25,0xCA,0x6A,0x50 ))// 389ECE72-75CE-561B-AAD3-C52125CA6A50
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9138965B, Data2: 0x8499, Data3: 0x5F9C, Data4: ( 0x93,0xE0,0x34,0xBE,0xDA,0x44,0x1E,0x6D ))// 9138965B-8499-5F9C-93E0-34BEDA441E6D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics: WindowsFoundation.IID {
    .init(Data1: 0x1C69A263, Data2: 0x552C, Data3: 0x5505, Data4: ( 0xAC,0x81,0x49,0xE2,0x47,0xFE,0xE9,0xDB ))// 1C69A263-552C-5505-AC81-49E247FEE9DB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout: WindowsFoundation.IID {
    .init(Data1: 0x3EA9C3DD, Data2: 0x8103, Data3: 0x571F, Data4: ( 0x9E,0x07,0x44,0xEA,0x76,0xC9,0x1A,0x10 ))// 3EA9C3DD-8103-571F-9E07-44EA76C91A10
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayoutFactory: WindowsFoundation.IID {
    .init(Data1: 0xEA606F86, Data2: 0x21A1, Data3: 0x5C35, Data4: ( 0x91,0x1E,0x4A,0x1D,0xE8,0xBC,0x69,0xD9 ))// EA606F86-21A1-5C35-911E-4A1DE8BC69D9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayoutStatics: WindowsFoundation.IID {
    .init(Data1: 0x5610AECF, Data2: 0xFB2A, Data3: 0x5726, Data4: ( 0xAC,0x3A,0x16,0x47,0x9B,0xA2,0xEC,0xAD ))// 5610AECF-FB2A-5726-AC3A-16479BA2ECAD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel: WindowsFoundation.IID {
    .init(Data1: 0x493AB00B, Data2: 0x3A6A, Data3: 0x5E4A, Data4: ( 0x94,0x52,0x40,0x7C,0xD5,0x19,0x74,0x06 ))// 493AB00B-3A6A-5E4A-9452-407CD5197406
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory: WindowsFoundation.IID {
    .init(Data1: 0x64C1D388, Data2: 0x47A2, Data3: 0x5A74, Data4: ( 0xA7,0x5B,0x55,0x9D,0x15,0x1E,0xE5,0xAC ))// 64C1D388-47A2-5A74-A75B-559D151EE5AC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics: WindowsFoundation.IID {
    .init(Data1: 0x10BB04E3, Data2: 0xEB01, Data3: 0x5EA8, Data4: ( 0x9F,0x96,0x69,0x50,0x84,0x79,0xDE,0xF9 ))// 10BB04E3-EB01-5EA8-9F96-69508479DEF9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector: WindowsFoundation.IID {
    .init(Data1: 0x7F9CF759, Data2: 0x785B, Data3: 0x5EF9, Data4: ( 0x9E,0xA7,0x15,0x55,0x67,0x3A,0x47,0x5A ))// 7F9CF759-785B-5EF9-9EA7-1555673A475A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorFactory: WindowsFoundation.IID {
    .init(Data1: 0x2A033206, Data2: 0xA4FB, Data3: 0x5F11, Data4: ( 0x8C,0x2D,0x61,0xE1,0xDF,0x78,0xFB,0xC3 ))// 2A033206-A4FB-5F11-8C2D-61E1DF78FBC3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides: WindowsFoundation.IID {
    .init(Data1: 0x26015D75, Data2: 0xEF00, Data3: 0x5C78, Data4: ( 0x8E,0x58,0x16,0x3D,0xA1,0x0F,0x69,0x4F ))// 26015D75-EF00-5C78-8E58-163DA10F694F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip: WindowsFoundation.IID {
    .init(Data1: 0xDAEBD5F7, Data2: 0x3B47, Data3: 0x5B12, Data4: ( 0xB8,0x04,0xF4,0xE1,0x44,0x2B,0x21,0x13 ))// DAEBD5F7-3B47-5B12-B804-F4E1442B2113
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x2536F506, Data2: 0x4038, Data3: 0x59DB, Data4: ( 0x9E,0x35,0xA9,0x25,0x2F,0xB5,0xAD,0xB2 ))// 2536F506-4038-59DB-9E35-A9252FB5ADB2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x16F53512, Data2: 0x3C55, Data3: 0x5636, Data4: ( 0xA8,0x56,0x22,0x9D,0x97,0x68,0xD6,0x4E ))// 16F53512-3C55-5636-A856-229D9768D64E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipFactory: WindowsFoundation.IID {
    .init(Data1: 0xA3ECD47D, Data2: 0x2972, Data3: 0x5D19, Data4: ( 0xA6,0x2E,0xDD,0xFB,0xC5,0xE1,0xAD,0x57 ))// A3ECD47D-2972-5D19-A62E-DDFBC5E1AD57
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics: WindowsFoundation.IID {
    .init(Data1: 0x7C3ECDDB, Data2: 0x0B4D, Data3: 0x51C2, Data4: ( 0xA2,0x7F,0x89,0x18,0x0A,0xFD,0x45,0xA8 ))// 7C3ECDDB-0B4D-51C2-A27F-89180AFD45A8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0xB081E1E9, Data2: 0xC1A5, Data3: 0x590A, Data4: ( 0x80,0x49,0x69,0xEA,0x00,0x3B,0x6C,0xF7 ))// B081E1E9-C1A5-590A-8049-69EA003B6CF7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettingsFactory: WindowsFoundation.IID {
    .init(Data1: 0x63210545, Data2: 0xE195, Data3: 0x56CD, Data4: ( 0xBC,0xCD,0x16,0x92,0x55,0xE1,0x34,0xE3 ))// 63210545-E195-56CD-BCCD-169255E134E3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettingsStatics: WindowsFoundation.IID {
    .init(Data1: 0xFA9ACF9A, Data2: 0x9743, Data3: 0x51EE, Data4: ( 0x8D,0xB9,0x8A,0xBD,0x06,0x3E,0xDF,0xEA ))// FA9ACF9A-9743-51EE-8DB9-8ABD063EDFEA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock: WindowsFoundation.IID {
    .init(Data1: 0x1AC8D84F, Data2: 0x392C, Data3: 0x5C7E, Data4: ( 0x83,0xF5,0xA5,0x3E,0x3B,0xF0,0xAB,0xB0 ))// 1AC8D84F-392C-5C7E-83F5-A53E3BF0ABB0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics: WindowsFoundation.IID {
    .init(Data1: 0x3187104B, Data2: 0x65C2, Data3: 0x5E53, Data4: ( 0xB8,0x89,0xC8,0x27,0x2B,0x13,0x14,0xCD ))// 3187104B-65C2-5E53-B889-C8272B1314CD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox: WindowsFoundation.IID {
    .init(Data1: 0x873AF7C2, Data2: 0xAB89, Data3: 0x5D76, Data4: ( 0x8D,0xBE,0x3D,0x63,0x25,0x66,0x9D,0xF5 ))// 873AF7C2-AB89-5D76-8DBE-3D6325669DF5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xBA46105B, Data2: 0x9A16, Data3: 0x5237, Data4: ( 0xA2,0x0F,0x5D,0xF7,0x50,0x99,0x2A,0x05 ))// BA46105B-9A16-5237-A20F-5DF750992A05
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxFactory: WindowsFoundation.IID {
    .init(Data1: 0xE1D8B82E, Data2: 0xBC60, Data3: 0x5D27, Data4: ( 0xB6,0x46,0x5C,0xA4,0xC4,0xA6,0x94,0x32 ))// E1D8B82E-BC60-5D27-B646-5CA4C4A69432
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6DCE20DB, Data2: 0x894E, Data3: 0x5FF6, Data4: ( 0x82,0x5B,0xF9,0x89,0x1A,0xF7,0x95,0x16 ))// 6DCE20DB-894E-5FF6-825B-F9891AF79516
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics: WindowsFoundation.IID {
    .init(Data1: 0xA41CF38F, Data2: 0x712A, Data3: 0x5599, Data4: ( 0xBB,0xED,0x5A,0x3D,0x9B,0x6B,0xD4,0x6E ))// A41CF38F-712A-5599-BBED-5A3D9B6BD46E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA1A08D48, Data2: 0xE8C0, Data3: 0x5379, Data4: ( 0xB1,0x38,0x7E,0xB3,0xF8,0xD5,0xF5,0xE6 ))// A1A08D48-E8C0-5379-B138-7EB3F8D5F5E6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x71C37E43, Data2: 0x7BE7, Data3: 0x52FC, Data4: ( 0xBF,0x8C,0x98,0x67,0xF4,0x4B,0xE5,0xF4 ))// 71C37E43-7BE7-52FC-BF8C-9867F44BE5F4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x04F420D2, Data2: 0xBA9C, Data3: 0x5F59, Data4: ( 0xB8,0xAC,0x0D,0x8A,0xA5,0x0A,0x92,0x40 ))// 04F420D2-BA9C-5F59-B8AC-0D8AA50A9240
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x19D0A5C5, Data2: 0x8D0F, Data3: 0x5118, Data4: ( 0x8C,0x30,0xE7,0x09,0x32,0x6F,0x12,0x83 ))// 19D0A5C5-8D0F-5118-8C30-E709326F1283
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA604FF71, Data2: 0x5D44, Data3: 0x5859, Data4: ( 0x8D,0x71,0x72,0x03,0x0E,0xD7,0x8B,0xC8 ))// A604FF71-5D44-5859-8D71-72030ED78BC8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1DAAC6D5, Data2: 0x8DB5, Data3: 0x5D9F, Data4: ( 0x93,0x82,0x1E,0x64,0x4F,0x9A,0xA4,0x37 ))// 1DAAC6D5-8DB5-5D9F-9382-1E644F9AA437
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9D73671F, Data2: 0xEA30, Data3: 0x555D, Data4: ( 0x81,0x29,0x5A,0x96,0xAE,0xC7,0x3A,0x14 ))// 9D73671F-EA30-555D-8129-5A96AEC73A14
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xFC5E567E, Data2: 0x3AA9, Data3: 0x5C57, Data4: ( 0x88,0xD4,0x83,0x4A,0xD3,0xB6,0x2E,0x9E ))// FC5E567E-3AA9-5C57-88D4-834AD3B62E9E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem: WindowsFoundation.IID {
    .init(Data1: 0x1803F260, Data2: 0x67E4, Data3: 0x5BC1, Data4: ( 0xA6,0x3A,0x12,0x35,0x10,0x16,0x7B,0xB8 ))// 1803F260-67E4-5BC1-A63A-123510167BB8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x426DFD57, Data2: 0x6CC9, Data3: 0x570F, Data4: ( 0x95,0x0D,0x37,0x43,0x72,0x35,0xDC,0x89 ))// 426DFD57-6CC9-570F-950D-37437235DC89
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemStatics: WindowsFoundation.IID {
    .init(Data1: 0x7411E854, Data2: 0xC59A, Data3: 0x5463, Data4: ( 0xBE,0xAB,0x64,0xDD,0xB0,0x52,0xC6,0xDC ))// 7411E854-C59A-5463-BEAB-64DDB052C6DC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch: WindowsFoundation.IID {
    .init(Data1: 0x1B17EEB1, Data2: 0x74BF, Data3: 0x5A83, Data4: ( 0x81,0x61,0xA8,0x6F,0x0F,0xDC,0xDF,0x24 ))// 1B17EEB1-74BF-5A83-8161-A86F0FDCDF24
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides: WindowsFoundation.IID {
    .init(Data1: 0x772682DB, Data2: 0xE3D4, Data3: 0x5242, Data4: ( 0xB6,0xDE,0x36,0x70,0x57,0x25,0xEE,0xB8 ))// 772682DB-E3D4-5242-B6DE-36705725EEB8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics: WindowsFoundation.IID {
    .init(Data1: 0xC9C203D6, Data2: 0x0619, Data3: 0x504D, Data4: ( 0x9E,0xD8,0x50,0x54,0xFE,0x3C,0xA5,0x1E ))// C9C203D6-0619-504D-9ED8-5054FE3CA51E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip: WindowsFoundation.IID {
    .init(Data1: 0x67E93D74, Data2: 0x5E93, Data3: 0x59A1, Data4: ( 0x91,0xBF,0x41,0x3E,0xFB,0xEB,0x90,0x4C ))// 67E93D74-5E93-59A1-91BF-413EFBEB904C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipFactory: WindowsFoundation.IID {
    .init(Data1: 0xBCBB3720, Data2: 0x2DB8, Data3: 0x54E1, Data4: ( 0x88,0x06,0xFC,0xBE,0xD3,0x89,0x49,0xA9 ))// BCBB3720-2DB8-54E1-8806-FCBED38949A9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipService: WindowsFoundation.IID {
    .init(Data1: 0x01140768, Data2: 0x2727, Data3: 0x5F89, Data4: ( 0x80,0xE0,0x52,0x10,0x32,0x6A,0x34,0x31 ))// 01140768-2727-5F89-80E0-5210326A3431
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics: WindowsFoundation.IID {
    .init(Data1: 0x5AA38ADC, Data2: 0x9874, Data3: 0x5E0A, Data4: ( 0x8D,0x8E,0x15,0x74,0xEF,0xC0,0xB8,0x8F ))// 5AA38ADC-9874-5E0A-8D8E-1574EFC0B88F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipStatics: WindowsFoundation.IID {
    .init(Data1: 0x88EB60D4, Data2: 0xCD54, Data3: 0x5E23, Data4: ( 0xBD,0x1A,0x22,0x37,0x02,0x44,0x2B,0xA4 ))// 88EB60D4-CD54-5E23-BD1A-223702442BA4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView: WindowsFoundation.IID {
    .init(Data1: 0x1BEF9AF4, Data2: 0x712C, Data3: 0x50EF, Data4: ( 0x9B,0xB4,0x88,0x1B,0x97,0x52,0x32,0xAB ))// 1BEF9AF4-712C-50EF-9BB4-881B975232AB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2: WindowsFoundation.IID {
    .init(Data1: 0xB947CA7D, Data2: 0x0F6F, Data3: 0x594C, Data4: ( 0x83,0xEC,0x14,0x15,0x3D,0x34,0x32,0x25 ))// B947CA7D-0F6F-594C-83EC-14153D343225
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView3: WindowsFoundation.IID {
    .init(Data1: 0xA1B5538E, Data2: 0x7956, Data3: 0x5671, Data4: ( 0xAF,0xD0,0x4C,0x0F,0x38,0x12,0x2B,0x70 ))// A1B5538E-7956-5671-AFD0-4C0F38122B70
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x8EE00B59, Data2: 0x42C6, Data3: 0x5D73, Data4: ( 0x80,0x9F,0x68,0x71,0x00,0x88,0xE5,0xA5 ))// 8EE00B59-42C6-5D73-809F-68710088E5A5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0x77804A23, Data2: 0x9FEB, Data3: 0x5C57, Data4: ( 0x9C,0x95,0x4D,0xD9,0x84,0x26,0x72,0x17 ))// 77804A23-9FEB-5C57-9C95-4DD984267217
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xE5B8547E, Data2: 0xF839, Data3: 0x55DB, Data4: ( 0x9C,0x26,0x2A,0x95,0xF5,0x7A,0x60,0xDC ))// E5B8547E-F839-55DB-9C26-2A95F57A60DC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0x060D3921, Data2: 0x57A0, Data3: 0x5BC5, Data4: ( 0xBE,0x26,0x32,0x0B,0xD9,0xC1,0xA6,0xE8 ))// 060D3921-57A0-5BC5-BE26-320BD9C1A6E8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1B6C4FFC, Data2: 0xCD32, Data3: 0x5E06, Data4: ( 0xB7,0x82,0xDF,0x9F,0x07,0x75,0x46,0xC7 ))// 1B6C4FFC-CD32-5E06-B782-DF9F077546C7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xBD769EF7, Data2: 0xCADC, Data3: 0x5334, Data4: ( 0x93,0xAD,0xC9,0xBB,0xE8,0x20,0x64,0x3D ))// BD769EF7-CADC-5334-93AD-C9BBE820643D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xED7840E5, Data2: 0xDBF5, Data3: 0x5937, Data4: ( 0x89,0xDD,0x99,0x7A,0x6F,0xDE,0x0D,0x5C ))// ED7840E5-DBF5-5937-89DD-997A6FDE0D5C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewFactory: WindowsFoundation.IID {
    .init(Data1: 0x9C6220BE, Data2: 0xF9EB, Data3: 0x518A, Data4: ( 0xB3,0x0E,0x7E,0x41,0xDE,0x5E,0xFD,0xA9 ))// 9C6220BE-F9EB-518A-B30E-7E41DE5EFDA9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem: WindowsFoundation.IID {
    .init(Data1: 0x70437A49, Data2: 0x2999, Data3: 0x5A97, Data4: ( 0xB1,0x9D,0x35,0x4E,0xF5,0x9D,0x4F,0x5C ))// 70437A49-2999-5A97-B19D-354EF59D4F5C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem2: WindowsFoundation.IID {
    .init(Data1: 0xB1B70143, Data2: 0x3F5B, Data3: 0x54F4, Data4: ( 0x8B,0xD7,0x41,0xDC,0x15,0xCF,0x45,0xA9 ))// B1B70143-3F5B-54F4-8BD7-41DC15CF45A9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x878FD918, Data2: 0xE77E, Data3: 0x5BE8, Data4: ( 0x8C,0x8A,0xB7,0x9B,0x27,0xB0,0x8D,0x9B ))// 878FD918-E77E-5BE8-8C8A-B79B27B08D9B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemInvokedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1A05853C, Data2: 0xB101, Data3: 0x542C, Data4: ( 0x9A,0x1E,0x77,0x5A,0x04,0x4C,0x46,0x52 ))// 1A05853C-B101-542C-9A1E-775A044C4652
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics: WindowsFoundation.IID {
    .init(Data1: 0xEFDB238D, Data2: 0x2CCA, Data3: 0x589C, Data4: ( 0xAE,0xDF,0x8E,0x29,0x7B,0x5A,0xA2,0x48 ))// EFDB238D-2CCA-589C-AEDF-8E297B5AA248
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics2: WindowsFoundation.IID {
    .init(Data1: 0x431BEF52, Data2: 0xD60D, Data3: 0x5CE3, Data4: ( 0xB8,0x12,0xAE,0xE4,0xA2,0xFB,0x7E,0xD3 ))// 431BEF52-D60D-5CE3-B812-AEE4A2FB7ED3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0x29B5DD9C, Data2: 0x2BFB, Data3: 0x5E1C, Data4: ( 0x97,0xCB,0xCD,0xC3,0xC3,0x4A,0x36,0x5D ))// 29B5DD9C-2BFB-5E1C-97CB-CDC3C34A365D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettingsFactory: WindowsFoundation.IID {
    .init(Data1: 0x1D1A66E3, Data2: 0xF56D, Data3: 0x5D7F, Data4: ( 0x94,0x2C,0xF3,0xA8,0x7F,0x5C,0x55,0x2E ))// 1D1A66E3-F56D-5D7F-942C-F3A87F5C552E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettingsStatics: WindowsFoundation.IID {
    .init(Data1: 0x67817566, Data2: 0x6528, Data3: 0x5F4A, Data4: ( 0xB1,0xE1,0x71,0x0A,0xB0,0x94,0xC7,0x4F ))// 67817566-6528-5F4A-B1E1-710AB094C74F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewList: WindowsFoundation.IID {
    .init(Data1: 0x94CEE57B, Data2: 0x7085, Data3: 0x5A6A, Data4: ( 0xAA,0xC3,0x18,0x45,0x09,0xB8,0xEC,0xE0 ))// 94CEE57B-7085-5A6A-AAC3-184509B8ECE0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewListFactory: WindowsFoundation.IID {
    .init(Data1: 0x461499A0, Data2: 0x68CF, Data3: 0x5B81, Data4: ( 0xB0,0xE4,0xB1,0xAF,0x92,0x9B,0x0B,0x12 ))// 461499A0-68CF-5B81-B0E4-B1AF929B0B12
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode: WindowsFoundation.IID {
    .init(Data1: 0x00378A74, Data2: 0x790B, Data3: 0x5328, Data4: ( 0x8A,0xFA,0x7D,0x65,0xE2,0x2D,0xA4,0x26 ))// 00378A74-790B-5328-8AFA-7D65E22DA426
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNodeFactory: WindowsFoundation.IID {
    .init(Data1: 0xC105A5E5, Data2: 0xCEA8, Data3: 0x5EFD, Data4: ( 0x8B,0xE8,0x3D,0x89,0xB5,0x4C,0xBD,0x5F ))// C105A5E5-CEA8-5EFD-8BE8-3D89B54CBD5F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNodeStatics: WindowsFoundation.IID {
    .init(Data1: 0xF5BB217C, Data2: 0x66B9, Data3: 0x5B62, Data4: ( 0xB2,0xD6,0xFB,0x47,0x84,0x3C,0x8F,0x6F ))// F5BB217C-66B9-5B62-B2D6-FB47843C8F6F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewSelectionChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x664190F3, Data2: 0x7133, Data3: 0x5599, Data4: ( 0xB4,0x1C,0x1D,0x54,0xCD,0x2C,0xB9,0x30 ))// 664190F3-7133-5599-B41C-1D54CD2CB930
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics: WindowsFoundation.IID {
    .init(Data1: 0x71EFAF86, Data2: 0x4D73, Data3: 0x5F5F, Data4: ( 0x8E,0xA6,0xA4,0x2D,0xFE,0x04,0x49,0x17 ))// 71EFAF86-4D73-5F5F-8EA6-A42DFE044917
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics2: WindowsFoundation.IID {
    .init(Data1: 0xDDD01C44, Data2: 0xA883, Data3: 0x583B, Data4: ( 0x91,0x81,0xDC,0xA5,0x83,0xDA,0x0A,0xD9 ))// DDD01C44-A883-583B-9181-DCA583DA0AD9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection: WindowsFoundation.IID {
    .init(Data1: 0x23050CB1, Data2: 0xDB88, Data3: 0x54ED, Data4: ( 0x90,0x83,0x5E,0xCF,0xB1,0x25,0x12,0xFD ))// 23050CB1-DB88-54ED-9083-5ECFB12512FD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout: WindowsFoundation.IID {
    .init(Data1: 0x8A164CBC, Data2: 0x2A5E, Data3: 0x56E5, Data4: ( 0xA0,0x11,0xFB,0x76,0x33,0x4A,0xAB,0xDF ))// 8A164CBC-2A5E-56E5-A011-FB76334AABDF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutFactory: WindowsFoundation.IID {
    .init(Data1: 0x0D9ED808, Data2: 0xF3F9, Data3: 0x5034, Data4: ( 0x96,0x27,0x15,0x2B,0x91,0xE9,0x1B,0x4B ))// 0D9ED808-F3F9-5034-9627-152B91E91B4B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutStatics: WindowsFoundation.IID {
    .init(Data1: 0x19BE9A3E, Data2: 0x37E1, Data3: 0x5A6D, Data4: ( 0x8B,0x62,0x41,0x93,0x25,0xEA,0x70,0x5A ))// 19BE9A3E-37E1-5A6D-8B62-419325EA705A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl: WindowsFoundation.IID {
    .init(Data1: 0xAB8A0A51, Data2: 0x44CF, Data3: 0x5337, Data4: ( 0xAD,0x77,0x8E,0xDA,0x17,0x95,0xE9,0xF6 ))// AB8A0A51-44CF-5337-AD77-8EDA1795E9F6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory: WindowsFoundation.IID {
    .init(Data1: 0x61AC9074, Data2: 0xAAB3, Data3: 0x50B8, Data4: ( 0x8B,0x18,0xD4,0xD2,0x57,0x3A,0x52,0x35 ))// 61AC9074-AAB3-50B8-8B18-D4D2573A5235
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics: WindowsFoundation.IID {
    .init(Data1: 0x575E8FA1, Data2: 0x2E2D, Data3: 0x5857, Data4: ( 0x9A,0x93,0x6B,0x11,0xE5,0x43,0x16,0xBA ))// 575E8FA1-2E2D-5857-9A93-6B11E54316BA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayout: WindowsFoundation.IID {
    .init(Data1: 0x54857CE0, Data2: 0xB9E6, Data3: 0x51A3, Data4: ( 0xBF,0xA8,0xDC,0xD8,0xEE,0x30,0x6D,0x5C ))// 54857CE0-B9E6-51A3-BFA8-DCD8EE306D5C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext: WindowsFoundation.IID {
    .init(Data1: 0x5B5B186A, Data2: 0xA7F9, Data3: 0x5A2E, Data4: ( 0xB1,0xF0,0x89,0x50,0xCC,0xD9,0x73,0x50 ))// 5B5B186A-A7F9-5A2E-B1F0-8950CCD97350
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext2: WindowsFoundation.IID {
    .init(Data1: 0xC34E5864, Data2: 0xA883, Data3: 0x59BE, Data4: ( 0x8C,0xE0,0x4A,0x77,0xE8,0x7B,0x03,0x43 ))// C34E5864-A883-59BE-8CE0-4A77E87B0343
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextFactory: WindowsFoundation.IID {
    .init(Data1: 0x3F790B67, Data2: 0xFDFB, Data3: 0x505A, Data4: ( 0x8B,0x85,0x62,0x10,0x50,0x6D,0xF3,0x11 ))// 3F790B67-FDFB-505A-8B85-6210506DF311
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides: WindowsFoundation.IID {
    .init(Data1: 0x78633B2A, Data2: 0x9633, Data3: 0x5086, Data4: ( 0x89,0xA7,0x0E,0x96,0x0A,0x95,0xA3,0xB2 ))// 78633B2A-9633-5086-89A7-0E960A95A3B2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides2: WindowsFoundation.IID {
    .init(Data1: 0xDA384C25, Data2: 0x5D8F, Data3: 0x5EDE, Data4: ( 0xAE,0x54,0xC3,0x18,0x81,0x3A,0xE7,0x84 ))// DA384C25-5D8F-5EDE-AE54-C318813AE784
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutFactory: WindowsFoundation.IID {
    .init(Data1: 0xC7C128E1, Data2: 0x5DF7, Data3: 0x5345, Data4: ( 0xB5,0xCD,0x43,0xAF,0xDF,0xA9,0x48,0xB4 ))// C7C128E1-5DF7-5345-B5CD-43AFDFA948B4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides: WindowsFoundation.IID {
    .init(Data1: 0x4357A35B, Data2: 0x3703, Data3: 0x5819, Data4: ( 0xA7,0x76,0xD1,0x39,0x84,0x8E,0x9E,0xD9 ))// 4357A35B-3703-5819-A776-D139848E9ED9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2: WindowsFoundation.IID {
    .init(Data1: 0x2B2C76C2, Data2: 0x997C, Data3: 0x5069, Data4: ( 0xA8,0xF0,0x9B,0x84,0xCD,0x7E,0x62,0x4B ))// 2B2C76C2-997C-5069-A8F0-9B84CD7E624B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView22: WindowsFoundation.IID {
    .init(Data1: 0x560C5EED, Data2: 0x3E7A, Data3: 0x51E4, Data4: ( 0xB1,0x4F,0x10,0x7B,0xA0,0x2B,0x89,0xBE ))// 560C5EED-3E7A-51E4-B14F-107BA02B89BE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Factory: WindowsFoundation.IID {
    .init(Data1: 0xFB4EC2CE, Data2: 0x3074, Data3: 0x5C42, Data4: ( 0xB6,0x55,0x64,0xFB,0x81,0xFB,0xD0,0x40 ))// FB4EC2CE-3074-5C42-B655-64FB81FBD040
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics: WindowsFoundation.IID {
    .init(Data1: 0x7F3226D0, Data2: 0xF6D5, Data3: 0x5AA7, Data4: ( 0xB1,0x75,0x64,0x54,0x51,0xCA,0x3C,0x85 ))// 7F3226D0-F6D5-5AA7-B175-645451CA3C85
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources: WindowsFoundation.IID {
    .init(Data1: 0x918CA043, Data2: 0xF42C, Data3: 0x5805, Data4: ( 0x86,0x1B,0x62,0xD6,0xD1,0xD0,0xC1,0x62 ))// 918CA043-F42C-5805-861B-62D6D1D0C162
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResourcesStatics: WindowsFoundation.IID {
    .init(Data1: 0xCB49196C, Data2: 0x1458, Data3: 0x5E92, Data4: ( 0xB7,0x01,0xD0,0x8D,0x3E,0x81,0x6B,0xC5 ))// CB49196C-1458-5E92-B701-D08D3E816BC5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xD010FF61, Data2: 0x4067, Data3: 0x526A, Data4: ( 0x95,0xA3,0x51,0x75,0x77,0xBC,0x52,0x73 ))// D010FF61-4067-526A-95A3-517577BC5273
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x55532800, Data2: 0x7617, Data3: 0x5D67, Data4: ( 0x80,0xBF,0xB9,0x8C,0x0A,0x41,0xB9,0xD6 ))// 55532800-7617-5D67-80BF-B98C0A41B9D6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xA3903624, Data2: 0x3393, Data3: 0x566C, Data4: ( 0xA6,0xB9,0xA6,0xB4,0xB3,0xE3,0x01,0xC3 ))// A3903624-3393-566C-A6B9-A6B4B3E301C3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xA232390D, Data2: 0x0E34, Data3: 0x595E, Data4: ( 0x89,0x31,0xFA,0x92,0x8A,0x99,0x09,0xF4 ))// A232390D-0E34-595E-8931-FA928A9909F4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x4CC95C52, Data2: 0x8A54, Data3: 0x53B7, Data4: ( 0x92,0x51,0x0B,0x3E,0xFA,0x60,0x53,0x98 ))// 4CC95C52-8A54-53B7-9251-0B3EFA605398
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x5D8DDCFF, Data2: 0x45D8, Data3: 0x5E7C, Data4: ( 0x9B,0x8B,0xC4,0x1D,0x28,0x93,0xC6,0xA1 ))// 5D8DDCFF-45D8-5E7C-9B8B-C41D2893C6A1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xDDF3A6C0, Data2: 0x5AB1, Data3: 0x5D74, Data4: ( 0x82,0x89,0x89,0x2C,0x06,0x14,0x65,0x8F ))// DDF3A6C0-5AB1-5D74-8289-892C0614658F
}

public enum __ABI_Microsoft_UI_Xaml_Controls {
    public class IAnchorRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs }

        internal func get_AnchorImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Anchor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_AnchorImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Anchor(pThis, RawPointer(value)))
            }
        }

        internal func get_AnchorCandidatesImpl() throws -> WindowsFoundation.AnyIVector<WinUI.UIElement?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnchorCandidates(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElementWrapper.unwrapFrom(abi: value)
        }

    }

    public class IAppBar: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar }

        internal func get_IsOpenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsOpenImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsOpen(pThis, .init(from: value)))
            }
        }

        internal func get_IsStickyImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSticky(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsStickyImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSticky(pThis, .init(from: value)))
            }
        }

        internal func get_ClosedDisplayModeImpl() throws -> WinUI.AppBarClosedDisplayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAppBarClosedDisplayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClosedDisplayMode(pThis, &value))
            }
            return value
        }

        internal func put_ClosedDisplayModeImpl(_ value: WinUI.AppBarClosedDisplayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClosedDisplayMode(pThis, value))
            }
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.AppBarTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LightDismissOverlayModeImpl() throws -> WinUI.LightDismissOverlayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayMode(pThis, &value))
            }
            return value
        }

        internal func put_LightDismissOverlayModeImpl(_ value: WinUI.LightDismissOverlayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightDismissOverlayMode(pThis, value))
            }
        }

        internal func add_OpeningImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Opening(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Opening(pThis, token))
            }
        }

        internal func add_OpenedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Opened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Opened(pThis, token))
            }
        }

        internal func add_ClosingImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closing(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closing(pThis, token))
            }
        }

        internal func add_ClosedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
            }
        }

    }

    public class IAppBarFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.AppBar.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IAppBar {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IAppBar(value!)
        }

    }

    public class IAppBarOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverrides }

        internal func OnClosedImpl(_ e: Any?) throws {
            let eWrapper = __ABI_.AnyWrapper(e)
            let _e = try! eWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnClosed(pThis, _e))
            }
        }

        internal func OnOpenedImpl(_ e: Any?) throws {
            let eWrapper = __ABI_.AnyWrapper(e)
            let _e = try! eWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnOpened(pThis, _e))
            }
        }

        internal func OnClosingImpl(_ e: Any?) throws {
            let eWrapper = __ABI_.AnyWrapper(e)
            let _e = try! eWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnClosing(pThis, _e))
            }
        }

        internal func OnOpeningImpl(_ e: Any?) throws {
            let eWrapper = __ABI_.AnyWrapper(e)
            let _e = try! eWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnOpening(pThis, _e))
            }
        }

    }

    public class IAppBarStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarStatics }

        internal func get_IsOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsStickyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsStickyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ClosedDisplayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClosedDisplayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LightDismissOverlayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IBitmapIcon: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon }

        internal func get_UriSourceImpl() throws -> WindowsFoundation.Uri? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UriSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_UriSourceImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UriSource(pThis, RawPointer(value)))
            }
        }

        internal func get_ShowAsMonochromeImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowAsMonochrome(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShowAsMonochromeImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowAsMonochrome(pThis, .init(from: value)))
            }
        }

    }

    public class IBitmapIconFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIconFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.BitmapIcon.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IBitmapIcon {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIconFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IBitmapIcon(value!)
        }

    }

    public class IBitmapIconStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIconStatics }

        internal func get_UriSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIconStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UriSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ShowAsMonochromePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIconStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowAsMonochromeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IBorder: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder }

        internal func get_BorderBrushImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BorderBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, RawPointer(value)))
            }
        }

        internal func get_BorderThicknessImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BorderThicknessImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, .from(swift: value)))
            }
        }

        internal func get_BackgroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

        internal func get_BackgroundSizingImpl() throws -> WinUI.BackgroundSizing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, &value))
            }
            return value
        }

        internal func put_BackgroundSizingImpl(_ value: WinUI.BackgroundSizing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
            }
        }

        internal func get_CornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_CornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, .from(swift: value)))
            }
        }

        internal func get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal func get_ChildImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Child(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ChildImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Child(pThis, RawPointer(value)))
            }
        }

        internal func get_ChildTransitionsImpl() throws -> WinUI.TransitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ChildTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ChildTransitions(pThis, RawPointer(value)))
            }
        }

        internal func get_BackgroundTransitionImpl() throws -> WinUI.BrushTransition? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundTransition(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BackgroundTransitionImpl(_ value: WinUI.BrushTransition?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundTransition(pThis, RawPointer(value)))
            }
        }

    }

    public class IBorderStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics }

        internal func get_BorderBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BorderThicknessPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundSizingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ChildTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IButton: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton }

        internal func get_FlyoutImpl() throws -> WinUI.FlyoutBase? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Flyout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FlyoutImpl(_ value: WinUI.FlyoutBase?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Flyout(pThis, RawPointer(value)))
            }
        }

    }

    public class IButtonFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Button.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IButton {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IButton(value!)
        }

    }

    public class IButtonStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics }

        internal func get_FlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICandidateWindowBoundsChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs }

        internal func get_BoundsImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class ICanvas: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas }

    }

    public class ICanvasFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Canvas.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ICanvas {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ICanvas(value!)
        }

    }

    public class ICanvasStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics }

        internal func get_LeftPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetLeftImpl(_ element: WinUI.UIElement?) throws -> Double {
            var result: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLeft(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetLeftImpl(_ element: WinUI.UIElement?, _ length: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetLeft(pThis, RawPointer(element), length))
            }
        }

        internal func get_TopPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetTopImpl(_ element: WinUI.UIElement?) throws -> Double {
            var result: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTop(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetTopImpl(_ element: WinUI.UIElement?, _ length: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTop(pThis, RawPointer(element), length))
            }
        }

        internal func get_ZIndexPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZIndexProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetZIndexImpl(_ element: WinUI.UIElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetZIndex(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetZIndexImpl(_ element: WinUI.UIElement?, _ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetZIndex(pThis, RawPointer(element), value))
            }
        }

    }

    public class ICheckBox: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox }

    }

    public class ICheckBoxFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBoxFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.CheckBox.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ICheckBox {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBoxFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ICheckBox(value!)
        }

    }

    public class IChoosingGroupHeaderContainerEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs }

        internal func get_GroupHeaderContainerImpl() throws -> WinUI.ListViewBaseHeaderItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupHeaderContainer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_GroupHeaderContainerImpl(_ value: WinUI.ListViewBaseHeaderItem?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GroupHeaderContainer(pThis, RawPointer(value)))
            }
        }

        internal func get_GroupIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupIndex(pThis, &value))
            }
            return value
        }

        internal func get_GroupImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Group(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class IChoosingItemContainerEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs }

        internal func get_ItemIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemIndex(pThis, &value))
            }
            return value
        }

        internal func get_ItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Item(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func get_ItemContainerImpl() throws -> WinUI.SelectorItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemContainerImpl(_ value: WinUI.SelectorItem?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainer(pThis, RawPointer(value)))
            }
        }

        internal func get_IsContainerPreparedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsContainerPrepared(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsContainerPreparedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsContainerPrepared(pThis, .init(from: value)))
            }
        }

    }

    public class IColumnDefinition: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition }

        internal func get_WidthImpl() throws -> WinUI.GridLength {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CGridLength = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Width(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_WidthImpl(_ value: WinUI.GridLength) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Width(pThis, .from(swift: value)))
            }
        }

        internal func get_MaxWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxWidth(pThis, &value))
            }
            return value
        }

        internal func put_MaxWidthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxWidth(pThis, value))
            }
        }

        internal func get_MinWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinWidth(pThis, &value))
            }
            return value
        }

        internal func put_MinWidthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinWidth(pThis, value))
            }
        }

        internal func get_ActualWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualWidth(pThis, &value))
            }
            return value
        }

    }

    public class IColumnDefinitionStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionStatics }

        internal func get_WidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_WidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MinWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IComboBox: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox }

        internal func get_IsDropDownOpenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDropDownOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsDropDownOpenImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDropDownOpen(pThis, .init(from: value)))
            }
        }

        internal func get_IsEditableImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEditable(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsEditableImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEditable(pThis, .init(from: value)))
            }
        }

        internal func get_IsSelectionBoxHighlightedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSelectionBoxHighlighted(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_MaxDropDownHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxDropDownHeight(pThis, &value))
            }
            return value
        }

        internal func put_MaxDropDownHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxDropDownHeight(pThis, value))
            }
        }

        internal func get_SelectionBoxItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionBoxItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func get_SelectionBoxItemTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionBoxItemTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.ComboBoxTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_HeaderImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal func get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_PlaceholderTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PlaceholderTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderText(pThis, _value.get()))
            }
        }

        internal func get_LightDismissOverlayModeImpl() throws -> WinUI.LightDismissOverlayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayMode(pThis, &value))
            }
            return value
        }

        internal func put_LightDismissOverlayModeImpl(_ value: WinUI.LightDismissOverlayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightDismissOverlayMode(pThis, value))
            }
        }

        internal func get_IsTextSearchEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSearchEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsTextSearchEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextSearchEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_SelectionChangedTriggerImpl() throws -> WinUI.ComboBoxSelectionChangedTrigger {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionChangedTrigger(pThis, &value))
            }
            return value
        }

        internal func put_SelectionChangedTriggerImpl(_ value: WinUI.ComboBoxSelectionChangedTrigger) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionChangedTrigger(pThis, value))
            }
        }

        internal func get_PlaceholderForegroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderForeground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PlaceholderForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderForeground(pThis, RawPointer(value)))
            }
        }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal func get_TextBoxStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextBoxStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TextBoxStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextBoxStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_DescriptionImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Description(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_DescriptionImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Description(pThis, _value))
            }
        }

        internal func add_DropDownClosedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DropDownClosed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DropDownClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DropDownClosed(pThis, token))
            }
        }

        internal func add_DropDownOpenedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DropDownOpened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DropDownOpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DropDownOpened(pThis, token))
            }
        }

        internal func add_TextSubmittedImpl(_ handler: TypedEventHandler<WinUI.ComboBox?, WinUI.ComboBoxTextSubmittedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CComboBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CComboBoxTextSubmittedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextSubmitted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TextSubmittedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextSubmitted(pThis, token))
            }
        }

    }

    public class IComboBoxFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ComboBox.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IComboBox {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IComboBox(value!)
        }

    }

    public class IComboBoxOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides }

        internal func OnDropDownClosedImpl(_ e: Any?) throws {
            let eWrapper = __ABI_.AnyWrapper(e)
            let _e = try! eWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDropDownClosed(pThis, _e))
            }
        }

        internal func OnDropDownOpenedImpl(_ e: Any?) throws {
            let eWrapper = __ABI_.AnyWrapper(e)
            let _e = try! eWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDropDownOpened(pThis, _e))
            }
        }

    }

    public class IComboBoxStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics }

        internal func get_IsEditablePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEditableProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsDropDownOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDropDownOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxDropDownHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxDropDownHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlaceholderTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LightDismissOverlayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTextSearchEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSearchEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionChangedTriggerPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionChangedTriggerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlaceholderForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextBoxStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextBoxStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DescriptionPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DescriptionProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IComboBoxTextSubmittedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class IContainerContentChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs }

        internal func get_ItemContainerImpl() throws -> WinUI.SelectorItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_InRecycleQueueImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InRecycleQueue(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ItemIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemIndex(pThis, &value))
            }
            return value
        }

        internal func get_ItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Item(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func get_PhaseImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Phase(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func RegisterUpdateCallbackImpl(_ callback: TypedEventHandler<WinUI.ListViewBase?, WinUI.ContainerContentChangingEventArgs?>?) throws {
            let callbackWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContainerContentChangingEventArgsWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterUpdateCallback(pThis, _callback))
            }
        }

        internal func RegisterUpdateCallbackWithPhaseImpl(_ callbackPhase: UInt32, _ callback: TypedEventHandler<WinUI.ListViewBase?, WinUI.ContainerContentChangingEventArgs?>?) throws {
            let callbackWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContainerContentChangingEventArgsWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterUpdateCallbackWithPhase(pThis, callbackPhase, _callback))
            }
        }

    }

    public class IContentControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl }

        internal func get_ContentImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ContentImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, _value))
            }
        }

        internal func get_ContentTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_ContentTemplateSelectorImpl() throws -> WinUI.DataTemplateSelector? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentTemplateSelectorImpl(_ value: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplateSelector(pThis, RawPointer(value)))
            }
        }

        internal func get_ContentTransitionsImpl() throws -> WinUI.TransitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTransitions(pThis, RawPointer(value)))
            }
        }

        internal func get_ContentTemplateRootImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateRoot(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IContentControlFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ContentControl.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IContentControl {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IContentControl(value!)
        }

    }

    public class IContentControlOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides }

        internal func OnContentChangedImpl(_ oldContent: Any?, _ newContent: Any?) throws {
            let oldContentWrapper = __ABI_.AnyWrapper(oldContent)
            let _oldContent = try! oldContentWrapper?.toABI { $0 }
            let newContentWrapper = __ABI_.AnyWrapper(newContent)
            let _newContent = try! newContentWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentChanged(pThis, _oldContent, _newContent))
            }
        }

        internal func OnContentTemplateChangedImpl(_ oldContentTemplate: WinUI.DataTemplate?, _ newContentTemplate: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentTemplateChanged(pThis, RawPointer(oldContentTemplate), RawPointer(newContentTemplate)))
            }
        }

        internal func OnContentTemplateSelectorChangedImpl(_ oldContentTemplateSelector: WinUI.DataTemplateSelector?, _ newContentTemplateSelector: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentTemplateSelectorChanged(pThis, RawPointer(oldContentTemplateSelector), RawPointer(newContentTemplateSelector)))
            }
        }

    }

    public class IContentControlStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics }

        internal func get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentTemplateSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IContentDialog: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog }

        internal func get_TitleImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_TitleImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value))
            }
        }

        internal func get_TitleTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TitleTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TitleTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_FullSizeDesiredImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FullSizeDesired(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_FullSizeDesiredImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FullSizeDesired(pThis, .init(from: value)))
            }
        }

        internal func get_PrimaryButtonTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PrimaryButtonTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryButtonText(pThis, _value.get()))
            }
        }

        internal func get_SecondaryButtonTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SecondaryButtonTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SecondaryButtonText(pThis, _value.get()))
            }
        }

        internal func get_CloseButtonTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CloseButtonTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonText(pThis, _value.get()))
            }
        }

        internal func get_PrimaryButtonCommandImpl() throws -> WinUI.AnyICommand? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonCommand(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal func put_PrimaryButtonCommandImpl(_ value: WinUI.AnyICommand?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryButtonCommand(pThis, _value))
            }
        }

        internal func get_SecondaryButtonCommandImpl() throws -> WinUI.AnyICommand? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonCommand(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal func put_SecondaryButtonCommandImpl(_ value: WinUI.AnyICommand?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SecondaryButtonCommand(pThis, _value))
            }
        }

        internal func get_CloseButtonCommandImpl() throws -> WinUI.AnyICommand? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommand(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal func put_CloseButtonCommandImpl(_ value: WinUI.AnyICommand?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonCommand(pThis, _value))
            }
        }

        internal func get_PrimaryButtonCommandParameterImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonCommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_PrimaryButtonCommandParameterImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryButtonCommandParameter(pThis, _value))
            }
        }

        internal func get_SecondaryButtonCommandParameterImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonCommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_SecondaryButtonCommandParameterImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SecondaryButtonCommandParameter(pThis, _value))
            }
        }

        internal func get_CloseButtonCommandParameterImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_CloseButtonCommandParameterImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonCommandParameter(pThis, _value))
            }
        }

        internal func get_IsPrimaryButtonEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPrimaryButtonEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsPrimaryButtonEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPrimaryButtonEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsSecondaryButtonEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSecondaryButtonEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSecondaryButtonEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSecondaryButtonEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_PrimaryButtonStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PrimaryButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_SecondaryButtonStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SecondaryButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SecondaryButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_CloseButtonStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_CloseButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_DefaultButtonImpl() throws -> WinUI.ContentDialogButton {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultButton(pThis, &value))
            }
            return value
        }

        internal func put_DefaultButtonImpl(_ value: WinUI.ContentDialogButton) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultButton(pThis, value))
            }
        }

        internal func add_ClosingImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogClosingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closing(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closing(pThis, token))
            }
        }

        internal func add_ClosedImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogClosedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogClosedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
            }
        }

        internal func add_OpenedImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogOpenedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogOpenedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Opened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Opened(pThis, token))
            }
        }

        internal func add_PrimaryButtonClickImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogButtonClickEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogButtonClickEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PrimaryButtonClick(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PrimaryButtonClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PrimaryButtonClick(pThis, token))
            }
        }

        internal func add_SecondaryButtonClickImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogButtonClickEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogButtonClickEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SecondaryButtonClick(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SecondaryButtonClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SecondaryButtonClick(pThis, token))
            }
        }

        internal func add_CloseButtonClickImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogButtonClickEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogButtonClickEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CloseButtonClick(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CloseButtonClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CloseButtonClick(pThis, token))
            }
        }

        internal func HideImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Hide(pThis))
            }
        }

        internal func ShowAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.ContentDialogResult>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ShowAsync(pThis, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogResultWrapper.unwrapFrom(abi: operation)
        }

        internal func ShowAsyncWithPlacementImpl(_ placement: WinUI.ContentDialogPlacement) throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.ContentDialogResult>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ShowAsyncWithPlacement(pThis, placement, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogResultWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IContentDialogButtonClickDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IContentDialogButtonClickEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WinUI.ContentDialogButtonClickDeferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IContentDialogClosedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs }

        internal func get_ResultImpl() throws -> WinUI.ContentDialogResult {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Result(pThis, &value))
            }
            return value
        }

    }

    public class IContentDialogClosingDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IContentDialogClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs }

        internal func get_ResultImpl() throws -> WinUI.ContentDialogResult {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Result(pThis, &value))
            }
            return value
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WinUI.ContentDialogClosingDeferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IContentDialogFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ContentDialog.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IContentDialog {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IContentDialog(value!)
        }

    }

    public class IContentDialogOpenedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs }

    }

    public class IContentDialogStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics }

        internal func get_TitlePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TitleTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FullSizeDesiredPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FullSizeDesiredProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PrimaryButtonTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SecondaryButtonTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PrimaryButtonCommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonCommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SecondaryButtonCommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonCommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonCommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PrimaryButtonCommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonCommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SecondaryButtonCommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonCommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonCommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsPrimaryButtonEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPrimaryButtonEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsSecondaryButtonEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSecondaryButtonEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PrimaryButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SecondaryButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DefaultButtonPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultButtonProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IContentPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter }

        internal func get_ContentImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ContentImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, _value))
            }
        }

        internal func get_ContentTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_ContentTemplateSelectorImpl() throws -> WinUI.DataTemplateSelector? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentTemplateSelectorImpl(_ value: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplateSelector(pThis, RawPointer(value)))
            }
        }

        internal func get_ContentTransitionsImpl() throws -> WinUI.TransitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTransitions(pThis, RawPointer(value)))
            }
        }

        internal func get_FontSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        internal func put_FontSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        internal func get_FontFamilyImpl() throws -> WinUI.FontFamily? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FontFamilyImpl(_ value: WinUI.FontFamily?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, RawPointer(value)))
            }
        }

        internal func get_FontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_FontWeightImpl(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        internal func get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal func put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal func get_FontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, &value))
            }
            return value
        }

        internal func put_FontStretchImpl(_ value: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
            }
        }

        internal func get_CharacterSpacingImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, &value))
            }
            return value
        }

        internal func put_CharacterSpacingImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
            }
        }

        internal func get_ForegroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

        internal func get_OpticalMarginAlignmentImpl() throws -> WinUI.OpticalMarginAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_COpticalMarginAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignment(pThis, &value))
            }
            return value
        }

        internal func put_OpticalMarginAlignmentImpl(_ value: WinUI.OpticalMarginAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalMarginAlignment(pThis, value))
            }
        }

        internal func get_TextLineBoundsImpl() throws -> WinUI.TextLineBounds {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBounds(pThis, &value))
            }
            return value
        }

        internal func put_TextLineBoundsImpl(_ value: WinUI.TextLineBounds) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextLineBounds(pThis, value))
            }
        }

        internal func get_IsTextScaleFactorEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsTextScaleFactorEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_BackgroundTransitionImpl() throws -> WinUI.BrushTransition? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundTransition(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BackgroundTransitionImpl(_ value: WinUI.BrushTransition?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundTransition(pThis, RawPointer(value)))
            }
        }

        internal func get_TextWrappingImpl() throws -> WinUI.TextWrapping {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrapping(pThis, &value))
            }
            return value
        }

        internal func put_TextWrappingImpl(_ value: WinUI.TextWrapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextWrapping(pThis, value))
            }
        }

        internal func get_MaxLinesImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLines(pThis, &value))
            }
            return value
        }

        internal func put_MaxLinesImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxLines(pThis, value))
            }
        }

        internal func get_LineStackingStrategyImpl() throws -> WinUI.LineStackingStrategy {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategy(pThis, &value))
            }
            return value
        }

        internal func put_LineStackingStrategyImpl(_ value: WinUI.LineStackingStrategy) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineStackingStrategy(pThis, value))
            }
        }

        internal func get_LineHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeight(pThis, &value))
            }
            return value
        }

        internal func put_LineHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineHeight(pThis, value))
            }
        }

        internal func get_BorderBrushImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BorderBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, RawPointer(value)))
            }
        }

        internal func get_BorderThicknessImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BorderThicknessImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, .from(swift: value)))
            }
        }

        internal func get_CornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_CornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, .from(swift: value)))
            }
        }

        internal func get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal func get_BackgroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

        internal func get_BackgroundSizingImpl() throws -> WinUI.BackgroundSizing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, &value))
            }
            return value
        }

        internal func put_BackgroundSizingImpl(_ value: WinUI.BackgroundSizing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
            }
        }

        internal func get_HorizontalContentAlignmentImpl() throws -> WinUI.HorizontalAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignment(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalContentAlignmentImpl(_ value: WinUI.HorizontalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalContentAlignment(pThis, value))
            }
        }

        internal func get_VerticalContentAlignmentImpl() throws -> WinUI.VerticalAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignment(pThis, &value))
            }
            return value
        }

        internal func put_VerticalContentAlignmentImpl(_ value: WinUI.VerticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalContentAlignment(pThis, value))
            }
        }

    }

    public class IContentPresenterFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ContentPresenter.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IContentPresenter {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IContentPresenter(value!)
        }

    }

    public class IContentPresenterOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides }

        internal func OnContentTemplateChangedImpl(_ oldContentTemplate: WinUI.DataTemplate?, _ newContentTemplate: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentTemplateChanged(pThis, RawPointer(oldContentTemplate), RawPointer(newContentTemplate)))
            }
        }

        internal func OnContentTemplateSelectorChangedImpl(_ oldContentTemplateSelector: WinUI.DataTemplateSelector?, _ newContentTemplateSelector: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentTemplateSelectorChanged(pThis, RawPointer(oldContentTemplateSelector), RawPointer(newContentTemplateSelector)))
            }
        }

    }

    public class IContentPresenterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics }

        internal func get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentTemplateSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontFamilyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontWeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontStretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CharacterSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OpticalMarginAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextLineBoundsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBoundsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTextScaleFactorEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextWrappingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrappingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxLinesPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLinesProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LineStackingStrategyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LineHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BorderBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BorderThicknessPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundSizingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalContentAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalContentAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IContextMenuEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_CursorLeftImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CursorLeft(pThis, &value))
            }
            return value
        }

        internal func get_CursorTopImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CursorTop(pThis, &value))
            }
            return value
        }

    }

    public class IControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl }

        internal func get_IsFocusEngagementEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagementEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsFocusEngagementEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFocusEngagementEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsFocusEngagedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngaged(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsFocusEngagedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFocusEngaged(pThis, .init(from: value)))
            }
        }

        internal func get_RequiresPointerImpl() throws -> WinUI.RequiresPointer {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequiresPointer(pThis, &value))
            }
            return value
        }

        internal func put_RequiresPointerImpl(_ value: WinUI.RequiresPointer) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequiresPointer(pThis, value))
            }
        }

        internal func get_FontSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        internal func put_FontSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        internal func get_FontFamilyImpl() throws -> WinUI.FontFamily? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FontFamilyImpl(_ value: WinUI.FontFamily?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, RawPointer(value)))
            }
        }

        internal func get_FontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_FontWeightImpl(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        internal func get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal func put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal func get_FontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, &value))
            }
            return value
        }

        internal func put_FontStretchImpl(_ value: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
            }
        }

        internal func get_CharacterSpacingImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, &value))
            }
            return value
        }

        internal func put_CharacterSpacingImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
            }
        }

        internal func get_ForegroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

        internal func get_IsTextScaleFactorEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsTextScaleFactorEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_TabNavigationImpl() throws -> WinUI.KeyboardNavigationMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabNavigation(pThis, &value))
            }
            return value
        }

        internal func put_TabNavigationImpl(_ value: WinUI.KeyboardNavigationMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TabNavigation(pThis, value))
            }
        }

        internal func get_TemplateImpl() throws -> WinUI.ControlTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Template(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TemplateImpl(_ value: WinUI.ControlTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Template(pThis, RawPointer(value)))
            }
        }

        internal func get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal func get_HorizontalContentAlignmentImpl() throws -> WinUI.HorizontalAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignment(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalContentAlignmentImpl(_ value: WinUI.HorizontalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalContentAlignment(pThis, value))
            }
        }

        internal func get_VerticalContentAlignmentImpl() throws -> WinUI.VerticalAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignment(pThis, &value))
            }
            return value
        }

        internal func put_VerticalContentAlignmentImpl(_ value: WinUI.VerticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalContentAlignment(pThis, value))
            }
        }

        internal func get_BackgroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

        internal func get_BackgroundSizingImpl() throws -> WinUI.BackgroundSizing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, &value))
            }
            return value
        }

        internal func put_BackgroundSizingImpl(_ value: WinUI.BackgroundSizing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
            }
        }

        internal func get_BorderThicknessImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BorderThicknessImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, .from(swift: value)))
            }
        }

        internal func get_BorderBrushImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BorderBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, RawPointer(value)))
            }
        }

        internal func get_DefaultStyleResourceUriImpl() throws -> WindowsFoundation.Uri? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleResourceUri(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_DefaultStyleResourceUriImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultStyleResourceUri(pThis, RawPointer(value)))
            }
        }

        internal func get_ElementSoundModeImpl() throws -> WinUI.ElementSoundMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundMode(pThis, &value))
            }
            return value
        }

        internal func put_ElementSoundModeImpl(_ value: WinUI.ElementSoundMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ElementSoundMode(pThis, value))
            }
        }

        internal func get_CornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_CornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, .from(swift: value)))
            }
        }

        internal func add_FocusEngagedImpl(_ handler: TypedEventHandler<WinUI.Control?, WinUI.FocusEngagedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CControl___x_ABI_CMicrosoft__CUI__CXaml__CControls__CFocusEngagedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FocusEngaged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FocusEngagedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FocusEngaged(pThis, token))
            }
        }

        internal func add_FocusDisengagedImpl(_ handler: TypedEventHandler<WinUI.Control?, WinUI.FocusDisengagedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CControl___x_ABI_CMicrosoft__CUI__CXaml__CControls__CFocusDisengagedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FocusDisengaged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FocusDisengagedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FocusDisengaged(pThis, token))
            }
        }

        internal func add_IsEnabledChangedImpl(_ handler: WinUI.DependencyPropertyChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.DependencyPropertyChangedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsEnabledChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_IsEnabledChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsEnabledChanged(pThis, token))
            }
        }

        internal func RemoveFocusEngagementImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFocusEngagement(pThis))
            }
        }

        internal func ApplyTemplateImpl() throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyTemplate(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class IControlFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Control.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IControl {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IControl(value!)
        }

    }

    public class IControlOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides }

        internal func OnPointerEnteredImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerEntered(pThis, RawPointer(e)))
            }
        }

        internal func OnPointerPressedImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerPressed(pThis, RawPointer(e)))
            }
        }

        internal func OnPointerMovedImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerMoved(pThis, RawPointer(e)))
            }
        }

        internal func OnPointerReleasedImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerReleased(pThis, RawPointer(e)))
            }
        }

        internal func OnPointerExitedImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerExited(pThis, RawPointer(e)))
            }
        }

        internal func OnPointerCaptureLostImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerCaptureLost(pThis, RawPointer(e)))
            }
        }

        internal func OnPointerCanceledImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerCanceled(pThis, RawPointer(e)))
            }
        }

        internal func OnPointerWheelChangedImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerWheelChanged(pThis, RawPointer(e)))
            }
        }

        internal func OnTappedImpl(_ e: WinUI.TappedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnTapped(pThis, RawPointer(e)))
            }
        }

        internal func OnDoubleTappedImpl(_ e: WinUI.DoubleTappedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDoubleTapped(pThis, RawPointer(e)))
            }
        }

        internal func OnHoldingImpl(_ e: WinUI.HoldingRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnHolding(pThis, RawPointer(e)))
            }
        }

        internal func OnRightTappedImpl(_ e: WinUI.RightTappedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnRightTapped(pThis, RawPointer(e)))
            }
        }

        internal func OnManipulationStartingImpl(_ e: WinUI.ManipulationStartingRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationStarting(pThis, RawPointer(e)))
            }
        }

        internal func OnManipulationInertiaStartingImpl(_ e: WinUI.ManipulationInertiaStartingRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationInertiaStarting(pThis, RawPointer(e)))
            }
        }

        internal func OnManipulationStartedImpl(_ e: WinUI.ManipulationStartedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationStarted(pThis, RawPointer(e)))
            }
        }

        internal func OnManipulationDeltaImpl(_ e: WinUI.ManipulationDeltaRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationDelta(pThis, RawPointer(e)))
            }
        }

        internal func OnManipulationCompletedImpl(_ e: WinUI.ManipulationCompletedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationCompleted(pThis, RawPointer(e)))
            }
        }

        internal func OnKeyUpImpl(_ e: WinUI.KeyRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnKeyUp(pThis, RawPointer(e)))
            }
        }

        internal func OnKeyDownImpl(_ e: WinUI.KeyRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnKeyDown(pThis, RawPointer(e)))
            }
        }

        internal func OnPreviewKeyDownImpl(_ e: WinUI.KeyRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPreviewKeyDown(pThis, RawPointer(e)))
            }
        }

        internal func OnPreviewKeyUpImpl(_ e: WinUI.KeyRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPreviewKeyUp(pThis, RawPointer(e)))
            }
        }

        internal func OnGotFocusImpl(_ e: WinUI.RoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnGotFocus(pThis, RawPointer(e)))
            }
        }

        internal func OnLostFocusImpl(_ e: WinUI.RoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnLostFocus(pThis, RawPointer(e)))
            }
        }

        internal func OnCharacterReceivedImpl(_ e: WinUI.CharacterReceivedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnCharacterReceived(pThis, RawPointer(e)))
            }
        }

        internal func OnDragEnterImpl(_ e: WinUI.DragEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragEnter(pThis, RawPointer(e)))
            }
        }

        internal func OnDragLeaveImpl(_ e: WinUI.DragEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragLeave(pThis, RawPointer(e)))
            }
        }

        internal func OnDragOverImpl(_ e: WinUI.DragEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragOver(pThis, RawPointer(e)))
            }
        }

        internal func OnDropImpl(_ e: WinUI.DragEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDrop(pThis, RawPointer(e)))
            }
        }

    }

    public class IControlProtected: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlProtected }

        internal func get_DefaultStyleKeyImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleKey(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_DefaultStyleKeyImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultStyleKey(pThis, _value))
            }
        }

        internal func GetTemplateChildImpl(_ childName: String) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _childName = try! HString(childName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTemplateChild(pThis, _childName.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IControlStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics }

        internal func get_IsFocusEngagementEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagementEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsFocusEngagedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_RequiresPointerPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequiresPointerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontFamilyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontWeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontStretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CharacterSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTextScaleFactorEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TabNavigationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabNavigationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalContentAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalContentAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundSizingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BorderThicknessPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BorderBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DefaultStyleKeyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleKeyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DefaultStyleResourceUriPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleResourceUriProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ElementSoundModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTemplateFocusTargetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTemplateFocusTargetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsTemplateFocusTargetImpl(_ element: WinUI.FrameworkElement?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsTemplateFocusTarget(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetIsTemplateFocusTargetImpl(_ element: WinUI.FrameworkElement?, _ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsTemplateFocusTarget(pThis, RawPointer(element), .init(from: value)))
            }
        }

        internal func get_IsTemplateKeyTipTargetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTemplateKeyTipTargetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsTemplateKeyTipTargetImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsTemplateKeyTipTarget(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetIsTemplateKeyTipTargetImpl(_ element: WinUI.DependencyObject?, _ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsTemplateKeyTipTarget(pThis, RawPointer(element), .init(from: value)))
            }
        }

    }

    public class IControlTemplate: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate }

        internal func get_TargetTypeImpl() throws -> WinUI.TypeName {
            var value: __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetType(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_TargetTypeImpl(_ value: WinUI.TypeName) throws {
            let _value = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TargetType(pThis, _value.val))
            }
        }

    }

    public class ICoreWebView2InitializedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICoreWebView2InitializedEventArgs }

        internal func get_ExceptionImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICoreWebView2InitializedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Exception(pThis, &value))
            }
            return value
        }

    }

    public class IDataTemplateSelector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector }

        internal func SelectTemplateImpl(_ item: Any?, _ container: WinUI.DependencyObject?) throws -> WinUI.DataTemplate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectTemplate(pThis, _item, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func SelectTemplateForItemImpl(_ item: Any?) throws -> WinUI.DataTemplate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectTemplateForItem(pThis, _item, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IDataTemplateSelectorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.DataTemplateSelector.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IDataTemplateSelector {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IDataTemplateSelector(value!)
        }

    }

    public class IDataTemplateSelectorOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides }

        internal func SelectTemplateCoreImpl(_ item: Any?, _ container: WinUI.DependencyObject?) throws -> WinUI.DataTemplate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectTemplateCore(pThis, _item, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func SelectTemplateForItemCoreImpl(_ item: Any?) throws -> WinUI.DataTemplate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectTemplateForItemCore(pThis, _item, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IDragItemsCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs }

        internal func get_ItemsImpl() throws -> WindowsFoundation.AnyIVectorView<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVectorView_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal func get_DropResultImpl() throws -> UWP.DataPackageOperation {
            var value: __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DropResult(pThis, &value))
            }
            return value
        }

    }

    public class IDragItemsStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal func get_DataImpl() throws -> UWP.DataPackage? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFlipView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView }

        internal func get_UseTouchAnimationsForAllNavigationImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseTouchAnimationsForAllNavigation(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_UseTouchAnimationsForAllNavigationImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseTouchAnimationsForAllNavigation(pThis, .init(from: value)))
            }
        }

    }

    public class IFlipViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.FlipView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFlipView {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFlipView(value!)
        }

    }

    public class IFlipViewItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItem }

    }

    public class IFlipViewItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItemFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.FlipViewItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFlipViewItem {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItemFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFlipViewItem(value!)
        }

    }

    public class IFlipViewStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewStatics }

        internal func get_UseTouchAnimationsForAllNavigationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseTouchAnimationsForAllNavigationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFlyout: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout }

        internal func get_ContentImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, RawPointer(value)))
            }
        }

        internal func get_FlyoutPresenterStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlyoutPresenterStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FlyoutPresenterStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FlyoutPresenterStyle(pThis, RawPointer(value)))
            }
        }

    }

    public class IFlyoutFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Flyout.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFlyout {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFlyout(value!)
        }

    }

    public class IFlyoutPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter }

        internal func get_IsDefaultShadowEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDefaultShadowEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsDefaultShadowEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDefaultShadowEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class IFlyoutPresenterFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.FlyoutPresenter.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFlyoutPresenter {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFlyoutPresenter(value!)
        }

    }

    public class IFlyoutPresenterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterStatics }

        internal func get_IsDefaultShadowEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDefaultShadowEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFlyoutStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutStatics }

        internal func get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FlyoutPresenterStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlyoutPresenterStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFocusDisengagedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs }

    }

    public class IFocusEngagedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class IFontIcon: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon }

        internal func get_GlyphImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Glyph(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_GlyphImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Glyph(pThis, _value.get()))
            }
        }

        internal func get_FontSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        internal func put_FontSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        internal func get_FontFamilyImpl() throws -> WinUI.FontFamily? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FontFamilyImpl(_ value: WinUI.FontFamily?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, RawPointer(value)))
            }
        }

        internal func get_FontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_FontWeightImpl(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        internal func get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal func put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal func get_IsTextScaleFactorEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsTextScaleFactorEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_MirroredWhenRightToLeftImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MirroredWhenRightToLeft(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_MirroredWhenRightToLeftImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MirroredWhenRightToLeft(pThis, .init(from: value)))
            }
        }

    }

    public class IFontIconFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.FontIcon.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFontIcon {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFontIcon(value!)
        }

    }

    public class IFontIconSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource }

        internal func get_GlyphImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Glyph(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_GlyphImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Glyph(pThis, _value.get()))
            }
        }

        internal func get_FontSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        internal func put_FontSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        internal func get_FontFamilyImpl() throws -> WinUI.FontFamily? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FontFamilyImpl(_ value: WinUI.FontFamily?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, RawPointer(value)))
            }
        }

        internal func get_FontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_FontWeightImpl(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        internal func get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal func put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal func get_IsTextScaleFactorEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsTextScaleFactorEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_MirroredWhenRightToLeftImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MirroredWhenRightToLeft(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_MirroredWhenRightToLeftImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MirroredWhenRightToLeft(pThis, .init(from: value)))
            }
        }

    }

    public class IFontIconSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.FontIconSource.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFontIconSource {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFontIconSource(value!)
        }

    }

    public class IFontIconSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceStatics }

        internal func get_GlyphPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontFamilyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontWeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTextScaleFactorEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MirroredWhenRightToLeftPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MirroredWhenRightToLeftProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFontIconStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconStatics }

        internal func get_GlyphPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontFamilyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontWeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTextScaleFactorEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MirroredWhenRightToLeftPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MirroredWhenRightToLeftProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFrame: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame }

        internal func get_CacheSizeImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CacheSize(pThis, &value))
            }
            return value
        }

        internal func put_CacheSizeImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CacheSize(pThis, value))
            }
        }

        internal func get_CanGoBackImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoBack(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CanGoForwardImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoForward(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CurrentSourcePageTypeImpl() throws -> WinUI.TypeName {
            var value: __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentSourcePageType(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SourcePageTypeImpl() throws -> WinUI.TypeName {
            var value: __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourcePageType(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_SourcePageTypeImpl(_ value: WinUI.TypeName) throws {
            let _value = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourcePageType(pThis, _value.val))
            }
        }

        internal func get_BackStackDepthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackStackDepth(pThis, &value))
            }
            return value
        }

        internal func get_BackStackImpl() throws -> WindowsFoundation.AnyIVector<WinUI.PageStackEntry?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackStack(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CNavigation__CPageStackEntryWrapper.unwrapFrom(abi: value)
        }

        internal func get_ForwardStackImpl() throws -> WindowsFoundation.AnyIVector<WinUI.PageStackEntry?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForwardStack(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CNavigation__CPageStackEntryWrapper.unwrapFrom(abi: value)
        }

        internal func get_IsNavigationStackEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsNavigationStackEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsNavigationStackEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsNavigationStackEnabled(pThis, .init(from: value)))
            }
        }

        internal func add_NavigatedImpl(_ handler: WinUI.NavigatedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Navigation.NavigatedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Navigated(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NavigatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Navigated(pThis, token))
            }
        }

        internal func add_NavigatingImpl(_ handler: WinUI.NavigatingCancelEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Navigation.NavigatingCancelEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Navigating(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NavigatingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Navigating(pThis, token))
            }
        }

        internal func add_NavigationFailedImpl(_ handler: WinUI.NavigationFailedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Navigation.NavigationFailedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigationFailed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NavigationFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigationFailed(pThis, token))
            }
        }

        internal func add_NavigationStoppedImpl(_ handler: WinUI.NavigationStoppedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Navigation.NavigationStoppedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigationStopped(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NavigationStoppedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigationStopped(pThis, token))
            }
        }

        internal func GoBackImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GoBack(pThis))
            }
        }

        internal func GoBackWithTransitionInfoImpl(_ transitionInfoOverride: WinUI.NavigationTransitionInfo?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GoBackWithTransitionInfo(pThis, RawPointer(transitionInfoOverride)))
            }
        }

        internal func GoForwardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GoForward(pThis))
            }
        }

        internal func NavigateImpl(_ sourcePageType: WinUI.TypeName, _ parameter: Any?) throws -> Bool {
            var result: boolean = 0
            let _sourcePageType = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: sourcePageType)
            let parameterWrapper = __ABI_.AnyWrapper(parameter)
            let _parameter = try! parameterWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Navigate(pThis, _sourcePageType.val, _parameter, &result))
            }
            return .init(from: result)
        }

        internal func NavigateWithTransitionInfoImpl(_ sourcePageType: WinUI.TypeName, _ parameter: Any?, _ infoOverride: WinUI.NavigationTransitionInfo?) throws -> Bool {
            var result: boolean = 0
            let _sourcePageType = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: sourcePageType)
            let parameterWrapper = __ABI_.AnyWrapper(parameter)
            let _parameter = try! parameterWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NavigateWithTransitionInfo(pThis, _sourcePageType.val, _parameter, RawPointer(infoOverride), &result))
            }
            return .init(from: result)
        }

        internal func NavigateToTypeImpl(_ sourcePageType: WinUI.TypeName, _ parameter: Any?, _ navigationOptions: WinUI.FrameNavigationOptions?) throws -> Bool {
            var result: boolean = 0
            let _sourcePageType = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: sourcePageType)
            let parameterWrapper = __ABI_.AnyWrapper(parameter)
            let _parameter = try! parameterWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NavigateToType(pThis, _sourcePageType.val, _parameter, RawPointer(navigationOptions), &result))
            }
            return .init(from: result)
        }

        internal func GetNavigationStateImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNavigationState(pThis, &result))
            }
            return .init(from: result)
        }

        internal func SetNavigationStateImpl(_ navigationState: String) throws {
            let _navigationState = try! HString(navigationState)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetNavigationState(pThis, _navigationState.get()))
            }
        }

        internal func SetNavigationStateWithNavigationControlImpl(_ navigationState: String, _ suppressNavigate: Bool) throws {
            let _navigationState = try! HString(navigationState)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetNavigationStateWithNavigationControl(pThis, _navigationState.get(), .init(from: suppressNavigate)))
            }
        }

    }

    public class IFrameFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Frame.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFrame {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFrame(value!)
        }

    }

    public class IFrameStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics }

        internal func get_CacheSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CacheSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanGoBackPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoBackProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanGoForwardPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoForwardProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CurrentSourcePageTypePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentSourcePageTypeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SourcePageTypePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourcePageTypeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackStackDepthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackStackDepthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackStackPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackStackProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ForwardStackPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForwardStackProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsNavigationStackEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrameStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsNavigationStackEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IGrid: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid }

        internal func get_RowDefinitionsImpl() throws -> WinUI.RowDefinitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowDefinitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ColumnDefinitionsImpl() throws -> WinUI.ColumnDefinitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnDefinitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundSizingImpl() throws -> WinUI.BackgroundSizing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, &value))
            }
            return value
        }

        internal func put_BackgroundSizingImpl(_ value: WinUI.BackgroundSizing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
            }
        }

        internal func get_BorderBrushImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BorderBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, RawPointer(value)))
            }
        }

        internal func get_BorderThicknessImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BorderThicknessImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, .from(swift: value)))
            }
        }

        internal func get_CornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_CornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, .from(swift: value)))
            }
        }

        internal func get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal func get_RowSpacingImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpacing(pThis, &value))
            }
            return value
        }

        internal func put_RowSpacingImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RowSpacing(pThis, value))
            }
        }

        internal func get_ColumnSpacingImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpacing(pThis, &value))
            }
            return value
        }

        internal func put_ColumnSpacingImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColumnSpacing(pThis, value))
            }
        }

    }

    public class IGridFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Grid.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IGrid {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IGrid(value!)
        }

    }

    public class IGridStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics }

        internal func get_BackgroundSizingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BorderBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BorderThicknessPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_RowSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ColumnSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_RowPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetRowImpl(_ element: WinUI.FrameworkElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRow(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetRowImpl(_ element: WinUI.FrameworkElement?, _ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetRow(pThis, RawPointer(element), value))
            }
        }

        internal func get_ColumnPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetColumnImpl(_ element: WinUI.FrameworkElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetColumn(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetColumnImpl(_ element: WinUI.FrameworkElement?, _ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetColumn(pThis, RawPointer(element), value))
            }
        }

        internal func get_RowSpanPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpanProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetRowSpanImpl(_ element: WinUI.FrameworkElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRowSpan(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetRowSpanImpl(_ element: WinUI.FrameworkElement?, _ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetRowSpan(pThis, RawPointer(element), value))
            }
        }

        internal func get_ColumnSpanPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpanProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetColumnSpanImpl(_ element: WinUI.FrameworkElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetColumnSpan(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetColumnSpanImpl(_ element: WinUI.FrameworkElement?, _ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetColumnSpan(pThis, RawPointer(element), value))
            }
        }

    }

    public class IGridView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridView }

    }

    public class IGridViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.GridView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IGridView {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IGridView(value!)
        }

    }

    public class IGroupStyle: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle }

        internal func get_PanelImpl() throws -> WinUI.ItemsPanelTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Panel(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PanelImpl(_ value: WinUI.ItemsPanelTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Panel(pThis, RawPointer(value)))
            }
        }

        internal func get_ContainerStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainerStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContainerStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContainerStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_HeaderContainerStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderContainerStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderContainerStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderContainerStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_ContainerStyleSelectorImpl() throws -> WinUI.StyleSelector? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainerStyleSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContainerStyleSelectorImpl(_ value: WinUI.StyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContainerStyleSelector(pThis, RawPointer(value)))
            }
        }

        internal func get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_HeaderTemplateSelectorImpl() throws -> WinUI.DataTemplateSelector? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderTemplateSelectorImpl(_ value: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplateSelector(pThis, RawPointer(value)))
            }
        }

        internal func get_HidesIfEmptyImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HidesIfEmpty(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HidesIfEmptyImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HidesIfEmpty(pThis, .init(from: value)))
            }
        }

    }

    public class IGroupStyleFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.GroupStyle.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IGroupStyle {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IGroupStyle(value!)
        }

    }

    public class IGroupStyleSelector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector }

        internal func SelectGroupStyleImpl(_ group: Any?, _ level: UInt32) throws -> WinUI.GroupStyle? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let groupWrapper = __ABI_.AnyWrapper(group)
                let _group = try! groupWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectGroupStyle(pThis, _group, level, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IGroupStyleSelectorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.GroupStyleSelector.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IGroupStyleSelector {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IGroupStyleSelector(value!)
        }

    }

    public class IGroupStyleSelectorOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides }

        internal func SelectGroupStyleCoreImpl(_ group: Any?, _ level: UInt32) throws -> WinUI.GroupStyle? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let groupWrapper = __ABI_.AnyWrapper(group)
                let _group = try! groupWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectGroupStyleCore(pThis, _group, level, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IHyperlinkButton: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton }

        internal func get_NavigateUriImpl() throws -> WindowsFoundation.Uri? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigateUri(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_NavigateUriImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NavigateUri(pThis, RawPointer(value)))
            }
        }

    }

    public class IHyperlinkButtonFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.HyperlinkButton.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IHyperlinkButton {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IHyperlinkButton(value!)
        }

    }

    public class IHyperlinkButtonStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonStatics }

        internal func get_NavigateUriPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigateUriProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IIconElement: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement }

        internal func get_ForegroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

    }

    public class IIconElementFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElementFactory }

    }

    public class IIconElementStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElementStatics }

        internal func get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IIconSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource }

        internal func get_ForegroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

        internal func CreateIconElementImpl() throws -> WinUI.IconElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateIconElement(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IIconSourceElement: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement }

        internal func get_IconSourceImpl() throws -> WinUI.IconSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_IconSourceImpl(_ value: WinUI.IconSource?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconSource(pThis, RawPointer(value)))
            }
        }

    }

    public class IIconSourceElementFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElementFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.IconSourceElement.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IIconSourceElement {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElementFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IIconSourceElement(value!)
        }

    }

    public class IIconSourceElementStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElementStatics }

        internal func get_IconSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IIconSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceFactory }

    }

    public class IIconSourceOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides }

        internal func CreateIconElementCoreImpl() throws -> WinUI.IconElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateIconElementCore(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetIconElementPropertyCoreImpl(_ iconSourceProperty: WinUI.DependencyProperty?) throws -> WinUI.DependencyProperty? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetIconElementPropertyCore(pThis, RawPointer(iconSourceProperty), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IIconSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceStatics }

        internal func get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IImage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage }

        internal func get_SourceImpl() throws -> WinUI.ImageSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SourceImpl(_ value: WinUI.ImageSource?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, RawPointer(value)))
            }
        }

        internal func get_StretchImpl() throws -> WinUI.Stretch {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stretch(pThis, &value))
            }
            return value
        }

        internal func put_StretchImpl(_ value: WinUI.Stretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Stretch(pThis, value))
            }
        }

        internal func get_NineGridImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NineGrid(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_NineGridImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NineGrid(pThis, .from(swift: value)))
            }
        }

        internal func add_ImageFailedImpl(_ handler: WinUI.ExceptionRoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.ExceptionRoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImageFailed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ImageFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImageFailed(pThis, token))
            }
        }

        internal func add_ImageOpenedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImageOpened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ImageOpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImageOpened(pThis, token))
            }
        }

        internal func GetAsCastingSourceImpl() throws -> UWP.CastingSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAsCastingSource(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetAlphaMaskImpl() throws -> WinAppSDK.CompositionBrush? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlphaMask(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IImageIcon: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon }

        internal func get_SourceImpl() throws -> WinUI.ImageSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SourceImpl(_ value: WinUI.ImageSource?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, RawPointer(value)))
            }
        }

    }

    public class IImageIconFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIconFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ImageIcon.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IImageIcon {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIconFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IImageIcon(value!)
        }

    }

    public class IImageIconStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIconStatics }

        internal func get_SourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIconStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IImageStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageStatics }

        internal func get_SourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_StretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NineGridPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NineGridProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IInfoBar: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar }

        internal func get_IsOpenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsOpenImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsOpen(pThis, .init(from: value)))
            }
        }

        internal func get_TitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TitleImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value.get()))
            }
        }

        internal func get_MessageImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Message(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_MessageImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Message(pThis, _value.get()))
            }
        }

        internal func get_SeverityImpl() throws -> WinUI.InfoBarSeverity {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Severity(pThis, &value))
            }
            return value
        }

        internal func put_SeverityImpl(_ value: WinUI.InfoBarSeverity) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Severity(pThis, value))
            }
        }

        internal func get_IconSourceImpl() throws -> WinUI.IconSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_IconSourceImpl(_ value: WinUI.IconSource?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconSource(pThis, RawPointer(value)))
            }
        }

        internal func get_IsIconVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIconVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsIconVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsIconVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsClosableImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsClosable(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsClosableImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsClosable(pThis, .init(from: value)))
            }
        }

        internal func get_CloseButtonStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_CloseButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_CloseButtonCommandImpl() throws -> WinUI.AnyICommand? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommand(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal func put_CloseButtonCommandImpl(_ value: WinUI.AnyICommand?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonCommand(pThis, _value))
            }
        }

        internal func get_CloseButtonCommandParameterImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_CloseButtonCommandParameterImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonCommandParameter(pThis, _value))
            }
        }

        internal func get_ActionButtonImpl() throws -> WinUI.ButtonBase? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionButton(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ActionButtonImpl(_ value: WinUI.ButtonBase?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ActionButton(pThis, RawPointer(value)))
            }
        }

        internal func get_ContentImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ContentImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, _value))
            }
        }

        internal func get_ContentTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.InfoBarTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_CloseButtonClickImpl(_ handler: TypedEventHandler<WinUI.InfoBar?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CInfoBar_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CloseButtonClick(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CloseButtonClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CloseButtonClick(pThis, token))
            }
        }

        internal func add_ClosingImpl(_ handler: TypedEventHandler<WinUI.InfoBar?, WinUI.InfoBarClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CInfoBar___x_ABI_CMicrosoft__CUI__CXaml__CControls__CInfoBarClosingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closing(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closing(pThis, token))
            }
        }

        internal func add_ClosedImpl(_ handler: TypedEventHandler<WinUI.InfoBar?, WinUI.InfoBarClosedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CInfoBar___x_ABI_CMicrosoft__CUI__CXaml__CControls__CInfoBarClosedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
            }
        }

    }

    public class IInfoBarClosedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgs }

        internal func get_ReasonImpl() throws -> WinUI.InfoBarCloseReason {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarCloseReason = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

    }

    public class IInfoBarClosedEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgsFactory }

    }

    public class IInfoBarClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs }

        internal func get_ReasonImpl() throws -> WinUI.InfoBarCloseReason {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarCloseReason = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class IInfoBarClosingEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgsFactory }

    }

    public class IInfoBarFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.InfoBar.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IInfoBar {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IInfoBar(value!)
        }

    }

    public class IInfoBarStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics }

        internal func get_IsOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TitlePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MessagePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MessageProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SeverityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SeverityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IconSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsIconVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIconVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsClosablePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsClosableProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonCommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonCommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ActionButtonPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionButtonProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TemplateSettingsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettingsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IInfoBarTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings }

        internal func get_IconElementImpl() throws -> WinUI.IconElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_IconElementImpl(_ value: WinUI.IconElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconElement(pThis, RawPointer(value)))
            }
        }

    }

    public class IInfoBarTemplateSettingsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettingsFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.InfoBarTemplateSettings.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IInfoBarTemplateSettings {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettingsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IInfoBarTemplateSettings(value!)
        }

    }

    public class IInfoBarTemplateSettingsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettingsStatics }

        internal func get_IconElementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettingsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconElementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IInsertionPanel: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel }

        open func GetInsertionIndexesImpl(_ position: WindowsFoundation.Point, _ first: inout Int32, _ second: inout Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInsertionIndexes(pThis, .from(swift: position), &first, &second))
            }
        }

    }

    internal static var IInsertionPanelVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanelVtbl = .init(
        QueryInterface: { IInsertionPanelWrapper.queryInterface($0, $1, $2) },
        AddRef: { IInsertionPanelWrapper.addRef($0) },
        Release: { IInsertionPanelWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanelWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Controls.IInsertionPanel").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetInsertionIndexes: {
            do {
                guard let __unwrapped__instance = IInsertionPanelWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let position: WindowsFoundation.Point = .from(abi: $1)
                var first: Int32 = 0
                var second: Int32 = 0
                try __unwrapped__instance.getInsertionIndexes(position, &first, &second)
                $2?.initialize(to: first)
                $3?.initialize(to: second)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IInsertionPanelWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.IInsertionPanelBridge>
    public class IIsTextTrimmedChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs }

    }

    public class IItemClickEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs }

        internal func get_ClickedItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClickedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class IItemCollectionTransition: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition }

        internal func get_OperationImpl() throws -> WinUI.ItemCollectionTransitionOperation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionOperation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Operation(pThis, &value))
            }
            return value
        }

        internal func get_TriggersImpl() throws -> WinUI.ItemCollectionTransitionTriggers {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Triggers(pThis, &value))
            }
            return value
        }

        internal func get_OldBoundsImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldBounds(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_NewBoundsImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewBounds(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_HasStartedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasStarted(pThis, &value))
            }
            return .init(from: value)
        }

        internal func StartImpl() throws -> WinUI.ItemCollectionTransitionProgress? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IItemCollectionTransitionCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionCompletedEventArgs }

        internal func get_TransitionImpl() throws -> WinUI.ItemCollectionTransition? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionCompletedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transition(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ElementImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionCompletedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Element(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IItemCollectionTransitionProgress: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProgress }

        internal func get_TransitionImpl() throws -> WinUI.ItemCollectionTransition? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProgress.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transition(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ElementImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProgress.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Element(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProgress.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IItemCollectionTransitionProvider: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider }

        internal func ShouldAnimateImpl(_ transition: WinUI.ItemCollectionTransition?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShouldAnimate(pThis, RawPointer(transition), &result))
            }
            return .init(from: result)
        }

        internal func QueueTransitionImpl(_ transition: WinUI.ItemCollectionTransition?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.QueueTransition(pThis, RawPointer(transition)))
            }
        }

        internal func add_TransitionCompletedImpl(_ handler: TypedEventHandler<WinUI.ItemCollectionTransitionProvider?, WinUI.ItemCollectionTransitionCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CItemCollectionTransitionProvider___x_ABI_CMicrosoft__CUI__CXaml__CControls__CItemCollectionTransitionCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TransitionCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TransitionCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TransitionCompleted(pThis, token))
            }
        }

    }

    public class IItemCollectionTransitionProviderFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ItemCollectionTransitionProvider.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IItemCollectionTransitionProvider {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IItemCollectionTransitionProvider(value!)
        }

    }

    public class IItemCollectionTransitionProviderOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderOverrides }

        internal func ShouldAnimateCoreImpl(_ transition: WinUI.ItemCollectionTransition?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShouldAnimateCore(pThis, RawPointer(transition), &result))
            }
            return .init(from: result)
        }

        internal func StartTransitionsImpl(_ transitions: WindowsFoundation.AnyIVector<WinUI.ItemCollectionTransition?>?) throws {
            let transitionsWrapper = WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CItemCollectionTransitionWrapper(transitions)
            let _transitions = try! transitionsWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartTransitions(pThis, _transitions))
            }
        }

    }

    public class IItemContainerGenerator: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator }

        internal func add_ItemsChangedImpl(_ handler: WinUI.ItemsChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ItemsChangedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ItemsChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ItemsChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ItemsChanged(pThis, token))
            }
        }

        internal func ItemFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ItemFromContainer(pThis, RawPointer(container), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func ContainerFromItemImpl(_ item: Any?) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromItem(pThis, _item, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func IndexFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexFromContainer(pThis, RawPointer(container), &result))
            }
            return result
        }

        internal func ContainerFromIndexImpl(_ index: Int32) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromIndex(pThis, index, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetItemContainerGeneratorForPanelImpl(_ panel: WinUI.Panel?) throws -> WinUI.ItemContainerGenerator? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemContainerGeneratorForPanel(pThis, RawPointer(panel), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func StartAtImpl(_ position: WinUI.GeneratorPosition, _ direction: WinUI.GeneratorDirection, _ allowStartAtRealizedItem: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartAt(pThis, .from(swift: position), direction, .init(from: allowStartAtRealizedItem)))
            }
        }

        internal func StopImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        internal func GenerateNextImpl(_ isNewlyRealized: inout Bool) throws -> WinUI.DependencyObject? {
            let (returnValue) = try ComPtrs.initialize { returnValueAbi in
                var _isNewlyRealized: boolean = .init()
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GenerateNext(pThis, &_isNewlyRealized, &returnValueAbi))
                }
                isNewlyRealized = .init(from: _isNewlyRealized)
            }
            return .from(abi: returnValue)
        }

        internal func PrepareItemContainerImpl(_ container: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PrepareItemContainer(pThis, RawPointer(container)))
            }
        }

        internal func RemoveAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAll(pThis))
            }
        }

        internal func RemoveImpl(_ position: WinUI.GeneratorPosition, _ count: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, .from(swift: position), count))
            }
        }

        internal func GeneratorPositionFromIndexImpl(_ itemIndex: Int32) throws -> WinUI.GeneratorPosition {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGeneratorPosition = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GeneratorPositionFromIndex(pThis, itemIndex, &result))
            }
            return .from(abi: result)
        }

        internal func IndexFromGeneratorPositionImpl(_ position: WinUI.GeneratorPosition) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexFromGeneratorPosition(pThis, .from(swift: position), &result))
            }
            return result
        }

        internal func RecycleImpl(_ position: WinUI.GeneratorPosition, _ count: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Recycle(pThis, .from(swift: position), count))
            }
        }

    }

    public class IItemContainerMapping: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping }

        open func ItemFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ItemFromContainer(pThis, RawPointer(container), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func ContainerFromItemImpl(_ item: Any?) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromItem(pThis, _item, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        open func IndexFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexFromContainer(pThis, RawPointer(container), &result))
            }
            return result
        }

        open func ContainerFromIndexImpl(_ index: Int32) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromIndex(pThis, index, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    internal static var IItemContainerMappingVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMappingVtbl = .init(
        QueryInterface: { IItemContainerMappingWrapper.queryInterface($0, $1, $2) },
        AddRef: { IItemContainerMappingWrapper.addRef($0) },
        Release: { IItemContainerMappingWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMappingWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Controls.IItemContainerMapping").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        ItemFromContainer: {
            do {
                guard let __unwrapped__instance = IItemContainerMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let container: WinUI.DependencyObject? = .from(abi: ComPtr($1))
                let result = try __unwrapped__instance.itemFromContainer(container)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ContainerFromItem: {
            do {
                guard let __unwrapped__instance = IItemContainerMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.containerFromItem(item)
                result?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IndexFromContainer: {
            do {
                guard let __unwrapped__instance = IItemContainerMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let container: WinUI.DependencyObject? = .from(abi: ComPtr($1))
                let result = try __unwrapped__instance.indexFromContainer(container)
                $2?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ContainerFromIndex: {
            do {
                guard let __unwrapped__instance = IItemContainerMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: Int32 = $1
                let result = try __unwrapped__instance.containerFromIndex(index)
                result?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IItemContainerMappingWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.IItemContainerMappingBridge>
    public class IItemsControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl }

        internal func get_ItemsSourceImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSource(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ItemsSourceImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsSource(pThis, _value))
            }
        }

        internal func get_ItemsImpl() throws -> WinUI.ItemCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_ItemTemplateSelectorImpl() throws -> WinUI.DataTemplateSelector? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemTemplateSelectorImpl(_ value: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemTemplateSelector(pThis, RawPointer(value)))
            }
        }

        internal func get_ItemsPanelImpl() throws -> WinUI.ItemsPanelTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsPanel(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemsPanelImpl(_ value: WinUI.ItemsPanelTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsPanel(pThis, RawPointer(value)))
            }
        }

        internal func get_DisplayMemberPathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayMemberPath(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_DisplayMemberPathImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayMemberPath(pThis, _value.get()))
            }
        }

        internal func get_ItemsPanelRootImpl() throws -> WinUI.Panel? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsPanelRoot(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemContainerStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemContainerStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainerStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_ItemContainerStyleSelectorImpl() throws -> WinUI.StyleSelector? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyleSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemContainerStyleSelectorImpl(_ value: WinUI.StyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainerStyleSelector(pThis, RawPointer(value)))
            }
        }

        internal func get_ItemContainerGeneratorImpl() throws -> WinUI.ItemContainerGenerator? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerGenerator(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemContainerTransitionsImpl() throws -> WinUI.TransitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemContainerTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainerTransitions(pThis, RawPointer(value)))
            }
        }

        internal func get_GroupStyleImpl() throws -> WindowsFoundation.AnyIObservableVector<WinUI.GroupStyle?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupStyle(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIObservableVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CGroupStyleWrapper.unwrapFrom(abi: value)
        }

        internal func get_GroupStyleSelectorImpl() throws -> WinUI.GroupStyleSelector? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupStyleSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_GroupStyleSelectorImpl(_ value: WinUI.GroupStyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GroupStyleSelector(pThis, RawPointer(value)))
            }
        }

        internal func get_IsGroupingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsGrouping(pThis, &value))
            }
            return .init(from: value)
        }

        internal func GroupHeaderContainerFromItemContainerImpl(_ itemContainer: WinUI.DependencyObject?) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GroupHeaderContainerFromItemContainer(pThis, RawPointer(itemContainer), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IItemsControlFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ItemsControl.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IItemsControl {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IItemsControl(value!)
        }

    }

    public class IItemsControlOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides }

        internal func IsItemItsOwnContainerOverrideImpl(_ item: Any?) throws -> Bool {
            var result: boolean = 0
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsItemItsOwnContainerOverride(pThis, _item, &result))
            }
            return .init(from: result)
        }

        internal func GetContainerForItemOverrideImpl() throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetContainerForItemOverride(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func ClearContainerForItemOverrideImpl(_ element: WinUI.DependencyObject?, _ item: Any?) throws {
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearContainerForItemOverride(pThis, RawPointer(element), _item))
            }
        }

        internal func PrepareContainerForItemOverrideImpl(_ element: WinUI.DependencyObject?, _ item: Any?) throws {
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PrepareContainerForItemOverride(pThis, RawPointer(element), _item))
            }
        }

        internal func OnItemsChangedImpl(_ e: Any?) throws {
            let eWrapper = __ABI_.AnyWrapper(e)
            let _e = try! eWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemsChanged(pThis, _e))
            }
        }

        internal func OnItemContainerStyleChangedImpl(_ oldItemContainerStyle: WinUI.Style?, _ newItemContainerStyle: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemContainerStyleChanged(pThis, RawPointer(oldItemContainerStyle), RawPointer(newItemContainerStyle)))
            }
        }

        internal func OnItemContainerStyleSelectorChangedImpl(_ oldItemContainerStyleSelector: WinUI.StyleSelector?, _ newItemContainerStyleSelector: WinUI.StyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemContainerStyleSelectorChanged(pThis, RawPointer(oldItemContainerStyleSelector), RawPointer(newItemContainerStyleSelector)))
            }
        }

        internal func OnItemTemplateChangedImpl(_ oldItemTemplate: WinUI.DataTemplate?, _ newItemTemplate: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemTemplateChanged(pThis, RawPointer(oldItemTemplate), RawPointer(newItemTemplate)))
            }
        }

        internal func OnItemTemplateSelectorChangedImpl(_ oldItemTemplateSelector: WinUI.DataTemplateSelector?, _ newItemTemplateSelector: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemTemplateSelectorChanged(pThis, RawPointer(oldItemTemplateSelector), RawPointer(newItemTemplateSelector)))
            }
        }

        internal func OnGroupStyleSelectorChangedImpl(_ oldGroupStyleSelector: WinUI.GroupStyleSelector?, _ newGroupStyleSelector: WinUI.GroupStyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnGroupStyleSelectorChanged(pThis, RawPointer(oldGroupStyleSelector), RawPointer(newGroupStyleSelector)))
            }
        }

    }

    public class IItemsControlStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics }

        internal func get_ItemsSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemTemplateSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemsPanelPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsPanelProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DisplayMemberPathPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayMemberPathProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemContainerStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemContainerStyleSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyleSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemContainerTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_GroupStyleSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupStyleSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsGroupingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsGroupingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetItemsOwnerImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ItemsControl? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsOwner(pThis, RawPointer(element), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func ItemsControlFromItemContainerImpl(_ container: WinUI.DependencyObject?) throws -> WinUI.ItemsControl? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ItemsControlFromItemContainer(pThis, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IItemsPanelTemplate: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate }

    }

    public class IItemsRepeater: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater }

        internal func get_ItemsSourceImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSource(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ItemsSourceImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsSource(pThis, _value))
            }
        }

        internal func get_ItemsSourceViewImpl() throws -> WinUI.ItemsSourceView? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSourceView(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemTemplateImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplate(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ItemTemplateImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemTemplate(pThis, _value))
            }
        }

        internal func get_LayoutImpl() throws -> WinUI.Layout? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Layout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_LayoutImpl(_ value: WinUI.Layout?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Layout(pThis, RawPointer(value)))
            }
        }

        internal func get_HorizontalCacheLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalCacheLength(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalCacheLengthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalCacheLength(pThis, value))
            }
        }

        internal func get_VerticalCacheLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalCacheLength(pThis, &value))
            }
            return value
        }

        internal func put_VerticalCacheLengthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalCacheLength(pThis, value))
            }
        }

        internal func get_BackgroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

        internal func GetElementIndexImpl(_ element: WinUI.UIElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetElementIndex(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func TryGetElementImpl(_ index: Int32) throws -> WinUI.UIElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TryGetElement(pThis, index, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetOrCreateElementImpl(_ index: Int32) throws -> WinUI.UIElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetOrCreateElement(pThis, index, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func add_ElementPreparedImpl(_ handler: TypedEventHandler<WinUI.ItemsRepeater?, WinUI.ItemsRepeaterElementPreparedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CItemsRepeater___x_ABI_CMicrosoft__CUI__CXaml__CControls__CItemsRepeaterElementPreparedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ElementPrepared(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ElementPreparedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ElementPrepared(pThis, token))
            }
        }

        internal func add_ElementClearingImpl(_ handler: TypedEventHandler<WinUI.ItemsRepeater?, WinUI.ItemsRepeaterElementClearingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CItemsRepeater___x_ABI_CMicrosoft__CUI__CXaml__CControls__CItemsRepeaterElementClearingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ElementClearing(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ElementClearingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ElementClearing(pThis, token))
            }
        }

        internal func add_ElementIndexChangedImpl(_ handler: TypedEventHandler<WinUI.ItemsRepeater?, WinUI.ItemsRepeaterElementIndexChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CItemsRepeater___x_ABI_CMicrosoft__CUI__CXaml__CControls__CItemsRepeaterElementIndexChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ElementIndexChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ElementIndexChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ElementIndexChanged(pThis, token))
            }
        }

    }

    public class IItemsRepeater2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater2 }

        internal func get_ItemTransitionProviderImpl() throws -> WinUI.ItemCollectionTransitionProvider? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTransitionProvider(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemTransitionProviderImpl(_ value: WinUI.ItemCollectionTransitionProvider?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemTransitionProvider(pThis, RawPointer(value)))
            }
        }

    }

    public class IItemsRepeaterElementClearingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementClearingEventArgs }

        internal func get_ElementImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementClearingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Element(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IItemsRepeaterElementIndexChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementIndexChangedEventArgs }

        internal func get_ElementImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementIndexChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Element(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OldIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementIndexChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldIndex(pThis, &value))
            }
            return value
        }

        internal func get_NewIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementIndexChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewIndex(pThis, &value))
            }
            return value
        }

    }

    public class IItemsRepeaterElementPreparedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementPreparedEventArgs }

        internal func get_ElementImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementPreparedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Element(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementPreparedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Index(pThis, &value))
            }
            return value
        }

    }

    public class IItemsRepeaterFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ItemsRepeater.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IItemsRepeater {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IItemsRepeater(value!)
        }

    }

    public class IItemsRepeaterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics }

        internal func get_ItemsSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LayoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalCacheLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalCacheLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalCacheLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalCacheLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IItemsRepeaterStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics2 }

        internal func get_ItemTransitionProviderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTransitionProviderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IItemsSourceView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView }

        internal func get_CountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Count(pThis, &value))
            }
            return value
        }

        internal func GetAtImpl(_ index: Int32) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func get_HasKeyIndexMappingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasKeyIndexMapping(pThis, &value))
            }
            return .init(from: value)
        }

        internal func KeyFromIndexImpl(_ index: Int32) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.KeyFromIndex(pThis, index, &result))
            }
            return .init(from: result)
        }

        internal func IndexFromKeyImpl(_ key: String) throws -> Int32 {
            var result: INT32 = 0
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexFromKey(pThis, _key.get(), &result))
            }
            return result
        }

        internal func IndexOfImpl(_ item: Any?) throws -> Int32 {
            var result: INT32 = 0
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _item, &result))
            }
            return result
        }

    }

    public class IItemsSourceViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceViewFactory }

        internal func CreateInstanceImpl(_ source: Any?, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.ItemsSourceView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IItemsSourceView {
            let (value) = try ComPtrs.initialize { valueAbi in
                let sourceWrapper = __ABI_.AnyWrapper(source)
                let _source = try! sourceWrapper?.toABI { $0 }
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceViewFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _source, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IItemsSourceView(value!)
        }

    }

    public class IKeyIndexMapping: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMapping }

        open func KeyFromIndexImpl(_ index: Int32) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMapping.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.KeyFromIndex(pThis, index, &result))
            }
            return .init(from: result)
        }

        open func IndexFromKeyImpl(_ key: String) throws -> Int32 {
            var result: INT32 = 0
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMapping.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexFromKey(pThis, _key.get(), &result))
            }
            return result
        }

    }

    internal static var IKeyIndexMappingVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMappingVtbl = .init(
        QueryInterface: { IKeyIndexMappingWrapper.queryInterface($0, $1, $2) },
        AddRef: { IKeyIndexMappingWrapper.addRef($0) },
        Release: { IKeyIndexMappingWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMappingWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Controls.IKeyIndexMapping").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        KeyFromIndex: {
            do {
                guard let __unwrapped__instance = IKeyIndexMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: Int32 = $1
                let result = try __unwrapped__instance.keyFromIndex(index)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IndexFromKey: {
            do {
                guard let __unwrapped__instance = IKeyIndexMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let key: String = .init(from: $1)
                let result = try __unwrapped__instance.indexFromKey(key)
                $2?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IKeyIndexMappingWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.IKeyIndexMappingBridge>
    public class ILayout: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout }

        internal func InitializeForContextImpl(_ context: WinUI.LayoutContext?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InitializeForContext(pThis, RawPointer(context)))
            }
        }

        internal func UninitializeForContextImpl(_ context: WinUI.LayoutContext?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.UninitializeForContext(pThis, RawPointer(context)))
            }
        }

        internal func MeasureImpl(_ context: WinUI.LayoutContext?, _ availableSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
            var result: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Measure(pThis, RawPointer(context), .from(swift: availableSize), &result))
            }
            return .from(abi: result)
        }

        internal func ArrangeImpl(_ context: WinUI.LayoutContext?, _ finalSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
            var result: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Arrange(pThis, RawPointer(context), .from(swift: finalSize), &result))
            }
            return .from(abi: result)
        }

        internal func add_MeasureInvalidatedImpl(_ handler: TypedEventHandler<WinUI.Layout?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CLayout_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_MeasureInvalidated(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_MeasureInvalidatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MeasureInvalidated(pThis, token))
            }
        }

        internal func add_ArrangeInvalidatedImpl(_ handler: TypedEventHandler<WinUI.Layout?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CLayout_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ArrangeInvalidated(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ArrangeInvalidatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ArrangeInvalidated(pThis, token))
            }
        }

    }

    public class ILayout2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout2 }

        internal func get_IndexBasedLayoutOrientationImpl() throws -> WinUI.IndexBasedLayoutOrientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIndexBasedLayoutOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IndexBasedLayoutOrientation(pThis, &value))
            }
            return value
        }

    }

    public class ILayoutContext: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext }

        internal func get_LayoutStateImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutState(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_LayoutStateImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LayoutState(pThis, _value))
            }
        }

    }

    public class ILayoutContextFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContextFactory }

    }

    public class ILayoutContextOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContextOverrides }

        internal func get_LayoutStateCoreImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContextOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutStateCore(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_LayoutStateCoreImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContextOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LayoutStateCore(pThis, _value))
            }
        }

    }

    public class ILayoutFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutFactory }

    }

    public class ILayoutOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutOverrides }

        internal func CreateDefaultItemTransitionProviderImpl() throws -> WinUI.ItemCollectionTransitionProvider? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDefaultItemTransitionProvider(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ILayoutProtected: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutProtected }

        internal func InvalidateMeasureImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutProtected.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateMeasure(pThis))
            }
        }

        internal func InvalidateArrangeImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutProtected.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateArrange(pThis))
            }
        }

    }

    public class ILayoutProtected2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutProtected2 }

        internal func SetIndexBasedLayoutOrientationImpl(_ orientation: WinUI.IndexBasedLayoutOrientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutProtected2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIndexBasedLayoutOrientation(pThis, orientation))
            }
        }

    }

    public class IListBox: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox }

        internal func get_SelectedItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal func get_SelectionModeImpl() throws -> WinUI.SelectionMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSelectionMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionMode(pThis, &value))
            }
            return value
        }

        internal func put_SelectionModeImpl(_ value: WinUI.SelectionMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionMode(pThis, value))
            }
        }

        internal func get_SingleSelectionFollowsFocusImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SingleSelectionFollowsFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SingleSelectionFollowsFocusImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SingleSelectionFollowsFocus(pThis, .init(from: value)))
            }
        }

        internal func ScrollIntoViewImpl(_ item: Any?) throws {
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollIntoView(pThis, _item))
            }
        }

        internal func SelectAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
            }
        }

    }

    public class IListBoxFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ListBox.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IListBox {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IListBox(value!)
        }

    }

    public class IListBoxItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItem }

    }

    public class IListBoxItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItemFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ListBoxItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IListBoxItem {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItemFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IListBoxItem(value!)
        }

    }

    public class IListBoxStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxStatics }

        internal func get_SelectionModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SingleSelectionFollowsFocusPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SingleSelectionFollowsFocusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IListView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView }

    }

    public class IListViewBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase }

        internal func get_SelectedItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal func get_SelectionModeImpl() throws -> WinUI.ListViewSelectionMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionMode(pThis, &value))
            }
            return value
        }

        internal func put_SelectionModeImpl(_ value: WinUI.ListViewSelectionMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionMode(pThis, value))
            }
        }

        internal func get_IsSwipeEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSwipeEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSwipeEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSwipeEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_CanDragItemsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDragItems(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CanDragItemsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanDragItems(pThis, .init(from: value)))
            }
        }

        internal func get_CanReorderItemsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanReorderItems(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CanReorderItemsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanReorderItems(pThis, .init(from: value)))
            }
        }

        internal func get_IsItemClickEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemClickEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsItemClickEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsItemClickEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_DataFetchSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataFetchSize(pThis, &value))
            }
            return value
        }

        internal func put_DataFetchSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DataFetchSize(pThis, value))
            }
        }

        internal func get_IncrementalLoadingThresholdImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalLoadingThreshold(pThis, &value))
            }
            return value
        }

        internal func put_IncrementalLoadingThresholdImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalLoadingThreshold(pThis, value))
            }
        }

        internal func get_IncrementalLoadingTriggerImpl() throws -> WinUI.IncrementalLoadingTrigger {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalLoadingTrigger(pThis, &value))
            }
            return value
        }

        internal func put_IncrementalLoadingTriggerImpl(_ value: WinUI.IncrementalLoadingTrigger) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalLoadingTrigger(pThis, value))
            }
        }

        internal func get_ShowsScrollingPlaceholdersImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowsScrollingPlaceholders(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShowsScrollingPlaceholdersImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowsScrollingPlaceholders(pThis, .init(from: value)))
            }
        }

        internal func get_ReorderModeImpl() throws -> WinUI.ListViewReorderMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReorderMode(pThis, &value))
            }
            return value
        }

        internal func put_ReorderModeImpl(_ value: WinUI.ListViewReorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ReorderMode(pThis, value))
            }
        }

        internal func get_SelectedRangesImpl() throws -> WindowsFoundation.AnyIVectorView<WinUI.ItemIndexRange?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedRanges(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CUI__CXaml__CData__CItemIndexRangeWrapper.unwrapFrom(abi: value)
        }

        internal func get_IsMultiSelectCheckBoxEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMultiSelectCheckBoxEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsMultiSelectCheckBoxEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsMultiSelectCheckBoxEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_SingleSelectionFollowsFocusImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SingleSelectionFollowsFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SingleSelectionFollowsFocusImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SingleSelectionFollowsFocus(pThis, .init(from: value)))
            }
        }

        internal func add_ItemClickImpl(_ handler: WinUI.ItemClickEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.ItemClickEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ItemClick(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ItemClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ItemClick(pThis, token))
            }
        }

        internal func add_DragItemsStartingImpl(_ handler: WinUI.DragItemsStartingEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.DragItemsStartingEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DragItemsStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DragItemsStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DragItemsStarting(pThis, token))
            }
        }

        internal func add_DragItemsCompletedImpl(_ handler: TypedEventHandler<WinUI.ListViewBase?, WinUI.DragItemsCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CDragItemsCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DragItemsCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DragItemsCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DragItemsCompleted(pThis, token))
            }
        }

        internal func add_ContainerContentChangingImpl(_ handler: TypedEventHandler<WinUI.ListViewBase?, WinUI.ContainerContentChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContainerContentChangingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContainerContentChanging(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ContainerContentChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContainerContentChanging(pThis, token))
            }
        }

        internal func add_ChoosingItemContainerImpl(_ handler: TypedEventHandler<WinUI.ListViewBase?, WinUI.ChoosingItemContainerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CChoosingItemContainerEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ChoosingItemContainer(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ChoosingItemContainerImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ChoosingItemContainer(pThis, token))
            }
        }

        internal func add_ChoosingGroupHeaderContainerImpl(_ handler: TypedEventHandler<WinUI.ListViewBase?, WinUI.ChoosingGroupHeaderContainerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CChoosingGroupHeaderContainerEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ChoosingGroupHeaderContainer(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ChoosingGroupHeaderContainerImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ChoosingGroupHeaderContainer(pThis, token))
            }
        }

        internal func ScrollIntoViewImpl(_ item: Any?) throws {
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollIntoView(pThis, _item))
            }
        }

        internal func SelectAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
            }
        }

        internal func LoadMoreItemsAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.LoadMoreItemsResult>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadMoreItemsAsync(pThis, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CUI__CXaml__CData__CLoadMoreItemsResultWrapper.unwrapFrom(abi: operation)
        }

        internal func ScrollIntoViewWithAlignmentImpl(_ item: Any?, _ alignment: WinUI.ScrollIntoViewAlignment) throws {
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollIntoViewWithAlignment(pThis, _item, alignment))
            }
        }

        internal func SetDesiredContainerUpdateDurationImpl(_ duration: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDesiredContainerUpdateDuration(pThis, .from(swift: duration)))
            }
        }

        internal func SelectRangeImpl(_ itemIndexRange: WinUI.ItemIndexRange?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectRange(pThis, RawPointer(itemIndexRange)))
            }
        }

        internal func DeselectRangeImpl(_ itemIndexRange: WinUI.ItemIndexRange?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DeselectRange(pThis, RawPointer(itemIndexRange)))
            }
        }

        internal func IsDragSourceImpl() throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDragSource(pThis, &result))
            }
            return .init(from: result)
        }

        internal func TryStartConnectedAnimationAsyncImpl(_ animation: WinUI.ConnectedAnimation?, _ item: Any?, _ elementName: String) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                let _elementName = try! HString(elementName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TryStartConnectedAnimationAsync(pThis, RawPointer(animation), _item, _elementName.get(), &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal func PrepareConnectedAnimationImpl(_ key: String, _ item: Any?, _ elementName: String) throws -> WinUI.ConnectedAnimation? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _key = try! HString(key)
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                let _elementName = try! HString(elementName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PrepareConnectedAnimation(pThis, _key.get(), _item, _elementName.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func get_HeaderImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_HeaderImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal func get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_HeaderTransitionsImpl() throws -> WinUI.TransitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTransitions(pThis, RawPointer(value)))
            }
        }

        internal func get_FooterImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Footer(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_FooterImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Footer(pThis, _value))
            }
        }

        internal func get_FooterTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FooterTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FooterTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_FooterTransitionsImpl() throws -> WinUI.TransitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FooterTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FooterTransitions(pThis, RawPointer(value)))
            }
        }

    }

    public class IListViewBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ListViewBase.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IListViewBase {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IListViewBase(value!)
        }

    }

    public class IListViewBaseHeaderItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem }

    }

    public class IListViewBaseHeaderItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItemFactory }

    }

    public class IListViewBaseStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics }

        internal func get_SelectionModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsSwipeEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSwipeEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanDragItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDragItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanReorderItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanReorderItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsItemClickEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemClickEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DataFetchSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataFetchSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IncrementalLoadingThresholdPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalLoadingThresholdProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IncrementalLoadingTriggerPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalLoadingTriggerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ShowsScrollingPlaceholdersPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowsScrollingPlaceholdersProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ReorderModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReorderModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsMultiSelectCheckBoxEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMultiSelectCheckBoxEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SingleSelectionFollowsFocusPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SingleSelectionFollowsFocusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SemanticZoomOwnerPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SemanticZoomOwnerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsActiveViewPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsActiveViewProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsZoomedInViewPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomedInViewProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FooterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FooterTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FooterTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IListViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ListView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IListView {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IListView(value!)
        }

    }

    public class IListViewItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem }

        internal func get_TemplateSettingsImpl() throws -> WinUI.ListViewItemTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IListViewItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItemFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ListViewItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IListViewItem {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItemFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IListViewItem(value!)
        }

    }

    public class IMediaPlayerElement: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement }

        internal func get_SourceImpl() throws -> UWP.AnyIMediaPlaybackSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Media_Playback.IMediaPlaybackSourceWrapper.unwrapFrom(abi: value)
        }

        internal func put_SourceImpl(_ value: UWP.AnyIMediaPlaybackSource?) throws {
            let valueWrapper = __ABI_Windows_Media_Playback.IMediaPlaybackSourceWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _value))
            }
        }

        internal func get_TransportControlsImpl() throws -> WinUI.MediaTransportControls? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransportControls(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TransportControlsImpl(_ value: WinUI.MediaTransportControls?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransportControls(pThis, RawPointer(value)))
            }
        }

        internal func get_AreTransportControlsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreTransportControlsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AreTransportControlsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AreTransportControlsEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_PosterSourceImpl() throws -> WinUI.ImageSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PosterSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PosterSourceImpl(_ value: WinUI.ImageSource?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PosterSource(pThis, RawPointer(value)))
            }
        }

        internal func get_StretchImpl() throws -> WinUI.Stretch {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stretch(pThis, &value))
            }
            return value
        }

        internal func put_StretchImpl(_ value: WinUI.Stretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Stretch(pThis, value))
            }
        }

        internal func get_AutoPlayImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoPlay(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AutoPlayImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoPlay(pThis, .init(from: value)))
            }
        }

        internal func get_IsFullWindowImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFullWindow(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsFullWindowImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFullWindow(pThis, .init(from: value)))
            }
        }

        internal func get_MediaPlayerImpl() throws -> UWP.MediaPlayer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaPlayer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func SetMediaPlayerImpl(_ mediaPlayer: UWP.MediaPlayer?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetMediaPlayer(pThis, RawPointer(mediaPlayer)))
            }
        }

    }

    public class IMediaPlayerElementFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MediaPlayerElement.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMediaPlayerElement {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMediaPlayerElement(value!)
        }

    }

    public class IMediaPlayerElementStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementStatics }

        internal func get_SourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AreTransportControlsEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreTransportControlsEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PosterSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PosterSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_StretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AutoPlayPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoPlayProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsFullWindowPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFullWindowProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MediaPlayerPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElementStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaPlayerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaTransportControls: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls }

        internal func get_IsZoomButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsZoomButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsZoomEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsZoomEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsFastForwardButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFastForwardButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsFastForwardButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFastForwardButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsFastForwardEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFastForwardEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsFastForwardEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFastForwardEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsFastRewindButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFastRewindButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsFastRewindButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFastRewindButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsFastRewindEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFastRewindEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsFastRewindEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFastRewindEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsStopButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsStopButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsStopButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsStopButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsStopEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsStopEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsStopEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsStopEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsVolumeButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVolumeButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsVolumeButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsVolumeButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsVolumeEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVolumeEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsVolumeEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsVolumeEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsPlaybackRateButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPlaybackRateButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsPlaybackRateButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPlaybackRateButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsPlaybackRateEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPlaybackRateEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsPlaybackRateEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPlaybackRateEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsSeekBarVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSeekBarVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSeekBarVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSeekBarVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsSeekEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSeekEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSeekEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSeekEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsCompactImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCompact(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsCompactImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsCompact(pThis, .init(from: value)))
            }
        }

        internal func get_IsSkipForwardButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSkipForwardButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSkipForwardButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSkipForwardButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsSkipForwardEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSkipForwardEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSkipForwardEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSkipForwardEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsSkipBackwardButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSkipBackwardButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSkipBackwardButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSkipBackwardButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsSkipBackwardEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSkipBackwardEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSkipBackwardEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSkipBackwardEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsNextTrackButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsNextTrackButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsNextTrackButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsNextTrackButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func get_IsPreviousTrackButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPreviousTrackButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsPreviousTrackButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPreviousTrackButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func get_FastPlayFallbackBehaviourImpl() throws -> WinUI.FastPlayFallbackBehaviour {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CFastPlayFallbackBehaviour = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FastPlayFallbackBehaviour(pThis, &value))
            }
            return value
        }

        internal func put_FastPlayFallbackBehaviourImpl(_ value: WinUI.FastPlayFallbackBehaviour) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FastPlayFallbackBehaviour(pThis, value))
            }
        }

        internal func get_ShowAndHideAutomaticallyImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowAndHideAutomatically(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShowAndHideAutomaticallyImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowAndHideAutomatically(pThis, .init(from: value)))
            }
        }

        internal func get_IsRepeatEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRepeatEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsRepeatEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsRepeatEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsRepeatButtonVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRepeatButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsRepeatButtonVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsRepeatButtonVisible(pThis, .init(from: value)))
            }
        }

        internal func add_ThumbnailRequestedImpl(_ handler: TypedEventHandler<WinUI.MediaTransportControls?, WinUI.MediaTransportControlsThumbnailRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CMediaTransportControls___x_ABI_CMicrosoft__CUI__CXaml__CMedia__CMediaTransportControlsThumbnailRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ThumbnailRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ThumbnailRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ThumbnailRequested(pThis, token))
            }
        }

        internal func ShowImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Show(pThis))
            }
        }

        internal func HideImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Hide(pThis))
            }
        }

    }

    public class IMediaTransportControlsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MediaTransportControls.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMediaTransportControls {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMediaTransportControls(value!)
        }

    }

    public class IMediaTransportControlsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics }

        internal func get_IsZoomButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsZoomEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsFastForwardButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFastForwardButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsFastForwardEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFastForwardEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsFastRewindButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFastRewindButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsFastRewindEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFastRewindEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsStopButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsStopButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsStopEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsStopEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsVolumeButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVolumeButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsVolumeEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVolumeEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsPlaybackRateButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPlaybackRateButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsPlaybackRateEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPlaybackRateEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsSeekBarVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSeekBarVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsSeekEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSeekEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsCompactPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCompactProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsSkipForwardButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSkipForwardButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsSkipForwardEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSkipForwardEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsSkipBackwardButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSkipBackwardButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsSkipBackwardEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSkipBackwardEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsNextTrackButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsNextTrackButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsPreviousTrackButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPreviousTrackButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FastPlayFallbackBehaviourPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FastPlayFallbackBehaviourProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ShowAndHideAutomaticallyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowAndHideAutomaticallyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsRepeatEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRepeatEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsRepeatButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRepeatButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMenuBar: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar }

        internal func get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.MenuBarItem?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CMenuBarItemWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMenuBarFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MenuBar.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMenuBar {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMenuBar(value!)
        }

    }

    public class IMenuBarItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem }

        internal func get_TitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TitleImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value.get()))
            }
        }

        internal func get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.MenuFlyoutItemBase?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CMenuFlyoutItemBaseWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMenuBarItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MenuBarItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMenuBarItem {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMenuBarItem(value!)
        }

    }

    public class IMenuBarItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemStatics }

        internal func get_TitlePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMenuBarStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarStatics }

        internal func get_ItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMenuFlyout: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout }

        internal func get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.MenuFlyoutItemBase?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CMenuFlyoutItemBaseWrapper.unwrapFrom(abi: value)
        }

        internal func get_MenuFlyoutPresenterStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuFlyoutPresenterStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_MenuFlyoutPresenterStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MenuFlyoutPresenterStyle(pThis, RawPointer(value)))
            }
        }

        internal func ShowAtImpl(_ targetElement: WinUI.UIElement?, _ point: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowAt(pThis, RawPointer(targetElement), .from(swift: point)))
            }
        }

    }

    public class IMenuFlyoutFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MenuFlyout.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMenuFlyout {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMenuFlyout(value!)
        }

    }

    public class IMenuFlyoutItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal func get_CommandImpl() throws -> WinUI.AnyICommand? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Command(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal func put_CommandImpl(_ value: WinUI.AnyICommand?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Command(pThis, _value))
            }
        }

        internal func get_CommandParameterImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_CommandParameterImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommandParameter(pThis, _value))
            }
        }

        internal func get_IconImpl() throws -> WinUI.IconElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Icon(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_IconImpl(_ value: WinUI.IconElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Icon(pThis, RawPointer(value)))
            }
        }

        internal func get_KeyboardAcceleratorTextOverrideImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAcceleratorTextOverride(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_KeyboardAcceleratorTextOverrideImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyboardAcceleratorTextOverride(pThis, _value.get()))
            }
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.MenuFlyoutItemTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_ClickImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Click(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Click(pThis, token))
            }
        }

    }

    public class IMenuFlyoutItemBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase }

    }

    public class IMenuFlyoutItemBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBaseFactory }

    }

    public class IMenuFlyoutItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MenuFlyoutItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMenuFlyoutItem {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMenuFlyoutItem(value!)
        }

    }

    public class IMenuFlyoutItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics }

        internal func get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IconPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_KeyboardAcceleratorTextOverridePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAcceleratorTextOverrideProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMenuFlyoutSeparator: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator }

    }

    public class IMenuFlyoutSeparatorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparatorFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MenuFlyoutSeparator.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMenuFlyoutSeparator {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparatorFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMenuFlyoutSeparator(value!)
        }

    }

    public class IMenuFlyoutStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutStatics }

        internal func get_MenuFlyoutPresenterStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuFlyoutPresenterStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMenuFlyoutSubItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem }

        internal func get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.MenuFlyoutItemBase?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CMenuFlyoutItemBaseWrapper.unwrapFrom(abi: value)
        }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal func get_IconImpl() throws -> WinUI.IconElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Icon(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_IconImpl(_ value: WinUI.IconElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Icon(pThis, RawPointer(value)))
            }
        }

    }

    public class IMenuFlyoutSubItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItemStatics }

        internal func get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IconPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigate: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigate }

        open func NavigateImpl(_ sourcePageType: WinUI.TypeName) throws -> Bool {
            var result: boolean = 0
            let _sourcePageType = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: sourcePageType)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Navigate(pThis, _sourcePageType.val, &result))
            }
            return .init(from: result)
        }

    }

    internal static var INavigateVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigateVtbl = .init(
        QueryInterface: { INavigateWrapper.queryInterface($0, $1, $2) },
        AddRef: { INavigateWrapper.addRef($0) },
        Release: { INavigateWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.INavigateWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Controls.INavigate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Navigate: {
            do {
                guard let __unwrapped__instance = INavigateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let sourcePageType: WinUI.TypeName = .from(abi: $1)
                let result = try __unwrapped__instance.navigate(sourcePageType)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias INavigateWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.INavigateBridge>
    public class IPage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage }

        internal func get_FrameImpl() throws -> WinUI.Frame? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Frame(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NavigationCacheModeImpl() throws -> WinUI.NavigationCacheMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CNavigation_CNavigationCacheMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigationCacheMode(pThis, &value))
            }
            return value
        }

        internal func put_NavigationCacheModeImpl(_ value: WinUI.NavigationCacheMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NavigationCacheMode(pThis, value))
            }
        }

        internal func get_TopAppBarImpl() throws -> WinUI.AppBar? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopAppBar(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TopAppBarImpl(_ value: WinUI.AppBar?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TopAppBar(pThis, RawPointer(value)))
            }
        }

        internal func get_BottomAppBarImpl() throws -> WinUI.AppBar? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BottomAppBar(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BottomAppBarImpl(_ value: WinUI.AppBar?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BottomAppBar(pThis, RawPointer(value)))
            }
        }

    }

    public class IPageFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Page.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IPage {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IPage(value!)
        }

    }

    public class IPageOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageOverrides }

        internal func OnNavigatedFromImpl(_ e: WinUI.NavigationEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnNavigatedFrom(pThis, RawPointer(e)))
            }
        }

        internal func OnNavigatedToImpl(_ e: WinUI.NavigationEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnNavigatedTo(pThis, RawPointer(e)))
            }
        }

        internal func OnNavigatingFromImpl(_ e: WinUI.NavigatingCancelEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnNavigatingFrom(pThis, RawPointer(e)))
            }
        }

    }

    public class IPageStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageStatics }

        internal func get_FramePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TopAppBarPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopAppBarProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BottomAppBarPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BottomAppBarProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPanel: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel }

        internal func get_ChildrenImpl() throws -> WinUI.UIElementCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Children(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

        internal func get_IsItemsHostImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemsHost(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ChildrenTransitionsImpl() throws -> WinUI.TransitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildrenTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ChildrenTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ChildrenTransitions(pThis, RawPointer(value)))
            }
        }

        internal func get_BackgroundTransitionImpl() throws -> WinUI.BrushTransition? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundTransition(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BackgroundTransitionImpl(_ value: WinUI.BrushTransition?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundTransition(pThis, RawPointer(value)))
            }
        }

    }

    public class IPanelFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Panel.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IPanel {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IPanel(value!)
        }

    }

    public class IPanelStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics }

        internal func get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsItemsHostPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemsHostProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ChildrenTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildrenTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPasswordBox: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox }

        internal func get_PasswordImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Password(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PasswordImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Password(pThis, _value.get()))
            }
        }

        internal func get_PasswordCharImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasswordChar(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PasswordCharImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PasswordChar(pThis, _value.get()))
            }
        }

        internal func get_IsPasswordRevealButtonEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPasswordRevealButtonEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsPasswordRevealButtonEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPasswordRevealButtonEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_MaxLengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLength(pThis, &value))
            }
            return value
        }

        internal func put_MaxLengthImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxLength(pThis, value))
            }
        }

        internal func get_HeaderImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_HeaderImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal func get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_PlaceholderTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PlaceholderTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderText(pThis, _value.get()))
            }
        }

        internal func get_SelectionHighlightColorImpl() throws -> WinUI.SolidColorBrush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SelectionHighlightColorImpl(_ value: WinUI.SolidColorBrush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionHighlightColor(pThis, RawPointer(value)))
            }
        }

        internal func get_PreventKeyboardDisplayOnProgrammaticFocusImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreventKeyboardDisplayOnProgrammaticFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PreventKeyboardDisplayOnProgrammaticFocusImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreventKeyboardDisplayOnProgrammaticFocus(pThis, .init(from: value)))
            }
        }

        internal func get_PasswordRevealModeImpl() throws -> WinUI.PasswordRevealMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasswordRevealMode(pThis, &value))
            }
            return value
        }

        internal func put_PasswordRevealModeImpl(_ value: WinUI.PasswordRevealMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PasswordRevealMode(pThis, value))
            }
        }

        internal func get_TextReadingOrderImpl() throws -> WinUI.TextReadingOrder {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrder(pThis, &value))
            }
            return value
        }

        internal func put_TextReadingOrderImpl(_ value: WinUI.TextReadingOrder) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextReadingOrder(pThis, value))
            }
        }

        internal func get_InputScopeImpl() throws -> WinUI.InputScope? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputScope(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_InputScopeImpl(_ value: WinUI.InputScope?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InputScope(pThis, RawPointer(value)))
            }
        }

        internal func get_CanPasteClipboardContentImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPasteClipboardContent(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SelectionFlyoutImpl() throws -> WinUI.FlyoutBase? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SelectionFlyoutImpl(_ value: WinUI.FlyoutBase?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionFlyout(pThis, RawPointer(value)))
            }
        }

        internal func get_DescriptionImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Description(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_DescriptionImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Description(pThis, _value))
            }
        }

        internal func add_PasswordChangedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PasswordChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PasswordChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PasswordChanged(pThis, token))
            }
        }

        internal func add_ContextMenuOpeningImpl(_ handler: WinUI.ContextMenuOpeningEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextMenuOpening(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ContextMenuOpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextMenuOpening(pThis, token))
            }
        }

        internal func add_PasteImpl(_ handler: WinUI.TextControlPasteEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.TextControlPasteEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Paste(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PasteImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Paste(pThis, token))
            }
        }

        internal func add_PasswordChangingImpl(_ handler: TypedEventHandler<WinUI.PasswordBox?, WinUI.PasswordBoxPasswordChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPasswordBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPasswordBoxPasswordChangingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PasswordChanging(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PasswordChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PasswordChanging(pThis, token))
            }
        }

        internal func SelectAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
            }
        }

        internal func PasteFromClipboardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PasteFromClipboard(pThis))
            }
        }

    }

    public class IPasswordBoxPasswordChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs }

        internal func get_IsContentChangingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsContentChanging(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IPasswordBoxStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics }

        internal func get_PasswordPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasswordProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PasswordCharPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasswordCharProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsPasswordRevealButtonEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPasswordRevealButtonEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlaceholderTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionHighlightColorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PreventKeyboardDisplayOnProgrammaticFocusPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreventKeyboardDisplayOnProgrammaticFocusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PasswordRevealModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasswordRevealModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextReadingOrderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_InputScopePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputScopeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanPasteClipboardContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPasteClipboardContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionFlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DescriptionPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DescriptionProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPipsPager: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager }

        internal func get_NumberOfPagesImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NumberOfPages(pThis, &value))
            }
            return value
        }

        internal func put_NumberOfPagesImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NumberOfPages(pThis, value))
            }
        }

        internal func get_SelectedPageIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedPageIndex(pThis, &value))
            }
            return value
        }

        internal func put_SelectedPageIndexImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedPageIndex(pThis, value))
            }
        }

        internal func get_MaxVisiblePipsImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxVisiblePips(pThis, &value))
            }
            return value
        }

        internal func put_MaxVisiblePipsImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxVisiblePips(pThis, value))
            }
        }

        internal func get_OrientationImpl() throws -> WinUI.Orientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

        internal func put_OrientationImpl(_ value: WinUI.Orientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
            }
        }

        internal func get_PreviousButtonVisibilityImpl() throws -> WinUI.PipsPagerButtonVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerButtonVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviousButtonVisibility(pThis, &value))
            }
            return value
        }

        internal func put_PreviousButtonVisibilityImpl(_ value: WinUI.PipsPagerButtonVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreviousButtonVisibility(pThis, value))
            }
        }

        internal func get_NextButtonVisibilityImpl() throws -> WinUI.PipsPagerButtonVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerButtonVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextButtonVisibility(pThis, &value))
            }
            return value
        }

        internal func put_NextButtonVisibilityImpl(_ value: WinUI.PipsPagerButtonVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NextButtonVisibility(pThis, value))
            }
        }

        internal func get_PreviousButtonStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviousButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PreviousButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreviousButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_NextButtonStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_NextButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NextButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_SelectedPipStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedPipStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SelectedPipStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedPipStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_NormalPipStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NormalPipStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_NormalPipStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NormalPipStyle(pThis, RawPointer(value)))
            }
        }

        internal func add_SelectedIndexChangedImpl(_ handler: TypedEventHandler<WinUI.PipsPager?, WinUI.PipsPagerSelectedIndexChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPipsPager___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPipsPagerSelectedIndexChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectedIndexChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SelectedIndexChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectedIndexChanged(pThis, token))
            }
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.PipsPagerTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPipsPagerFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.PipsPager.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IPipsPager {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IPipsPager(value!)
        }

    }

    public class IPipsPagerSelectedIndexChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerSelectedIndexChangedEventArgs }

    }

    public class IPipsPagerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics }

        internal func get_NumberOfPagesPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NumberOfPagesProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectedPageIndexPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedPageIndexProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxVisiblePipsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxVisiblePipsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OrientationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OrientationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PreviousButtonVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviousButtonVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NextButtonVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextButtonVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PreviousButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviousButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NextButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectedPipStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedPipStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NormalPipStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NormalPipStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPipsPagerTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerTemplateSettings }

        internal func get_PipsPagerItemsImpl() throws -> WindowsFoundation.AnyIVector<Int32>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerTemplateSettings.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PipsPagerItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_intWrapper.unwrapFrom(abi: value)
        }

    }

    public class IProgressBar: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar }

        internal func get_IsIndeterminateImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIndeterminate(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsIndeterminateImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsIndeterminate(pThis, .init(from: value)))
            }
        }

        internal func get_ShowErrorImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowError(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShowErrorImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowError(pThis, .init(from: value)))
            }
        }

        internal func get_ShowPausedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowPaused(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShowPausedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowPaused(pThis, .init(from: value)))
            }
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.ProgressBarTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IProgressBarFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ProgressBar.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IProgressBar {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IProgressBar(value!)
        }

    }

    public class IProgressBarStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarStatics }

        internal func get_IsIndeterminatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIndeterminateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ShowErrorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowErrorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ShowPausedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowPausedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IProgressBarTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings }

        internal func get_ContainerAnimationStartPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainerAnimationStartPosition(pThis, &value))
            }
            return value
        }

        internal func get_ContainerAnimationEndPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainerAnimationEndPosition(pThis, &value))
            }
            return value
        }

        internal func get_Container2AnimationStartPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Container2AnimationStartPosition(pThis, &value))
            }
            return value
        }

        internal func get_Container2AnimationEndPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Container2AnimationEndPosition(pThis, &value))
            }
            return value
        }

        internal func get_ContainerAnimationMidPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainerAnimationMidPosition(pThis, &value))
            }
            return value
        }

        internal func get_IndicatorLengthDeltaImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IndicatorLengthDelta(pThis, &value))
            }
            return value
        }

        internal func get_ClipRectImpl() throws -> WinUI.RectangleGeometry? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClipRect(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_EllipseAnimationEndPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseAnimationEndPosition(pThis, &value))
            }
            return value
        }

        internal func get_EllipseAnimationWellPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseAnimationWellPosition(pThis, &value))
            }
            return value
        }

        internal func get_EllipseDiameterImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseDiameter(pThis, &value))
            }
            return value
        }

        internal func get_EllipseOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseOffset(pThis, &value))
            }
            return value
        }

    }

    public class IProgressRing: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing }

        internal func get_IsActiveImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsActive(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsActiveImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsActive(pThis, .init(from: value)))
            }
        }

        internal func get_IsIndeterminateImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIndeterminate(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsIndeterminateImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsIndeterminate(pThis, .init(from: value)))
            }
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.ProgressRingTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ValueImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal func put_ValueImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
            }
        }

        internal func get_MinimumImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Minimum(pThis, &value))
            }
            return value
        }

        internal func put_MinimumImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Minimum(pThis, value))
            }
        }

        internal func get_MaximumImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Maximum(pThis, &value))
            }
            return value
        }

        internal func put_MaximumImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Maximum(pThis, value))
            }
        }

    }

    public class IProgressRingFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ProgressRing.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IProgressRing {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IProgressRing(value!)
        }

    }

    public class IProgressRingStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics }

        internal func get_IsActivePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsActiveProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsIndeterminatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIndeterminateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ValuePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValueProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MinimumPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinimumProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaximumPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IProgressRingTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings }

        internal func get_EllipseDiameterImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseDiameter(pThis, &value))
            }
            return value
        }

        internal func get_EllipseOffsetImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseOffset(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_MaxSideLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxSideLength(pThis, &value))
            }
            return value
        }

    }

    public class IRadioButton: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton }

        internal func get_GroupNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_GroupNameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GroupName(pThis, _value.get()))
            }
        }

    }

    public class IRadioButtonFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.RadioButton.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IRadioButton {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IRadioButton(value!)
        }

    }

    public class IRadioButtonStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonStatics }

        internal func get_GroupNamePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupNameProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IRadioButtons: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons }

        internal func get_ItemsSourceImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSource(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ItemsSourceImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsSource(pThis, _value))
            }
        }

        internal func get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal func get_ItemTemplateImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplate(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ItemTemplateImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemTemplate(pThis, _value))
            }
        }

        internal func ContainerFromIndexImpl(_ index: Int32) throws -> WinUI.UIElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromIndex(pThis, index, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func get_SelectedIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedIndex(pThis, &value))
            }
            return value
        }

        internal func put_SelectedIndexImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedIndex(pThis, value))
            }
        }

        internal func get_SelectedItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_SelectedItemImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedItem(pThis, _value))
            }
        }

        internal func add_SelectionChangedImpl(_ handler: WinUI.SelectionChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.SelectionChangedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SelectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
            }
        }

        internal func get_MaxColumnsImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxColumns(pThis, &value))
            }
            return value
        }

        internal func put_MaxColumnsImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxColumns(pThis, value))
            }
        }

        internal func get_HeaderImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_HeaderImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal func get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

    }

    public class IRadioButtonsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.RadioButtons.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IRadioButtons {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IRadioButtons(value!)
        }

    }

    public class IRadioButtonsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics }

        internal func get_ItemsSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectedIndexPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedIndexProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectedItemPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItemProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxColumnsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxColumnsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IRelativePanel: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel }

        internal func get_BackgroundSizingImpl() throws -> WinUI.BackgroundSizing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, &value))
            }
            return value
        }

        internal func put_BackgroundSizingImpl(_ value: WinUI.BackgroundSizing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
            }
        }

        internal func get_BorderBrushImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BorderBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, RawPointer(value)))
            }
        }

        internal func get_BorderThicknessImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BorderThicknessImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, .from(swift: value)))
            }
        }

        internal func get_CornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_CornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, .from(swift: value)))
            }
        }

        internal func get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

    }

    public class IRelativePanelFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.RelativePanel.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IRelativePanel {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IRelativePanel(value!)
        }

    }

    public class IRelativePanelStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics }

        internal func get_BackgroundSizingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LeftOfPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftOfProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetLeftOfImpl(_ element: WinUI.UIElement?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetLeftOf(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetLeftOfImpl(_ element: WinUI.UIElement?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetLeftOf(pThis, RawPointer(element), _value))
            }
        }

        internal func get_AbovePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AboveProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAboveImpl(_ element: WinUI.UIElement?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAbove(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetAboveImpl(_ element: WinUI.UIElement?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAbove(pThis, RawPointer(element), _value))
            }
        }

        internal func get_RightOfPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RightOfProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetRightOfImpl(_ element: WinUI.UIElement?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetRightOf(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetRightOfImpl(_ element: WinUI.UIElement?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetRightOf(pThis, RawPointer(element), _value))
            }
        }

        internal func get_BelowPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BelowProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetBelowImpl(_ element: WinUI.UIElement?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetBelow(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetBelowImpl(_ element: WinUI.UIElement?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetBelow(pThis, RawPointer(element), _value))
            }
        }

        internal func get_AlignHorizontalCenterWithPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignHorizontalCenterWithProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignHorizontalCenterWithImpl(_ element: WinUI.UIElement?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignHorizontalCenterWith(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetAlignHorizontalCenterWithImpl(_ element: WinUI.UIElement?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignHorizontalCenterWith(pThis, RawPointer(element), _value))
            }
        }

        internal func get_AlignVerticalCenterWithPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignVerticalCenterWithProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignVerticalCenterWithImpl(_ element: WinUI.UIElement?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignVerticalCenterWith(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetAlignVerticalCenterWithImpl(_ element: WinUI.UIElement?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignVerticalCenterWith(pThis, RawPointer(element), _value))
            }
        }

        internal func get_AlignLeftWithPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignLeftWithProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignLeftWithImpl(_ element: WinUI.UIElement?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignLeftWith(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetAlignLeftWithImpl(_ element: WinUI.UIElement?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignLeftWith(pThis, RawPointer(element), _value))
            }
        }

        internal func get_AlignTopWithPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignTopWithProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignTopWithImpl(_ element: WinUI.UIElement?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignTopWith(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetAlignTopWithImpl(_ element: WinUI.UIElement?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignTopWith(pThis, RawPointer(element), _value))
            }
        }

        internal func get_AlignRightWithPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignRightWithProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignRightWithImpl(_ element: WinUI.UIElement?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignRightWith(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetAlignRightWithImpl(_ element: WinUI.UIElement?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignRightWith(pThis, RawPointer(element), _value))
            }
        }

        internal func get_AlignBottomWithPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignBottomWithProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignBottomWithImpl(_ element: WinUI.UIElement?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignBottomWith(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetAlignBottomWithImpl(_ element: WinUI.UIElement?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignBottomWith(pThis, RawPointer(element), _value))
            }
        }

        internal func get_AlignLeftWithPanelPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignLeftWithPanelProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignLeftWithPanelImpl(_ element: WinUI.UIElement?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignLeftWithPanel(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetAlignLeftWithPanelImpl(_ element: WinUI.UIElement?, _ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignLeftWithPanel(pThis, RawPointer(element), .init(from: value)))
            }
        }

        internal func get_AlignTopWithPanelPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignTopWithPanelProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignTopWithPanelImpl(_ element: WinUI.UIElement?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignTopWithPanel(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetAlignTopWithPanelImpl(_ element: WinUI.UIElement?, _ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignTopWithPanel(pThis, RawPointer(element), .init(from: value)))
            }
        }

        internal func get_AlignRightWithPanelPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignRightWithPanelProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignRightWithPanelImpl(_ element: WinUI.UIElement?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignRightWithPanel(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetAlignRightWithPanelImpl(_ element: WinUI.UIElement?, _ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignRightWithPanel(pThis, RawPointer(element), .init(from: value)))
            }
        }

        internal func get_AlignBottomWithPanelPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignBottomWithPanelProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignBottomWithPanelImpl(_ element: WinUI.UIElement?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignBottomWithPanel(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetAlignBottomWithPanelImpl(_ element: WinUI.UIElement?, _ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignBottomWithPanel(pThis, RawPointer(element), .init(from: value)))
            }
        }

        internal func get_AlignHorizontalCenterWithPanelPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignHorizontalCenterWithPanelProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignHorizontalCenterWithPanelImpl(_ element: WinUI.UIElement?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignHorizontalCenterWithPanel(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetAlignHorizontalCenterWithPanelImpl(_ element: WinUI.UIElement?, _ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignHorizontalCenterWithPanel(pThis, RawPointer(element), .init(from: value)))
            }
        }

        internal func get_AlignVerticalCenterWithPanelPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignVerticalCenterWithPanelProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlignVerticalCenterWithPanelImpl(_ element: WinUI.UIElement?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlignVerticalCenterWithPanel(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetAlignVerticalCenterWithPanelImpl(_ element: WinUI.UIElement?, _ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAlignVerticalCenterWithPanel(pThis, RawPointer(element), .init(from: value)))
            }
        }

        internal func get_BorderBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BorderThicknessPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IRowDefinition: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition }

        internal func get_HeightImpl() throws -> WinUI.GridLength {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CGridLength = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_HeightImpl(_ value: WinUI.GridLength) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Height(pThis, .from(swift: value)))
            }
        }

        internal func get_MaxHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxHeight(pThis, &value))
            }
            return value
        }

        internal func put_MaxHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxHeight(pThis, value))
            }
        }

        internal func get_MinHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinHeight(pThis, &value))
            }
            return value
        }

        internal func put_MinHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinHeight(pThis, value))
            }
        }

        internal func get_ActualHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualHeight(pThis, &value))
            }
            return value
        }

    }

    public class IRowDefinitionStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionStatics }

        internal func get_HeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MinHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IScrollAnchorProvider: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider }

        open func get_CurrentAnchorImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentAnchor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func RegisterAnchorCandidateImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterAnchorCandidate(pThis, RawPointer(element)))
            }
        }

        open func UnregisterAnchorCandidateImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.UnregisterAnchorCandidate(pThis, RawPointer(element)))
            }
        }

    }

    internal static var IScrollAnchorProviderVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProviderVtbl = .init(
        QueryInterface: { IScrollAnchorProviderWrapper.queryInterface($0, $1, $2) },
        AddRef: { IScrollAnchorProviderWrapper.addRef($0) },
        Release: { IScrollAnchorProviderWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Controls.IScrollAnchorProvider").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_CurrentAnchor: {
            guard let __unwrapped__instance = IScrollAnchorProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.currentAnchor
            value?.copyTo($1)
            return S_OK
        },

        RegisterAnchorCandidate: {
            do {
                guard let __unwrapped__instance = IScrollAnchorProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let element: WinUI.UIElement? = .from(abi: ComPtr($1))
                try __unwrapped__instance.registerAnchorCandidate(element)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        UnregisterAnchorCandidate: {
            do {
                guard let __unwrapped__instance = IScrollAnchorProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let element: WinUI.UIElement? = .from(abi: ComPtr($1))
                try __unwrapped__instance.unregisterAnchorCandidate(element)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IScrollAnchorProviderWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderBridge>
    public class IScrollView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView }

        internal func get_ContentImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, RawPointer(value)))
            }
        }

        internal func get_CurrentAnchorImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentAnchor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ScrollPresenterImpl() throws -> WinUI.ScrollPresenter? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollPresenter(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ExpressionAnimationSourcesImpl() throws -> WinAppSDK.CompositionPropertySet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpressionAnimationSources(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffset(pThis, &value))
            }
            return value
        }

        internal func get_VerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffset(pThis, &value))
            }
            return value
        }

        internal func get_ZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomFactor(pThis, &value))
            }
            return value
        }

        internal func get_ExtentWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentWidth(pThis, &value))
            }
            return value
        }

        internal func get_ExtentHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentHeight(pThis, &value))
            }
            return value
        }

        internal func get_ViewportWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportWidth(pThis, &value))
            }
            return value
        }

        internal func get_ViewportHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportHeight(pThis, &value))
            }
            return value
        }

        internal func get_ScrollableWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableWidth(pThis, &value))
            }
            return value
        }

        internal func get_ScrollableHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableHeight(pThis, &value))
            }
            return value
        }

        internal func get_StateImpl() throws -> WinUI.ScrollingInteractionState {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, &value))
            }
            return value
        }

        internal func get_HorizontalScrollBarVisibilityImpl() throws -> WinUI.ScrollingScrollBarVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalScrollBarVisibilityImpl(_ value: WinUI.ScrollingScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollBarVisibility(pThis, value))
            }
        }

        internal func get_VerticalScrollBarVisibilityImpl() throws -> WinUI.ScrollingScrollBarVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal func put_VerticalScrollBarVisibilityImpl(_ value: WinUI.ScrollingScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollBarVisibility(pThis, value))
            }
        }

        internal func get_ContentOrientationImpl() throws -> WinUI.ScrollingContentOrientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentOrientation(pThis, &value))
            }
            return value
        }

        internal func put_ContentOrientationImpl(_ value: WinUI.ScrollingContentOrientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentOrientation(pThis, value))
            }
        }

        internal func get_HorizontalScrollChainModeImpl() throws -> WinUI.ScrollingChainMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollChainMode(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalScrollChainModeImpl(_ value: WinUI.ScrollingChainMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollChainMode(pThis, value))
            }
        }

        internal func get_VerticalScrollChainModeImpl() throws -> WinUI.ScrollingChainMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollChainMode(pThis, &value))
            }
            return value
        }

        internal func put_VerticalScrollChainModeImpl(_ value: WinUI.ScrollingChainMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollChainMode(pThis, value))
            }
        }

        internal func get_HorizontalScrollRailModeImpl() throws -> WinUI.ScrollingRailMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollRailMode(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalScrollRailModeImpl(_ value: WinUI.ScrollingRailMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollRailMode(pThis, value))
            }
        }

        internal func get_VerticalScrollRailModeImpl() throws -> WinUI.ScrollingRailMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollRailMode(pThis, &value))
            }
            return value
        }

        internal func put_VerticalScrollRailModeImpl(_ value: WinUI.ScrollingRailMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollRailMode(pThis, value))
            }
        }

        internal func get_HorizontalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollMode(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalScrollModeImpl(_ value: WinUI.ScrollingScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollMode(pThis, value))
            }
        }

        internal func get_VerticalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollMode(pThis, &value))
            }
            return value
        }

        internal func put_VerticalScrollModeImpl(_ value: WinUI.ScrollingScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollMode(pThis, value))
            }
        }

        internal func get_ComputedHorizontalScrollBarVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal func get_ComputedVerticalScrollBarVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal func get_ComputedHorizontalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollMode(pThis, &value))
            }
            return value
        }

        internal func get_ComputedVerticalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollMode(pThis, &value))
            }
            return value
        }

        internal func get_ZoomChainModeImpl() throws -> WinUI.ScrollingChainMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomChainMode(pThis, &value))
            }
            return value
        }

        internal func put_ZoomChainModeImpl(_ value: WinUI.ScrollingChainMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomChainMode(pThis, value))
            }
        }

        internal func get_ZoomModeImpl() throws -> WinUI.ScrollingZoomMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomMode(pThis, &value))
            }
            return value
        }

        internal func put_ZoomModeImpl(_ value: WinUI.ScrollingZoomMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomMode(pThis, value))
            }
        }

        internal func get_IgnoredInputKindsImpl() throws -> WinUI.ScrollingInputKinds {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IgnoredInputKinds(pThis, &value))
            }
            return value
        }

        internal func put_IgnoredInputKindsImpl(_ value: WinUI.ScrollingInputKinds) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IgnoredInputKinds(pThis, value))
            }
        }

        internal func get_MinZoomFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinZoomFactor(pThis, &value))
            }
            return value
        }

        internal func put_MinZoomFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinZoomFactor(pThis, value))
            }
        }

        internal func get_MaxZoomFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxZoomFactor(pThis, &value))
            }
            return value
        }

        internal func put_MaxZoomFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxZoomFactor(pThis, value))
            }
        }

        internal func get_HorizontalAnchorRatioImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAnchorRatio(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalAnchorRatioImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAnchorRatio(pThis, value))
            }
        }

        internal func get_VerticalAnchorRatioImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAnchorRatio(pThis, &value))
            }
            return value
        }

        internal func put_VerticalAnchorRatioImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAnchorRatio(pThis, value))
            }
        }

        internal func RegisterAnchorCandidateImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterAnchorCandidate(pThis, RawPointer(element)))
            }
        }

        internal func UnregisterAnchorCandidateImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.UnregisterAnchorCandidate(pThis, RawPointer(element)))
            }
        }

        internal func ScrollToImpl(_ horizontalOffset: Double, _ verticalOffset: Double) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollTo(pThis, horizontalOffset, verticalOffset, &result))
            }
            return result
        }

        internal func ScrollToWithOptionsImpl(_ horizontalOffset: Double, _ verticalOffset: Double, _ options: WinUI.ScrollingScrollOptions?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollToWithOptions(pThis, horizontalOffset, verticalOffset, RawPointer(options), &result))
            }
            return result
        }

        internal func ScrollByImpl(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollBy(pThis, horizontalOffsetDelta, verticalOffsetDelta, &result))
            }
            return result
        }

        internal func ScrollByWithOptionsImpl(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double, _ options: WinUI.ScrollingScrollOptions?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollByWithOptions(pThis, horizontalOffsetDelta, verticalOffsetDelta, RawPointer(options), &result))
            }
            return result
        }

        internal func AddScrollVelocityImpl(_ offsetsVelocity: WindowsFoundation.Vector2, _ inertiaDecayRate: WindowsFoundation.Vector2?) throws -> Int32 {
            var result: INT32 = 0
            let inertiaDecayRateWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(inertiaDecayRate)
            let _inertiaDecayRate = try! inertiaDecayRateWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddScrollVelocity(pThis, .from(swift: offsetsVelocity), _inertiaDecayRate, &result))
            }
            return result
        }

        internal func ZoomToImpl(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
            var result: INT32 = 0
            let centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            let _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomTo(pThis, zoomFactor, _centerPoint, &result))
            }
            return result
        }

        internal func ZoomToWithOptionsImpl(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: WinUI.ScrollingZoomOptions?) throws -> Int32 {
            var result: INT32 = 0
            let centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            let _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomToWithOptions(pThis, zoomFactor, _centerPoint, RawPointer(options), &result))
            }
            return result
        }

        internal func ZoomByImpl(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
            var result: INT32 = 0
            let centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            let _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomBy(pThis, zoomFactorDelta, _centerPoint, &result))
            }
            return result
        }

        internal func ZoomByWithOptionsImpl(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: WinUI.ScrollingZoomOptions?) throws -> Int32 {
            var result: INT32 = 0
            let centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            let _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomByWithOptions(pThis, zoomFactorDelta, _centerPoint, RawPointer(options), &result))
            }
            return result
        }

        internal func AddZoomVelocityImpl(_ zoomFactorVelocity: Float, _ centerPoint: WindowsFoundation.Vector2?, _ inertiaDecayRate: Float?) throws -> Int32 {
            var result: INT32 = 0
            let centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            let _centerPoint = try! centerPointWrapper?.toABI { $0 }
            let inertiaDecayRateWrapper = WinUI.__x_ABI_C__FIReference_1_floatWrapper(inertiaDecayRate)
            let _inertiaDecayRate = try! inertiaDecayRateWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddZoomVelocity(pThis, zoomFactorVelocity, _centerPoint, _inertiaDecayRate, &result))
            }
            return result
        }

        internal func add_ExtentChangedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ExtentChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ExtentChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ExtentChanged(pThis, token))
            }
        }

        internal func add_StateChangedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StateChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_StateChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StateChanged(pThis, token))
            }
        }

        internal func add_ViewChangedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ViewChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChanged(pThis, token))
            }
        }

        internal func add_ScrollAnimationStartingImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingScrollAnimationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingScrollAnimationStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScrollAnimationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ScrollAnimationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScrollAnimationStarting(pThis, token))
            }
        }

        internal func add_ZoomAnimationStartingImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingZoomAnimationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingZoomAnimationStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ZoomAnimationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ZoomAnimationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ZoomAnimationStarting(pThis, token))
            }
        }

        internal func add_ScrollCompletedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingScrollCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingScrollCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScrollCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ScrollCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScrollCompleted(pThis, token))
            }
        }

        internal func add_ZoomCompletedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingZoomCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingZoomCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ZoomCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ZoomCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ZoomCompleted(pThis, token))
            }
        }

        internal func add_BringingIntoViewImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingBringingIntoViewEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingBringingIntoViewEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BringingIntoView(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BringingIntoViewImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BringingIntoView(pThis, token))
            }
        }

        internal func add_AnchorRequestedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingAnchorRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingAnchorRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AnchorRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AnchorRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AnchorRequested(pThis, token))
            }
        }

    }

    public class IScrollViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollView {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollView(value!)
        }

    }

    public class IScrollViewStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics }

        internal func get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ScrollPresenterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollPresenterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentOrientationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentOrientationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalScrollChainModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollChainModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalScrollChainModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollChainModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalScrollRailModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollRailModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalScrollRailModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollRailModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ComputedHorizontalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ComputedVerticalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ComputedHorizontalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ComputedVerticalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ZoomChainModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomChainModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ZoomModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IgnoredInputKindsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IgnoredInputKindsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MinZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalAnchorRatioPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAnchorRatioProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalAnchorRatioPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAnchorRatioProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IScrollViewer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer }

        internal func get_HorizontalScrollBarVisibilityImpl() throws -> WinUI.ScrollBarVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalScrollBarVisibilityImpl(_ value: WinUI.ScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollBarVisibility(pThis, value))
            }
        }

        internal func get_VerticalScrollBarVisibilityImpl() throws -> WinUI.ScrollBarVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal func put_VerticalScrollBarVisibilityImpl(_ value: WinUI.ScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollBarVisibility(pThis, value))
            }
        }

        internal func get_IsHorizontalRailEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHorizontalRailEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsHorizontalRailEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsHorizontalRailEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsVerticalRailEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVerticalRailEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsVerticalRailEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsVerticalRailEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsHorizontalScrollChainingEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHorizontalScrollChainingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsHorizontalScrollChainingEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsHorizontalScrollChainingEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsVerticalScrollChainingEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVerticalScrollChainingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsVerticalScrollChainingEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsVerticalScrollChainingEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsZoomChainingEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomChainingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsZoomChainingEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomChainingEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsScrollInertiaEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsScrollInertiaEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsScrollInertiaEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsScrollInertiaEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsZoomInertiaEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomInertiaEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsZoomInertiaEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomInertiaEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_HorizontalScrollModeImpl() throws -> WinUI.ScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollMode(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalScrollModeImpl(_ value: WinUI.ScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollMode(pThis, value))
            }
        }

        internal func get_VerticalScrollModeImpl() throws -> WinUI.ScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollMode(pThis, &value))
            }
            return value
        }

        internal func put_VerticalScrollModeImpl(_ value: WinUI.ScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollMode(pThis, value))
            }
        }

        internal func get_ZoomModeImpl() throws -> WinUI.ZoomMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomMode(pThis, &value))
            }
            return value
        }

        internal func put_ZoomModeImpl(_ value: WinUI.ZoomMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomMode(pThis, value))
            }
        }

        internal func get_HorizontalSnapPointsAlignmentImpl() throws -> WinUI.SnapPointsAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalSnapPointsAlignment(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalSnapPointsAlignmentImpl(_ value: WinUI.SnapPointsAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalSnapPointsAlignment(pThis, value))
            }
        }

        internal func get_VerticalSnapPointsAlignmentImpl() throws -> WinUI.SnapPointsAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalSnapPointsAlignment(pThis, &value))
            }
            return value
        }

        internal func put_VerticalSnapPointsAlignmentImpl(_ value: WinUI.SnapPointsAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalSnapPointsAlignment(pThis, value))
            }
        }

        internal func get_HorizontalSnapPointsTypeImpl() throws -> WinUI.SnapPointsType {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalSnapPointsType(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalSnapPointsTypeImpl(_ value: WinUI.SnapPointsType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalSnapPointsType(pThis, value))
            }
        }

        internal func get_VerticalSnapPointsTypeImpl() throws -> WinUI.SnapPointsType {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalSnapPointsType(pThis, &value))
            }
            return value
        }

        internal func put_VerticalSnapPointsTypeImpl(_ value: WinUI.SnapPointsType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalSnapPointsType(pThis, value))
            }
        }

        internal func get_ZoomSnapPointsTypeImpl() throws -> WinUI.SnapPointsType {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomSnapPointsType(pThis, &value))
            }
            return value
        }

        internal func put_ZoomSnapPointsTypeImpl(_ value: WinUI.SnapPointsType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomSnapPointsType(pThis, value))
            }
        }

        internal func get_HorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffset(pThis, &value))
            }
            return value
        }

        internal func get_ViewportWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportWidth(pThis, &value))
            }
            return value
        }

        internal func get_ScrollableWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableWidth(pThis, &value))
            }
            return value
        }

        internal func get_ComputedHorizontalScrollBarVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal func get_ExtentWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentWidth(pThis, &value))
            }
            return value
        }

        internal func get_VerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffset(pThis, &value))
            }
            return value
        }

        internal func get_ViewportHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportHeight(pThis, &value))
            }
            return value
        }

        internal func get_ScrollableHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableHeight(pThis, &value))
            }
            return value
        }

        internal func get_ComputedVerticalScrollBarVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal func get_ExtentHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentHeight(pThis, &value))
            }
            return value
        }

        internal func get_MinZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinZoomFactor(pThis, &value))
            }
            return value
        }

        internal func put_MinZoomFactorImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinZoomFactor(pThis, value))
            }
        }

        internal func get_MaxZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxZoomFactor(pThis, &value))
            }
            return value
        }

        internal func put_MaxZoomFactorImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxZoomFactor(pThis, value))
            }
        }

        internal func get_ZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomFactor(pThis, &value))
            }
            return value
        }

        internal func get_ZoomSnapPointsImpl() throws -> WindowsFoundation.AnyIVector<Float>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomSnapPoints(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_floatWrapper.unwrapFrom(abi: value)
        }

        internal func get_TopLeftHeaderImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopLeftHeader(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TopLeftHeaderImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TopLeftHeader(pThis, RawPointer(value)))
            }
        }

        internal func get_LeftHeaderImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftHeader(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_LeftHeaderImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LeftHeader(pThis, RawPointer(value)))
            }
        }

        internal func get_TopHeaderImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopHeader(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TopHeaderImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TopHeader(pThis, RawPointer(value)))
            }
        }

        internal func get_ReduceViewportForCoreInputViewOcclusionsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReduceViewportForCoreInputViewOcclusions(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ReduceViewportForCoreInputViewOcclusionsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ReduceViewportForCoreInputViewOcclusions(pThis, .init(from: value)))
            }
        }

        internal func get_HorizontalAnchorRatioImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAnchorRatio(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalAnchorRatioImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAnchorRatio(pThis, value))
            }
        }

        internal func get_VerticalAnchorRatioImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAnchorRatio(pThis, &value))
            }
            return value
        }

        internal func put_VerticalAnchorRatioImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAnchorRatio(pThis, value))
            }
        }

        internal func get_CanContentRenderOutsideBoundsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanContentRenderOutsideBounds(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CanContentRenderOutsideBoundsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanContentRenderOutsideBounds(pThis, .init(from: value)))
            }
        }

        internal func add_AnchorRequestedImpl(_ handler: TypedEventHandler<WinUI.ScrollViewer?, WinUI.AnchorRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollViewer___x_ABI_CMicrosoft__CUI__CXaml__CControls__CAnchorRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AnchorRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AnchorRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AnchorRequested(pThis, token))
            }
        }

        internal func add_ViewChangingImpl(_ handler: EventHandler<WinUI.ScrollViewerViewChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollViewerViewChangingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChanging(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ViewChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChanging(pThis, token))
            }
        }

        internal func add_ViewChangedImpl(_ handler: EventHandler<WinUI.ScrollViewerViewChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollViewerViewChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ViewChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChanged(pThis, token))
            }
        }

        internal func add_DirectManipulationStartedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DirectManipulationStarted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DirectManipulationStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DirectManipulationStarted(pThis, token))
            }
        }

        internal func add_DirectManipulationCompletedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DirectManipulationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DirectManipulationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DirectManipulationCompleted(pThis, token))
            }
        }

        internal func ScrollToHorizontalOffsetImpl(_ offset: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollToHorizontalOffset(pThis, offset))
            }
        }

        internal func ScrollToVerticalOffsetImpl(_ offset: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollToVerticalOffset(pThis, offset))
            }
        }

        internal func ZoomToFactorImpl(_ factor: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomToFactor(pThis, factor))
            }
        }

        internal func ChangeViewImpl(_ horizontalOffset: Double?, _ verticalOffset: Double?, _ zoomFactor: Float?) throws -> Bool {
            var result: boolean = 0
            let horizontalOffsetWrapper = WinUI.__x_ABI_C__FIReference_1_doubleWrapper(horizontalOffset)
            let _horizontalOffset = try! horizontalOffsetWrapper?.toABI { $0 }
            let verticalOffsetWrapper = WinUI.__x_ABI_C__FIReference_1_doubleWrapper(verticalOffset)
            let _verticalOffset = try! verticalOffsetWrapper?.toABI { $0 }
            let zoomFactorWrapper = WinUI.__x_ABI_C__FIReference_1_floatWrapper(zoomFactor)
            let _zoomFactor = try! zoomFactorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ChangeView(pThis, _horizontalOffset, _verticalOffset, _zoomFactor, &result))
            }
            return .init(from: result)
        }

        internal func ChangeViewWithOptionalAnimationImpl(_ horizontalOffset: Double?, _ verticalOffset: Double?, _ zoomFactor: Float?, _ disableAnimation: Bool) throws -> Bool {
            var result: boolean = 0
            let horizontalOffsetWrapper = WinUI.__x_ABI_C__FIReference_1_doubleWrapper(horizontalOffset)
            let _horizontalOffset = try! horizontalOffsetWrapper?.toABI { $0 }
            let verticalOffsetWrapper = WinUI.__x_ABI_C__FIReference_1_doubleWrapper(verticalOffset)
            let _verticalOffset = try! verticalOffsetWrapper?.toABI { $0 }
            let zoomFactorWrapper = WinUI.__x_ABI_C__FIReference_1_floatWrapper(zoomFactor)
            let _zoomFactor = try! zoomFactorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ChangeViewWithOptionalAnimation(pThis, _horizontalOffset, _verticalOffset, _zoomFactor, .init(from: disableAnimation), &result))
            }
            return .init(from: result)
        }

        internal func InvalidateScrollInfoImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateScrollInfo(pThis))
            }
        }

        internal func get_IsDeferredScrollingEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDeferredScrollingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsDeferredScrollingEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDeferredScrollingEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_BringIntoViewOnFocusChangeImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BringIntoViewOnFocusChange(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_BringIntoViewOnFocusChangeImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BringIntoViewOnFocusChange(pThis, .init(from: value)))
            }
        }

    }

    public class IScrollViewerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics }

        internal func get_HorizontalSnapPointsAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalSnapPointsAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalSnapPointsAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalSnapPointsAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalSnapPointsTypePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalSnapPointsTypeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalSnapPointsTypePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalSnapPointsTypeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ZoomSnapPointsTypePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomSnapPointsTypeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalOffsetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffsetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ViewportWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ScrollableWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ComputedHorizontalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ExtentWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalOffsetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffsetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ViewportHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ScrollableHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ComputedVerticalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ExtentHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MinZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ZoomSnapPointsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomSnapPointsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TopLeftHeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopLeftHeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LeftHeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftHeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TopHeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopHeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ReduceViewportForCoreInputViewOcclusionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReduceViewportForCoreInputViewOcclusionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalAnchorRatioPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAnchorRatioProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalAnchorRatioPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAnchorRatioProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetHorizontalScrollBarVisibilityImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ScrollBarVisibility {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetHorizontalScrollBarVisibility(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetHorizontalScrollBarVisibilityImpl(_ element: WinUI.DependencyObject?, _ horizontalScrollBarVisibility: WinUI.ScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetHorizontalScrollBarVisibility(pThis, RawPointer(element), horizontalScrollBarVisibility))
            }
        }

        internal func get_VerticalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetVerticalScrollBarVisibilityImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ScrollBarVisibility {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetVerticalScrollBarVisibility(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetVerticalScrollBarVisibilityImpl(_ element: WinUI.DependencyObject?, _ verticalScrollBarVisibility: WinUI.ScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetVerticalScrollBarVisibility(pThis, RawPointer(element), verticalScrollBarVisibility))
            }
        }

        internal func get_IsHorizontalRailEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHorizontalRailEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsHorizontalRailEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsHorizontalRailEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetIsHorizontalRailEnabledImpl(_ element: WinUI.DependencyObject?, _ isHorizontalRailEnabled: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsHorizontalRailEnabled(pThis, RawPointer(element), .init(from: isHorizontalRailEnabled)))
            }
        }

        internal func get_IsVerticalRailEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVerticalRailEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsVerticalRailEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsVerticalRailEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetIsVerticalRailEnabledImpl(_ element: WinUI.DependencyObject?, _ isVerticalRailEnabled: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsVerticalRailEnabled(pThis, RawPointer(element), .init(from: isVerticalRailEnabled)))
            }
        }

        internal func get_IsHorizontalScrollChainingEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHorizontalScrollChainingEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsHorizontalScrollChainingEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsHorizontalScrollChainingEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetIsHorizontalScrollChainingEnabledImpl(_ element: WinUI.DependencyObject?, _ isHorizontalScrollChainingEnabled: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsHorizontalScrollChainingEnabled(pThis, RawPointer(element), .init(from: isHorizontalScrollChainingEnabled)))
            }
        }

        internal func get_IsVerticalScrollChainingEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVerticalScrollChainingEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsVerticalScrollChainingEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsVerticalScrollChainingEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetIsVerticalScrollChainingEnabledImpl(_ element: WinUI.DependencyObject?, _ isVerticalScrollChainingEnabled: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsVerticalScrollChainingEnabled(pThis, RawPointer(element), .init(from: isVerticalScrollChainingEnabled)))
            }
        }

        internal func get_IsZoomChainingEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomChainingEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsZoomChainingEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsZoomChainingEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetIsZoomChainingEnabledImpl(_ element: WinUI.DependencyObject?, _ isZoomChainingEnabled: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsZoomChainingEnabled(pThis, RawPointer(element), .init(from: isZoomChainingEnabled)))
            }
        }

        internal func get_IsScrollInertiaEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsScrollInertiaEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsScrollInertiaEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsScrollInertiaEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetIsScrollInertiaEnabledImpl(_ element: WinUI.DependencyObject?, _ isScrollInertiaEnabled: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsScrollInertiaEnabled(pThis, RawPointer(element), .init(from: isScrollInertiaEnabled)))
            }
        }

        internal func get_IsZoomInertiaEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomInertiaEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsZoomInertiaEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsZoomInertiaEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetIsZoomInertiaEnabledImpl(_ element: WinUI.DependencyObject?, _ isZoomInertiaEnabled: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsZoomInertiaEnabled(pThis, RawPointer(element), .init(from: isZoomInertiaEnabled)))
            }
        }

        internal func get_HorizontalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetHorizontalScrollModeImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ScrollMode {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetHorizontalScrollMode(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetHorizontalScrollModeImpl(_ element: WinUI.DependencyObject?, _ horizontalScrollMode: WinUI.ScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetHorizontalScrollMode(pThis, RawPointer(element), horizontalScrollMode))
            }
        }

        internal func get_VerticalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetVerticalScrollModeImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ScrollMode {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetVerticalScrollMode(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetVerticalScrollModeImpl(_ element: WinUI.DependencyObject?, _ verticalScrollMode: WinUI.ScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetVerticalScrollMode(pThis, RawPointer(element), verticalScrollMode))
            }
        }

        internal func get_ZoomModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetZoomModeImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ZoomMode {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetZoomMode(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetZoomModeImpl(_ element: WinUI.DependencyObject?, _ zoomMode: WinUI.ZoomMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetZoomMode(pThis, RawPointer(element), zoomMode))
            }
        }

        internal func get_CanContentRenderOutsideBoundsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanContentRenderOutsideBoundsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetCanContentRenderOutsideBoundsImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCanContentRenderOutsideBounds(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetCanContentRenderOutsideBoundsImpl(_ element: WinUI.DependencyObject?, _ canContentRenderOutsideBounds: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetCanContentRenderOutsideBounds(pThis, RawPointer(element), .init(from: canContentRenderOutsideBounds)))
            }
        }

        internal func get_IsDeferredScrollingEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDeferredScrollingEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsDeferredScrollingEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsDeferredScrollingEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetIsDeferredScrollingEnabledImpl(_ element: WinUI.DependencyObject?, _ isDeferredScrollingEnabled: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsDeferredScrollingEnabled(pThis, RawPointer(element), .init(from: isDeferredScrollingEnabled)))
            }
        }

        internal func get_BringIntoViewOnFocusChangePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BringIntoViewOnFocusChangeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetBringIntoViewOnFocusChangeImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBringIntoViewOnFocusChange(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal func SetBringIntoViewOnFocusChangeImpl(_ element: WinUI.DependencyObject?, _ bringIntoViewOnFocusChange: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetBringIntoViewOnFocusChange(pThis, RawPointer(element), .init(from: bringIntoViewOnFocusChange)))
            }
        }

    }

    public class IScrollViewerView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView }

        internal func get_HorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffset(pThis, &value))
            }
            return value
        }

        internal func get_VerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffset(pThis, &value))
            }
            return value
        }

        internal func get_ZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomFactor(pThis, &value))
            }
            return value
        }

    }

    public class IScrollViewerViewChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs }

        internal func get_IsIntermediateImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIntermediate(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IScrollViewerViewChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs }

        internal func get_NextViewImpl() throws -> WinUI.ScrollViewerView? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextView(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FinalViewImpl() throws -> WinUI.ScrollViewerView? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FinalView(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsInertialImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInertial(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IScrollingAnchorRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs }

        internal func get_AnchorCandidatesImpl() throws -> WindowsFoundation.AnyIVector<WinUI.UIElement?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnchorCandidates(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElementWrapper.unwrapFrom(abi: value)
        }

        internal func get_AnchorElementImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnchorElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_AnchorElementImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AnchorElement(pThis, RawPointer(value)))
            }
        }

    }

    public class IScrollingBringingIntoViewEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs }

        internal func get_SnapPointsModeImpl() throws -> WinUI.ScrollingSnapPointsMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapPointsMode(pThis, &value))
            }
            return value
        }

        internal func put_SnapPointsModeImpl(_ value: WinUI.ScrollingSnapPointsMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SnapPointsMode(pThis, value))
            }
        }

        internal func get_RequestEventArgsImpl() throws -> WinUI.BringIntoViewRequestedEventArgs? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestEventArgs(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TargetHorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetHorizontalOffset(pThis, &value))
            }
            return value
        }

        internal func get_TargetVerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetVerticalOffset(pThis, &value))
            }
            return value
        }

        internal func get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class IScrollingScrollAnimationStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs }

        internal func get_AnimationImpl() throws -> WinAppSDK.CompositionAnimation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Animation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_AnimationImpl(_ value: WinAppSDK.CompositionAnimation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Animation(pThis, RawPointer(value)))
            }
        }

        internal func get_StartPositionImpl() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_EndPositionImpl() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

    }

    public class IScrollingScrollCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs }

        internal func get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

    }

    public class IScrollingScrollOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions }

        internal func get_AnimationModeImpl() throws -> WinUI.ScrollingAnimationMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnimationMode(pThis, &value))
            }
            return value
        }

        internal func put_AnimationModeImpl(_ value: WinUI.ScrollingAnimationMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AnimationMode(pThis, value))
            }
        }

        internal func get_SnapPointsModeImpl() throws -> WinUI.ScrollingSnapPointsMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapPointsMode(pThis, &value))
            }
            return value
        }

        internal func put_SnapPointsModeImpl(_ value: WinUI.ScrollingSnapPointsMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SnapPointsMode(pThis, value))
            }
        }

    }

    public class IScrollingScrollOptionsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptionsFactory }

        internal func CreateInstanceImpl(_ animationMode: WinUI.ScrollingAnimationMode, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollingScrollOptions.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollingScrollOptions {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptionsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, animationMode, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollingScrollOptions(value!)
        }

        internal func CreateInstance2Impl(_ animationMode: WinUI.ScrollingAnimationMode, _ snapPointsMode: WinUI.ScrollingSnapPointsMode, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollingScrollOptions.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollingScrollOptions {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptionsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, animationMode, snapPointsMode, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollingScrollOptions(value!)
        }

    }

    public class IScrollingZoomAnimationStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs }

        internal func get_CenterPointImpl() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CenterPoint(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_StartZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartZoomFactor(pThis, &value))
            }
            return value
        }

        internal func get_EndZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndZoomFactor(pThis, &value))
            }
            return value
        }

        internal func get_AnimationImpl() throws -> WinAppSDK.CompositionAnimation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Animation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_AnimationImpl(_ value: WinAppSDK.CompositionAnimation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Animation(pThis, RawPointer(value)))
            }
        }

        internal func get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

    }

    public class IScrollingZoomCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs }

        internal func get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

    }

    public class IScrollingZoomOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions }

        internal func get_AnimationModeImpl() throws -> WinUI.ScrollingAnimationMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnimationMode(pThis, &value))
            }
            return value
        }

        internal func put_AnimationModeImpl(_ value: WinUI.ScrollingAnimationMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AnimationMode(pThis, value))
            }
        }

        internal func get_SnapPointsModeImpl() throws -> WinUI.ScrollingSnapPointsMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapPointsMode(pThis, &value))
            }
            return value
        }

        internal func put_SnapPointsModeImpl(_ value: WinUI.ScrollingSnapPointsMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SnapPointsMode(pThis, value))
            }
        }

    }

    public class IScrollingZoomOptionsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptionsFactory }

        internal func CreateInstanceImpl(_ animationMode: WinUI.ScrollingAnimationMode, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollingZoomOptions.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollingZoomOptions {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptionsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, animationMode, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollingZoomOptions(value!)
        }

        internal func CreateInstance2Impl(_ animationMode: WinUI.ScrollingAnimationMode, _ snapPointsMode: WinUI.ScrollingSnapPointsMode, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollingZoomOptions.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollingZoomOptions {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptionsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, animationMode, snapPointsMode, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollingZoomOptions(value!)
        }

    }

    public class ISelectionChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs }

        internal func get_AddedItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AddedItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal func get_RemovedItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemovedItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

    }

    public class ISelectionChangedEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgsFactory }

        internal func CreateInstanceWithRemovedItemsAndAddedItemsImpl(_ removedItems: WindowsFoundation.AnyIVector<Any?>?, _ addedItems: WindowsFoundation.AnyIVector<Any?>?, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.SelectionChangedEventArgs.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISelectionChangedEventArgs {
            let (value) = try ComPtrs.initialize { valueAbi in
                let removedItemsWrapper = WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper(removedItems)
                let _removedItems = try! removedItemsWrapper?.toABI { $0 }
                let addedItemsWrapper = WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper(addedItems)
                let _addedItems = try! addedItemsWrapper?.toABI { $0 }
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithRemovedItemsAndAddedItems(pThis, _removedItems, _addedItems, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISelectionChangedEventArgs(value!)
        }

    }

    public class ISemanticZoom: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom }

        internal func get_ZoomedInViewImpl() throws -> WinUI.AnyISemanticZoomInformation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomedInView(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper.unwrapFrom(abi: value)
        }

        internal func put_ZoomedInViewImpl(_ value: WinUI.AnyISemanticZoomInformation?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomedInView(pThis, _value))
            }
        }

        internal func get_ZoomedOutViewImpl() throws -> WinUI.AnyISemanticZoomInformation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomedOutView(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper.unwrapFrom(abi: value)
        }

        internal func put_ZoomedOutViewImpl(_ value: WinUI.AnyISemanticZoomInformation?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomedOutView(pThis, _value))
            }
        }

        internal func get_IsZoomedInViewActiveImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomedInViewActive(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsZoomedInViewActiveImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomedInViewActive(pThis, .init(from: value)))
            }
        }

        internal func get_CanChangeViewsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanChangeViews(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CanChangeViewsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanChangeViews(pThis, .init(from: value)))
            }
        }

        internal func add_ViewChangeStartedImpl(_ handler: WinUI.SemanticZoomViewChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.SemanticZoomViewChangedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChangeStarted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ViewChangeStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChangeStarted(pThis, token))
            }
        }

        internal func add_ViewChangeCompletedImpl(_ handler: WinUI.SemanticZoomViewChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.SemanticZoomViewChangedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChangeCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ViewChangeCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChangeCompleted(pThis, token))
            }
        }

        internal func ToggleActiveViewImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ToggleActiveView(pThis))
            }
        }

        internal func get_IsZoomOutButtonEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomOutButtonEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsZoomOutButtonEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomOutButtonEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ISemanticZoomInformation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation }

        open func get_SemanticZoomOwnerImpl() throws -> WinUI.SemanticZoom? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SemanticZoomOwner(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func put_SemanticZoomOwnerImpl(_ value: WinUI.SemanticZoom?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SemanticZoomOwner(pThis, RawPointer(value)))
            }
        }

        open func get_IsActiveViewImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsActiveView(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_IsActiveViewImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsActiveView(pThis, .init(from: value)))
            }
        }

        open func get_IsZoomedInViewImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomedInView(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_IsZoomedInViewImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomedInView(pThis, .init(from: value)))
            }
        }

        open func InitializeViewChangeImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InitializeViewChange(pThis))
            }
        }

        open func CompleteViewChangeImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompleteViewChange(pThis))
            }
        }

        open func MakeVisibleImpl(_ item: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MakeVisible(pThis, RawPointer(item)))
            }
        }

        open func StartViewChangeFromImpl(_ source: WinUI.SemanticZoomLocation?, _ destination: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartViewChangeFrom(pThis, RawPointer(source), RawPointer(destination)))
            }
        }

        open func StartViewChangeToImpl(_ source: WinUI.SemanticZoomLocation?, _ destination: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartViewChangeTo(pThis, RawPointer(source), RawPointer(destination)))
            }
        }

        open func CompleteViewChangeFromImpl(_ source: WinUI.SemanticZoomLocation?, _ destination: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompleteViewChangeFrom(pThis, RawPointer(source), RawPointer(destination)))
            }
        }

        open func CompleteViewChangeToImpl(_ source: WinUI.SemanticZoomLocation?, _ destination: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompleteViewChangeTo(pThis, RawPointer(source), RawPointer(destination)))
            }
        }

    }

    internal static var ISemanticZoomInformationVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformationVtbl = .init(
        QueryInterface: { ISemanticZoomInformationWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISemanticZoomInformationWrapper.addRef($0) },
        Release: { ISemanticZoomInformationWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Controls.ISemanticZoomInformation").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_SemanticZoomOwner: {
            guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.semanticZoomOwner
            value?.copyTo($1)
            return S_OK
        },

        put_SemanticZoomOwner: {
            guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinUI.SemanticZoom? = .from(abi: ComPtr($1))
            __unwrapped__instance.semanticZoomOwner = value
            return S_OK
        },

        get_IsActiveView: {
            guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isActiveView
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_IsActiveView: {
            guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Bool = .init(from: $1)
            __unwrapped__instance.isActiveView = value
            return S_OK
        },

        get_IsZoomedInView: {
            guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isZoomedInView
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_IsZoomedInView: {
            guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Bool = .init(from: $1)
            __unwrapped__instance.isZoomedInView = value
            return S_OK
        },

        InitializeViewChange: {
            do {
                guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.initializeViewChange()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        CompleteViewChange: {
            do {
                guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.completeViewChange()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        MakeVisible: {
            do {
                guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($1))
                try __unwrapped__instance.makeVisible(item)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        StartViewChangeFrom: {
            do {
                guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let source: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($1))
                let destination: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($2))
                try __unwrapped__instance.startViewChangeFrom(source, destination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        StartViewChangeTo: {
            do {
                guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let source: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($1))
                let destination: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($2))
                try __unwrapped__instance.startViewChangeTo(source, destination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        CompleteViewChangeFrom: {
            do {
                guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let source: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($1))
                let destination: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($2))
                try __unwrapped__instance.completeViewChangeFrom(source, destination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        CompleteViewChangeTo: {
            do {
                guard let __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let source: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($1))
                let destination: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($2))
                try __unwrapped__instance.completeViewChangeTo(source, destination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ISemanticZoomInformationWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationBridge>
    public class ISemanticZoomLocation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation }

        internal func get_ItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Item(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ItemImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Item(pThis, _value))
            }
        }

        internal func get_BoundsImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BoundsImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bounds(pThis, .from(swift: value)))
            }
        }

    }

    public class ISemanticZoomStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics }

        internal func get_ZoomedInViewPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomedInViewProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ZoomedOutViewPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomedOutViewProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsZoomedInViewActivePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomedInViewActiveProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanChangeViewsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanChangeViewsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsZoomOutButtonEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomOutButtonEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ISemanticZoomViewChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs }

        internal func get_IsSourceZoomedInViewImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSourceZoomedInView(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSourceZoomedInViewImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSourceZoomedInView(pThis, .init(from: value)))
            }
        }

        internal func get_SourceItemImpl() throws -> WinUI.SemanticZoomLocation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SourceItemImpl(_ value: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceItem(pThis, RawPointer(value)))
            }
        }

        internal func get_DestinationItemImpl() throws -> WinUI.SemanticZoomLocation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DestinationItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_DestinationItemImpl(_ value: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DestinationItem(pThis, RawPointer(value)))
            }
        }

    }

    public class ISlider: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider }

        internal func get_IntermediateValueImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IntermediateValue(pThis, &value))
            }
            return value
        }

        internal func put_IntermediateValueImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IntermediateValue(pThis, value))
            }
        }

        internal func get_StepFrequencyImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StepFrequency(pThis, &value))
            }
            return value
        }

        internal func put_StepFrequencyImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StepFrequency(pThis, value))
            }
        }

        internal func get_SnapsToImpl() throws -> WinUI.SliderSnapsTo {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapsTo(pThis, &value))
            }
            return value
        }

        internal func put_SnapsToImpl(_ value: WinUI.SliderSnapsTo) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SnapsTo(pThis, value))
            }
        }

        internal func get_TickFrequencyImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickFrequency(pThis, &value))
            }
            return value
        }

        internal func put_TickFrequencyImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TickFrequency(pThis, value))
            }
        }

        internal func get_TickPlacementImpl() throws -> WinUI.TickPlacement {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickPlacement(pThis, &value))
            }
            return value
        }

        internal func put_TickPlacementImpl(_ value: WinUI.TickPlacement) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TickPlacement(pThis, value))
            }
        }

        internal func get_OrientationImpl() throws -> WinUI.Orientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

        internal func put_OrientationImpl(_ value: WinUI.Orientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
            }
        }

        internal func get_IsDirectionReversedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDirectionReversed(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsDirectionReversedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDirectionReversed(pThis, .init(from: value)))
            }
        }

        internal func get_IsThumbToolTipEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsThumbToolTipEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsThumbToolTipEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsThumbToolTipEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_ThumbToolTipValueConverterImpl() throws -> WinUI.AnyIValueConverter? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ThumbToolTipValueConverter(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Data.IValueConverterWrapper.unwrapFrom(abi: value)
        }

        internal func put_ThumbToolTipValueConverterImpl(_ value: WinUI.AnyIValueConverter?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Data.IValueConverterWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ThumbToolTipValueConverter(pThis, _value))
            }
        }

        internal func get_HeaderImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_HeaderImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal func get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

    }

    public class ISliderFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Slider.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISlider {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISlider(value!)
        }

    }

    public class ISliderStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics }

        internal func get_IntermediateValuePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IntermediateValueProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_StepFrequencyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StepFrequencyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SnapsToPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapsToProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TickFrequencyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickFrequencyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TickPlacementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickPlacementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OrientationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OrientationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsDirectionReversedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDirectionReversedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsThumbToolTipEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsThumbToolTipEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ThumbToolTipValueConverterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ThumbToolTipValueConverterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ISplitView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView }

        internal func get_ContentImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, RawPointer(value)))
            }
        }

        internal func get_PaneImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Pane(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PaneImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Pane(pThis, RawPointer(value)))
            }
        }

        internal func get_IsPaneOpenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaneOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsPaneOpenImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPaneOpen(pThis, .init(from: value)))
            }
        }

        internal func get_OpenPaneLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneLength(pThis, &value))
            }
            return value
        }

        internal func put_OpenPaneLengthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpenPaneLength(pThis, value))
            }
        }

        internal func get_CompactPaneLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactPaneLength(pThis, &value))
            }
            return value
        }

        internal func put_CompactPaneLengthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CompactPaneLength(pThis, value))
            }
        }

        internal func get_PanePlacementImpl() throws -> WinUI.SplitViewPanePlacement {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PanePlacement(pThis, &value))
            }
            return value
        }

        internal func put_PanePlacementImpl(_ value: WinUI.SplitViewPanePlacement) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PanePlacement(pThis, value))
            }
        }

        internal func get_DisplayModeImpl() throws -> WinUI.SplitViewDisplayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayMode(pThis, &value))
            }
            return value
        }

        internal func put_DisplayModeImpl(_ value: WinUI.SplitViewDisplayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayMode(pThis, value))
            }
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.SplitViewTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PaneBackgroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneBackground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PaneBackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaneBackground(pThis, RawPointer(value)))
            }
        }

        internal func get_LightDismissOverlayModeImpl() throws -> WinUI.LightDismissOverlayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayMode(pThis, &value))
            }
            return value
        }

        internal func put_LightDismissOverlayModeImpl(_ value: WinUI.LightDismissOverlayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightDismissOverlayMode(pThis, value))
            }
        }

        internal func add_PaneClosingImpl(_ handler: TypedEventHandler<WinUI.SplitView?, WinUI.SplitViewPaneClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CSplitView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CSplitViewPaneClosingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneClosing(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PaneClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneClosing(pThis, token))
            }
        }

        internal func add_PaneClosedImpl(_ handler: TypedEventHandler<WinUI.SplitView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CSplitView_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneClosed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PaneClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneClosed(pThis, token))
            }
        }

        internal func add_PaneOpeningImpl(_ handler: TypedEventHandler<WinUI.SplitView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CSplitView_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneOpening(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PaneOpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneOpening(pThis, token))
            }
        }

        internal func add_PaneOpenedImpl(_ handler: TypedEventHandler<WinUI.SplitView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CSplitView_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneOpened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PaneOpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneOpened(pThis, token))
            }
        }

    }

    public class ISplitViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.SplitView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISplitView {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISplitView(value!)
        }

    }

    public class ISplitViewPaneClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class ISplitViewStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics }

        internal func get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PanePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsPaneOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaneOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OpenPaneLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CompactPaneLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactPaneLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PanePlacementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PanePlacementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DisplayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TemplateSettingsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettingsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PaneBackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneBackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LightDismissOverlayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IStackLayout: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout }

        internal func get_OrientationImpl() throws -> WinUI.Orientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

        internal func put_OrientationImpl(_ value: WinUI.Orientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
            }
        }

        internal func get_SpacingImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Spacing(pThis, &value))
            }
            return value
        }

        internal func put_SpacingImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Spacing(pThis, value))
            }
        }

    }

    public class IStackLayoutFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayoutFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.StackLayout.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IStackLayout {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayoutFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IStackLayout(value!)
        }

    }

    public class IStackLayoutStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayoutStatics }

        internal func get_OrientationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OrientationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IStackPanel: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel }

        internal func get_AreScrollSnapPointsRegularImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreScrollSnapPointsRegular(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AreScrollSnapPointsRegularImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AreScrollSnapPointsRegular(pThis, .init(from: value)))
            }
        }

        internal func get_OrientationImpl() throws -> WinUI.Orientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

        internal func put_OrientationImpl(_ value: WinUI.Orientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
            }
        }

        internal func get_BackgroundSizingImpl() throws -> WinUI.BackgroundSizing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, &value))
            }
            return value
        }

        internal func put_BackgroundSizingImpl(_ value: WinUI.BackgroundSizing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
            }
        }

        internal func get_BorderBrushImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BorderBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, RawPointer(value)))
            }
        }

        internal func get_BorderThicknessImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BorderThicknessImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, .from(swift: value)))
            }
        }

        internal func get_CornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_CornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, .from(swift: value)))
            }
        }

        internal func get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal func get_SpacingImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Spacing(pThis, &value))
            }
            return value
        }

        internal func put_SpacingImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Spacing(pThis, value))
            }
        }

    }

    public class IStackPanelFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.StackPanel.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IStackPanel {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IStackPanel(value!)
        }

    }

    public class IStackPanelStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics }

        internal func get_AreScrollSnapPointsRegularPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreScrollSnapPointsRegularProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OrientationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OrientationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BackgroundSizingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BorderBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BorderThicknessPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IStyleSelector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector }

        internal func SelectStyleImpl(_ item: Any?, _ container: WinUI.DependencyObject?) throws -> WinUI.Style? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectStyle(pThis, _item, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IStyleSelectorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.StyleSelector.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IStyleSelector {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IStyleSelector(value!)
        }

    }

    public class IStyleSelectorOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides }

        internal func SelectStyleCoreImpl(_ item: Any?, _ container: WinUI.DependencyObject?) throws -> WinUI.Style? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectStyleCore(pThis, _item, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ITeachingTip: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip }

        internal func get_TitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TitleImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value.get()))
            }
        }

        internal func get_SubtitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subtitle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SubtitleImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Subtitle(pThis, _value.get()))
            }
        }

        internal func get_IsOpenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsOpenImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsOpen(pThis, .init(from: value)))
            }
        }

        internal func get_TargetImpl() throws -> WinUI.FrameworkElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Target(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TargetImpl(_ value: WinUI.FrameworkElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Target(pThis, RawPointer(value)))
            }
        }

        internal func get_TailVisibilityImpl() throws -> WinUI.TeachingTipTailVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipTailVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TailVisibility(pThis, &value))
            }
            return value
        }

        internal func put_TailVisibilityImpl(_ value: WinUI.TeachingTipTailVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TailVisibility(pThis, value))
            }
        }

        internal func get_ActionButtonContentImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionButtonContent(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ActionButtonContentImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ActionButtonContent(pThis, _value))
            }
        }

        internal func get_ActionButtonStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ActionButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ActionButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_ActionButtonCommandImpl() throws -> WinUI.AnyICommand? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionButtonCommand(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal func put_ActionButtonCommandImpl(_ value: WinUI.AnyICommand?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ActionButtonCommand(pThis, _value))
            }
        }

        internal func get_ActionButtonCommandParameterImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionButtonCommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ActionButtonCommandParameterImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ActionButtonCommandParameter(pThis, _value))
            }
        }

        internal func get_CloseButtonContentImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonContent(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_CloseButtonContentImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonContent(pThis, _value))
            }
        }

        internal func get_CloseButtonStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_CloseButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_CloseButtonCommandImpl() throws -> WinUI.AnyICommand? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommand(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal func put_CloseButtonCommandImpl(_ value: WinUI.AnyICommand?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonCommand(pThis, _value))
            }
        }

        internal func get_CloseButtonCommandParameterImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_CloseButtonCommandParameterImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonCommandParameter(pThis, _value))
            }
        }

        internal func get_PlacementMarginImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementMargin(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PlacementMarginImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlacementMargin(pThis, .from(swift: value)))
            }
        }

        internal func get_ShouldConstrainToRootBoundsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldConstrainToRootBounds(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShouldConstrainToRootBoundsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShouldConstrainToRootBounds(pThis, .init(from: value)))
            }
        }

        internal func get_IsLightDismissEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsLightDismissEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsLightDismissEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsLightDismissEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_PreferredPlacementImpl() throws -> WinUI.TeachingTipPlacementMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredPlacement(pThis, &value))
            }
            return value
        }

        internal func put_PreferredPlacementImpl(_ value: WinUI.TeachingTipPlacementMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredPlacement(pThis, value))
            }
        }

        internal func get_HeroContentPlacementImpl() throws -> WinUI.TeachingTipHeroContentPlacementMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipHeroContentPlacementMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeroContentPlacement(pThis, &value))
            }
            return value
        }

        internal func put_HeroContentPlacementImpl(_ value: WinUI.TeachingTipHeroContentPlacementMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeroContentPlacement(pThis, value))
            }
        }

        internal func get_HeroContentImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeroContent(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeroContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeroContent(pThis, RawPointer(value)))
            }
        }

        internal func get_IconSourceImpl() throws -> WinUI.IconSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_IconSourceImpl(_ value: WinUI.IconSource?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconSource(pThis, RawPointer(value)))
            }
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.TeachingTipTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_ActionButtonClickImpl(_ handler: TypedEventHandler<WinUI.TeachingTip?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTeachingTip_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ActionButtonClick(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ActionButtonClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ActionButtonClick(pThis, token))
            }
        }

        internal func add_CloseButtonClickImpl(_ handler: TypedEventHandler<WinUI.TeachingTip?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTeachingTip_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CloseButtonClick(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CloseButtonClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CloseButtonClick(pThis, token))
            }
        }

        internal func add_ClosingImpl(_ handler: TypedEventHandler<WinUI.TeachingTip?, WinUI.TeachingTipClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTeachingTip___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTeachingTipClosingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closing(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closing(pThis, token))
            }
        }

        internal func add_ClosedImpl(_ handler: TypedEventHandler<WinUI.TeachingTip?, WinUI.TeachingTipClosedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTeachingTip___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTeachingTipClosedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
            }
        }

    }

    public class ITeachingTipClosedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosedEventArgs }

        internal func get_ReasonImpl() throws -> WinUI.TeachingTipCloseReason {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipCloseReason = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

    }

    public class ITeachingTipClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs }

        internal func get_ReasonImpl() throws -> WinUI.TeachingTipCloseReason {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipCloseReason = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ITeachingTipFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.TeachingTip.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ITeachingTip {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ITeachingTip(value!)
        }

    }

    public class ITeachingTipStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics }

        internal func get_IsOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TargetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TailVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TailVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TitlePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SubtitlePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubtitleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ActionButtonContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionButtonContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ActionButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ActionButtonCommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionButtonCommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ActionButtonCommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionButtonCommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonCommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CloseButtonCommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlacementMarginPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementMarginProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ShouldConstrainToRootBoundsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldConstrainToRootBoundsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsLightDismissEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsLightDismissEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PreferredPlacementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredPlacementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeroContentPlacementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeroContentPlacementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeroContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeroContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IconSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TemplateSettingsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettingsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITeachingTipTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings }

        internal func get_TopRightHighlightMarginImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopRightHighlightMargin(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_TopRightHighlightMarginImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TopRightHighlightMargin(pThis, .from(swift: value)))
            }
        }

        internal func get_TopLeftHighlightMarginImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopLeftHighlightMargin(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_TopLeftHighlightMarginImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TopLeftHighlightMargin(pThis, .from(swift: value)))
            }
        }

        internal func get_IconElementImpl() throws -> WinUI.IconElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_IconElementImpl(_ value: WinUI.IconElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconElement(pThis, RawPointer(value)))
            }
        }

    }

    public class ITeachingTipTemplateSettingsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettingsFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.TeachingTipTemplateSettings.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ITeachingTipTemplateSettings {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettingsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ITeachingTipTemplateSettings(value!)
        }

    }

    public class ITeachingTipTemplateSettingsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettingsStatics }

        internal func get_TopRightHighlightMarginPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettingsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopRightHighlightMarginProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TopLeftHighlightMarginPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettingsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopLeftHighlightMarginProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IconElementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettingsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconElementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITextBlock: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock }

        internal func get_FontSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        internal func put_FontSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        internal func get_FontFamilyImpl() throws -> WinUI.FontFamily? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FontFamilyImpl(_ value: WinUI.FontFamily?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, RawPointer(value)))
            }
        }

        internal func get_FontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_FontWeightImpl(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        internal func get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal func put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal func get_FontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, &value))
            }
            return value
        }

        internal func put_FontStretchImpl(_ value: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
            }
        }

        internal func get_CharacterSpacingImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, &value))
            }
            return value
        }

        internal func put_CharacterSpacingImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
            }
        }

        internal func get_ForegroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

        internal func get_TextWrappingImpl() throws -> WinUI.TextWrapping {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrapping(pThis, &value))
            }
            return value
        }

        internal func put_TextWrappingImpl(_ value: WinUI.TextWrapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextWrapping(pThis, value))
            }
        }

        internal func get_TextTrimmingImpl() throws -> WinUI.TextTrimming {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextTrimming(pThis, &value))
            }
            return value
        }

        internal func put_TextTrimmingImpl(_ value: WinUI.TextTrimming) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextTrimming(pThis, value))
            }
        }

        internal func get_TextAlignmentImpl() throws -> WinUI.TextAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignment(pThis, &value))
            }
            return value
        }

        internal func put_TextAlignmentImpl(_ value: WinUI.TextAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextAlignment(pThis, value))
            }
        }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal func get_InlinesImpl() throws -> WinUI.InlineCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Inlines(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal func get_LineHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeight(pThis, &value))
            }
            return value
        }

        internal func put_LineHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineHeight(pThis, value))
            }
        }

        internal func get_LineStackingStrategyImpl() throws -> WinUI.LineStackingStrategy {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategy(pThis, &value))
            }
            return value
        }

        internal func put_LineStackingStrategyImpl(_ value: WinUI.LineStackingStrategy) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineStackingStrategy(pThis, value))
            }
        }

        internal func get_IsTextSelectionEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSelectionEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsTextSelectionEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextSelectionEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_SelectedTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ContentStartImpl() throws -> WinUI.TextPointer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentStart(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentEndImpl() throws -> WinUI.TextPointer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentEnd(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionStartImpl() throws -> WinUI.TextPointer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionStart(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionEndImpl() throws -> WinUI.TextPointer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionEnd(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_BaselineOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaselineOffset(pThis, &value))
            }
            return value
        }

        internal func get_SelectionHighlightColorImpl() throws -> WinUI.SolidColorBrush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SelectionHighlightColorImpl(_ value: WinUI.SolidColorBrush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionHighlightColor(pThis, RawPointer(value)))
            }
        }

        internal func get_MaxLinesImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLines(pThis, &value))
            }
            return value
        }

        internal func put_MaxLinesImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxLines(pThis, value))
            }
        }

        internal func get_TextLineBoundsImpl() throws -> WinUI.TextLineBounds {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBounds(pThis, &value))
            }
            return value
        }

        internal func put_TextLineBoundsImpl(_ value: WinUI.TextLineBounds) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextLineBounds(pThis, value))
            }
        }

        internal func get_OpticalMarginAlignmentImpl() throws -> WinUI.OpticalMarginAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_COpticalMarginAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignment(pThis, &value))
            }
            return value
        }

        internal func put_OpticalMarginAlignmentImpl(_ value: WinUI.OpticalMarginAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalMarginAlignment(pThis, value))
            }
        }

        internal func get_IsColorFontEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsColorFontEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsColorFontEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_TextReadingOrderImpl() throws -> WinUI.TextReadingOrder {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrder(pThis, &value))
            }
            return value
        }

        internal func put_TextReadingOrderImpl(_ value: WinUI.TextReadingOrder) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextReadingOrder(pThis, value))
            }
        }

        internal func get_IsTextScaleFactorEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsTextScaleFactorEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_TextDecorationsImpl() throws -> UWP.TextDecorations {
            var value: __x_ABI_CWindows_CUI_CText_CTextDecorations = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextDecorations(pThis, &value))
            }
            return value
        }

        internal func put_TextDecorationsImpl(_ value: UWP.TextDecorations) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextDecorations(pThis, value))
            }
        }

        internal func get_IsTextTrimmedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextTrimmed(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HorizontalTextAlignmentImpl() throws -> WinUI.TextAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignment(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalTextAlignmentImpl(_ value: WinUI.TextAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalTextAlignment(pThis, value))
            }
        }

        internal func get_TextHighlightersImpl() throws -> WindowsFoundation.AnyIVector<WinUI.TextHighlighter?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextHighlighters(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CDocuments__CTextHighlighterWrapper.unwrapFrom(abi: value)
        }

        internal func get_SelectionFlyoutImpl() throws -> WinUI.FlyoutBase? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SelectionFlyoutImpl(_ value: WinUI.FlyoutBase?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionFlyout(pThis, RawPointer(value)))
            }
        }

        internal func add_SelectionChangedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SelectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
            }
        }

        internal func add_ContextMenuOpeningImpl(_ handler: WinUI.ContextMenuOpeningEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextMenuOpening(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ContextMenuOpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextMenuOpening(pThis, token))
            }
        }

        internal func add_IsTextTrimmedChangedImpl(_ handler: TypedEventHandler<WinUI.TextBlock?, WinUI.IsTextTrimmedChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBlock___x_ABI_CMicrosoft__CUI__CXaml__CControls__CIsTextTrimmedChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsTextTrimmedChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_IsTextTrimmedChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsTextTrimmedChanged(pThis, token))
            }
        }

        internal func SelectAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
            }
        }

        internal func SelectImpl(_ start: WinUI.TextPointer?, _ end: WinUI.TextPointer?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Select(pThis, RawPointer(start), RawPointer(end)))
            }
        }

        internal func GetAlphaMaskImpl() throws -> WinAppSDK.CompositionBrush? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlphaMask(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CopySelectionToClipboardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopySelectionToClipboard(pThis))
            }
        }

    }

    public class ITextBlockStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics }

        internal func get_FontSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontFamilyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontWeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FontStretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CharacterSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextWrappingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrappingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextTrimmingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextTrimmingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LineHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LineStackingStrategyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTextSelectionEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSelectionEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectedTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionHighlightColorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxLinesPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLinesProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextLineBoundsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBoundsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OpticalMarginAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsColorFontEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextReadingOrderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTextScaleFactorEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextDecorationsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextDecorationsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTextTrimmedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextTrimmedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalTextAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionFlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITextBox: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal func get_SelectedTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SelectedTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedText(pThis, _value.get()))
            }
        }

        internal func get_SelectionLengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionLength(pThis, &value))
            }
            return value
        }

        internal func put_SelectionLengthImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionLength(pThis, value))
            }
        }

        internal func get_SelectionStartImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionStart(pThis, &value))
            }
            return value
        }

        internal func put_SelectionStartImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionStart(pThis, value))
            }
        }

        internal func get_MaxLengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLength(pThis, &value))
            }
            return value
        }

        internal func put_MaxLengthImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxLength(pThis, value))
            }
        }

        internal func get_IsReadOnlyImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsReadOnly(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsReadOnlyImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsReadOnly(pThis, .init(from: value)))
            }
        }

        internal func get_AcceptsReturnImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AcceptsReturn(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AcceptsReturnImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AcceptsReturn(pThis, .init(from: value)))
            }
        }

        internal func get_TextAlignmentImpl() throws -> WinUI.TextAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignment(pThis, &value))
            }
            return value
        }

        internal func put_TextAlignmentImpl(_ value: WinUI.TextAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextAlignment(pThis, value))
            }
        }

        internal func get_TextWrappingImpl() throws -> WinUI.TextWrapping {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrapping(pThis, &value))
            }
            return value
        }

        internal func put_TextWrappingImpl(_ value: WinUI.TextWrapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextWrapping(pThis, value))
            }
        }

        internal func get_IsSpellCheckEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSpellCheckEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSpellCheckEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSpellCheckEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsTextPredictionEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextPredictionEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsTextPredictionEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextPredictionEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_InputScopeImpl() throws -> WinUI.InputScope? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputScope(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_InputScopeImpl(_ value: WinUI.InputScope?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InputScope(pThis, RawPointer(value)))
            }
        }

        internal func get_HeaderImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_HeaderImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal func get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_PlaceholderTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PlaceholderTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderText(pThis, _value.get()))
            }
        }

        internal func get_SelectionHighlightColorImpl() throws -> WinUI.SolidColorBrush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SelectionHighlightColorImpl(_ value: WinUI.SolidColorBrush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionHighlightColor(pThis, RawPointer(value)))
            }
        }

        internal func get_PreventKeyboardDisplayOnProgrammaticFocusImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreventKeyboardDisplayOnProgrammaticFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PreventKeyboardDisplayOnProgrammaticFocusImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreventKeyboardDisplayOnProgrammaticFocus(pThis, .init(from: value)))
            }
        }

        internal func get_IsColorFontEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsColorFontEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsColorFontEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_SelectionHighlightColorWhenNotFocusedImpl() throws -> WinUI.SolidColorBrush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorWhenNotFocused(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SelectionHighlightColorWhenNotFocusedImpl(_ value: WinUI.SolidColorBrush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionHighlightColorWhenNotFocused(pThis, RawPointer(value)))
            }
        }

        internal func get_HorizontalTextAlignmentImpl() throws -> WinUI.TextAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignment(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalTextAlignmentImpl(_ value: WinUI.TextAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalTextAlignment(pThis, value))
            }
        }

        internal func get_CharacterCasingImpl() throws -> WinUI.CharacterCasing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterCasing(pThis, &value))
            }
            return value
        }

        internal func put_CharacterCasingImpl(_ value: WinUI.CharacterCasing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterCasing(pThis, value))
            }
        }

        internal func get_PlaceholderForegroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderForeground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PlaceholderForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderForeground(pThis, RawPointer(value)))
            }
        }

        internal func get_CanPasteClipboardContentImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPasteClipboardContent(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CanUndoImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanUndo(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CanRedoImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanRedo(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SelectionFlyoutImpl() throws -> WinUI.FlyoutBase? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SelectionFlyoutImpl(_ value: WinUI.FlyoutBase?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionFlyout(pThis, RawPointer(value)))
            }
        }

        internal func get_ProofingMenuFlyoutImpl() throws -> WinUI.FlyoutBase? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProofingMenuFlyout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DescriptionImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Description(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_DescriptionImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Description(pThis, _value))
            }
        }

        internal func add_TextChangedImpl(_ handler: WinUI.TextChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.TextChangedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TextChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextChanged(pThis, token))
            }
        }

        internal func add_SelectionChangedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SelectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
            }
        }

        internal func add_ContextMenuOpeningImpl(_ handler: WinUI.ContextMenuOpeningEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextMenuOpening(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ContextMenuOpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextMenuOpening(pThis, token))
            }
        }

        internal func add_PasteImpl(_ handler: WinUI.TextControlPasteEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.TextControlPasteEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Paste(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PasteImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Paste(pThis, token))
            }
        }

        internal func add_TextCompositionStartedImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextCompositionStartedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextCompositionStartedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextCompositionStarted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TextCompositionStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextCompositionStarted(pThis, token))
            }
        }

        internal func add_TextCompositionChangedImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextCompositionChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextCompositionChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextCompositionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TextCompositionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextCompositionChanged(pThis, token))
            }
        }

        internal func add_TextCompositionEndedImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextCompositionEndedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextCompositionEndedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextCompositionEnded(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TextCompositionEndedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextCompositionEnded(pThis, token))
            }
        }

        internal func add_CopyingToClipboardImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextControlCopyingToClipboardEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextControlCopyingToClipboardEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CopyingToClipboard(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CopyingToClipboardImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CopyingToClipboard(pThis, token))
            }
        }

        internal func add_CuttingToClipboardImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextControlCuttingToClipboardEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextControlCuttingToClipboardEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CuttingToClipboard(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CuttingToClipboardImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CuttingToClipboard(pThis, token))
            }
        }

        internal func add_BeforeTextChangingImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextBoxBeforeTextChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBoxBeforeTextChangingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BeforeTextChanging(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BeforeTextChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BeforeTextChanging(pThis, token))
            }
        }

        internal func add_SelectionChangingImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextBoxSelectionChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBoxSelectionChangingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanging(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SelectionChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanging(pThis, token))
            }
        }

        internal func SelectImpl(_ start: Int32, _ length: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Select(pThis, start, length))
            }
        }

        internal func SelectAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
            }
        }

        internal func GetRectFromCharacterIndexImpl(_ charIndex: Int32, _ trailingEdge: Bool) throws -> WindowsFoundation.Rect {
            var result: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRectFromCharacterIndex(pThis, charIndex, .init(from: trailingEdge), &result))
            }
            return .from(abi: result)
        }

        internal func GetLinguisticAlternativesAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<String>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetLinguisticAlternativesAsync(pThis, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: operation)
        }

        internal func UndoImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Undo(pThis))
            }
        }

        internal func RedoImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Redo(pThis))
            }
        }

        internal func PasteFromClipboardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PasteFromClipboard(pThis))
            }
        }

        internal func CopySelectionToClipboardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopySelectionToClipboard(pThis))
            }
        }

        internal func CutSelectionToClipboardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CutSelectionToClipboard(pThis))
            }
        }

        internal func ClearUndoRedoHistoryImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearUndoRedoHistory(pThis))
            }
        }

        internal func get_TextReadingOrderImpl() throws -> WinUI.TextReadingOrder {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrder(pThis, &value))
            }
            return value
        }

        internal func put_TextReadingOrderImpl(_ value: WinUI.TextReadingOrder) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextReadingOrder(pThis, value))
            }
        }

        internal func get_DesiredCandidateWindowAlignmentImpl() throws -> WinUI.CandidateWindowAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredCandidateWindowAlignment(pThis, &value))
            }
            return value
        }

        internal func put_DesiredCandidateWindowAlignmentImpl(_ value: WinUI.CandidateWindowAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredCandidateWindowAlignment(pThis, value))
            }
        }

        internal func add_CandidateWindowBoundsChangedImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.CandidateWindowBoundsChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CCandidateWindowBoundsChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CandidateWindowBoundsChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CandidateWindowBoundsChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CandidateWindowBoundsChanged(pThis, token))
            }
        }

        internal func add_TextChangingImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextBoxTextChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBoxTextChangingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextChanging(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TextChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextChanging(pThis, token))
            }
        }

    }

    public class ITextBoxBeforeTextChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs }

        internal func get_NewTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class ITextBoxFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.TextBox.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ITextBox {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ITextBox(value!)
        }

    }

    public class ITextBoxSelectionChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs }

        internal func get_SelectionStartImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionStart(pThis, &value))
            }
            return value
        }

        internal func get_SelectionLengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionLength(pThis, &value))
            }
            return value
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class ITextBoxStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics }

        internal func get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsReadOnlyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsReadOnlyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AcceptsReturnPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AcceptsReturnProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextWrappingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrappingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsSpellCheckEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSpellCheckEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsTextPredictionEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextPredictionEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_InputScopePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputScopeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlaceholderTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionHighlightColorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PreventKeyboardDisplayOnProgrammaticFocusPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreventKeyboardDisplayOnProgrammaticFocusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsColorFontEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionHighlightColorWhenNotFocusedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorWhenNotFocusedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalTextAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CharacterCasingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterCasingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlaceholderForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanPasteClipboardContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPasteClipboardContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanUndoPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanUndoProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanRedoPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanRedoProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionFlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ProofingMenuFlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProofingMenuFlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DescriptionPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DescriptionProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DesiredCandidateWindowAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredCandidateWindowAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TextReadingOrderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITextBoxTextChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs }

        internal func get_IsContentChangingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsContentChanging(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ITextChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs }

    }

    public class ITextCompositionChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs }

        internal func get_StartIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartIndex(pThis, &value))
            }
            return value
        }

        internal func get_LengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

    }

    public class ITextCompositionEndedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs }

        internal func get_StartIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartIndex(pThis, &value))
            }
            return value
        }

        internal func get_LengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

    }

    public class ITextCompositionStartedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs }

        internal func get_StartIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartIndex(pThis, &value))
            }
            return value
        }

        internal func get_LengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

    }

    public class ITextControlCopyingToClipboardEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class ITextControlCuttingToClipboardEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class ITextControlPasteEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class IToggleMenuFlyoutItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem }

        internal func get_IsCheckedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsChecked(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsCheckedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsChecked(pThis, .init(from: value)))
            }
        }

    }

    public class IToggleMenuFlyoutItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ToggleMenuFlyoutItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IToggleMenuFlyoutItem {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IToggleMenuFlyoutItem(value!)
        }

    }

    public class IToggleMenuFlyoutItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemStatics }

        internal func get_IsCheckedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCheckedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IToggleSwitch: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch }

        internal func get_IsOnImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOn(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsOnImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsOn(pThis, .init(from: value)))
            }
        }

        internal func get_HeaderImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_HeaderImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal func get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_OnContentImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OnContent(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_OnContentImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OnContent(pThis, _value))
            }
        }

        internal func get_OnContentTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OnContentTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_OnContentTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OnContentTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_OffContentImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffContent(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_OffContentImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OffContent(pThis, _value))
            }
        }

        internal func get_OffContentTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffContentTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_OffContentTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OffContentTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.ToggleSwitchTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_ToggledImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Toggled(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ToggledImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Toggled(pThis, token))
            }
        }

    }

    public class IToggleSwitchOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides }

        internal func OnToggledImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnToggled(pThis))
            }
        }

        internal func OnOnContentChangedImpl(_ oldContent: Any?, _ newContent: Any?) throws {
            let oldContentWrapper = __ABI_.AnyWrapper(oldContent)
            let _oldContent = try! oldContentWrapper?.toABI { $0 }
            let newContentWrapper = __ABI_.AnyWrapper(newContent)
            let _newContent = try! newContentWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnOnContentChanged(pThis, _oldContent, _newContent))
            }
        }

        internal func OnOffContentChangedImpl(_ oldContent: Any?, _ newContent: Any?) throws {
            let oldContentWrapper = __ABI_.AnyWrapper(oldContent)
            let _oldContent = try! oldContentWrapper?.toABI { $0 }
            let newContentWrapper = __ABI_.AnyWrapper(newContent)
            let _newContent = try! newContentWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnOffContentChanged(pThis, _oldContent, _newContent))
            }
        }

        internal func OnHeaderChangedImpl(_ oldContent: Any?, _ newContent: Any?) throws {
            let oldContentWrapper = __ABI_.AnyWrapper(oldContent)
            let _oldContent = try! oldContentWrapper?.toABI { $0 }
            let newContentWrapper = __ABI_.AnyWrapper(newContent)
            let _newContent = try! newContentWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnHeaderChanged(pThis, _oldContent, _newContent))
            }
        }

    }

    public class IToggleSwitchStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics }

        internal func get_IsOnPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOnProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OnContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OnContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OnContentTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OnContentTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OffContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OffContentTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffContentTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IToolTip: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip }

        internal func get_HorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffset(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalOffsetImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalOffset(pThis, value))
            }
        }

        internal func get_IsOpenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsOpenImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsOpen(pThis, .init(from: value)))
            }
        }

        internal func get_PlacementImpl() throws -> WinUI.PlacementMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPlacementMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Placement(pThis, &value))
            }
            return value
        }

        internal func put_PlacementImpl(_ value: WinUI.PlacementMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Placement(pThis, value))
            }
        }

        internal func get_PlacementTargetImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementTarget(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PlacementTargetImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlacementTarget(pThis, RawPointer(value)))
            }
        }

        internal func get_PlacementRectImpl() throws -> WindowsFoundation.Rect? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementRect(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.unwrapFrom(abi: value)
        }

        internal func put_PlacementRectImpl(_ value: WindowsFoundation.Rect?) throws {
            let valueWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlacementRect(pThis, _value))
            }
        }

        internal func get_VerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffset(pThis, &value))
            }
            return value
        }

        internal func put_VerticalOffsetImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalOffset(pThis, value))
            }
        }

        internal func get_TemplateSettingsImpl() throws -> WinUI.ToolTipTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_ClosedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
            }
        }

        internal func add_OpenedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Opened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Opened(pThis, token))
            }
        }

    }

    public class IToolTipFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ToolTip.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IToolTip {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IToolTip(value!)
        }

    }

    public class IToolTipService: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipService }

    }

    public class IToolTipServiceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics }

        internal func get_PlacementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetPlacementImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.PlacementMode {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPlacementMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPlacement(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal func SetPlacementImpl(_ element: WinUI.DependencyObject?, _ value: WinUI.PlacementMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPlacement(pThis, RawPointer(element), value))
            }
        }

        internal func get_PlacementTargetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementTargetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetPlacementTargetImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.UIElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPlacementTarget(pThis, RawPointer(element), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func SetPlacementTargetImpl(_ element: WinUI.DependencyObject?, _ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPlacementTarget(pThis, RawPointer(element), RawPointer(value)))
            }
        }

        internal func get_ToolTipPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ToolTipProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetToolTipImpl(_ element: WinUI.DependencyObject?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetToolTip(pThis, RawPointer(element), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func SetToolTipImpl(_ element: WinUI.DependencyObject?, _ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipServiceStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetToolTip(pThis, RawPointer(element), _value))
            }
        }

    }

    public class IToolTipStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipStatics }

        internal func get_HorizontalOffsetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffsetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlacementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlacementTargetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementTargetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlacementRectPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementRectProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalOffsetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffsetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITreeView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView }

        internal func get_RootNodesImpl() throws -> WindowsFoundation.AnyIVector<WinUI.TreeViewNode?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RootNodes(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeViewNodeWrapper.unwrapFrom(abi: value)
        }

        internal func get_SelectionModeImpl() throws -> WinUI.TreeViewSelectionMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTreeViewSelectionMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionMode(pThis, &value))
            }
            return value
        }

        internal func put_SelectionModeImpl(_ value: WinUI.TreeViewSelectionMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionMode(pThis, value))
            }
        }

        internal func get_SelectedNodesImpl() throws -> WindowsFoundation.AnyIVector<WinUI.TreeViewNode?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedNodes(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeViewNodeWrapper.unwrapFrom(abi: value)
        }

        internal func ExpandImpl(_ value: WinUI.TreeViewNode?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Expand(pThis, RawPointer(value)))
            }
        }

        internal func CollapseImpl(_ value: WinUI.TreeViewNode?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Collapse(pThis, RawPointer(value)))
            }
        }

        internal func SelectAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
            }
        }

        internal func add_ItemInvokedImpl(_ handler: TypedEventHandler<WinUI.TreeView?, WinUI.TreeViewItemInvokedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeViewItemInvokedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ItemInvoked(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ItemInvokedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ItemInvoked(pThis, token))
            }
        }

        internal func add_ExpandingImpl(_ handler: TypedEventHandler<WinUI.TreeView?, WinUI.TreeViewExpandingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeViewExpandingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Expanding(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ExpandingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Expanding(pThis, token))
            }
        }

        internal func add_CollapsedImpl(_ handler: TypedEventHandler<WinUI.TreeView?, WinUI.TreeViewCollapsedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeViewCollapsedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Collapsed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CollapsedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Collapsed(pThis, token))
            }
        }

    }

    public class ITreeView2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2 }

        internal func NodeFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> WinUI.TreeViewNode? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.NodeFromContainer(pThis, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func ContainerFromNodeImpl(_ node: WinUI.TreeViewNode?) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromNode(pThis, RawPointer(node), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func ItemFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ItemFromContainer(pThis, RawPointer(container), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func ContainerFromItemImpl(_ item: Any?) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let itemWrapper = __ABI_.AnyWrapper(item)
                let _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromItem(pThis, _item, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func get_CanDragItemsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDragItems(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CanDragItemsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanDragItems(pThis, .init(from: value)))
            }
        }

        internal func get_CanReorderItemsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanReorderItems(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CanReorderItemsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanReorderItems(pThis, .init(from: value)))
            }
        }

        internal func get_ItemTemplateImpl() throws -> WinUI.DataTemplate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemTemplate(pThis, RawPointer(value)))
            }
        }

        internal func get_ItemTemplateSelectorImpl() throws -> WinUI.DataTemplateSelector? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemTemplateSelectorImpl(_ value: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemTemplateSelector(pThis, RawPointer(value)))
            }
        }

        internal func get_ItemContainerStyleImpl() throws -> WinUI.Style? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemContainerStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainerStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_ItemContainerStyleSelectorImpl() throws -> WinUI.StyleSelector? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyleSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemContainerStyleSelectorImpl(_ value: WinUI.StyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainerStyleSelector(pThis, RawPointer(value)))
            }
        }

        internal func get_ItemContainerTransitionsImpl() throws -> WinUI.TransitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ItemContainerTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainerTransitions(pThis, RawPointer(value)))
            }
        }

        internal func get_ItemsSourceImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSource(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ItemsSourceImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsSource(pThis, _value))
            }
        }

        internal func add_DragItemsStartingImpl(_ handler: TypedEventHandler<WinUI.TreeView?, WinUI.TreeViewDragItemsStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeViewDragItemsStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DragItemsStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DragItemsStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DragItemsStarting(pThis, token))
            }
        }

        internal func add_DragItemsCompletedImpl(_ handler: TypedEventHandler<WinUI.TreeView?, WinUI.TreeViewDragItemsCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeViewDragItemsCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DragItemsCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DragItemsCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DragItemsCompleted(pThis, token))
            }
        }

        internal func get_SelectedNodeImpl() throws -> WinUI.TreeViewNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedNode(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SelectedNodeImpl(_ value: WinUI.TreeViewNode?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedNode(pThis, RawPointer(value)))
            }
        }

        internal func get_SelectedItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_SelectedItemImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedItem(pThis, _value))
            }
        }

        internal func get_SelectedItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITreeView3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView3 }

        internal func add_SelectionChangedImpl(_ handler: TypedEventHandler<WinUI.TreeView?, WinUI.TreeViewSelectionChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeViewSelectionChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SelectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
            }
        }

    }

    public class ITreeViewCollapsedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs }

        internal func get_NodeImpl() throws -> WinUI.TreeViewNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Node(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITreeViewCollapsedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs2 }

        internal func get_ItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Item(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITreeViewDragItemsCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs }

        internal func get_DropResultImpl() throws -> UWP.DataPackageOperation {
            var value: __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DropResult(pThis, &value))
            }
            return value
        }

        internal func get_ItemsImpl() throws -> WindowsFoundation.AnyIVectorView<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVectorView_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITreeViewDragItemsCompletedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs2 }

        internal func get_NewParentItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewParentItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITreeViewDragItemsStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func get_DataImpl() throws -> UWP.DataPackage? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITreeViewExpandingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs }

        internal func get_NodeImpl() throws -> WinUI.TreeViewNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Node(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITreeViewExpandingEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs2 }

        internal func get_ItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Item(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITreeViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.TreeView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ITreeView {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ITreeView(value!)
        }

    }

    public class ITreeViewItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem }

        internal func get_GlyphOpacityImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphOpacity(pThis, &value))
            }
            return value
        }

        internal func put_GlyphOpacityImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GlyphOpacity(pThis, value))
            }
        }

        internal func get_GlyphBrushImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_GlyphBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GlyphBrush(pThis, RawPointer(value)))
            }
        }

        internal func get_ExpandedGlyphImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpandedGlyph(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ExpandedGlyphImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpandedGlyph(pThis, _value.get()))
            }
        }

        internal func get_CollapsedGlyphImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CollapsedGlyph(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CollapsedGlyphImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CollapsedGlyph(pThis, _value.get()))
            }
        }

        internal func get_GlyphSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphSize(pThis, &value))
            }
            return value
        }

        internal func put_GlyphSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GlyphSize(pThis, value))
            }
        }

        internal func get_IsExpandedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsExpanded(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsExpandedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsExpanded(pThis, .init(from: value)))
            }
        }

        internal func get_TreeViewItemTemplateSettingsImpl() throws -> WinUI.TreeViewItemTemplateSettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TreeViewItemTemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITreeViewItem2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem2 }

        internal func get_HasUnrealizedChildrenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasUnrealizedChildren(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HasUnrealizedChildrenImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HasUnrealizedChildren(pThis, .init(from: value)))
            }
        }

        internal func get_ItemsSourceImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSource(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ItemsSourceImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsSource(pThis, _value))
            }
        }

    }

    public class ITreeViewItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.TreeViewItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ITreeViewItem {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ITreeViewItem(value!)
        }

    }

    public class ITreeViewItemInvokedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemInvokedEventArgs }

        internal func get_InvokedItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemInvokedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InvokedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemInvokedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemInvokedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ITreeViewItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics }

        internal func get_GlyphOpacityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphOpacityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_GlyphBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ExpandedGlyphPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpandedGlyphProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CollapsedGlyphPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CollapsedGlyphProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_GlyphSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsExpandedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsExpandedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TreeViewItemTemplateSettingsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TreeViewItemTemplateSettingsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITreeViewItemStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics2 }

        internal func get_HasUnrealizedChildrenPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasUnrealizedChildrenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemsSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITreeViewItemTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings }

        internal func get_ExpandedGlyphVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpandedGlyphVisibility(pThis, &value))
            }
            return value
        }

        internal func get_CollapsedGlyphVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CollapsedGlyphVisibility(pThis, &value))
            }
            return value
        }

        internal func get_IndentationImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Indentation(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_DragItemsCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DragItemsCount(pThis, &value))
            }
            return value
        }

    }

    public class ITreeViewItemTemplateSettingsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettingsFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.TreeViewItemTemplateSettings.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ITreeViewItemTemplateSettings {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettingsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ITreeViewItemTemplateSettings(value!)
        }

    }

    public class ITreeViewItemTemplateSettingsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettingsStatics }

        internal func get_ExpandedGlyphVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettingsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpandedGlyphVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CollapsedGlyphVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettingsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CollapsedGlyphVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IndentationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettingsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IndentationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DragItemsCountPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettingsStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DragItemsCountProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITreeViewList: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewList }

    }

    public class ITreeViewListFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewListFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.TreeViewList.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ITreeViewList {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewListFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ITreeViewList(value!)
        }

    }

    public class ITreeViewNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode }

        internal func get_ContentImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_ContentImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, _value))
            }
        }

        internal func get_ParentImpl() throws -> WinUI.TreeViewNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parent(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsExpandedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsExpanded(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsExpandedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsExpanded(pThis, .init(from: value)))
            }
        }

        internal func get_HasChildrenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasChildren(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DepthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Depth(pThis, &value))
            }
            return value
        }

        internal func get_HasUnrealizedChildrenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasUnrealizedChildren(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HasUnrealizedChildrenImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HasUnrealizedChildren(pThis, .init(from: value)))
            }
        }

        internal func get_ChildrenImpl() throws -> WindowsFoundation.AnyIVector<WinUI.TreeViewNode?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Children(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTreeViewNodeWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITreeViewNodeFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNodeFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.TreeViewNode.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ITreeViewNode {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNodeFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ITreeViewNode(value!)
        }

    }

    public class ITreeViewNodeStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNodeStatics }

        internal func get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNodeStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DepthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNodeStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DepthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsExpandedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNodeStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsExpandedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HasChildrenPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNodeStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasChildrenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITreeViewSelectionChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewSelectionChangedEventArgs }

        internal func get_AddedItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewSelectionChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AddedItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal func get_RemovedItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewSelectionChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemovedItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITreeViewStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics }

        internal func get_SelectedItemPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItemProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectionModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITreeViewStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics2 }

        internal func get_CanDragItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDragItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanReorderItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanReorderItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemTemplateSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemContainerStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemContainerStyleSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyleSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemContainerTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemsSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IUIElementCollection: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection }

        internal func MoveImpl(_ oldIndex: UInt32, _ newIndex: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Move(pThis, oldIndex, newIndex))
            }
        }

    }

    public class IUniformGridLayout: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout }

        internal func get_OrientationImpl() throws -> WinUI.Orientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

        internal func put_OrientationImpl(_ value: WinUI.Orientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
            }
        }

        internal func get_MinItemWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinItemWidth(pThis, &value))
            }
            return value
        }

        internal func put_MinItemWidthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinItemWidth(pThis, value))
            }
        }

        internal func get_MinItemHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinItemHeight(pThis, &value))
            }
            return value
        }

        internal func put_MinItemHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinItemHeight(pThis, value))
            }
        }

        internal func get_MinRowSpacingImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinRowSpacing(pThis, &value))
            }
            return value
        }

        internal func put_MinRowSpacingImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinRowSpacing(pThis, value))
            }
        }

        internal func get_MinColumnSpacingImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinColumnSpacing(pThis, &value))
            }
            return value
        }

        internal func put_MinColumnSpacingImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinColumnSpacing(pThis, value))
            }
        }

        internal func get_ItemsJustificationImpl() throws -> WinUI.UniformGridLayoutItemsJustification {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsJustification(pThis, &value))
            }
            return value
        }

        internal func put_ItemsJustificationImpl(_ value: WinUI.UniformGridLayoutItemsJustification) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsJustification(pThis, value))
            }
        }

        internal func get_ItemsStretchImpl() throws -> WinUI.UniformGridLayoutItemsStretch {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsStretch(pThis, &value))
            }
            return value
        }

        internal func put_ItemsStretchImpl(_ value: WinUI.UniformGridLayoutItemsStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsStretch(pThis, value))
            }
        }

        internal func get_MaximumRowsOrColumnsImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumRowsOrColumns(pThis, &value))
            }
            return value
        }

        internal func put_MaximumRowsOrColumnsImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaximumRowsOrColumns(pThis, value))
            }
        }

    }

    public class IUniformGridLayoutFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.UniformGridLayout.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IUniformGridLayout {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IUniformGridLayout(value!)
        }

    }

    public class IUniformGridLayoutStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutStatics }

        internal func get_OrientationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OrientationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MinItemWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinItemWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MinItemHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinItemHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MinRowSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinRowSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MinColumnSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinColumnSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemsJustificationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsJustificationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ItemsStretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsStretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaximumRowsOrColumnsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayoutStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumRowsOrColumnsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IUserControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl }

        internal func get_ContentImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, RawPointer(value)))
            }
        }

    }

    public class IUserControlFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.UserControl.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IUserControl {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IUserControl(value!)
        }

    }

    public class IUserControlStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics }

        internal func get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IVirtualizingLayout: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayout }

    }

    public class IVirtualizingLayoutContext: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext }

        internal func get_ItemCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemCount(pThis, &value))
            }
            return value
        }

        internal func GetItemAtImpl(_ index: Int32) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemAt(pThis, index, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func get_RealizationRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RealizationRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func GetOrCreateElementAtImpl(_ index: Int32) throws -> WinUI.UIElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetOrCreateElementAt(pThis, index, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetOrCreateElementAt2Impl(_ index: Int32, _ options: WinUI.ElementRealizationOptions) throws -> WinUI.UIElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetOrCreateElementAt2(pThis, index, options, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func RecycleElementImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RecycleElement(pThis, RawPointer(element)))
            }
        }

        internal func get_RecommendedAnchorIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RecommendedAnchorIndex(pThis, &value))
            }
            return value
        }

        internal func get_LayoutOriginImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutOrigin(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_LayoutOriginImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LayoutOrigin(pThis, .from(swift: value)))
            }
        }

    }

    public class IVirtualizingLayoutContext2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext2 }

        internal func get_VisibleRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VisibleRect(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IVirtualizingLayoutContextFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.VirtualizingLayoutContext.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IVirtualizingLayoutContext {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IVirtualizingLayoutContext(value!)
        }

    }

    public class IVirtualizingLayoutContextOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides }

        internal func ItemCountCoreImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ItemCountCore(pThis, &result))
            }
            return result
        }

        internal func GetItemAtCoreImpl(_ index: Int32) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemAtCore(pThis, index, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func RealizationRectCoreImpl() throws -> WindowsFoundation.Rect {
            var result: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RealizationRectCore(pThis, &result))
            }
            return .from(abi: result)
        }

        internal func GetOrCreateElementAtCoreImpl(_ index: Int32, _ options: WinUI.ElementRealizationOptions) throws -> WinUI.UIElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetOrCreateElementAtCore(pThis, index, options, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func RecycleElementCoreImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RecycleElementCore(pThis, RawPointer(element)))
            }
        }

        internal func get_RecommendedAnchorIndexCoreImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RecommendedAnchorIndexCore(pThis, &value))
            }
            return value
        }

        internal func get_LayoutOriginCoreImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutOriginCore(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_LayoutOriginCoreImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LayoutOriginCore(pThis, .from(swift: value)))
            }
        }

    }

    public class IVirtualizingLayoutContextOverrides2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides2 }

        internal func VisibleRectCoreImpl() throws -> WindowsFoundation.Rect {
            var result: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.VisibleRectCore(pThis, &result))
            }
            return .from(abi: result)
        }

    }

    public class IVirtualizingLayoutFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.VirtualizingLayout.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IVirtualizingLayout {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IVirtualizingLayout(value!)
        }

    }

    public class IVirtualizingLayoutOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides }

        internal func InitializeForContextCoreImpl(_ context: WinUI.VirtualizingLayoutContext?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InitializeForContextCore(pThis, RawPointer(context)))
            }
        }

        internal func UninitializeForContextCoreImpl(_ context: WinUI.VirtualizingLayoutContext?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.UninitializeForContextCore(pThis, RawPointer(context)))
            }
        }

        internal func MeasureOverrideImpl(_ context: WinUI.VirtualizingLayoutContext?, _ availableSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
            var result: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MeasureOverride(pThis, RawPointer(context), .from(swift: availableSize), &result))
            }
            return .from(abi: result)
        }

        internal func ArrangeOverrideImpl(_ context: WinUI.VirtualizingLayoutContext?, _ finalSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
            var result: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ArrangeOverride(pThis, RawPointer(context), .from(swift: finalSize), &result))
            }
            return .from(abi: result)
        }

        internal func OnItemsChangedCoreImpl(_ context: WinUI.VirtualizingLayoutContext?, _ source: Any?, _ args: WinUI.NotifyCollectionChangedEventArgs?) throws {
            let sourceWrapper = __ABI_.AnyWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemsChangedCore(pThis, RawPointer(context), _source, RawPointer(args)))
            }
        }

    }

    public class IWebView2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2 }

        internal func get_CoreWebView2Impl() throws -> WebView2Core.CoreWebView2? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CoreWebView2(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func EnsureCoreWebView2AsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.EnsureCoreWebView2Async(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func ExecuteScriptAsyncImpl(_ javascriptCode: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _javascriptCode = try! HString(javascriptCode)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ExecuteScriptAsync(pThis, _javascriptCode.get(), &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: operation)
        }

        internal func get_SourceImpl() throws -> WindowsFoundation.Uri? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SourceImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, RawPointer(value)))
            }
        }

        internal func get_CanGoForwardImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoForward(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CanGoForwardImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanGoForward(pThis, .init(from: value)))
            }
        }

        internal func get_CanGoBackImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoBack(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CanGoBackImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanGoBack(pThis, .init(from: value)))
            }
        }

        internal func get_DefaultBackgroundColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultBackgroundColor(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_DefaultBackgroundColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultBackgroundColor(pThis, .from(swift: value)))
            }
        }

        internal func ReloadImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Reload(pThis))
            }
        }

        internal func GoForwardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GoForward(pThis))
            }
        }

        internal func GoBackImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GoBack(pThis))
            }
        }

        internal func NavigateToStringImpl(_ htmlContent: String) throws {
            let _htmlContent = try! HString(htmlContent)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NavigateToString(pThis, _htmlContent.get()))
            }
        }

        internal func CloseImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
            }
        }

        internal func add_NavigationCompletedImpl(_ handler: TypedEventHandler<WinUI.WebView2?, WebView2Core.CoreWebView2NavigationCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NavigationCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NavigationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigationCompleted(pThis, token))
            }
        }

        internal func add_WebMessageReceivedImpl(_ handler: TypedEventHandler<WinUI.WebView2?, WebView2Core.CoreWebView2WebMessageReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2WebMessageReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_WebMessageReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_WebMessageReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_WebMessageReceived(pThis, token))
            }
        }

        internal func add_NavigationStartingImpl(_ handler: TypedEventHandler<WinUI.WebView2?, WebView2Core.CoreWebView2NavigationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NavigationStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NavigationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigationStarting(pThis, token))
            }
        }

        internal func add_CoreProcessFailedImpl(_ handler: TypedEventHandler<WinUI.WebView2?, WebView2Core.CoreWebView2ProcessFailedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ProcessFailedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CoreProcessFailed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CoreProcessFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CoreProcessFailed(pThis, token))
            }
        }

        internal func add_CoreWebView2InitializedImpl(_ handler: TypedEventHandler<WinUI.WebView2?, WinUI.CoreWebView2InitializedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CWebView2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CCoreWebView2InitializedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CoreWebView2Initialized(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CoreWebView2InitializedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CoreWebView2Initialized(pThis, token))
            }
        }

    }

    public class IWebView22: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView22 }

        internal func EnsureCoreWebView2WithEnvironmentAsyncImpl(_ environment: WebView2Core.CoreWebView2Environment?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView22.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.EnsureCoreWebView2WithEnvironmentAsync(pThis, RawPointer(environment), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func EnsureCoreWebView2WithEnvironmentAndOptionsAsyncImpl(_ environment: WebView2Core.CoreWebView2Environment?, _ controllerOptions: WebView2Core.CoreWebView2ControllerOptions?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView22.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.EnsureCoreWebView2WithEnvironmentAndOptionsAsync(pThis, RawPointer(environment), RawPointer(controllerOptions), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IWebView2Factory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Factory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.WebView2.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IWebView2 {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Factory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IWebView2(value!)
        }

    }

    public class IWebView2Statics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics }

        internal func get_SourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanGoForwardPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoForwardProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanGoBackPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoBackProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DefaultBackgroundColorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultBackgroundColorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IXamlControlsResources: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources }

        internal func get_UseCompactResourcesImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseCompactResources(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_UseCompactResourcesImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseCompactResources(pThis, .init(from: value)))
            }
        }

    }

    public class IXamlControlsResourcesStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResourcesStatics }

        internal func EnsureRevealLightsImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResourcesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EnsureRevealLights(pThis, RawPointer(element)))
            }
        }

        internal func get_UseCompactResourcesPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResourcesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseCompactResourcesProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    internal typealias IAppBarOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.AppBar.IAppBarOverrides>
    internal static var IAppBarOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverridesVtbl = .init(
        QueryInterface: { IAppBarOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAppBarOverridesWrapper.addRef($0) },
        Release: { IAppBarOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 7).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IAppBarOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            iids[5] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            iids[6] = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesWrapper.IID
            $1!.pointee = 7
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IAppBarOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnClosed: {
            do {
                guard let __unwrapped__instance = IAppBarOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onClosed(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnOpened: {
            do {
                guard let __unwrapped__instance = IAppBarOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onOpened(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnClosing: {
            do {
                guard let __unwrapped__instance = IAppBarOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onClosing(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnOpening: {
            do {
                guard let __unwrapped__instance = IAppBarOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onOpening(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IComboBoxOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.ComboBox.IComboBoxOverrides>
    internal static var IComboBoxOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverridesVtbl = .init(
        QueryInterface: { IComboBoxOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IComboBoxOverridesWrapper.addRef($0) },
        Release: { IComboBoxOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 7).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            iids[5] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            iids[6] = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesWrapper.IID
            $1!.pointee = 7
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IComboBoxOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnDropDownClosed: {
            do {
                guard let __unwrapped__instance = IComboBoxOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onDropDownClosed(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDropDownOpened: {
            do {
                guard let __unwrapped__instance = IComboBoxOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onDropDownOpened(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IContentControlOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.ContentControl.IContentControlOverrides>
    internal static var IContentControlOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverridesVtbl = .init(
        QueryInterface: { IContentControlOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IContentControlOverridesWrapper.addRef($0) },
        Release: { IContentControlOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            iids[5] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IContentControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnContentChanged: {
            do {
                guard let __unwrapped__instance = IContentControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldContent: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let newContent: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.onContentChanged(oldContent, newContent)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnContentTemplateChanged: {
            do {
                guard let __unwrapped__instance = IContentControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldContentTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($1))
                let newContentTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onContentTemplateChanged(oldContentTemplate, newContentTemplate)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnContentTemplateSelectorChanged: {
            do {
                guard let __unwrapped__instance = IContentControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldContentTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($1))
                let newContentTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onContentTemplateSelectorChanged(oldContentTemplateSelector, newContentTemplateSelector)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IContentPresenterOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.ContentPresenter.IContentPresenterOverrides>
    internal static var IContentPresenterOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverridesVtbl = .init(
        QueryInterface: { IContentPresenterOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IContentPresenterOverridesWrapper.addRef($0) },
        Release: { IContentPresenterOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IContentPresenterOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnContentTemplateChanged: {
            do {
                guard let __unwrapped__instance = IContentPresenterOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldContentTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($1))
                let newContentTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onContentTemplateChanged(oldContentTemplate, newContentTemplate)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnContentTemplateSelectorChanged: {
            do {
                guard let __unwrapped__instance = IContentPresenterOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldContentTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($1))
                let newContentTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onContentTemplateSelectorChanged(oldContentTemplateSelector, newContentTemplateSelector)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IControlOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.Control.IControlOverrides>
    internal static var IControlOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverridesVtbl = .init(
        QueryInterface: { IControlOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IControlOverridesWrapper.addRef($0) },
        Release: { IControlOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnPointerEntered: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerEntered(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerPressed: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerPressed(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerMoved: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerMoved(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerReleased: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerReleased(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerExited: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerExited(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerCaptureLost: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerCaptureLost(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerCanceled: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerCanceled(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerWheelChanged: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerWheelChanged(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnTapped: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.TappedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onTapped(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDoubleTapped: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.DoubleTappedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onDoubleTapped(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnHolding: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.HoldingRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onHolding(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnRightTapped: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.RightTappedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onRightTapped(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnManipulationStarting: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.ManipulationStartingRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onManipulationStarting(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnManipulationInertiaStarting: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.ManipulationInertiaStartingRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onManipulationInertiaStarting(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnManipulationStarted: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.ManipulationStartedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onManipulationStarted(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnManipulationDelta: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.ManipulationDeltaRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onManipulationDelta(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnManipulationCompleted: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.ManipulationCompletedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onManipulationCompleted(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnKeyUp: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.KeyRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onKeyUp(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnKeyDown: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.KeyRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onKeyDown(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPreviewKeyDown: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.KeyRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPreviewKeyDown(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPreviewKeyUp: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.KeyRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPreviewKeyUp(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnGotFocus: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.RoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onGotFocus(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnLostFocus: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.RoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onLostFocus(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnCharacterReceived: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.CharacterReceivedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onCharacterReceived(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDragEnter: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.DragEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onDragEnter(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDragLeave: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.DragEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onDragLeave(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDragOver: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.DragEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onDragOver(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDrop: {
            do {
                guard let __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.DragEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onDrop(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IDataTemplateSelectorOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.DataTemplateSelector.IDataTemplateSelectorOverrides>
    internal static var IDataTemplateSelectorOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverridesVtbl = .init(
        QueryInterface: { IDataTemplateSelectorOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IDataTemplateSelectorOverridesWrapper.addRef($0) },
        Release: { IDataTemplateSelectorOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IDataTemplateSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        SelectTemplateCore: {
            do {
                guard let __unwrapped__instance = IDataTemplateSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let container: WinUI.DependencyObject? = .from(abi: ComPtr($2))
                let result = try __unwrapped__instance.selectTemplateCore(item, container)
                result?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SelectTemplateForItemCore: {
            do {
                guard let __unwrapped__instance = IDataTemplateSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.selectTemplateCore(item)
                result?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IGroupStyleSelectorOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.GroupStyleSelector.IGroupStyleSelectorOverrides>
    internal static var IGroupStyleSelectorOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverridesVtbl = .init(
        QueryInterface: { IGroupStyleSelectorOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IGroupStyleSelectorOverridesWrapper.addRef($0) },
        Release: { IGroupStyleSelectorOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IGroupStyleSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        SelectGroupStyleCore: {
            do {
                guard let __unwrapped__instance = IGroupStyleSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let group: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let level: UInt32 = $2
                let result = try __unwrapped__instance.selectGroupStyleCore(group, level)
                result?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IIconSourceOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.IconSource.IIconSourceOverrides>
    internal static var IIconSourceOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverridesVtbl = .init(
        QueryInterface: { IIconSourceOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IIconSourceOverridesWrapper.addRef($0) },
        Release: { IIconSourceOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IIconSourceOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        CreateIconElementCore: {
            do {
                guard let __unwrapped__instance = IIconSourceOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.createIconElementCore()
                result?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetIconElementPropertyCore: {
            do {
                guard let __unwrapped__instance = IIconSourceOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let iconSourceProperty: WinUI.DependencyProperty? = .from(abi: ComPtr($1))
                let result = try __unwrapped__instance.getIconElementPropertyCore(iconSourceProperty)
                result?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IItemCollectionTransitionProviderOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.ItemCollectionTransitionProvider.IItemCollectionTransitionProviderOverrides>
    internal static var IItemCollectionTransitionProviderOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderOverridesVtbl = .init(
        QueryInterface: { IItemCollectionTransitionProviderOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IItemCollectionTransitionProviderOverridesWrapper.addRef($0) },
        Release: { IItemCollectionTransitionProviderOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IItemCollectionTransitionProviderOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        ShouldAnimateCore: {
            do {
                guard let __unwrapped__instance = IItemCollectionTransitionProviderOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let transition: WinUI.ItemCollectionTransition? = .from(abi: ComPtr($1))
                let result = try __unwrapped__instance.shouldAnimateCore(transition)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        StartTransitions: {
            do {
                guard let __unwrapped__instance = IItemCollectionTransitionProviderOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let transitions: WindowsFoundation.AnyIVector<WinUI.ItemCollectionTransition?>? = WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CItemCollectionTransitionWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.startTransitions(transitions)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IItemsControlOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.ItemsControl.IItemsControlOverrides>
    internal static var IItemsControlOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverridesVtbl = .init(
        QueryInterface: { IItemsControlOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IItemsControlOverridesWrapper.addRef($0) },
        Release: { IItemsControlOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            iids[5] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        IsItemItsOwnContainerOverride: {
            do {
                guard let __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.isItemItsOwnContainerOverride(item)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetContainerForItemOverride: {
            do {
                guard let __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.getContainerForItemOverride()
                result?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ClearContainerForItemOverride: {
            do {
                guard let __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let element: WinUI.DependencyObject? = .from(abi: ComPtr($1))
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.clearContainerForItemOverride(element, item)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        PrepareContainerForItemOverride: {
            do {
                guard let __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let element: WinUI.DependencyObject? = .from(abi: ComPtr($1))
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.prepareContainerForItemOverride(element, item)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemsChanged: {
            do {
                guard let __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onItemsChanged(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemContainerStyleChanged: {
            do {
                guard let __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldItemContainerStyle: WinUI.Style? = .from(abi: ComPtr($1))
                let newItemContainerStyle: WinUI.Style? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onItemContainerStyleChanged(oldItemContainerStyle, newItemContainerStyle)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemContainerStyleSelectorChanged: {
            do {
                guard let __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldItemContainerStyleSelector: WinUI.StyleSelector? = .from(abi: ComPtr($1))
                let newItemContainerStyleSelector: WinUI.StyleSelector? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onItemContainerStyleSelectorChanged(oldItemContainerStyleSelector, newItemContainerStyleSelector)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemTemplateChanged: {
            do {
                guard let __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldItemTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($1))
                let newItemTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onItemTemplateChanged(oldItemTemplate, newItemTemplate)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemTemplateSelectorChanged: {
            do {
                guard let __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldItemTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($1))
                let newItemTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onItemTemplateSelectorChanged(oldItemTemplateSelector, newItemTemplateSelector)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnGroupStyleSelectorChanged: {
            do {
                guard let __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldGroupStyleSelector: WinUI.GroupStyleSelector? = .from(abi: ComPtr($1))
                let newGroupStyleSelector: WinUI.GroupStyleSelector? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onGroupStyleSelectorChanged(oldGroupStyleSelector, newGroupStyleSelector)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias ILayoutOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.Layout.ILayoutOverrides>
    internal static var ILayoutOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutOverridesVtbl = .init(
        QueryInterface: { ILayoutOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { ILayoutOverridesWrapper.addRef($0) },
        Release: { ILayoutOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.ILayoutOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = ILayoutOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        CreateDefaultItemTransitionProvider: {
            do {
                guard let __unwrapped__instance = ILayoutOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.createDefaultItemTransitionProvider()
                result?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias ILayoutContextOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.LayoutContext.ILayoutContextOverrides>
    internal static var ILayoutContextOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContextOverridesVtbl = .init(
        QueryInterface: { ILayoutContextOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { ILayoutContextOverridesWrapper.addRef($0) },
        Release: { ILayoutContextOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = ILayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_LayoutStateCore: {
            guard let __unwrapped__instance = ILayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.layoutStateCore
            let valueWrapper = __ABI_.AnyWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_LayoutStateCore: {
            guard let __unwrapped__instance = ILayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            __unwrapped__instance.layoutStateCore = value
            return S_OK
        }
    )
    internal typealias IPageOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.Page.IPageOverrides>
    internal static var IPageOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageOverridesVtbl = .init(
        QueryInterface: { IPageOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPageOverridesWrapper.addRef($0) },
        Release: { IPageOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IPageOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            iids[5] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IPageOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnNavigatedFrom: {
            do {
                guard let __unwrapped__instance = IPageOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.NavigationEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onNavigatedFrom(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnNavigatedTo: {
            do {
                guard let __unwrapped__instance = IPageOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.NavigationEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onNavigatedTo(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnNavigatingFrom: {
            do {
                guard let __unwrapped__instance = IPageOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let e: WinUI.NavigatingCancelEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onNavigatingFrom(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IStyleSelectorOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.StyleSelector.IStyleSelectorOverrides>
    internal static var IStyleSelectorOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverridesVtbl = .init(
        QueryInterface: { IStyleSelectorOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStyleSelectorOverridesWrapper.addRef($0) },
        Release: { IStyleSelectorOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IStyleSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        SelectStyleCore: {
            do {
                guard let __unwrapped__instance = IStyleSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let container: WinUI.DependencyObject? = .from(abi: ComPtr($2))
                let result = try __unwrapped__instance.selectStyleCore(item, container)
                result?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IVirtualizingLayoutOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.VirtualizingLayout.IVirtualizingLayoutOverrides>
    internal static var IVirtualizingLayoutOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverridesVtbl = .init(
        QueryInterface: { IVirtualizingLayoutOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IVirtualizingLayoutOverridesWrapper.addRef($0) },
        Release: { IVirtualizingLayoutOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml_Controls.ILayoutOverridesWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IVirtualizingLayoutOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        InitializeForContextCore: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let context: WinUI.VirtualizingLayoutContext? = .from(abi: ComPtr($1))
                try __unwrapped__instance.initializeForContextCore(context)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        UninitializeForContextCore: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let context: WinUI.VirtualizingLayoutContext? = .from(abi: ComPtr($1))
                try __unwrapped__instance.uninitializeForContextCore(context)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        MeasureOverride: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let context: WinUI.VirtualizingLayoutContext? = .from(abi: ComPtr($1))
                let availableSize: WindowsFoundation.Size = .from(abi: $2)
                let result = try __unwrapped__instance.measureOverride(context, availableSize)
                $3?.initialize(to: .from(swift: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ArrangeOverride: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let context: WinUI.VirtualizingLayoutContext? = .from(abi: ComPtr($1))
                let finalSize: WindowsFoundation.Size = .from(abi: $2)
                let result = try __unwrapped__instance.arrangeOverride(context, finalSize)
                $3?.initialize(to: .from(swift: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemsChangedCore: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let context: WinUI.VirtualizingLayoutContext? = .from(abi: ComPtr($1))
                let source: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                let args: WinUI.NotifyCollectionChangedEventArgs? = .from(abi: ComPtr($3))
                try __unwrapped__instance.onItemsChangedCore(context, source, args)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IVirtualizingLayoutContextOverrides2Wrapper = UnsealedWinRTClassWrapper<WinUI.VirtualizingLayoutContext.IVirtualizingLayoutContextOverrides2>
    internal static var IVirtualizingLayoutContextOverrides2VTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides2Vtbl = .init(
        QueryInterface: { IVirtualizingLayoutContextOverrides2Wrapper.queryInterface($0, $1, $2) },
        AddRef: { IVirtualizingLayoutContextOverrides2Wrapper.addRef($0) },
        Release: { IVirtualizingLayoutContextOverrides2Wrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2Wrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverridesWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IVirtualizingLayoutContextOverrides2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        VisibleRectCore: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutContextOverrides2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.visibleRectCore()
                $1?.initialize(to: .from(swift: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IVirtualizingLayoutContextOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.VirtualizingLayoutContext.IVirtualizingLayoutContextOverrides>
    internal static var IVirtualizingLayoutContextOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverridesVtbl = .init(
        QueryInterface: { IVirtualizingLayoutContextOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IVirtualizingLayoutContextOverridesWrapper.addRef($0) },
        Release: { IVirtualizingLayoutContextOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2Wrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IVirtualizingLayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        ItemCountCore: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.itemCountCore()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetItemAtCore: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: Int32 = $1
                let result = try __unwrapped__instance.getItemAtCore(index)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        RealizationRectCore: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.realizationRectCore()
                $1?.initialize(to: .from(swift: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetOrCreateElementAtCore: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: Int32 = $1
                let options: WinUI.ElementRealizationOptions = $2
                let result = try __unwrapped__instance.getOrCreateElementAtCore(index, options)
                result?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        RecycleElementCore: {
            do {
                guard let __unwrapped__instance = IVirtualizingLayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let element: WinUI.UIElement? = .from(abi: ComPtr($1))
                try __unwrapped__instance.recycleElementCore(element)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_RecommendedAnchorIndexCore: {
            guard let __unwrapped__instance = IVirtualizingLayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.recommendedAnchorIndexCore
            $1?.initialize(to: value)
            return S_OK
        },

        get_LayoutOriginCore: {
            guard let __unwrapped__instance = IVirtualizingLayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.layoutOriginCore
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        put_LayoutOriginCore: {
            guard let __unwrapped__instance = IVirtualizingLayoutContextOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WindowsFoundation.Point = .from(abi: $1)
            __unwrapped__instance.layoutOriginCore = value
            return S_OK
        }
    )
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IAppBarOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IControlOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.ILayoutOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContextOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IPageOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides2 {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
// MARK - ContextMenuOpeningEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class ContextMenuOpeningEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.ContextMenuEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias ContextMenuOpeningEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandlerBridge>
    internal static var ContextMenuOpeningEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandlerVtbl = .init(
        QueryInterface: { ContextMenuOpeningEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ContextMenuOpeningEventHandlerWrapper.addRef($0) },
        Release: { ContextMenuOpeningEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = ContextMenuOpeningEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.ContextMenuEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - DragItemsStartingEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class DragItemsStartingEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.DragItemsStartingEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias DragItemsStartingEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.DragItemsStartingEventHandlerBridge>
    internal static var DragItemsStartingEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandlerVtbl = .init(
        QueryInterface: { DragItemsStartingEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { DragItemsStartingEventHandlerWrapper.addRef($0) },
        Release: { DragItemsStartingEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = DragItemsStartingEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.DragItemsStartingEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.DragItemsStartingEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - ItemClickEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class ItemClickEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.ItemClickEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias ItemClickEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.ItemClickEventHandlerBridge>
    internal static var ItemClickEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandlerVtbl = .init(
        QueryInterface: { ItemClickEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ItemClickEventHandlerWrapper.addRef($0) },
        Release: { ItemClickEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = ItemClickEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.ItemClickEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.ItemClickEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - SelectionChangedEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class SelectionChangedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.SelectionChangedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias SelectionChangedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.SelectionChangedEventHandlerBridge>
    internal static var SelectionChangedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandlerVtbl = .init(
        QueryInterface: { SelectionChangedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { SelectionChangedEventHandlerWrapper.addRef($0) },
        Release: { SelectionChangedEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = SelectionChangedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.SelectionChangedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.SelectionChangedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - SemanticZoomViewChangedEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class SemanticZoomViewChangedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.SemanticZoomViewChangedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias SemanticZoomViewChangedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.SemanticZoomViewChangedEventHandlerBridge>
    internal static var SemanticZoomViewChangedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandlerVtbl = .init(
        QueryInterface: { SemanticZoomViewChangedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { SemanticZoomViewChangedEventHandlerWrapper.addRef($0) },
        Release: { SemanticZoomViewChangedEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = SemanticZoomViewChangedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.SemanticZoomViewChangedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.SemanticZoomViewChangedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - TextChangedEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class TextChangedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.TextChangedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias TextChangedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.TextChangedEventHandlerBridge>
    internal static var TextChangedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandlerVtbl = .init(
        QueryInterface: { TextChangedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { TextChangedEventHandlerWrapper.addRef($0) },
        Release: { TextChangedEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = TextChangedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.TextChangedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.TextChangedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - TextControlPasteEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class TextControlPasteEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.TextControlPasteEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias TextControlPasteEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.TextControlPasteEventHandlerBridge>
    internal static var TextControlPasteEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandlerVtbl = .init(
        QueryInterface: { TextControlPasteEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { TextControlPasteEventHandlerWrapper.addRef($0) },
        Release: { TextControlPasteEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = TextControlPasteEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.TextControlPasteEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.TextControlPasteEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


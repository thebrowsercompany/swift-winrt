// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0xFE60E73F, Data2: 0x9A52, Data3: 0x5E0A, Data4: ( 0xB7,0x38,0x42,0x6F,0x97,0xD0,0x97,0x68 ))// FE60E73F-9A52-5E0A-B738-426F97D09768
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase: WindowsFoundation.IID {
    .init(Data1: 0x65714269, Data2: 0x2473, Data3: 0x5327, Data4: ( 0xA6,0x52,0x0E,0xA6,0xBC,0xE7,0xF4,0x03 ))// 65714269-2473-5327-A652-0EA6BCE7F403
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x21251AA9, Data2: 0x6FD1, Data3: 0x5E51, Data4: ( 0xAB,0x3B,0xE6,0xFC,0xAF,0x33,0x95,0xED ))// 21251AA9-6FD1-5E51-AB3B-E6FCAF3395ED
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics: WindowsFoundation.IID {
    .init(Data1: 0xDBE812F6, Data2: 0xADF8, Data3: 0x51D3, Data4: ( 0x81,0x37,0xA8,0xFB,0xF6,0x44,0x5B,0x3C ))// DBE812F6-ADF8-51D3-8137-A8FBF6445B3C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIComboBoxTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0xF2DC5E7F, Data2: 0x8D3F, Data3: 0x5C20, Data4: ( 0xB3,0x56,0xAF,0x6F,0x1F,0xF8,0x24,0x2A ))// F2DC5E7F-8D3F-5C20-B356-AF6F1FF8242A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase: WindowsFoundation.IID {
    .init(Data1: 0xBB6603BF, Data2: 0x744D, Data3: 0x5C31, Data4: ( 0xA8,0x7D,0x74,0x43,0x94,0x63,0x4D,0x77 ))// BB6603BF-744D-5C31-A87D-744394634D77
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase2: WindowsFoundation.IID {
    .init(Data1: 0x54592F97, Data2: 0xE40E, Data3: 0x5CAD, Data4: ( 0x86,0x4B,0x32,0x30,0x7D,0x04,0x70,0x20 ))// 54592F97-E40E-5CAD-864B-32307D047020
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x7CB280B4, Data2: 0x1CCA, Data3: 0x5A5A, Data4: ( 0x8E,0xA4,0x19,0x1A,0x2B,0xBC,0x8B,0x32 ))// 7CB280B4-1CCA-5A5A-8EA4-191A2BBC8B32
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x006D738F, Data2: 0x7C91, Data3: 0x5EF3, Data4: ( 0x8A,0x80,0xA5,0x48,0x10,0x8D,0xAB,0x8B ))// 006D738F-7C91-5EF3-8A80-A548108DAB8B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides: WindowsFoundation.IID {
    .init(Data1: 0x5BB19ED8, Data2: 0x08DE, Data3: 0x5EEC, Data4: ( 0x91,0xCB,0x5F,0xC5,0x99,0x74,0xE8,0x94 ))// 5BB19ED8-08DE-5EEC-91CB-5FC59974E894
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics: WindowsFoundation.IID {
    .init(Data1: 0x63EE628E, Data2: 0xD2E3, Data3: 0x5515, Data4: ( 0xAE,0xA4,0xE4,0x61,0x08,0x8C,0x0C,0x4E ))// 63EE628E-D2E3-5515-AEA4-E461088C0C4E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics2: WindowsFoundation.IID {
    .init(Data1: 0x2403CD2C, Data2: 0xA6B8, Data3: 0x5DC2, Data4: ( 0xBE,0x3B,0x2A,0x4B,0xDD,0x07,0x2E,0xF1 ))// 2403CD2C-A6B8-5DC2-BE3B-2A4BDD072EF1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions: WindowsFoundation.IID {
    .init(Data1: 0x30774A93, Data2: 0x2803, Data3: 0x50D3, Data4: ( 0xB4,0x06,0x90,0x4A,0xEC,0x3E,0x17,0x5D ))// 30774A93-2803-50D3-B406-904AEC3E175D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptionsFactory: WindowsFoundation.IID {
    .init(Data1: 0x17426D30, Data2: 0x70D9, Data3: 0x54D7, Data4: ( 0xBD,0x39,0xE7,0xC4,0xC9,0x40,0xC0,0xF4 ))// 17426D30-70D9-54D7-BD39-E7C4C940C0F4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB2BA1610, Data2: 0x0E96, Data3: 0x538A, Data4: ( 0x97,0x8F,0xEC,0x0B,0x37,0x19,0x32,0x28 ))// B2BA1610-0E96-538A-978F-EC0B37193228
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIListViewItemTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0x6E302714, Data2: 0x2955, Data3: 0x5961, Data4: ( 0x94,0xED,0x5D,0x0C,0x0C,0x1D,0x0B,0x07 ))// 6E302714-2955-5961-94ED-5D0C0C1D0B07
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIMenuFlyoutItemTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0xFA7B8B1F, Data2: 0x020D, Data3: 0x58EC, Data4: ( 0x86,0x58,0xF2,0xCE,0x97,0x31,0x00,0x51 ))// FA7B8B1F-020D-58EC-8658-F2CE97310051
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup: WindowsFoundation.IID {
    .init(Data1: 0x4E3AB19D, Data2: 0x2F95, Data3: 0x579C, Data4: ( 0x95,0x35,0x90,0x6C,0x58,0x62,0x94,0x37 ))// 4E3AB19D-2F95-579C-9535-906C58629437
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup2: WindowsFoundation.IID {
    .init(Data1: 0xEA9C4F43, Data2: 0xA937, Data3: 0x53D5, Data4: ( 0xB6,0x65,0x66,0x40,0xAD,0x7E,0xC2,0xF4 ))// EA9C4F43-A937-53D5-B665-6640AD7EC2F4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup3: WindowsFoundation.IID {
    .init(Data1: 0x03736C25, Data2: 0xDD36, Data3: 0x5344, Data4: ( 0x9A,0x8D,0x3F,0x4E,0x8E,0x61,0x6C,0xBA ))// 03736C25-DD36-5344-9A8D-3F4E8E616CBA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics: WindowsFoundation.IID {
    .init(Data1: 0xC1ACFAA4, Data2: 0x209A, Data3: 0x5FB8, Data4: ( 0x89,0x34,0x88,0x25,0x97,0x67,0x69,0xB8 ))// C1ACFAA4-209A-5FB8-8934-8825976769B8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics2: WindowsFoundation.IID {
    .init(Data1: 0x79B3285A, Data2: 0x1330, Data3: 0x5CFD, Data4: ( 0xAF,0x2F,0x88,0xEF,0xA0,0x07,0x70,0xA9 ))// 79B3285A-1330-5CFD-AF2F-88EFA00770A9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics3: WindowsFoundation.IID {
    .init(Data1: 0x2409656D, Data2: 0x84F9, Data3: 0x5979, Data4: ( 0x8A,0xDF,0xF3,0xDB,0x71,0x53,0x0B,0x22 ))// 2409656D-84F9-5979-8ADF-F3DB71530B22
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase: WindowsFoundation.IID {
    .init(Data1: 0x540D6D61, Data2: 0x8FAC, Data3: 0x5D5C, Data4: ( 0xB5,0xB0,0xE1,0x72,0xA7,0xDD,0xE1,0x03 ))// 540D6D61-8FAC-5D5C-B5B0-E172A7DDE103
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x41C205E2, Data2: 0x4422, Data3: 0x5DCA, Data4: ( 0x9B,0x49,0xE3,0x12,0x10,0xEA,0x39,0x6C ))// 41C205E2-4422-5DCA-9B49-E31210EA396C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides: WindowsFoundation.IID {
    .init(Data1: 0xB3DEB76F, Data2: 0x68A6, Data3: 0x5C14, Data4: ( 0xA8,0x24,0xAB,0x58,0xE8,0x77,0x47,0x45 ))// B3DEB76F-68A6-5C14-A824-AB58E8774745
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics: WindowsFoundation.IID {
    .init(Data1: 0x4AED5E49, Data2: 0x64EC, Data3: 0x56F1, Data4: ( 0x87,0x4D,0xB8,0xC0,0xF8,0x3F,0x9A,0xC8 ))// 4AED5E49-64EC-56F1-874D-B8C0F83F9AC8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB0181692, Data2: 0x9578, Data3: 0x51C7, Data4: ( 0x9D,0x1C,0xAD,0xFC,0xF8,0x94,0x5A,0xA9 ))// B0181692-9578-51C7-9D1C-ADFCF8945AA9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController: WindowsFoundation.IID {
    .init(Data1: 0x54396786, Data2: 0x1726, Data3: 0x53D6, Data4: ( 0x97,0xA3,0x40,0xAF,0x08,0x38,0x31,0x4C ))// 54396786-1726-53D6-97A3-40AF0838314C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x317BBC1A, Data2: 0x0CF7, Data3: 0x5815, Data4: ( 0xA8,0xA7,0xBD,0x7E,0x6E,0xEF,0x96,0x6A ))// 317BBC1A-0CF7-5815-A8A7-BD7E6EEF966A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0x9221D193, Data2: 0x6F82, Data3: 0x5E21, Data4: ( 0xAA,0xCC,0x0B,0x14,0x60,0x81,0x8A,0xB5 ))// 9221D193-6F82-5E21-AACC-0B1460818AB5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xBEEE064E, Data2: 0x1D4D, Data3: 0x5A1A, Data4: ( 0x87,0x81,0xAC,0xF1,0x58,0x7A,0x5D,0x6A ))// BEEE064E-1D4D-5A1A-8781-ACF1587A5D6A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0xC3B0A6C1, Data2: 0x6732, Data3: 0x5832, Data4: ( 0xBE,0x50,0x4E,0xCA,0xDE,0x58,0x5C,0xBC ))// C3B0A6C1-6732-5832-BE50-4ECADE585CBC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo: WindowsFoundation.IID {
    .init(Data1: 0x53D5B301, Data2: 0x9AAB, Data3: 0x59BC, Data4: ( 0x92,0xCD,0x42,0xCF,0x21,0xAB,0xD5,0x90 ))// 53D5B301-9AAB-59BC-92CD-42CF21ABD590
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xE7F305FA, Data2: 0x4073, Data3: 0x5D88, Data4: ( 0x8B,0xF1,0xAE,0x4E,0xCB,0x92,0x08,0xBF ))// E7F305FA-4073-5D88-8BF1-AE4ECB9208BF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0x7ECF01A7, Data2: 0xEF3F, Data3: 0x5AF9, Data4: ( 0x93,0xB4,0x38,0xBC,0x1B,0xAF,0xD3,0x35 ))// 7ECF01A7-EF3F-5AF9-93B4-38BC1BAFD335
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x73F16B99, Data2: 0x7310, Data3: 0x5C73, Data4: ( 0x87,0x2B,0x27,0x6E,0x5A,0x9D,0x49,0x13 ))// 73F16B99-7310-5C73-872B-276E5A9D4913
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0x01675DC4, Data2: 0x1074, Data3: 0x54E8, Data4: ( 0xBE,0xBB,0x66,0xB0,0x3A,0x33,0xDA,0x0D ))// 01675DC4-1074-54E8-BEBB-66B03A33DA0D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter: WindowsFoundation.IID {
    .init(Data1: 0x424B8AFD, Data2: 0xF7AA, Data3: 0x5E5B, Data4: ( 0x9D,0x0B,0x5F,0x0E,0xA4,0xE1,0xA5,0x6E ))// 424B8AFD-F7AA-5E5B-9D0B-5F0EA4E1A56E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterFactory: WindowsFoundation.IID {
    .init(Data1: 0x9F5CDC57, Data2: 0xD229, Data3: 0x52B2, Data4: ( 0xAE,0xE4,0x37,0xC4,0x96,0x76,0x4E,0xA3 ))// 9F5CDC57-D229-52B2-AEE4-37C496764EA3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics: WindowsFoundation.IID {
    .init(Data1: 0xE27BA947, Data2: 0xF8A5, Data3: 0x5869, Data4: ( 0x9A,0x71,0xCD,0x51,0x4D,0x41,0xC6,0x23 ))// E27BA947-F8A5-5869-9A71-CD514D41C623
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointBase: WindowsFoundation.IID {
    .init(Data1: 0x45D7319D, Data2: 0xC9EB, Data3: 0x5109, Data4: ( 0x96,0x68,0xFF,0x3F,0xC6,0xCC,0xDF,0x11 ))// 45D7319D-C9EB-5109-9668-FF3FC6CCDF11
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x3FA2E552, Data2: 0x1A45, Data3: 0x5691, Data4: ( 0x99,0xDC,0x64,0x00,0x08,0x7C,0xBB,0x38 ))// 3FA2E552-1A45-5691-99DC-6400087CBB38
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo: WindowsFoundation.IID {
    .init(Data1: 0xD3EA6E09, Data2: 0xECF7, Data3: 0x51A8, Data4: ( 0xBD,0x54,0xFC,0x84,0xB9,0x65,0x37,0x66 ))// D3EA6E09-ECF7-51A8-BD54-FC84B9653766
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector: WindowsFoundation.IID {
    .init(Data1: 0x8F7E2159, Data2: 0xE61D, Data3: 0x576F, Data4: ( 0x84,0x76,0xF8,0x3F,0xDE,0x3D,0x68,0x9E ))// 8F7E2159-E61D-576F-8476-F83FDE3D689E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorFactory: WindowsFoundation.IID {
    .init(Data1: 0x21A42024, Data2: 0xAF07, Data3: 0x58F9, Data4: ( 0x87,0x89,0x84,0x8D,0x33,0x24,0xD9,0x01 ))// 21A42024-AF07-58F9-8789-848D3324D901
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItem: WindowsFoundation.IID {
    .init(Data1: 0x5772C4DE, Data2: 0x60EA, Data3: 0x5492, Data4: ( 0x8C,0x5E,0xB3,0x32,0x3D,0x5A,0x3C,0xA6 ))// 5772C4DE-60EA-5492-8C5E-B3323D5A3CA6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x078039F5, Data2: 0x76ED, Data3: 0x5299, Data4: ( 0x97,0x15,0xFC,0x8C,0x58,0x17,0x35,0x60 ))// 078039F5-76ED-5299-9715-FC8C58173560
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItemStatics: WindowsFoundation.IID {
    .init(Data1: 0x4B201A54, Data2: 0xA414, Data3: 0x5E79, Data4: ( 0x9B,0x6B,0x3D,0xA9,0xDE,0x44,0x2A,0x35 ))// 4B201A54-A414-5E79-9B6B-3DA9DE442A35
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorStatics: WindowsFoundation.IID {
    .init(Data1: 0x569B2234, Data2: 0x1CEB, Data3: 0x516E, Data4: ( 0xB6,0x4E,0x0D,0x47,0x94,0x52,0xE2,0x79 ))// 569B2234-1CEB-516E-B64E-0D479452E279
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISnapPointBase: WindowsFoundation.IID {
    .init(Data1: 0x14ED1089, Data2: 0xFB97, Data3: 0x5211, Data4: ( 0x8C,0x45,0xC3,0x52,0xCD,0x8B,0x96,0xA1 ))// 14ED1089-FB97-5211-8C45-C352CD8B96A1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISnapPointBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x50266508, Data2: 0x15F8, Data3: 0x530A, Data4: ( 0xA2,0x13,0xE9,0x76,0xE0,0x4E,0x67,0x0B ))// 50266508-15F8-530A-A213-E976E04E670B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0x44D6F6F7, Data2: 0x0058, Data3: 0x5EAC, Data4: ( 0x88,0x37,0xF7,0xF1,0x6D,0x96,0x1F,0x7C ))// 44D6F6F7-0058-5EAC-8837-F7F16D961F7C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton: WindowsFoundation.IID {
    .init(Data1: 0x686FBAA4, Data2: 0xC866, Data3: 0x568B, Data4: ( 0x8F,0x75,0x48,0x1D,0x8D,0x54,0x52,0x91 ))// 686FBAA4-C866-568B-8F75-481D8D545291
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonFactory: WindowsFoundation.IID {
    .init(Data1: 0x519511BB, Data2: 0xD35B, Data3: 0x5E2D, Data4: ( 0x96,0x6C,0x83,0x69,0x40,0x5A,0x44,0x08 ))// 519511BB-D35B-5E2D-966C-8369405A4408
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides: WindowsFoundation.IID {
    .init(Data1: 0xEE55F85D, Data2: 0x9061, Data3: 0x5D18, Data4: ( 0xB3,0x1A,0x90,0xBC,0x56,0x25,0xCF,0xE9 ))// EE55F85D-9061-5D18-B31A-90BC5625CFE9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonStatics: WindowsFoundation.IID {
    .init(Data1: 0x4B8397E3, Data2: 0x76FD, Data3: 0x59DF, Data4: ( 0x82,0x4F,0x40,0xAE,0x33,0x9F,0xB0,0x0B ))// 4B8397E3-76FD-59DF-824F-40AE339FB00B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0x8F9640A3, Data2: 0xAA4E, Data3: 0x52DA, Data4: ( 0xA2,0xC6,0x91,0x67,0xC8,0x00,0xBA,0xBA ))// 8F9640A3-AA4E-52DA-A2C6-9167C800BABA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToolTipTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0x4F725950, Data2: 0xFF64, Data3: 0x5CF1, Data4: ( 0x9E,0x86,0x90,0x11,0xFB,0x10,0xE8,0x8E ))// 4F725950-FF64-5CF1-9E86-9011FB10E88E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIZoomSnapPointBase: WindowsFoundation.IID {
    .init(Data1: 0xC6D08756, Data2: 0x0860, Data3: 0x5C2D, Data4: ( 0xAB,0xEC,0x6E,0xB4,0xAA,0x4B,0x53,0xD7 ))// C6D08756-0860-5C2D-ABEC-6EB4AA4B53D7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIZoomSnapPointBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x2C689EEA, Data2: 0xB6CF, Data3: 0x5024, Data4: ( 0x84,0x7B,0x58,0x93,0x55,0xD5,0xA2,0xFA ))// 2C689EEA-B6CF-5024-847B-589355D5A2FA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x8E15E39E, Data2: 0x23F7, Data3: 0x5FCF, Data4: ( 0xB0,0x4B,0xD1,0xB7,0x89,0x1D,0xCC,0xC4 ))// 8E15E39E-23F7-5FCF-B04B-D1B7891DCCC4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x23F0E209, Data2: 0x9455, Data3: 0x54CB, Data4: ( 0xB8,0xBC,0x0B,0x49,0x55,0x3C,0x7D,0xCC ))// 23F0E209-9455-54CB-B8BC-0B49553C7DCC
}

public enum __ABI_Microsoft_UI_Xaml_Controls_Primitives {
    public class IAppBarTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings }

        internal func get_ClipRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClipRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_CompactVerticalDeltaImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactVerticalDelta(pThis, &value))
            }
            return value
        }

        internal func get_CompactRootMarginImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactRootMargin(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_MinimalVerticalDeltaImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinimalVerticalDelta(pThis, &value))
            }
            return value
        }

        internal func get_MinimalRootMarginImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinimalRootMargin(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_HiddenVerticalDeltaImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HiddenVerticalDelta(pThis, &value))
            }
            return value
        }

        internal func get_HiddenRootMarginImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HiddenRootMargin(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_NegativeCompactVerticalDeltaImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NegativeCompactVerticalDelta(pThis, &value))
            }
            return value
        }

        internal func get_NegativeMinimalVerticalDeltaImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NegativeMinimalVerticalDelta(pThis, &value))
            }
            return value
        }

        internal func get_NegativeHiddenVerticalDeltaImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIAppBarTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NegativeHiddenVerticalDelta(pThis, &value))
            }
            return value
        }

    }

    public class IButtonBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase }

        internal func get_ClickModeImpl() throws -> WinUI.ClickMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClickMode(pThis, &value))
            }
            return value
        }

        internal func put_ClickModeImpl(_ value: WinUI.ClickMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClickMode(pThis, value))
            }
        }

        internal func get_IsPointerOverImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPointerOver(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsPressedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPressed(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CommandImpl() throws -> WinUI.AnyICommand? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Command(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal func put_CommandImpl(_ value: WinUI.AnyICommand?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Command(pThis, _value))
            }
        }

        internal func get_CommandParameterImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_CommandParameterImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommandParameter(pThis, _value))
            }
        }

        internal func add_ClickImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Click(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Click(pThis, token))
            }
        }

    }

    public class IButtonBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ButtonBase.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IButtonBase {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IButtonBase(value!)
        }

    }

    public class IButtonBaseStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics }

        internal func get_ClickModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClickModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsPointerOverPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPointerOverProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsPressedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPressedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IComboBoxTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIComboBoxTemplateSettings }

        internal func get_DropDownOpenedHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIComboBoxTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DropDownOpenedHeight(pThis, &value))
            }
            return value
        }

        internal func get_DropDownClosedHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIComboBoxTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DropDownClosedHeight(pThis, &value))
            }
            return value
        }

        internal func get_DropDownOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIComboBoxTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DropDownOffset(pThis, &value))
            }
            return value
        }

        internal func get_SelectedItemDirectionImpl() throws -> WinUI.AnimationDirection {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CAnimationDirection = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIComboBoxTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItemDirection(pThis, &value))
            }
            return value
        }

        internal func get_DropDownContentMinWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIComboBoxTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DropDownContentMinWidth(pThis, &value))
            }
            return value
        }

    }

    public class IFlyoutBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase }

        internal func get_PlacementImpl() throws -> WinUI.FlyoutPlacementMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Placement(pThis, &value))
            }
            return value
        }

        internal func put_PlacementImpl(_ value: WinUI.FlyoutPlacementMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Placement(pThis, value))
            }
        }

        internal func get_TargetImpl() throws -> WinUI.FrameworkElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Target(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AllowFocusOnInteractionImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowFocusOnInteraction(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AllowFocusOnInteractionImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowFocusOnInteraction(pThis, .init(from: value)))
            }
        }

        internal func get_LightDismissOverlayModeImpl() throws -> WinUI.LightDismissOverlayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayMode(pThis, &value))
            }
            return value
        }

        internal func put_LightDismissOverlayModeImpl(_ value: WinUI.LightDismissOverlayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightDismissOverlayMode(pThis, value))
            }
        }

        internal func get_AllowFocusWhenDisabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowFocusWhenDisabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AllowFocusWhenDisabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowFocusWhenDisabled(pThis, .init(from: value)))
            }
        }

        internal func get_ShowModeImpl() throws -> WinUI.FlyoutShowMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutShowMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowMode(pThis, &value))
            }
            return value
        }

        internal func put_ShowModeImpl(_ value: WinUI.FlyoutShowMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowMode(pThis, value))
            }
        }

        internal func get_InputDevicePrefersPrimaryCommandsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputDevicePrefersPrimaryCommands(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AreOpenCloseAnimationsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreOpenCloseAnimationsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AreOpenCloseAnimationsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AreOpenCloseAnimationsEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_ShouldConstrainToRootBoundsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldConstrainToRootBounds(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShouldConstrainToRootBoundsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShouldConstrainToRootBounds(pThis, .init(from: value)))
            }
        }

        internal func get_IsConstrainedToRootBoundsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsConstrainedToRootBounds(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ElementSoundModeImpl() throws -> WinUI.ElementSoundMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundMode(pThis, &value))
            }
            return value
        }

        internal func put_ElementSoundModeImpl(_ value: WinUI.ElementSoundMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ElementSoundMode(pThis, value))
            }
        }

        internal func get_OverlayInputPassThroughElementImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OverlayInputPassThroughElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_OverlayInputPassThroughElementImpl(_ value: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OverlayInputPassThroughElement(pThis, RawPointer(value)))
            }
        }

        internal func get_IsOpenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_XamlRootImpl() throws -> WinUI.XamlRoot? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_XamlRoot(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_XamlRootImpl(_ value: WinUI.XamlRoot?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XamlRoot(pThis, RawPointer(value)))
            }
        }

        internal func add_OpenedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Opened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Opened(pThis, token))
            }
        }

        internal func add_ClosedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
            }
        }

        internal func add_OpeningImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Opening(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Opening(pThis, token))
            }
        }

        internal func add_ClosingImpl(_ handler: TypedEventHandler<WinUI.FlyoutBase?, WinUI.FlyoutBaseClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CFlyoutBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CFlyoutBaseClosingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closing(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closing(pThis, token))
            }
        }

        internal func ShowAtImpl(_ placementTarget: WinUI.FrameworkElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowAt(pThis, RawPointer(placementTarget)))
            }
        }

        internal func ShowAtWithOptionsImpl(_ placementTarget: WinUI.DependencyObject?, _ showOptions: WinUI.FlyoutShowOptions?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowAtWithOptions(pThis, RawPointer(placementTarget), RawPointer(showOptions)))
            }
        }

        internal func HideImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Hide(pThis))
            }
        }

        internal func TryInvokeKeyboardAcceleratorImpl(_ args: WinUI.ProcessKeyboardAcceleratorEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryInvokeKeyboardAccelerator(pThis, RawPointer(args)))
            }
        }

    }

    public class IFlyoutBase2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase2 }

        internal func get_SystemBackdropImpl() throws -> WinUI.SystemBackdrop? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemBackdrop(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SystemBackdropImpl(_ value: WinUI.SystemBackdrop?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SystemBackdrop(pThis, RawPointer(value)))
            }
        }

    }

    public class IFlyoutBaseClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseClosingEventArgs }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class IFlyoutBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.FlyoutBase.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFlyoutBase {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFlyoutBase(value!)
        }

    }

    public class IFlyoutBaseOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides }

        internal func CreatePresenterImpl() throws -> WinUI.Control? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePresenter(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func OnProcessKeyboardAcceleratorsImpl(_ args: WinUI.ProcessKeyboardAcceleratorEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnProcessKeyboardAccelerators(pThis, RawPointer(args)))
            }
        }

    }

    public class IFlyoutBaseStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics }

        internal func get_TargetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlacementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AllowFocusOnInteractionPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowFocusOnInteractionProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LightDismissOverlayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AllowFocusWhenDisabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowFocusWhenDisabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ShowModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_InputDevicePrefersPrimaryCommandsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputDevicePrefersPrimaryCommandsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AreOpenCloseAnimationsEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreOpenCloseAnimationsEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ShouldConstrainToRootBoundsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldConstrainToRootBoundsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ElementSoundModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OverlayInputPassThroughElementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OverlayInputPassThroughElementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AttachedFlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AttachedFlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAttachedFlyoutImpl(_ element: WinUI.FrameworkElement?) throws -> WinUI.FlyoutBase? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAttachedFlyout(pThis, RawPointer(element), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func SetAttachedFlyoutImpl(_ element: WinUI.FrameworkElement?, _ value: WinUI.FlyoutBase?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAttachedFlyout(pThis, RawPointer(element), RawPointer(value)))
            }
        }

        internal func ShowAttachedFlyoutImpl(_ flyoutOwner: WinUI.FrameworkElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowAttachedFlyout(pThis, RawPointer(flyoutOwner)))
            }
        }

    }

    public class IFlyoutBaseStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics2 }

        internal func get_SystemBackdropPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemBackdropProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFlyoutShowOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions }

        internal func get_PositionImpl() throws -> WindowsFoundation.Point? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointWrapper.unwrapFrom(abi: value)
        }

        internal func put_PositionImpl(_ value: WindowsFoundation.Point?) throws {
            let valueWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Position(pThis, _value))
            }
        }

        internal func get_ExclusionRectImpl() throws -> WindowsFoundation.Rect? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExclusionRect(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.unwrapFrom(abi: value)
        }

        internal func put_ExclusionRectImpl(_ value: WindowsFoundation.Rect?) throws {
            let valueWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExclusionRect(pThis, _value))
            }
        }

        internal func get_ShowModeImpl() throws -> WinUI.FlyoutShowMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutShowMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowMode(pThis, &value))
            }
            return value
        }

        internal func put_ShowModeImpl(_ value: WinUI.FlyoutShowMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowMode(pThis, value))
            }
        }

        internal func get_PlacementImpl() throws -> WinUI.FlyoutPlacementMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CFlyoutPlacementMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Placement(pThis, &value))
            }
            return value
        }

        internal func put_PlacementImpl(_ value: WinUI.FlyoutPlacementMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Placement(pThis, value))
            }
        }

    }

    public class IFlyoutShowOptionsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptionsFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.FlyoutShowOptions.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFlyoutShowOptions {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutShowOptionsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFlyoutShowOptions(value!)
        }

    }

    public class IItemsChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventArgs }

        internal func get_ActionImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Action(pThis, &value))
            }
            return value
        }

        internal func get_PositionImpl() throws -> WinUI.GeneratorPosition {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGeneratorPosition = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_OldPositionImpl() throws -> WinUI.GeneratorPosition {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGeneratorPosition = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_ItemCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemCount(pThis, &value))
            }
            return value
        }

        internal func get_ItemUICountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemUICount(pThis, &value))
            }
            return value
        }

    }

    public class IListViewItemTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIListViewItemTemplateSettings }

        internal func get_DragItemsCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIListViewItemTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DragItemsCount(pThis, &value))
            }
            return value
        }

    }

    public class IMenuFlyoutItemTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIMenuFlyoutItemTemplateSettings }

        internal func get_KeyboardAcceleratorTextMinWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIMenuFlyoutItemTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAcceleratorTextMinWidth(pThis, &value))
            }
            return value
        }

    }

    public class IPopup: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup }

        internal func get_ChildImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Child(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ChildImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Child(pThis, RawPointer(value)))
            }
        }

        internal func get_IsOpenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsOpenImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsOpen(pThis, .init(from: value)))
            }
        }

        internal func get_HorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffset(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalOffsetImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalOffset(pThis, value))
            }
        }

        internal func get_VerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffset(pThis, &value))
            }
            return value
        }

        internal func put_VerticalOffsetImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalOffset(pThis, value))
            }
        }

        internal func get_ChildTransitionsImpl() throws -> WinUI.TransitionCollection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ChildTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ChildTransitions(pThis, RawPointer(value)))
            }
        }

        internal func get_IsLightDismissEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsLightDismissEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsLightDismissEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsLightDismissEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_LightDismissOverlayModeImpl() throws -> WinUI.LightDismissOverlayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayMode(pThis, &value))
            }
            return value
        }

        internal func put_LightDismissOverlayModeImpl(_ value: WinUI.LightDismissOverlayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightDismissOverlayMode(pThis, value))
            }
        }

        internal func get_ShouldConstrainToRootBoundsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldConstrainToRootBounds(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShouldConstrainToRootBoundsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShouldConstrainToRootBounds(pThis, .init(from: value)))
            }
        }

        internal func get_IsConstrainedToRootBoundsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsConstrainedToRootBounds(pThis, &value))
            }
            return .init(from: value)
        }

        internal func add_OpenedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Opened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Opened(pThis, token))
            }
        }

        internal func add_ClosedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
            }
        }

    }

    public class IPopup2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup2 }

        internal func get_PlacementTargetImpl() throws -> WinUI.FrameworkElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementTarget(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PlacementTargetImpl(_ value: WinUI.FrameworkElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlacementTarget(pThis, RawPointer(value)))
            }
        }

        internal func get_DesiredPlacementImpl() throws -> WinUI.PopupPlacementMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredPlacement(pThis, &value))
            }
            return value
        }

        internal func put_DesiredPlacementImpl(_ value: WinUI.PopupPlacementMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredPlacement(pThis, value))
            }
        }

        internal func get_ActualPlacementImpl() throws -> WinUI.PopupPlacementMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CPopupPlacementMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualPlacement(pThis, &value))
            }
            return value
        }

        internal func add_ActualPlacementChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ActualPlacementChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ActualPlacementChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ActualPlacementChanged(pThis, token))
            }
        }

    }

    public class IPopup3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup3 }

        internal func get_SystemBackdropImpl() throws -> WinUI.SystemBackdrop? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemBackdrop(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SystemBackdropImpl(_ value: WinUI.SystemBackdrop?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopup3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SystemBackdrop(pThis, RawPointer(value)))
            }
        }

    }

    public class IPopupStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics }

        internal func get_ChildPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalOffsetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffsetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalOffsetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffsetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ChildTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsLightDismissEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsLightDismissEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LightDismissOverlayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ShouldConstrainToRootBoundsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldConstrainToRootBoundsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPopupStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics2 }

        internal func get_PlacementTargetPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlacementTargetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DesiredPlacementPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredPlacementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPopupStatics3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics3 }

        internal func get_SystemBackdropPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPopupStatics3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemBackdropProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IRangeBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase }

        internal func get_MinimumImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Minimum(pThis, &value))
            }
            return value
        }

        internal func put_MinimumImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Minimum(pThis, value))
            }
        }

        internal func get_MaximumImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Maximum(pThis, &value))
            }
            return value
        }

        internal func put_MaximumImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Maximum(pThis, value))
            }
        }

        internal func get_SmallChangeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SmallChange(pThis, &value))
            }
            return value
        }

        internal func put_SmallChangeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SmallChange(pThis, value))
            }
        }

        internal func get_LargeChangeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LargeChange(pThis, &value))
            }
            return value
        }

        internal func put_LargeChangeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LargeChange(pThis, value))
            }
        }

        internal func get_ValueImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal func put_ValueImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
            }
        }

        internal func add_ValueChangedImpl(_ handler: WinUI.RangeBaseValueChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.RangeBaseValueChangedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ValueChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ValueChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ValueChanged(pThis, token))
            }
        }

    }

    public class IRangeBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.RangeBase.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IRangeBase {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IRangeBase(value!)
        }

    }

    public class IRangeBaseOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides }

        internal func OnMinimumChangedImpl(_ oldMinimum: Double, _ newMinimum: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnMinimumChanged(pThis, oldMinimum, newMinimum))
            }
        }

        internal func OnMaximumChangedImpl(_ oldMaximum: Double, _ newMaximum: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnMaximumChanged(pThis, oldMaximum, newMaximum))
            }
        }

        internal func OnValueChangedImpl(_ oldValue: Double, _ newValue: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnValueChanged(pThis, oldValue, newValue))
            }
        }

    }

    public class IRangeBaseStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics }

        internal func get_MinimumPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinimumProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaximumPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SmallChangePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SmallChangeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LargeChangePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LargeChangeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ValuePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValueProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IRangeBaseValueChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs }

        internal func get_OldValueImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldValue(pThis, &value))
            }
            return value
        }

        internal func get_NewValueImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewValue(pThis, &value))
            }
            return value
        }

    }

    public class IScrollController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController }

        open func get_PanningInfoImpl() throws -> WinUI.AnyIScrollControllerPanningInfo? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PanningInfo(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfoWrapper.unwrapFrom(abi: value)
        }

        open func get_CanScrollImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanScroll(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsScrollingWithMouseImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsScrollingWithMouse(pThis, &value))
            }
            return .init(from: value)
        }

        open func SetIsScrollableImpl(_ isScrollable: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsScrollable(pThis, .init(from: isScrollable)))
            }
        }

        open func SetValuesImpl(_ minOffset: Double, _ maxOffset: Double, _ offset: Double, _ viewportLength: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetValues(pThis, minOffset, maxOffset, offset, viewportLength))
            }
        }

        open func GetScrollAnimationImpl(_ correlationId: Int32, _ startPosition: WindowsFoundation.Vector2, _ endPosition: WindowsFoundation.Vector2, _ defaultAnimation: WinAppSDK.CompositionAnimation?) throws -> WinAppSDK.CompositionAnimation? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetScrollAnimation(pThis, correlationId, .from(swift: startPosition), .from(swift: endPosition), RawPointer(defaultAnimation), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        open func NotifyRequestedScrollCompletedImpl(_ correlationId: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NotifyRequestedScrollCompleted(pThis, correlationId))
            }
        }

        open func add_CanScrollChangedImpl(_ handler: TypedEventHandler<WinUI.AnyIScrollController?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollController_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CanScrollChanged(pThis, _handler, &token))
            }
            return token
        }

        open func remove_CanScrollChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CanScrollChanged(pThis, token))
            }
        }

        open func add_IsScrollingWithMouseChangedImpl(_ handler: TypedEventHandler<WinUI.AnyIScrollController?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollController_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsScrollingWithMouseChanged(pThis, _handler, &token))
            }
            return token
        }

        open func remove_IsScrollingWithMouseChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsScrollingWithMouseChanged(pThis, token))
            }
        }

        open func add_ScrollToRequestedImpl(_ handler: TypedEventHandler<WinUI.AnyIScrollController?, WinUI.ScrollControllerScrollToRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollController___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollControllerScrollToRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScrollToRequested(pThis, _handler, &token))
            }
            return token
        }

        open func remove_ScrollToRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScrollToRequested(pThis, token))
            }
        }

        open func add_ScrollByRequestedImpl(_ handler: TypedEventHandler<WinUI.AnyIScrollController?, WinUI.ScrollControllerScrollByRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollController___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollControllerScrollByRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScrollByRequested(pThis, _handler, &token))
            }
            return token
        }

        open func remove_ScrollByRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScrollByRequested(pThis, token))
            }
        }

        open func add_AddScrollVelocityRequestedImpl(_ handler: TypedEventHandler<WinUI.AnyIScrollController?, WinUI.ScrollControllerAddScrollVelocityRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollController___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollControllerAddScrollVelocityRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AddScrollVelocityRequested(pThis, _handler, &token))
            }
            return token
        }

        open func remove_AddScrollVelocityRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AddScrollVelocityRequested(pThis, token))
            }
        }

    }

    internal static var IScrollControllerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerVtbl = .init(
        QueryInterface: { IScrollControllerWrapper.queryInterface($0, $1, $2) },
        AddRef: { IScrollControllerWrapper.addRef($0) },
        Release: { IScrollControllerWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Controls.Primitives.IScrollController").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_PanningInfo: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.panningInfo
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfoWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_CanScroll: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.canScroll
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsScrollingWithMouse: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isScrollingWithMouse
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        SetIsScrollable: {
            do {
                guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let isScrollable: Bool = .init(from: $1)
                try __unwrapped__instance.setIsScrollable(isScrollable)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetValues: {
            do {
                guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let minOffset: Double = $1
                let maxOffset: Double = $2
                let offset: Double = $3
                let viewportLength: Double = $4
                try __unwrapped__instance.setValues(minOffset, maxOffset, offset, viewportLength)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetScrollAnimation: {
            do {
                guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let correlationId: Int32 = $1
                let startPosition: WindowsFoundation.Vector2 = .from(abi: $2)
                let endPosition: WindowsFoundation.Vector2 = .from(abi: $3)
                let defaultAnimation: WinAppSDK.CompositionAnimation? = .from(abi: ComPtr($4))
                let result = try __unwrapped__instance.getScrollAnimation(correlationId, startPosition, endPosition, defaultAnimation)
                result?.copyTo($5)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        NotifyRequestedScrollCompleted: {
            do {
                guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let correlationId: Int32 = $1
                try __unwrapped__instance.notifyRequestedScrollCompleted(correlationId)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        add_CanScrollChanged: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollController_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.canScrollChanged.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_CanScrollChanged: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.canScrollChanged.removeHandler(token)
            return S_OK
        },

        add_IsScrollingWithMouseChanged: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollController_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.isScrollingWithMouseChanged.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_IsScrollingWithMouseChanged: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.isScrollingWithMouseChanged.removeHandler(token)
            return S_OK
        },

        add_ScrollToRequested: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollController___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollControllerScrollToRequestedEventArgsWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.scrollToRequested.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_ScrollToRequested: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.scrollToRequested.removeHandler(token)
            return S_OK
        },

        add_ScrollByRequested: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollController___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollControllerScrollByRequestedEventArgsWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.scrollByRequested.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_ScrollByRequested: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.scrollByRequested.removeHandler(token)
            return S_OK
        },

        add_AddScrollVelocityRequested: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollController___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollControllerAddScrollVelocityRequestedEventArgsWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.addScrollVelocityRequested.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_AddScrollVelocityRequested: {
            guard let __unwrapped__instance = IScrollControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.addScrollVelocityRequested.removeHandler(token)
            return S_OK
        }
    )

    public typealias IScrollControllerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerBridge>
    public class IScrollControllerAddScrollVelocityRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgs }

        internal func get_OffsetVelocityImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffsetVelocity(pThis, &value))
            }
            return value
        }

        internal func get_InertiaDecayRateImpl() throws -> Float? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InertiaDecayRate(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIReference_1_floatWrapper.unwrapFrom(abi: value)
        }

        internal func get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

        internal func put_CorrelationIdImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CorrelationId(pThis, value))
            }
        }

    }

    public class IScrollControllerAddScrollVelocityRequestedEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgsFactory }

        internal func CreateInstanceImpl(_ offsetVelocity: Float, _ inertiaDecayRate: Float?) throws -> IScrollControllerAddScrollVelocityRequestedEventArgs {
            let (value) = try ComPtrs.initialize { valueAbi in
                let inertiaDecayRateWrapper = WinUI.__x_ABI_C__FIReference_1_floatWrapper(inertiaDecayRate)
                let _inertiaDecayRate = try! inertiaDecayRateWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerAddScrollVelocityRequestedEventArgsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, offsetVelocity, _inertiaDecayRate, &valueAbi))
                }
            }
            return IScrollControllerAddScrollVelocityRequestedEventArgs(value!)
        }

    }

    public class IScrollControllerPanRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgs }

        internal func get_PointerPointImpl() throws -> WinAppSDK.PointerPoint? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerPoint(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class IScrollControllerPanRequestedEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgsFactory }

        internal func CreateInstanceImpl(_ pointerPoint: WinAppSDK.PointerPoint?) throws -> IScrollControllerPanRequestedEventArgs {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanRequestedEventArgsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, RawPointer(pointerPoint), &valueAbi))
                }
            }
            return IScrollControllerPanRequestedEventArgs(value!)
        }

    }

    public class IScrollControllerPanningInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo }

        open func get_IsRailEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRailEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_PanOrientationImpl() throws -> WinUI.Orientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PanOrientation(pThis, &value))
            }
            return value
        }

        open func get_PanningElementAncestorImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PanningElementAncestor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func SetPanningElementExpressionAnimationSourcesImpl(_ propertySet: WinAppSDK.CompositionPropertySet?, _ minOffsetPropertyName: String, _ maxOffsetPropertyName: String, _ offsetPropertyName: String, _ multiplierPropertyName: String) throws {
            let _minOffsetPropertyName = try! HString(minOffsetPropertyName)
            let _maxOffsetPropertyName = try! HString(maxOffsetPropertyName)
            let _offsetPropertyName = try! HString(offsetPropertyName)
            let _multiplierPropertyName = try! HString(multiplierPropertyName)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPanningElementExpressionAnimationSources(pThis, RawPointer(propertySet), _minOffsetPropertyName.get(), _maxOffsetPropertyName.get(), _offsetPropertyName.get(), _multiplierPropertyName.get()))
            }
        }

        open func add_ChangedImpl(_ handler: TypedEventHandler<WinUI.AnyIScrollControllerPanningInfo?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollControllerPanningInfo_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Changed(pThis, _handler, &token))
            }
            return token
        }

        open func remove_ChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Changed(pThis, token))
            }
        }

        open func add_PanRequestedImpl(_ handler: TypedEventHandler<WinUI.AnyIScrollControllerPanningInfo?, WinUI.ScrollControllerPanRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollControllerPanningInfo___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollControllerPanRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PanRequested(pThis, _handler, &token))
            }
            return token
        }

        open func remove_PanRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PanRequested(pThis, token))
            }
        }

    }

    internal static var IScrollControllerPanningInfoVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerPanningInfoVtbl = .init(
        QueryInterface: { IScrollControllerPanningInfoWrapper.queryInterface($0, $1, $2) },
        AddRef: { IScrollControllerPanningInfoWrapper.addRef($0) },
        Release: { IScrollControllerPanningInfoWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfoWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_IsRailEnabled: {
            guard let __unwrapped__instance = IScrollControllerPanningInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isRailEnabled
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_PanOrientation: {
            guard let __unwrapped__instance = IScrollControllerPanningInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.panOrientation
            $1?.initialize(to: value)
            return S_OK
        },

        get_PanningElementAncestor: {
            guard let __unwrapped__instance = IScrollControllerPanningInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.panningElementAncestor
            value?.copyTo($1)
            return S_OK
        },

        SetPanningElementExpressionAnimationSources: {
            do {
                guard let __unwrapped__instance = IScrollControllerPanningInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let propertySet: WinAppSDK.CompositionPropertySet? = .from(abi: ComPtr($1))
                let minOffsetPropertyName: String = .init(from: $2)
                let maxOffsetPropertyName: String = .init(from: $3)
                let offsetPropertyName: String = .init(from: $4)
                let multiplierPropertyName: String = .init(from: $5)
                try __unwrapped__instance.setPanningElementExpressionAnimationSources(propertySet, minOffsetPropertyName, maxOffsetPropertyName, offsetPropertyName, multiplierPropertyName)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        add_Changed: {
            guard let __unwrapped__instance = IScrollControllerPanningInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollControllerPanningInfo_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.changed.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_Changed: {
            guard let __unwrapped__instance = IScrollControllerPanningInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.changed.removeHandler(token)
            return S_OK
        },

        add_PanRequested: {
            guard let __unwrapped__instance = IScrollControllerPanningInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CIScrollControllerPanningInfo___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollControllerPanRequestedEventArgsWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.panRequested.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_PanRequested: {
            guard let __unwrapped__instance = IScrollControllerPanningInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.panRequested.removeHandler(token)
            return S_OK
        }
    )

    public typealias IScrollControllerPanningInfoWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfoBridge>
    public class IScrollControllerScrollByRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgs }

        internal func get_OffsetDeltaImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffsetDelta(pThis, &value))
            }
            return value
        }

        internal func get_OptionsImpl() throws -> WinUI.ScrollingScrollOptions? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

        internal func put_CorrelationIdImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CorrelationId(pThis, value))
            }
        }

    }

    public class IScrollControllerScrollByRequestedEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgsFactory }

        internal func CreateInstanceImpl(_ offsetDelta: Double, _ options: WinUI.ScrollingScrollOptions?) throws -> IScrollControllerScrollByRequestedEventArgs {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollByRequestedEventArgsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, offsetDelta, RawPointer(options), &valueAbi))
                }
            }
            return IScrollControllerScrollByRequestedEventArgs(value!)
        }

    }

    public class IScrollControllerScrollToRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgs }

        internal func get_OffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Offset(pThis, &value))
            }
            return value
        }

        internal func get_OptionsImpl() throws -> WinUI.ScrollingScrollOptions? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

        internal func put_CorrelationIdImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CorrelationId(pThis, value))
            }
        }

    }

    public class IScrollControllerScrollToRequestedEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgsFactory }

        internal func CreateInstanceImpl(_ offset: Double, _ options: WinUI.ScrollingScrollOptions?) throws -> IScrollControllerScrollToRequestedEventArgs {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollControllerScrollToRequestedEventArgsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, offset, RawPointer(options), &valueAbi))
                }
            }
            return IScrollControllerScrollToRequestedEventArgs(value!)
        }

    }

    public class IScrollPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter }

        internal func get_BackgroundImpl() throws -> WinUI.Brush? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

        internal func get_ContentImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, RawPointer(value)))
            }
        }

        internal func get_ExpressionAnimationSourcesImpl() throws -> WinAppSDK.CompositionPropertySet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpressionAnimationSources(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffset(pThis, &value))
            }
            return value
        }

        internal func get_VerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffset(pThis, &value))
            }
            return value
        }

        internal func get_ZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomFactor(pThis, &value))
            }
            return value
        }

        internal func get_ExtentWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentWidth(pThis, &value))
            }
            return value
        }

        internal func get_ExtentHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentHeight(pThis, &value))
            }
            return value
        }

        internal func get_ViewportWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportWidth(pThis, &value))
            }
            return value
        }

        internal func get_ViewportHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportHeight(pThis, &value))
            }
            return value
        }

        internal func get_ScrollableWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableWidth(pThis, &value))
            }
            return value
        }

        internal func get_ScrollableHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableHeight(pThis, &value))
            }
            return value
        }

        internal func get_ContentOrientationImpl() throws -> WinUI.ScrollingContentOrientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentOrientation(pThis, &value))
            }
            return value
        }

        internal func put_ContentOrientationImpl(_ value: WinUI.ScrollingContentOrientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentOrientation(pThis, value))
            }
        }

        internal func get_HorizontalScrollChainModeImpl() throws -> WinUI.ScrollingChainMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollChainMode(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalScrollChainModeImpl(_ value: WinUI.ScrollingChainMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollChainMode(pThis, value))
            }
        }

        internal func get_VerticalScrollChainModeImpl() throws -> WinUI.ScrollingChainMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollChainMode(pThis, &value))
            }
            return value
        }

        internal func put_VerticalScrollChainModeImpl(_ value: WinUI.ScrollingChainMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollChainMode(pThis, value))
            }
        }

        internal func get_HorizontalScrollRailModeImpl() throws -> WinUI.ScrollingRailMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollRailMode(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalScrollRailModeImpl(_ value: WinUI.ScrollingRailMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollRailMode(pThis, value))
            }
        }

        internal func get_VerticalScrollRailModeImpl() throws -> WinUI.ScrollingRailMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollRailMode(pThis, &value))
            }
            return value
        }

        internal func put_VerticalScrollRailModeImpl(_ value: WinUI.ScrollingRailMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollRailMode(pThis, value))
            }
        }

        internal func get_HorizontalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollMode(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalScrollModeImpl(_ value: WinUI.ScrollingScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollMode(pThis, value))
            }
        }

        internal func get_VerticalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollMode(pThis, &value))
            }
            return value
        }

        internal func put_VerticalScrollModeImpl(_ value: WinUI.ScrollingScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollMode(pThis, value))
            }
        }

        internal func get_ComputedHorizontalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollMode(pThis, &value))
            }
            return value
        }

        internal func get_ComputedVerticalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollMode(pThis, &value))
            }
            return value
        }

        internal func get_ZoomChainModeImpl() throws -> WinUI.ScrollingChainMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomChainMode(pThis, &value))
            }
            return value
        }

        internal func put_ZoomChainModeImpl(_ value: WinUI.ScrollingChainMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomChainMode(pThis, value))
            }
        }

        internal func get_ZoomModeImpl() throws -> WinUI.ScrollingZoomMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomMode(pThis, &value))
            }
            return value
        }

        internal func put_ZoomModeImpl(_ value: WinUI.ScrollingZoomMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomMode(pThis, value))
            }
        }

        internal func get_IgnoredInputKindsImpl() throws -> WinUI.ScrollingInputKinds {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IgnoredInputKinds(pThis, &value))
            }
            return value
        }

        internal func put_IgnoredInputKindsImpl(_ value: WinUI.ScrollingInputKinds) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IgnoredInputKinds(pThis, value))
            }
        }

        internal func get_MinZoomFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinZoomFactor(pThis, &value))
            }
            return value
        }

        internal func put_MinZoomFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinZoomFactor(pThis, value))
            }
        }

        internal func get_MaxZoomFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxZoomFactor(pThis, &value))
            }
            return value
        }

        internal func put_MaxZoomFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxZoomFactor(pThis, value))
            }
        }

        internal func get_StateImpl() throws -> WinUI.ScrollingInteractionState {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, &value))
            }
            return value
        }

        internal func get_HorizontalScrollControllerImpl() throws -> WinUI.AnyIScrollController? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollController(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerWrapper.unwrapFrom(abi: value)
        }

        internal func put_HorizontalScrollControllerImpl(_ value: WinUI.AnyIScrollController?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollController(pThis, _value))
            }
        }

        internal func get_VerticalScrollControllerImpl() throws -> WinUI.AnyIScrollController? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollController(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerWrapper.unwrapFrom(abi: value)
        }

        internal func put_VerticalScrollControllerImpl(_ value: WinUI.AnyIScrollController?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollController(pThis, _value))
            }
        }

        internal func get_HorizontalAnchorRatioImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAnchorRatio(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalAnchorRatioImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAnchorRatio(pThis, value))
            }
        }

        internal func get_VerticalAnchorRatioImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAnchorRatio(pThis, &value))
            }
            return value
        }

        internal func put_VerticalAnchorRatioImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAnchorRatio(pThis, value))
            }
        }

        internal func get_HorizontalSnapPointsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.ScrollSnapPointBase?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalSnapPoints(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollSnapPointBaseWrapper.unwrapFrom(abi: value)
        }

        internal func get_VerticalSnapPointsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.ScrollSnapPointBase?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalSnapPoints(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollSnapPointBaseWrapper.unwrapFrom(abi: value)
        }

        internal func get_ZoomSnapPointsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.ZoomSnapPointBase?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomSnapPoints(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CZoomSnapPointBaseWrapper.unwrapFrom(abi: value)
        }

        internal func ScrollToImpl(_ horizontalOffset: Double, _ verticalOffset: Double) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollTo(pThis, horizontalOffset, verticalOffset, &result))
            }
            return result
        }

        internal func ScrollToWithOptionsImpl(_ horizontalOffset: Double, _ verticalOffset: Double, _ options: WinUI.ScrollingScrollOptions?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollToWithOptions(pThis, horizontalOffset, verticalOffset, RawPointer(options), &result))
            }
            return result
        }

        internal func ScrollByImpl(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollBy(pThis, horizontalOffsetDelta, verticalOffsetDelta, &result))
            }
            return result
        }

        internal func ScrollByWithOptionsImpl(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double, _ options: WinUI.ScrollingScrollOptions?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollByWithOptions(pThis, horizontalOffsetDelta, verticalOffsetDelta, RawPointer(options), &result))
            }
            return result
        }

        internal func AddScrollVelocityImpl(_ offsetsVelocity: WindowsFoundation.Vector2, _ inertiaDecayRate: WindowsFoundation.Vector2?) throws -> Int32 {
            var result: INT32 = 0
            let inertiaDecayRateWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(inertiaDecayRate)
            let _inertiaDecayRate = try! inertiaDecayRateWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddScrollVelocity(pThis, .from(swift: offsetsVelocity), _inertiaDecayRate, &result))
            }
            return result
        }

        internal func ZoomToImpl(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
            var result: INT32 = 0
            let centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            let _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomTo(pThis, zoomFactor, _centerPoint, &result))
            }
            return result
        }

        internal func ZoomToWithOptionsImpl(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: WinUI.ScrollingZoomOptions?) throws -> Int32 {
            var result: INT32 = 0
            let centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            let _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomToWithOptions(pThis, zoomFactor, _centerPoint, RawPointer(options), &result))
            }
            return result
        }

        internal func ZoomByImpl(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
            var result: INT32 = 0
            let centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            let _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomBy(pThis, zoomFactorDelta, _centerPoint, &result))
            }
            return result
        }

        internal func ZoomByWithOptionsImpl(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: WinUI.ScrollingZoomOptions?) throws -> Int32 {
            var result: INT32 = 0
            let centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            let _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomByWithOptions(pThis, zoomFactorDelta, _centerPoint, RawPointer(options), &result))
            }
            return result
        }

        internal func AddZoomVelocityImpl(_ zoomFactorVelocity: Float, _ centerPoint: WindowsFoundation.Vector2?, _ inertiaDecayRate: Float?) throws -> Int32 {
            var result: INT32 = 0
            let centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            let _centerPoint = try! centerPointWrapper?.toABI { $0 }
            let inertiaDecayRateWrapper = WinUI.__x_ABI_C__FIReference_1_floatWrapper(inertiaDecayRate)
            let _inertiaDecayRate = try! inertiaDecayRateWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddZoomVelocity(pThis, zoomFactorVelocity, _centerPoint, _inertiaDecayRate, &result))
            }
            return result
        }

        internal func add_ExtentChangedImpl(_ handler: TypedEventHandler<WinUI.ScrollPresenter?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollPresenter_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ExtentChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ExtentChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ExtentChanged(pThis, token))
            }
        }

        internal func add_StateChangedImpl(_ handler: TypedEventHandler<WinUI.ScrollPresenter?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollPresenter_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StateChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_StateChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StateChanged(pThis, token))
            }
        }

        internal func add_ViewChangedImpl(_ handler: TypedEventHandler<WinUI.ScrollPresenter?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollPresenter_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ViewChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChanged(pThis, token))
            }
        }

        internal func add_ScrollAnimationStartingImpl(_ handler: TypedEventHandler<WinUI.ScrollPresenter?, WinUI.ScrollingScrollAnimationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollPresenter___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingScrollAnimationStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScrollAnimationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ScrollAnimationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScrollAnimationStarting(pThis, token))
            }
        }

        internal func add_ZoomAnimationStartingImpl(_ handler: TypedEventHandler<WinUI.ScrollPresenter?, WinUI.ScrollingZoomAnimationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollPresenter___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingZoomAnimationStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ZoomAnimationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ZoomAnimationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ZoomAnimationStarting(pThis, token))
            }
        }

        internal func add_ScrollCompletedImpl(_ handler: TypedEventHandler<WinUI.ScrollPresenter?, WinUI.ScrollingScrollCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollPresenter___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingScrollCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScrollCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ScrollCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScrollCompleted(pThis, token))
            }
        }

        internal func add_ZoomCompletedImpl(_ handler: TypedEventHandler<WinUI.ScrollPresenter?, WinUI.ScrollingZoomCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollPresenter___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingZoomCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ZoomCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ZoomCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ZoomCompleted(pThis, token))
            }
        }

        internal func add_BringingIntoViewImpl(_ handler: TypedEventHandler<WinUI.ScrollPresenter?, WinUI.ScrollingBringingIntoViewEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollPresenter___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingBringingIntoViewEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BringingIntoView(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BringingIntoViewImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BringingIntoView(pThis, token))
            }
        }

        internal func add_AnchorRequestedImpl(_ handler: TypedEventHandler<WinUI.ScrollPresenter?, WinUI.ScrollingAnchorRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPrimitives__CScrollPresenter___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingAnchorRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AnchorRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AnchorRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AnchorRequested(pThis, token))
            }
        }

    }

    public class IScrollPresenterFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollPresenter.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollPresenter {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollPresenter(value!)
        }

    }

    public class IScrollPresenterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics }

        internal func get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ContentOrientationPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentOrientationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalScrollChainModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollChainModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalScrollChainModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollChainModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalScrollRailModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollRailModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalScrollRailModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollRailModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ComputedHorizontalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ComputedVerticalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ZoomChainModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomChainModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ZoomModePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IgnoredInputKindsPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IgnoredInputKindsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MinZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MaxZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HorizontalAnchorRatioPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAnchorRatioProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VerticalAnchorRatioPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAnchorRatioProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IScrollSnapPointBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointBase }

        internal func get_AlignmentImpl() throws -> WinUI.ScrollSnapPointsAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CScrollSnapPointsAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Alignment(pThis, &value))
            }
            return value
        }

    }

    public class IScrollSnapPointBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointBaseFactory }

    }

    public class IScrollSnapPointsInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo }

        open func get_AreHorizontalSnapPointsRegularImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreHorizontalSnapPointsRegular(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_AreVerticalSnapPointsRegularImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreVerticalSnapPointsRegular(pThis, &value))
            }
            return .init(from: value)
        }

        open func add_HorizontalSnapPointsChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_HorizontalSnapPointsChanged(pThis, _handler, &token))
            }
            return token
        }

        open func remove_HorizontalSnapPointsChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_HorizontalSnapPointsChanged(pThis, token))
            }
        }

        open func add_VerticalSnapPointsChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_VerticalSnapPointsChanged(pThis, _handler, &token))
            }
            return token
        }

        open func remove_VerticalSnapPointsChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_VerticalSnapPointsChanged(pThis, token))
            }
        }

        open func GetIrregularSnapPointsImpl(_ orientation: WinUI.Orientation, _ alignment: WinUI.SnapPointsAlignment) throws -> WindowsFoundation.AnyIVectorView<Float>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetIrregularSnapPoints(pThis, orientation, alignment, &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVectorView_1_floatWrapper.unwrapFrom(abi: result)
        }

        open func GetRegularSnapPointsImpl(_ orientation: WinUI.Orientation, _ alignment: WinUI.SnapPointsAlignment, _ offset: inout Float) throws -> Float {
            var returnValue: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRegularSnapPoints(pThis, orientation, alignment, &offset, &returnValue))
            }
            return returnValue
        }

    }

    internal static var IScrollSnapPointsInfoVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfoVtbl = .init(
        QueryInterface: { IScrollSnapPointsInfoWrapper.queryInterface($0, $1, $2) },
        AddRef: { IScrollSnapPointsInfoWrapper.addRef($0) },
        Release: { IScrollSnapPointsInfoWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfoWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_AreHorizontalSnapPointsRegular: {
            guard let __unwrapped__instance = IScrollSnapPointsInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.areHorizontalSnapPointsRegular
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_AreVerticalSnapPointsRegular: {
            guard let __unwrapped__instance = IScrollSnapPointsInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.areVerticalSnapPointsRegular
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        add_HorizontalSnapPointsChanged: {
            guard let __unwrapped__instance = IScrollSnapPointsInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.horizontalSnapPointsChanged.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_HorizontalSnapPointsChanged: {
            guard let __unwrapped__instance = IScrollSnapPointsInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.horizontalSnapPointsChanged.removeHandler(token)
            return S_OK
        },

        add_VerticalSnapPointsChanged: {
            guard let __unwrapped__instance = IScrollSnapPointsInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.verticalSnapPointsChanged.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_VerticalSnapPointsChanged: {
            guard let __unwrapped__instance = IScrollSnapPointsInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.verticalSnapPointsChanged.removeHandler(token)
            return S_OK
        },

        GetIrregularSnapPoints: {
            do {
                guard let __unwrapped__instance = IScrollSnapPointsInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let orientation: WinUI.Orientation = $1
                let alignment: WinUI.SnapPointsAlignment = $2
                let result = try __unwrapped__instance.getIrregularSnapPoints(orientation, alignment)
                let resultWrapper = WinUI.__x_ABI_C__FIVectorView_1_floatWrapper(result)
                resultWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetRegularSnapPoints: {
            do {
                guard let __unwrapped__instance = IScrollSnapPointsInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let orientation: WinUI.Orientation = $1
                let alignment: WinUI.SnapPointsAlignment = $2
                var offset: Float = 0.0
                let returnValue = try __unwrapped__instance.getRegularSnapPoints(orientation, alignment, &offset)
                $3?.initialize(to: offset)
                $4?.initialize(to: returnValue)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IScrollSnapPointsInfoWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfoBridge>
    public class ISelector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector }

        internal func get_SelectedIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedIndex(pThis, &value))
            }
            return value
        }

        internal func put_SelectedIndexImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedIndex(pThis, value))
            }
        }

        internal func get_SelectedItemImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_SelectedItemImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedItem(pThis, _value))
            }
        }

        internal func get_SelectedValueImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedValue(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_SelectedValueImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedValue(pThis, _value))
            }
        }

        internal func get_SelectedValuePathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedValuePath(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SelectedValuePathImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedValuePath(pThis, _value.get()))
            }
        }

        internal func get_IsSynchronizedWithCurrentItemImpl() throws -> Bool? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSynchronizedWithCurrentItem(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIReference_1_booleanWrapper.unwrapFrom(abi: value)
        }

        internal func put_IsSynchronizedWithCurrentItemImpl(_ value: Bool?) throws {
            let valueWrapper = WinUI.__x_ABI_C__FIReference_1_booleanWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSynchronizedWithCurrentItem(pThis, _value))
            }
        }

        internal func add_SelectionChangedImpl(_ handler: WinUI.SelectionChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.SelectionChangedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SelectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
            }
        }

    }

    public class ISelectorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorFactory }

    }

    public class ISelectorItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItem }

        internal func get_IsSelectedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSelected(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSelectedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSelected(pThis, .init(from: value)))
            }
        }

    }

    public class ISelectorItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItemFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.SelectorItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISelectorItem {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItemFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISelectorItem(value!)
        }

    }

    public class ISelectorItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItemStatics }

        internal func get_IsSelectedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSelectedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ISelectorStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorStatics }

        internal func get_SelectedIndexPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedIndexProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectedItemPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItemProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectedValuePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedValueProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SelectedValuePathPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedValuePathProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsSynchronizedWithCurrentItemPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSynchronizedWithCurrentItemProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetIsSelectionActiveImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISelectorStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsSelectionActive(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

    }

    public class ISnapPointBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISnapPointBase }

    }

    public class ISnapPointBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISnapPointBaseFactory }

    }

    public class ISplitViewTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings }

        internal func get_OpenPaneLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneLength(pThis, &value))
            }
            return value
        }

        internal func get_NegativeOpenPaneLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NegativeOpenPaneLength(pThis, &value))
            }
            return value
        }

        internal func get_OpenPaneLengthMinusCompactLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneLengthMinusCompactLength(pThis, &value))
            }
            return value
        }

        internal func get_NegativeOpenPaneLengthMinusCompactLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NegativeOpenPaneLengthMinusCompactLength(pThis, &value))
            }
            return value
        }

        internal func get_OpenPaneGridLengthImpl() throws -> WinUI.GridLength {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CGridLength = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneGridLength(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_CompactPaneGridLengthImpl() throws -> WinUI.GridLength {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CGridLength = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CISplitViewTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactPaneGridLength(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IToggleButton: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton }

        internal func get_IsCheckedImpl() throws -> Bool? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsChecked(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIReference_1_booleanWrapper.unwrapFrom(abi: value)
        }

        internal func put_IsCheckedImpl(_ value: Bool?) throws {
            let valueWrapper = WinUI.__x_ABI_C__FIReference_1_booleanWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsChecked(pThis, _value))
            }
        }

        internal func get_IsThreeStateImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsThreeState(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsThreeStateImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsThreeState(pThis, .init(from: value)))
            }
        }

        internal func add_CheckedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Checked(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CheckedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Checked(pThis, token))
            }
        }

        internal func add_UncheckedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Unchecked(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_UncheckedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Unchecked(pThis, token))
            }
        }

        internal func add_IndeterminateImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Indeterminate(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_IndeterminateImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButton.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Indeterminate(pThis, token))
            }
        }

    }

    public class IToggleButtonFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ToggleButton.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IToggleButton {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IToggleButton(value!)
        }

    }

    public class IToggleButtonOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides }

        internal func OnToggleImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnToggle(pThis))
            }
        }

    }

    public class IToggleButtonStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonStatics }

        internal func get_IsCheckedPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCheckedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsThreeStatePropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsThreeStateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IToggleSwitchTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings }

        internal func get_KnobCurrentToOnOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KnobCurrentToOnOffset(pThis, &value))
            }
            return value
        }

        internal func get_KnobCurrentToOffOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KnobCurrentToOffOffset(pThis, &value))
            }
            return value
        }

        internal func get_KnobOnToOffOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KnobOnToOffOffset(pThis, &value))
            }
            return value
        }

        internal func get_KnobOffToOnOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KnobOffToOnOffset(pThis, &value))
            }
            return value
        }

        internal func get_CurtainCurrentToOnOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurtainCurrentToOnOffset(pThis, &value))
            }
            return value
        }

        internal func get_CurtainCurrentToOffOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurtainCurrentToOffOffset(pThis, &value))
            }
            return value
        }

        internal func get_CurtainOnToOffOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurtainOnToOffOffset(pThis, &value))
            }
            return value
        }

        internal func get_CurtainOffToOnOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleSwitchTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurtainOffToOnOffset(pThis, &value))
            }
            return value
        }

    }

    public class IToolTipTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToolTipTemplateSettings }

        internal func get_FromHorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToolTipTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FromHorizontalOffset(pThis, &value))
            }
            return value
        }

        internal func get_FromVerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToolTipTemplateSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FromVerticalOffset(pThis, &value))
            }
            return value
        }

    }

    public class IZoomSnapPointBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIZoomSnapPointBase }

    }

    public class IZoomSnapPointBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIZoomSnapPointBaseFactory }

    }

    internal typealias IFlyoutBaseOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.FlyoutBase.IFlyoutBaseOverrides>
    internal static var IFlyoutBaseOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverridesVtbl = .init(
        QueryInterface: { IFlyoutBaseOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IFlyoutBaseOverridesWrapper.addRef($0) },
        Release: { IFlyoutBaseOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IFlyoutBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        CreatePresenter: {
            do {
                guard let __unwrapped__instance = IFlyoutBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.createPresenter()
                result?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnProcessKeyboardAccelerators: {
            do {
                guard let __unwrapped__instance = IFlyoutBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let args: WinUI.ProcessKeyboardAcceleratorEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onProcessKeyboardAccelerators(args)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IRangeBaseOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.RangeBase.IRangeBaseOverrides>
    internal static var IRangeBaseOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverridesVtbl = .init(
        QueryInterface: { IRangeBaseOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IRangeBaseOverridesWrapper.addRef($0) },
        Release: { IRangeBaseOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            iids[5] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IRangeBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnMinimumChanged: {
            do {
                guard let __unwrapped__instance = IRangeBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldMinimum: Double = $1
                let newMinimum: Double = $2
                try __unwrapped__instance.onMinimumChanged(oldMinimum, newMinimum)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnMaximumChanged: {
            do {
                guard let __unwrapped__instance = IRangeBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldMaximum: Double = $1
                let newMaximum: Double = $2
                try __unwrapped__instance.onMaximumChanged(oldMaximum, newMaximum)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnValueChanged: {
            do {
                guard let __unwrapped__instance = IRangeBaseOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let oldValue: Double = $1
                let newValue: Double = $2
                try __unwrapped__instance.onValueChanged(oldValue, newValue)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IToggleButtonOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.ToggleButton.IToggleButtonOverrides>
    internal static var IToggleButtonOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverridesVtbl = .init(
        QueryInterface: { IToggleButtonOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IToggleButtonOverridesWrapper.addRef($0) },
        Release: { IToggleButtonOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 7).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            iids[5] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            iids[6] = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesWrapper.IID
            $1!.pointee = 7
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = IToggleButtonOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnToggle: {
            do {
                guard let __unwrapped__instance = IToggleButtonOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.onToggle()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
}
extension __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGeneratorPosition {
        public static func from(swift: WinUI.GeneratorPosition) -> __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGeneratorPosition {
            .init(Index: swift.index, Offset: swift.offset)
        }
    }
    extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
// MARK - ItemsChangedEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls_Primitives {
    public class ItemsChangedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.ItemsChangedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias ItemsChangedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls_Primitives.ItemsChangedEventHandlerBridge>
    internal static var ItemsChangedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventHandlerVtbl = .init(
        QueryInterface: { ItemsChangedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ItemsChangedEventHandlerWrapper.addRef($0) },
        Release: { ItemsChangedEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = ItemsChangedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.ItemsChangedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIItemsChangedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.ItemsChangedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - RangeBaseValueChangedEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls_Primitives {
    public class RangeBaseValueChangedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.RangeBaseValueChangedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias RangeBaseValueChangedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls_Primitives.RangeBaseValueChangedEventHandlerBridge>
    internal static var RangeBaseValueChangedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandlerVtbl = .init(
        QueryInterface: { RangeBaseValueChangedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { RangeBaseValueChangedEventHandlerWrapper.addRef($0) },
        Release: { RangeBaseValueChangedEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = RangeBaseValueChangedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.RangeBaseValueChangedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls_Primitives.RangeBaseValueChangedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


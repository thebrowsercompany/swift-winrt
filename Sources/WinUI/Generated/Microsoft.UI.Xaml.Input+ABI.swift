// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x125A83D8, Data2: 0x7F86, Data3: 0x5EA9, Data4: ( 0x90,0x63,0xB9,0x40,0x7E,0x64,0x45,0x87 ))// 125A83D8-7F86-5EA9-9063-B9407E644587
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC4ED84D8, Data2: 0x2B27, Data3: 0x59B1, Data4: ( 0x9C,0xF0,0x7F,0x91,0x64,0xDE,0x58,0xCB ))// C4ED84D8-2B27-59B1-9CF0-7F9164DE58CB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xD00C11A4, Data2: 0xF9FB, Data3: 0x5707, Data4: ( 0x96,0x92,0x98,0xB8,0x0B,0xB8,0x54,0x6D ))// D00C11A4-F9FB-5707-9692-98B80BB8546D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xE26CA5BB, Data2: 0x34C3, Data3: 0x5C1E, Data4: ( 0x9A,0x16,0x00,0xB8,0x0B,0x07,0xA8,0x99 ))// E26CA5BB-34C3-5C1E-9A16-00B80B07A899
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CICommand: WindowsFoundation.IID {
    .init(Data1: 0xE5AF3542, Data2: 0xCA67, Data3: 0x4081, Data4: ( 0x99,0x5B,0x70,0x9D,0xD1,0x37,0x92,0xDF ))// E5AF3542-CA67-4081-995B-709DD13792DF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xBCEDCB98, Data2: 0x77B5, Data3: 0x53C0, Data4: ( 0x80,0x2E,0xFD,0x52,0xF3,0x80,0x6E,0x51 ))// BCEDCB98-77B5-53C0-802E-FD52F3806E51
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x32B9549D, Data2: 0x11D8, Data3: 0x53A5, Data4: ( 0xA9,0x53,0x02,0x40,0x95,0x37,0xA1,0x1F ))// 32B9549D-11D8-53A5-A953-02409537A11F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions: WindowsFoundation.IID {
    .init(Data1: 0x7F88E76B, Data2: 0x7417, Data3: 0x5447, Data4: ( 0xAE,0xD4,0x2F,0xAB,0xD2,0x91,0xBD,0xC6 ))// 7F88E76B-7417-5447-AED4-2FABD291BDC6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManager: WindowsFoundation.IID {
    .init(Data1: 0x9FD07BC5, Data2: 0xD2D4, Data3: 0x53FE, Data4: ( 0xA3,0x1A,0x84,0x6D,0xE8,0xB7,0xA2,0x57 ))// 9FD07BC5-D2D4-53FE-A31A-846DE8B7A257
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x50ACA341, Data2: 0x4519, Data3: 0x59CF, Data4: ( 0x83,0xB1,0xC9,0xC4,0x5C,0xFD,0xB8,0x16 ))// 50ACA341-4519-59CF-83B1-C9C45CFDB816
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xFDAF2C3F, Data2: 0xA22E, Data3: 0x5902, Data4: ( 0xAB,0xCE,0xB6,0x07,0x58,0xFB,0xED,0x1E ))// FDAF2C3F-A22E-5902-ABCE-B60758FBED1E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics: WindowsFoundation.IID {
    .init(Data1: 0xE73DCE04, Data2: 0xE23A, Data3: 0x5FB3, Data4: ( 0x96,0xAB,0x7D,0xF0,0x4C,0x51,0xDF,0xF2 ))// E73DCE04-E23A-5FB3-96AB-7DF04C51DFF2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusMovementResult: WindowsFoundation.IID {
    .init(Data1: 0xA46259FD, Data2: 0x3EDD, Data3: 0x554B, Data4: ( 0xA1,0x88,0x0A,0x47,0xB7,0x1E,0x4E,0x1A ))// A46259FD-3EDD-554B-A188-0A47B71E4E1A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x37FD3AF0, Data2: 0xBD3C, Data3: 0x5BF5, Data4: ( 0xA9,0xCD,0x71,0xA1,0xE8,0x7A,0xF9,0x50 ))// 37FD3AF0-BD3C-5BF5-A9CD-71A1E87AF950
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x8272A4B2, Data2: 0x2221, Data3: 0x551E, Data4: ( 0xB0,0xBB,0x16,0xE2,0x91,0x38,0xAB,0x20 ))// 8272A4B2-2221-551E-B0BB-16E29138AB20
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaExpansionBehavior: WindowsFoundation.IID {
    .init(Data1: 0xD60029B7, Data2: 0xF0CD, Data3: 0x5AEA, Data4: ( 0xAB,0xE5,0x74,0x10,0xD0,0x91,0x18,0xC6 ))// D60029B7-F0CD-5AEA-ABE5-7410D09118C6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaRotationBehavior: WindowsFoundation.IID {
    .init(Data1: 0x27B4BD03, Data2: 0x9149, Data3: 0x5691, Data4: ( 0xBC,0xE5,0xFA,0x33,0xB3,0x2C,0x4A,0x81 ))// 27B4BD03-9149-5691-BCE5-FA33B32C4A81
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaTranslationBehavior: WindowsFoundation.IID {
    .init(Data1: 0xD4F91CF5, Data2: 0x3317, Data3: 0x5914, Data4: ( 0xB2,0x5A,0xEA,0x6E,0xE5,0x5B,0x96,0xD0 ))// D4F91CF5-3317-5914-B25A-EA6EE55B96D0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScope: WindowsFoundation.IID {
    .init(Data1: 0x76EA58B1, Data2: 0xE910, Data3: 0x5176, Data4: ( 0x91,0x47,0x69,0x5C,0xC9,0x5E,0x7D,0xA2 ))// 76EA58B1-E910-5176-9147-695CC95E7DA2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScopeName: WindowsFoundation.IID {
    .init(Data1: 0xEE99A66D, Data2: 0x28D0, Data3: 0x53CB, Data4: ( 0x82,0xEE,0x1B,0x6E,0xE5,0x8B,0xCC,0x35 ))// EE99A66D-28D0-53CB-82EE-1B6EE58BCC35
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScopeNameFactory: WindowsFoundation.IID {
    .init(Data1: 0xFEEC2EFD, Data2: 0xBC09, Data3: 0x5CD6, Data4: ( 0x9B,0x47,0x6D,0x35,0xD1,0xD8,0x7C,0x61 ))// FEEC2EFD-BC09-5CD6-9B47-6D35D1D87C61
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xEE357007, Data2: 0xA2D6, Data3: 0x5C75, Data4: ( 0x94,0x31,0x05,0xFD,0x66,0xEC,0x79,0x15 ))// EE357007-A2D6-5C75-9431-05FD66EC7915
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator: WindowsFoundation.IID {
    .init(Data1: 0x6F8BF1E2, Data2: 0x4E91, Data3: 0x5CF9, Data4: ( 0xA6,0xBE,0x47,0x70,0xCA,0xF3,0xD7,0x70 ))// 6F8BF1E2-4E91-5CF9-A6BE-4770CAF3D770
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory: WindowsFoundation.IID {
    .init(Data1: 0xCA1D410A, Data2: 0xAF2A, Data3: 0x51B9, Data4: ( 0xA1,0xDE,0x6C,0x0A,0xF9,0xF3,0xB5,0x98 ))// CA1D410A-AF2A-51B9-A1DE-6C0AF9F3B598
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x62C9FDB0, Data2: 0xB574, Data3: 0x527D, Data4: ( 0x97,0xEB,0x5C,0x7F,0x67,0x44,0x41,0xE0 ))// 62C9FDB0-B574-527D-97EB-5C7F674441E0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics: WindowsFoundation.IID {
    .init(Data1: 0x73E674CA, Data2: 0x73F4, Data3: 0x5E77, Data4: ( 0xB8,0xD6,0xFF,0x78,0x52,0xA6,0x3B,0x0B ))// 73E674CA-73F4-5E77-B8D6-FF7852A63B0B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xFA0E5FFA, Data2: 0x2B1B, Data3: 0x52F8, Data4: ( 0xBB,0x66,0xE3,0x5F,0x51,0xE7,0x3C,0xF3 ))// FA0E5FFA-2B1B-52F8-BB66-E35F51E73CF3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xE3BE9E4E, Data2: 0xC5FB, Data3: 0x5859, Data4: ( 0xA8,0x1D,0xCE,0x12,0xFC,0x3A,0x2F,0x4D ))// E3BE9E4E-C5FB-5859-A81D-CE12FC3A2F4D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x51369745, Data2: 0x960F, Data3: 0x54AC, Data4: ( 0x93,0xFA,0x76,0x3D,0x22,0x91,0x0D,0xEA ))// 51369745-960F-54AC-93FA-763D22910DEA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x17D510BE, Data2: 0x5514, Data3: 0x5952, Data4: ( 0x9A,0xFD,0x95,0x9B,0x60,0xAB,0x93,0x94 ))// 17D510BE-5514-5952-9AFD-959B60AB9394
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationPivot: WindowsFoundation.IID {
    .init(Data1: 0x286BABA4, Data2: 0x313D, Data3: 0x507C, Data4: ( 0xAD,0xC5,0xF7,0x39,0x73,0x2C,0xEA,0x27 ))// 286BABA4-313D-507C-ADC5-F739732CEA27
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationPivotFactory: WindowsFoundation.IID {
    .init(Data1: 0x67143CCD, Data2: 0xEA6C, Data3: 0x5FE2, Data4: ( 0xBE,0xF2,0xAD,0xCB,0xD7,0xAF,0x52,0xFD ))// 67143CCD-EA6C-5FE2-BEF2-ADCBD7AF52FD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x61857950, Data2: 0x5821, Data3: 0x5652, Data4: ( 0x9F,0xDF,0xC6,0x27,0x7C,0x58,0x86,0xF5 ))// 61857950-5821-5652-9FDF-C6277C5886F5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0x5681B0DE, Data2: 0x3FA7, Data3: 0x503E, Data4: ( 0x9C,0x46,0xA8,0x03,0x39,0x76,0x02,0x92 ))// 5681B0DE-3FA7-503E-9C46-A80339760292
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x93A99F86, Data2: 0xF5A0, Data3: 0x5326, Data4: ( 0x91,0xB0,0x85,0x1C,0x89,0x7A,0xF7,0x9F ))// 93A99F86-F5A0-5326-91B0-851C897AF79F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA2D7153A, Data2: 0xCD2A, Data3: 0x59CB, Data4: ( 0xA5,0x74,0xAC,0x82,0xE3,0x0B,0x92,0x01 ))// A2D7153A-CD2A-59CB-A574-AC82E30B9201
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointer: WindowsFoundation.IID {
    .init(Data1: 0x1F9AFBF5, Data2: 0x11A3, Data3: 0x5E68, Data4: ( 0xAA,0x1B,0x72,0xFE,0xBF,0xA0,0xAB,0x23 ))// 1F9AFBF5-11A3-5E68-AA1B-72FEBFA0AB23
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x66E78A9A, Data2: 0x1BEC, Data3: 0x5F92, Data4: ( 0xB1,0xA1,0xEA,0x63,0x34,0xEE,0x51,0x1C ))// 66E78A9A-1BEC-5F92-B1A1-EA6334EE511C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9BE0D058, Data2: 0x3D26, Data3: 0x5811, Data4: ( 0xB5,0x0A,0x3B,0xB8,0x0C,0xA7,0x66,0xC9 ))// 9BE0D058-3D26-5811-B50A-3BB80CA766C9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x3972FAFB, Data2: 0x2915, Data3: 0x5C62, Data4: ( 0xBB,0x6B,0x54,0xAD,0x84,0xFF,0x40,0x0D ))// 3972FAFB-2915-5C62-BB6B-54AD84FF400D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x73F74B8C, Data2: 0x3709, Data3: 0x547E, Data4: ( 0x8E,0x0C,0x51,0xC0,0x3C,0x89,0x12,0x6A ))// 73F74B8C-3709-547E-8E0C-51C03C89126A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xF7A501B9, Data2: 0xE277, Data3: 0x5611, Data4: ( 0x87,0xB0,0x0E,0x06,0x07,0x62,0x21,0x83 ))// F7A501B9-E277-5611-87B0-0E0607622183
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xFE23C5BD, Data2: 0x4984, Data3: 0x56B6, Data4: ( 0xB9,0x2B,0xFC,0x9D,0x12,0x16,0xB2,0x4E ))// FE23C5BD-4984-56B6-B92B-FC9D1216B24E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xDB68E7CC, Data2: 0x9A2B, Data3: 0x527D, Data4: ( 0x99,0x89,0x25,0x28,0x4D,0xAC,0xCC,0x03 ))// DB68E7CC-9A2B-527D-9989-25284DACCC03
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xD51DF8DB, Data2: 0x71CD, Data3: 0x5BFD, Data4: ( 0x84,0x26,0x76,0x72,0x18,0xEE,0x55,0xEC ))// D51DF8DB-71CD-5BFD-8426-767218EE55EC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x83F2D4CE, Data2: 0x105F, Data3: 0x5392, Data4: ( 0xA3,0x8A,0xB7,0x46,0x7B,0x7C,0x2E,0xA5 ))// 83F2D4CE-105F-5392-A38A-B7467B7C2EA5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x5DE296BD, Data2: 0x6F1C, Data3: 0x5F60, Data4: ( 0x91,0x80,0x10,0x70,0x52,0x82,0x57,0x6C ))// 5DE296BD-6F1C-5F60-9180-10705282576C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x41060669, Data2: 0x304C, Data3: 0x53AC, Data4: ( 0x9D,0x43,0xBC,0x31,0x12,0x35,0xAA,0xE4 ))// 41060669-304C-53AC-9D43-BC311235AAE4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x44F528F1, Data2: 0xF0E4, Data3: 0x505C, Data4: ( 0xA0,0xBB,0x0C,0x48,0x39,0xB2,0x9D,0xF5 ))// 44F528F1-F0E4-505C-A0BB-0C4839B29DF5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xA48A71E1, Data2: 0x8BB4, Data3: 0x5597, Data4: ( 0x9E,0x31,0x90,0x3A,0x3F,0x6A,0x04,0xFB ))// A48A71E1-8BB4-5597-9E31-903A3F6A04FB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x5070E32F, Data2: 0x3DC7, Data3: 0x56CF, Data4: ( 0x8F,0xDD,0xDE,0x1B,0x40,0xD0,0xB4,0x72 ))// 5070E32F-3DC7-56CF-8FDD-DE1B40D0B472
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xB60074F3, Data2: 0x125B, Data3: 0x534E, Data4: ( 0x8F,0x9C,0x97,0x69,0xBD,0x3F,0x0F,0x64 ))// B60074F3-125B-534E-8F9C-9769BD3F0F64
}

public enum __ABI_Microsoft_UI_Xaml_Input {
    public class IAccessKeyDisplayDismissedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs }

    }

    public class IAccessKeyDisplayRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs }

        internal func get_PressedKeysImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PressedKeys(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IAccessKeyInvokedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class ICharacterReceivedRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs }

        internal func get_CharacterImpl() throws -> Character {
            var value: WCHAR = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Character(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_KeyStatusImpl() throws -> UWP.CorePhysicalKeyStatus {
            var value: __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyStatus(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class ICommand: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CICommand }

        open func add_CanExecuteChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICommand.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CanExecuteChanged(pThis, _handler, &token))
            }
            return token
        }

        open func remove_CanExecuteChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICommand.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CanExecuteChanged(pThis, token))
            }
        }

        open func CanExecuteImpl(_ parameter: Any?) throws -> Bool {
            var result: boolean = 0
            let parameterWrapper = __ABI_.AnyWrapper(parameter)
            let _parameter = try! parameterWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICommand.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CanExecute(pThis, _parameter, &result))
            }
            return .init(from: result)
        }

        open func ExecuteImpl(_ parameter: Any?) throws {
            let parameterWrapper = __ABI_.AnyWrapper(parameter)
            let _parameter = try! parameterWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICommand.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Execute(pThis, _parameter))
            }
        }

    }

    internal static var ICommandVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICommandVtbl = .init(
        QueryInterface: { ICommandWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICommandWrapper.addRef($0) },
        Release: { ICommandWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Input.ICommand").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        add_CanExecuteChanged: {
            guard let __unwrapped__instance = ICommandWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.canExecuteChanged.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_CanExecuteChanged: {
            guard let __unwrapped__instance = ICommandWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.canExecuteChanged.removeHandler(token)
            return S_OK
        },

        CanExecute: {
            do {
                guard let __unwrapped__instance = ICommandWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let parameter: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.canExecute(parameter)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Execute: {
            do {
                guard let __unwrapped__instance = ICommandWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let parameter: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.execute(parameter)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ICommandWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.ICommandBridge>
    public class IContextRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func TryGetPositionImpl(_ relativeTo: WinUI.UIElement?, _ point: inout WindowsFoundation.Point) throws -> Bool {
            var returnValue: boolean = 0
            var _point: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryGetPosition(pThis, RawPointer(relativeTo), &_point, &returnValue))
            }
            point = .from(abi: _point)
            return .init(from: returnValue)
        }

    }

    public class IDoubleTappedRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs }

        internal func get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetPositionImpl(_ relativeTo: WinUI.UIElement?) throws -> WindowsFoundation.Point {
            var result: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPosition(pThis, RawPointer(relativeTo), &result))
            }
            return .from(abi: result)
        }

    }

    public class IFindNextElementOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions }

        internal func get_SearchRootImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SearchRoot(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SearchRootImpl(_ value: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SearchRoot(pThis, RawPointer(value)))
            }
        }

        internal func get_ExclusionRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExclusionRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_ExclusionRectImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExclusionRect(pThis, .from(swift: value)))
            }
        }

        internal func get_HintRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HintRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_HintRectImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HintRect(pThis, .from(swift: value)))
            }
        }

        internal func get_XYFocusNavigationStrategyOverrideImpl() throws -> WinUI.XYFocusNavigationStrategyOverride {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategyOverride = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusNavigationStrategyOverride(pThis, &value))
            }
            return value
        }

        internal func put_XYFocusNavigationStrategyOverrideImpl(_ value: WinUI.XYFocusNavigationStrategyOverride) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFindNextElementOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusNavigationStrategyOverride(pThis, value))
            }
        }

    }

    public class IFocusManager: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManager }

    }

    public class IFocusManagerGotFocusEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs }

        internal func get_NewFocusedElementImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewFocusedElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CorrelationIdImpl() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerGotFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IFocusManagerLostFocusEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs }

        internal func get_OldFocusedElementImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldFocusedElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CorrelationIdImpl() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerLostFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IFocusManagerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics }

        internal func add_GotFocusImpl(_ handler: EventHandler<WinUI.FocusManagerGotFocusEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1___x_ABI_CMicrosoft__CUI__CXaml__CInput__CFocusManagerGotFocusEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_GotFocus(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_GotFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GotFocus(pThis, token))
            }
        }

        internal func add_LostFocusImpl(_ handler: EventHandler<WinUI.FocusManagerLostFocusEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1___x_ABI_CMicrosoft__CUI__CXaml__CInput__CFocusManagerLostFocusEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_LostFocus(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_LostFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LostFocus(pThis, token))
            }
        }

        internal func add_GettingFocusImpl(_ handler: EventHandler<WinUI.GettingFocusEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1___x_ABI_CMicrosoft__CUI__CXaml__CInput__CGettingFocusEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_GettingFocus(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_GettingFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GettingFocus(pThis, token))
            }
        }

        internal func add_LosingFocusImpl(_ handler: EventHandler<WinUI.LosingFocusEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1___x_ABI_CMicrosoft__CUI__CXaml__CInput__CLosingFocusEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_LosingFocus(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_LosingFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LosingFocus(pThis, token))
            }
        }

        internal func TryFocusAsyncImpl(_ element: WinUI.DependencyObject?, _ value: WinUI.FocusState) throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.FocusMovementResult?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TryFocusAsync(pThis, RawPointer(element), value, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CUI__CXaml__CInput__CFocusMovementResultWrapper.unwrapFrom(abi: operation)
        }

        internal func TryMoveFocusAsyncImpl(_ focusNavigationDirection: WinUI.FocusNavigationDirection) throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.FocusMovementResult?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TryMoveFocusAsync(pThis, focusNavigationDirection, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CUI__CXaml__CInput__CFocusMovementResultWrapper.unwrapFrom(abi: operation)
        }

        internal func TryMoveFocusWithOptionsAsyncImpl(_ focusNavigationDirection: WinUI.FocusNavigationDirection, _ focusNavigationOptions: WinUI.FindNextElementOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.FocusMovementResult?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TryMoveFocusWithOptionsAsync(pThis, focusNavigationDirection, RawPointer(focusNavigationOptions), &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CUI__CXaml__CInput__CFocusMovementResultWrapper.unwrapFrom(abi: operation)
        }

        internal func TryMoveFocusWithOptionsImpl(_ focusNavigationDirection: WinUI.FocusNavigationDirection, _ focusNavigationOptions: WinUI.FindNextElementOptions?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryMoveFocusWithOptions(pThis, focusNavigationDirection, RawPointer(focusNavigationOptions), &result))
            }
            return .init(from: result)
        }

        internal func FindNextElementImpl(_ focusNavigationDirection: WinUI.FocusNavigationDirection) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindNextElement(pThis, focusNavigationDirection, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func FindFirstFocusableElementImpl(_ searchScope: WinUI.DependencyObject?) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindFirstFocusableElement(pThis, RawPointer(searchScope), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func FindLastFocusableElementImpl(_ searchScope: WinUI.DependencyObject?) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindLastFocusableElement(pThis, RawPointer(searchScope), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func FindNextElementWithOptionsImpl(_ focusNavigationDirection: WinUI.FocusNavigationDirection, _ focusNavigationOptions: WinUI.FindNextElementOptions?) throws -> WinUI.DependencyObject? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindNextElementWithOptions(pThis, focusNavigationDirection, RawPointer(focusNavigationOptions), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func FindNextFocusableElementImpl(_ focusNavigationDirection: WinUI.FocusNavigationDirection) throws -> WinUI.UIElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindNextFocusableElement(pThis, focusNavigationDirection, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func FindNextFocusableElementWithHintImpl(_ focusNavigationDirection: WinUI.FocusNavigationDirection, _ hintRect: WindowsFoundation.Rect) throws -> WinUI.UIElement? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindNextFocusableElementWithHint(pThis, focusNavigationDirection, .from(swift: hintRect), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func TryMoveFocusImpl(_ focusNavigationDirection: WinUI.FocusNavigationDirection) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryMoveFocus(pThis, focusNavigationDirection, &result))
            }
            return .init(from: result)
        }

        internal func GetFocusedElementImpl() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFocusedElement(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal func GetFocusedElementWithRootImpl(_ xamlRoot: WinUI.XamlRoot?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFocusedElementWithRoot(pThis, RawPointer(xamlRoot), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

    }

    public class IFocusMovementResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusMovementResult }

        internal func get_SucceededImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIFocusMovementResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Succeeded(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IGettingFocusEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs }

        internal func get_OldFocusedElementImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldFocusedElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NewFocusedElementImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewFocusedElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_NewFocusedElementImpl(_ value: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NewFocusedElement(pThis, RawPointer(value)))
            }
        }

        internal func get_FocusStateImpl() throws -> WinUI.FocusState {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CFocusState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusState(pThis, &value))
            }
            return value
        }

        internal func get_DirectionImpl() throws -> WinUI.FocusNavigationDirection {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_InputDeviceImpl() throws -> WinUI.FocusInputDeviceKind {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusInputDeviceKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputDevice(pThis, &value))
            }
            return value
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func get_CorrelationIdImpl() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func TryCancelImpl() throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryCancel(pThis, &result))
            }
            return .init(from: result)
        }

        internal func TrySetNewFocusedElementImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TrySetNewFocusedElement(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

    }

    public class IHoldingRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs }

        internal func get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal func get_HoldingStateImpl() throws -> WinAppSDK.HoldingState {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CHoldingState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HoldingState(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetPositionImpl(_ relativeTo: WinUI.UIElement?) throws -> WindowsFoundation.Point {
            var result: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPosition(pThis, RawPointer(relativeTo), &result))
            }
            return .from(abi: result)
        }

    }

    public class IInertiaExpansionBehavior: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaExpansionBehavior }

        internal func get_DesiredDecelerationImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaExpansionBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredDeceleration(pThis, &value))
            }
            return value
        }

        internal func put_DesiredDecelerationImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaExpansionBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredDeceleration(pThis, value))
            }
        }

        internal func get_DesiredExpansionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaExpansionBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredExpansion(pThis, &value))
            }
            return value
        }

        internal func put_DesiredExpansionImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaExpansionBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredExpansion(pThis, value))
            }
        }

    }

    public class IInertiaRotationBehavior: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaRotationBehavior }

        internal func get_DesiredDecelerationImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaRotationBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredDeceleration(pThis, &value))
            }
            return value
        }

        internal func put_DesiredDecelerationImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaRotationBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredDeceleration(pThis, value))
            }
        }

        internal func get_DesiredRotationImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaRotationBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredRotation(pThis, &value))
            }
            return value
        }

        internal func put_DesiredRotationImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaRotationBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredRotation(pThis, value))
            }
        }

    }

    public class IInertiaTranslationBehavior: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaTranslationBehavior }

        internal func get_DesiredDecelerationImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaTranslationBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredDeceleration(pThis, &value))
            }
            return value
        }

        internal func put_DesiredDecelerationImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaTranslationBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredDeceleration(pThis, value))
            }
        }

        internal func get_DesiredDisplacementImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaTranslationBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredDisplacement(pThis, &value))
            }
            return value
        }

        internal func put_DesiredDisplacementImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInertiaTranslationBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredDisplacement(pThis, value))
            }
        }

    }

    public class IInputScope: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScope }

        internal func get_NamesImpl() throws -> WindowsFoundation.AnyIVector<WinUI.InputScopeName?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScope.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Names(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CInput__CInputScopeNameWrapper.unwrapFrom(abi: value)
        }

    }

    public class IInputScopeName: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScopeName }

        internal func get_NameValueImpl() throws -> WinUI.InputScopeNameValue {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CInputScopeNameValue = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScopeName.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NameValue(pThis, &value))
            }
            return value
        }

        internal func put_NameValueImpl(_ value: WinUI.InputScopeNameValue) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScopeName.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NameValue(pThis, value))
            }
        }

    }

    public class IInputScopeNameFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScopeNameFactory }

        internal func CreateInstanceImpl(_ nameValue: WinUI.InputScopeNameValue) throws -> IInputScopeName {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIInputScopeNameFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, nameValue, &valueAbi))
                }
            }
            return IInputScopeName(value!)
        }

    }

    public class IKeyRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs }

        internal func get_KeyImpl() throws -> UWP.VirtualKey {
            var value: __x_ABI_CWindows_CSystem_CVirtualKey = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &value))
            }
            return value
        }

        internal func get_KeyStatusImpl() throws -> UWP.CorePhysicalKeyStatus {
            var value: __x_ABI_CWindows_CUI_CCore_CCorePhysicalKeyStatus = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyStatus(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_OriginalKeyImpl() throws -> UWP.VirtualKey {
            var value: __x_ABI_CWindows_CSystem_CVirtualKey = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OriginalKey(pThis, &value))
            }
            return value
        }

        internal func get_DeviceIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IKeyboardAccelerator: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator }

        internal func get_KeyImpl() throws -> UWP.VirtualKey {
            var value: __x_ABI_CWindows_CSystem_CVirtualKey = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &value))
            }
            return value
        }

        internal func put_KeyImpl(_ value: UWP.VirtualKey) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Key(pThis, value))
            }
        }

        internal func get_ModifiersImpl() throws -> UWP.VirtualKeyModifiers {
            var value: __x_ABI_CWindows_CSystem_CVirtualKeyModifiers = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Modifiers(pThis, &value))
            }
            return value
        }

        internal func put_ModifiersImpl(_ value: UWP.VirtualKeyModifiers) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Modifiers(pThis, value))
            }
        }

        internal func get_IsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_ScopeOwnerImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScopeOwner(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ScopeOwnerImpl(_ value: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ScopeOwner(pThis, RawPointer(value)))
            }
        }

        internal func add_InvokedImpl(_ handler: TypedEventHandler<WinUI.KeyboardAccelerator?, WinUI.KeyboardAcceleratorInvokedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CInput__CKeyboardAccelerator___x_ABI_CMicrosoft__CUI__CXaml__CInput__CKeyboardAcceleratorInvokedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Invoked(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_InvokedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Invoked(pThis, token))
            }
        }

    }

    public class IKeyboardAcceleratorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.KeyboardAccelerator.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IKeyboardAccelerator {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IKeyboardAccelerator(value!)
        }

    }

    public class IKeyboardAcceleratorInvokedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_ElementImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Element(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_KeyboardAcceleratorImpl() throws -> WinUI.KeyboardAccelerator? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAccelerator(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IKeyboardAcceleratorStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics }

        internal func get_KeyPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ModifiersPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ModifiersProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ScopeOwnerPropertyImpl() throws -> WinUI.DependencyProperty? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScopeOwnerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ILosingFocusEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs }

        internal func get_OldFocusedElementImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldFocusedElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NewFocusedElementImpl() throws -> WinUI.DependencyObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewFocusedElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_NewFocusedElementImpl(_ value: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NewFocusedElement(pThis, RawPointer(value)))
            }
        }

        internal func get_FocusStateImpl() throws -> WinUI.FocusState {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CFocusState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusState(pThis, &value))
            }
            return value
        }

        internal func get_DirectionImpl() throws -> WinUI.FocusNavigationDirection {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_InputDeviceImpl() throws -> WinUI.FocusInputDeviceKind {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusInputDeviceKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputDevice(pThis, &value))
            }
            return value
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func get_CorrelationIdImpl() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func TryCancelImpl() throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryCancel(pThis, &result))
            }
            return .init(from: result)
        }

        internal func TrySetNewFocusedElementImpl(_ element: WinUI.DependencyObject?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TrySetNewFocusedElement(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

    }

    public class IManipulationCompletedRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs }

        internal func get_ContainerImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Container(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_IsInertialImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInertial(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CumulativeImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cumulative(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_VelocitiesImpl() throws -> WinAppSDK.ManipulationVelocities {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationVelocities = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Velocities(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

    }

    public class IManipulationDeltaRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs }

        internal func get_ContainerImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Container(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_IsInertialImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInertial(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DeltaImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Delta(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_CumulativeImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cumulative(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_VelocitiesImpl() throws -> WinAppSDK.ManipulationVelocities {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationVelocities = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Velocities(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IManipulationInertiaStartingRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs }

        internal func get_ContainerImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Container(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ExpansionBehaviorImpl() throws -> WinUI.InertiaExpansionBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpansionBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ExpansionBehaviorImpl(_ value: WinUI.InertiaExpansionBehavior?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpansionBehavior(pThis, RawPointer(value)))
            }
        }

        internal func get_RotationBehaviorImpl() throws -> WinUI.InertiaRotationBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RotationBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_RotationBehaviorImpl(_ value: WinUI.InertiaRotationBehavior?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RotationBehavior(pThis, RawPointer(value)))
            }
        }

        internal func get_TranslationBehaviorImpl() throws -> WinUI.InertiaTranslationBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TranslationBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TranslationBehaviorImpl(_ value: WinUI.InertiaTranslationBehavior?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TranslationBehavior(pThis, RawPointer(value)))
            }
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal func get_DeltaImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Delta(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_CumulativeImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cumulative(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_VelocitiesImpl() throws -> WinAppSDK.ManipulationVelocities {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationVelocities = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Velocities(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IManipulationPivot: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationPivot }

        internal func get_CenterImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationPivot.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Center(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_CenterImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationPivot.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Center(pThis, .from(swift: value)))
            }
        }

        internal func get_RadiusImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationPivot.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Radius(pThis, &value))
            }
            return value
        }

        internal func put_RadiusImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationPivot.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Radius(pThis, value))
            }
        }

    }

    public class IManipulationPivotFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationPivotFactory }

        internal func CreateInstanceWithCenterAndRadiusImpl(_ center: WindowsFoundation.Point, _ radius: Double) throws -> IManipulationPivot {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationPivotFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithCenterAndRadius(pThis, .from(swift: center), radius, &valueAbi))
                }
            }
            return IManipulationPivot(value!)
        }

    }

    public class IManipulationStartedRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs }

        internal func get_ContainerImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Container(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal func get_CumulativeImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cumulative(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IManipulationStartedRoutedEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ManipulationStartedRoutedEventArgs.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IManipulationStartedRoutedEventArgs {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IManipulationStartedRoutedEventArgs(value!)
        }

    }

    public class IManipulationStartingRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs }

        internal func get_ModeImpl() throws -> WinUI.ManipulationModes {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CManipulationModes = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal func put_ModeImpl(_ value: WinUI.ManipulationModes) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

        internal func get_ContainerImpl() throws -> WinUI.UIElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Container(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContainerImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Container(pThis, RawPointer(value)))
            }
        }

        internal func get_PivotImpl() throws -> WinUI.ManipulationPivot? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Pivot(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PivotImpl(_ value: WinUI.ManipulationPivot?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Pivot(pThis, RawPointer(value)))
            }
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class INoFocusCandidateFoundEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs }

        internal func get_DirectionImpl() throws -> WinUI.FocusNavigationDirection {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusNavigationDirection = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_InputDeviceImpl() throws -> WinUI.FocusInputDeviceKind {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CFocusInputDeviceKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputDevice(pThis, &value))
            }
            return value
        }

    }

    public class IPointer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointer }

        internal func get_PointerIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerId(pThis, &value))
            }
            return value
        }

        internal func get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal func get_IsInContactImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInContact(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsInRangeImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInRange(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IPointerRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs }

        internal func get_PointerImpl() throws -> WinUI.Pointer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Pointer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_KeyModifiersImpl() throws -> UWP.VirtualKeyModifiers {
            var value: __x_ABI_CWindows_CSystem_CVirtualKeyModifiers = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyModifiers(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_IsGeneratedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsGenerated(pThis, &value))
            }
            return .init(from: value)
        }

        internal func GetCurrentPointImpl(_ relativeTo: WinUI.UIElement?) throws -> WinAppSDK.PointerPoint? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentPoint(pThis, RawPointer(relativeTo), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetIntermediatePointsImpl(_ relativeTo: WinUI.UIElement?) throws -> WindowsFoundation.AnyIVector<WinAppSDK.PointerPoint?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetIntermediatePoints(pThis, RawPointer(relativeTo), &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CInput__CPointerPointWrapper.unwrapFrom(abi: result)
        }

    }

    public class IProcessKeyboardAcceleratorEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs }

        internal func get_KeyImpl() throws -> UWP.VirtualKey {
            var value: __x_ABI_CWindows_CSystem_CVirtualKey = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &value))
            }
            return value
        }

        internal func get_ModifiersImpl() throws -> UWP.VirtualKeyModifiers {
            var value: __x_ABI_CWindows_CSystem_CVirtualKeyModifiers = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Modifiers(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class IRightTappedRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs }

        internal func get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetPositionImpl(_ relativeTo: WinUI.UIElement?) throws -> WindowsFoundation.Point {
            var result: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPosition(pThis, RawPointer(relativeTo), &result))
            }
            return .from(abi: result)
        }

    }

    public class ITappedRoutedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs }

        internal func get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetPositionImpl(_ relativeTo: WinUI.UIElement?) throws -> WindowsFoundation.Point {
            var result: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPosition(pThis, RawPointer(relativeTo), &result))
            }
            return .from(abi: result)
        }

    }

}
// MARK - DoubleTappedEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class DoubleTappedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.DoubleTappedRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias DoubleTappedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.DoubleTappedEventHandlerBridge>
    internal static var DoubleTappedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandlerVtbl = .init(
        QueryInterface: { DoubleTappedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { DoubleTappedEventHandlerWrapper.addRef($0) },
        Release: { DoubleTappedEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = DoubleTappedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.DoubleTappedRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.DoubleTappedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - HoldingEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class HoldingEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.HoldingRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias HoldingEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.HoldingEventHandlerBridge>
    internal static var HoldingEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandlerVtbl = .init(
        QueryInterface: { HoldingEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { HoldingEventHandlerWrapper.addRef($0) },
        Release: { HoldingEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = HoldingEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.HoldingRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.HoldingEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - KeyEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class KeyEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.KeyRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias KeyEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.KeyEventHandlerBridge>
    internal static var KeyEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandlerVtbl = .init(
        QueryInterface: { KeyEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { KeyEventHandlerWrapper.addRef($0) },
        Release: { KeyEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = KeyEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.KeyRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.KeyEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - ManipulationCompletedEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class ManipulationCompletedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.ManipulationCompletedRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias ManipulationCompletedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.ManipulationCompletedEventHandlerBridge>
    internal static var ManipulationCompletedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandlerVtbl = .init(
        QueryInterface: { ManipulationCompletedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ManipulationCompletedEventHandlerWrapper.addRef($0) },
        Release: { ManipulationCompletedEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = ManipulationCompletedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.ManipulationCompletedRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.ManipulationCompletedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - ManipulationDeltaEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class ManipulationDeltaEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.ManipulationDeltaRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias ManipulationDeltaEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.ManipulationDeltaEventHandlerBridge>
    internal static var ManipulationDeltaEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandlerVtbl = .init(
        QueryInterface: { ManipulationDeltaEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ManipulationDeltaEventHandlerWrapper.addRef($0) },
        Release: { ManipulationDeltaEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = ManipulationDeltaEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.ManipulationDeltaRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.ManipulationDeltaEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - ManipulationInertiaStartingEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class ManipulationInertiaStartingEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.ManipulationInertiaStartingRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias ManipulationInertiaStartingEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.ManipulationInertiaStartingEventHandlerBridge>
    internal static var ManipulationInertiaStartingEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandlerVtbl = .init(
        QueryInterface: { ManipulationInertiaStartingEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ManipulationInertiaStartingEventHandlerWrapper.addRef($0) },
        Release: { ManipulationInertiaStartingEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = ManipulationInertiaStartingEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.ManipulationInertiaStartingRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.ManipulationInertiaStartingEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - ManipulationStartedEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class ManipulationStartedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.ManipulationStartedRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias ManipulationStartedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.ManipulationStartedEventHandlerBridge>
    internal static var ManipulationStartedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandlerVtbl = .init(
        QueryInterface: { ManipulationStartedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ManipulationStartedEventHandlerWrapper.addRef($0) },
        Release: { ManipulationStartedEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = ManipulationStartedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.ManipulationStartedRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.ManipulationStartedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - ManipulationStartingEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class ManipulationStartingEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.ManipulationStartingRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias ManipulationStartingEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.ManipulationStartingEventHandlerBridge>
    internal static var ManipulationStartingEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandlerVtbl = .init(
        QueryInterface: { ManipulationStartingEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ManipulationStartingEventHandlerWrapper.addRef($0) },
        Release: { ManipulationStartingEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = ManipulationStartingEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.ManipulationStartingRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.ManipulationStartingEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - PointerEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class PointerEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.PointerRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias PointerEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.PointerEventHandlerBridge>
    internal static var PointerEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandlerVtbl = .init(
        QueryInterface: { PointerEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { PointerEventHandlerWrapper.addRef($0) },
        Release: { PointerEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = PointerEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.PointerEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - RightTappedEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class RightTappedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.RightTappedRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias RightTappedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.RightTappedEventHandlerBridge>
    internal static var RightTappedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandlerVtbl = .init(
        QueryInterface: { RightTappedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { RightTappedEventHandlerWrapper.addRef($0) },
        Release: { RightTappedEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = RightTappedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.RightTappedRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.RightTappedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - TappedEventHandler
extension __ABI_Microsoft_UI_Xaml_Input {
    public class TappedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler }

        open func InvokeImpl(_ sender: Any?, _ e: WinUI.TappedRoutedEventArgs?) throws {
            let senderWrapper = __ABI_.AnyWrapper(sender)
            let _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias TappedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Input.TappedEventHandlerBridge>
    internal static var TappedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandlerVtbl = .init(
        QueryInterface: { TappedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { TappedEventHandlerWrapper.addRef($0) },
        Release: { TappedEventHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = TappedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let e: WinUI.TappedRoutedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.TappedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


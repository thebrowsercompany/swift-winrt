// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.xamlsourcefocusnavigationreason)
public typealias XamlSourceFocusNavigationReason = __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CXamlSourceFocusNavigationReason
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsource)
open class DesktopWindowXamlSource : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Hosting.IDesktopWindowXamlSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource>?) -> DesktopWindowXamlSource? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IDesktopWindowXamlSourceFactory : __ABI_Microsoft_UI_Xaml_Hosting.IDesktopWindowXamlSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IDesktopWindowXamlSourceFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsource.navigatefocus)
    public func navigateFocus(_ request: XamlSourceFocusNavigationRequest!) throws -> XamlSourceFocusNavigationResult! {
        try _default.NavigateFocusImpl(request)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsource.initialize)
    public func initialize(_ parentWindowId: WinAppSDK.WindowId) throws {
        try _default.InitializeImpl(parentWindowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsource.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsource.hasfocus)
    public var hasFocus : Bool {
        get { try! _default.get_HasFocusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsource.sitebridge)
    public var siteBridge : WinAppSDK.DesktopChildSiteBridge! {
        get { try! _default.get_SiteBridgeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsource.systembackdrop)
    public var systemBackdrop : WinUI.SystemBackdrop! {
        get { try! _default.get_SystemBackdropImpl() }
        set { try! _default.put_SystemBackdropImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsource.gotfocus)
    public lazy var gotFocus : Event<TypedEventHandler<DesktopWindowXamlSource?, DesktopWindowXamlSourceGotFocusEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_GotFocusImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_GotFocusImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsource.takefocusrequested)
    public lazy var takeFocusRequested : Event<TypedEventHandler<DesktopWindowXamlSource?, DesktopWindowXamlSourceTakeFocusRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TakeFocusRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TakeFocusRequestedImpl($0)
       }
      )
    }()

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsource.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    internal enum IDesktopWindowXamlSource : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = DesktopWindowXamlSource
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSource
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Hosting.IDesktopWindowXamlSource
        }
    }
    internal typealias Composable = IDesktopWindowXamlSource
    deinit {
        _default = nil
        _IClosable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsourcegotfocuseventargs)
public final class DesktopWindowXamlSourceGotFocusEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Hosting.IDesktopWindowXamlSourceGotFocusEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceGotFocusEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceGotFocusEventArgs>?) -> DesktopWindowXamlSourceGotFocusEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsourcegotfocuseventargs.request)
    public var request : XamlSourceFocusNavigationRequest! {
        get { try! _default.get_RequestImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsourcetakefocusrequestedeventargs)
public final class DesktopWindowXamlSourceTakeFocusRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Hosting.IDesktopWindowXamlSourceTakeFocusRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceTakeFocusRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIDesktopWindowXamlSourceTakeFocusRequestedEventArgs>?) -> DesktopWindowXamlSourceTakeFocusRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.desktopwindowxamlsourcetakefocusrequestedeventargs.request)
    public var request : XamlSourceFocusNavigationRequest! {
        get { try! _default.get_RequestImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.elementcompositionpreview)
public final class ElementCompositionPreview : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Hosting.IElementCompositionPreview
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreview
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIElementCompositionPreview>?) -> ElementCompositionPreview? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IElementCompositionPreviewStatics: __ABI_Microsoft_UI_Xaml_Hosting.IElementCompositionPreviewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Hosting.ElementCompositionPreview"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.elementcompositionpreview.getelementvisual)
    public static func getElementVisual(_ element: WinUI.UIElement!) -> WinAppSDK.Visual! {
        return try! _IElementCompositionPreviewStatics.GetElementVisualImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.elementcompositionpreview.getelementchildvisual)
    public static func getElementChildVisual(_ element: WinUI.UIElement!) -> WinAppSDK.Visual! {
        return try! _IElementCompositionPreviewStatics.GetElementChildVisualImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.elementcompositionpreview.setelementchildvisual)
    public static func setElementChildVisual(_ element: WinUI.UIElement!, _ visual: WinAppSDK.Visual!) {
        try! _IElementCompositionPreviewStatics.SetElementChildVisualImpl(element, visual)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.elementcompositionpreview.getscrollviewermanipulationpropertyset)
    public static func getScrollViewerManipulationPropertySet(_ scrollViewer: WinUI.ScrollViewer!) -> WinAppSDK.CompositionPropertySet! {
        return try! _IElementCompositionPreviewStatics.GetScrollViewerManipulationPropertySetImpl(scrollViewer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.elementcompositionpreview.setimplicitshowanimation)
    public static func setImplicitShowAnimation(_ element: WinUI.UIElement!, _ animation: WinAppSDK.AnyICompositionAnimationBase!) {
        try! _IElementCompositionPreviewStatics.SetImplicitShowAnimationImpl(element, animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.elementcompositionpreview.setimplicithideanimation)
    public static func setImplicitHideAnimation(_ element: WinUI.UIElement!, _ animation: WinAppSDK.AnyICompositionAnimationBase!) {
        try! _IElementCompositionPreviewStatics.SetImplicitHideAnimationImpl(element, animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.elementcompositionpreview.setistranslationenabled)
    public static func setIsTranslationEnabled(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _IElementCompositionPreviewStatics.SetIsTranslationEnabledImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.elementcompositionpreview.getpointerpositionpropertyset)
    public static func getPointerPositionPropertySet(_ targetElement: WinUI.UIElement!) -> WinAppSDK.CompositionPropertySet! {
        return try! _IElementCompositionPreviewStatics.GetPointerPositionPropertySetImpl(targetElement)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.windowsxamlmanager)
public final class WindowsXamlManager : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Hosting.IWindowsXamlManager
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManager
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIWindowsXamlManager>?) -> WindowsXamlManager? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IWindowsXamlManagerStatics: __ABI_Microsoft_UI_Xaml_Hosting.IWindowsXamlManagerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Hosting.WindowsXamlManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.windowsxamlmanager.initializeforcurrentthread)
    public static func initializeForCurrentThread() -> WindowsXamlManager! {
        return try! _IWindowsXamlManagerStatics.InitializeForCurrentThreadImpl()
    }

    private static let _IWindowsXamlManagerStatics2: __ABI_Microsoft_UI_Xaml_Hosting.IWindowsXamlManagerStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Hosting.WindowsXamlManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.windowsxamlmanager.getforcurrentthread)
    public static func getForCurrentThread() -> WindowsXamlManager! {
        return try! _IWindowsXamlManagerStatics2.GetForCurrentThreadImpl()
    }

    private lazy var _IWindowsXamlManager2: __ABI_Microsoft_UI_Xaml_Hosting.IWindowsXamlManager2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.windowsxamlmanager.xamlshutdowncompletedonthread)
    public lazy var xamlShutdownCompletedOnThread : Event<TypedEventHandler<WindowsXamlManager?, XamlShutdownCompletedOnThreadEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IWindowsXamlManager2 else { return .init() }
          return try! this.add_XamlShutdownCompletedOnThreadImpl($0)
        },
        remove: { [weak self] in
         try? self?._IWindowsXamlManager2.remove_XamlShutdownCompletedOnThreadImpl($0)
       }
      )
    }()

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.windowsxamlmanager.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    deinit {
        _default = nil
        _IWindowsXamlManager2 = nil
        _IClosable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.xamlshutdowncompletedonthreadeventargs)
public final class XamlShutdownCompletedOnThreadEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Hosting.IXamlShutdownCompletedOnThreadEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlShutdownCompletedOnThreadEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlShutdownCompletedOnThreadEventArgs>?) -> XamlShutdownCompletedOnThreadEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.xamlshutdowncompletedonthreadeventargs.getdispatcherqueuedeferral)
    public func getDispatcherQueueDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDispatcherQueueDeferralImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.xamlsourcefocusnavigationrequest)
public final class XamlSourceFocusNavigationRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Hosting.IXamlSourceFocusNavigationRequest
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationRequest>?) -> XamlSourceFocusNavigationRequest? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IXamlSourceFocusNavigationRequestFactory: __ABI_Microsoft_UI_Xaml_Hosting.IXamlSourceFocusNavigationRequestFactory = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest"))
    public init(_ reason: XamlSourceFocusNavigationReason) {
        super.init(try! Self._IXamlSourceFocusNavigationRequestFactory.CreateInstanceImpl(reason))
    }

    public init(_ reason: XamlSourceFocusNavigationReason, _ hintRect: WindowsFoundation.Rect) {
        super.init(try! Self._IXamlSourceFocusNavigationRequestFactory.CreateInstanceWithHintRectImpl(reason, hintRect))
    }

    public init(_ reason: XamlSourceFocusNavigationReason, _ hintRect: WindowsFoundation.Rect, _ correlationId: Foundation.UUID) {
        super.init(try! Self._IXamlSourceFocusNavigationRequestFactory.CreateInstanceWithHintRectAndCorrelationIdImpl(reason, hintRect, correlationId))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.xamlsourcefocusnavigationrequest.correlationid)
    public var correlationId : Foundation.UUID {
        get { try! _default.get_CorrelationIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.xamlsourcefocusnavigationrequest.hintrect)
    public var hintRect : WindowsFoundation.Rect {
        get { try! _default.get_HintRectImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.xamlsourcefocusnavigationrequest.reason)
    public var reason : XamlSourceFocusNavigationReason {
        get { try! _default.get_ReasonImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.xamlsourcefocusnavigationresult)
public final class XamlSourceFocusNavigationResult : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Hosting.IXamlSourceFocusNavigationResult
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CHosting_CIXamlSourceFocusNavigationResult>?) -> XamlSourceFocusNavigationResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IXamlSourceFocusNavigationResultFactory: __ABI_Microsoft_UI_Xaml_Hosting.IXamlSourceFocusNavigationResultFactory = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult"))
    public init(_ focusMoved: Bool) {
        super.init(try! Self._IXamlSourceFocusNavigationResultFactory.CreateInstanceImpl(focusMoved))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.hosting.xamlsourcefocusnavigationresult.wasfocusmoved)
    public var wasFocusMoved : Bool {
        get { try! _default.get_WasFocusMovedImpl() }
    }

    deinit {
        _default = nil
    }
}

extension WinUI.XamlSourceFocusNavigationReason {
    public static var programmatic : WinUI.XamlSourceFocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CXamlSourceFocusNavigationReason_Programmatic
    }
    public static var restore : WinUI.XamlSourceFocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CXamlSourceFocusNavigationReason_Restore
    }
    public static var first : WinUI.XamlSourceFocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CXamlSourceFocusNavigationReason_First
    }
    public static var last : WinUI.XamlSourceFocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CXamlSourceFocusNavigationReason_Last
    }
    public static var left : WinUI.XamlSourceFocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CXamlSourceFocusNavigationReason_Left
    }
    public static var up : WinUI.XamlSourceFocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CXamlSourceFocusNavigationReason_Up
    }
    public static var right : WinUI.XamlSourceFocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CXamlSourceFocusNavigationReason_Right
    }
    public static var down : WinUI.XamlSourceFocusNavigationReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CHosting_CXamlSourceFocusNavigationReason_Down
    }
}
extension WinUI.XamlSourceFocusNavigationReason: @retroactive Hashable, @retroactive Codable {}


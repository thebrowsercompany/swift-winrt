// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.ellipse)
public final class Ellipse : WinUI.Shape {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Shapes.IEllipse
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIEllipse
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIEllipse>?) -> Ellipse? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Shapes.Ellipse")))
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Ellipse
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIEllipse
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Shapes.IEllipse
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.path)
open class Path : WinUI.Shape {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Shapes.IPath
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIPath
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIPath>?) -> Path? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPathFactory : __ABI_Microsoft_UI_Xaml_Shapes.IPathFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Shapes.Path"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPathFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IPathStatics: __ABI_Microsoft_UI_Xaml_Shapes.IPathStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Shapes.Path"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.path.dataproperty)
    public class var dataProperty : WinUI.DependencyProperty! {
        get { try! _IPathStatics.get_DataPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.path.data)
    public var data : WinUI.Geometry! {
        get { try! _default.get_DataImpl() }
        set { try! _default.put_DataImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Path
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIPath
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Shapes.IPath
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.rectangle)
public final class Rectangle : WinUI.Shape {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Shapes.IRectangle
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIRectangle
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIRectangle>?) -> Rectangle? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Shapes.Rectangle")))
    }

    private static let _IRectangleStatics: __ABI_Microsoft_UI_Xaml_Shapes.IRectangleStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Shapes.Rectangle"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.rectangle.radiusxproperty)
    public static var radiusXProperty : WinUI.DependencyProperty! {
        get { try! _IRectangleStatics.get_RadiusXPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.rectangle.radiusyproperty)
    public static var radiusYProperty : WinUI.DependencyProperty! {
        get { try! _IRectangleStatics.get_RadiusYPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.rectangle.radiusx)
    public var radiusX : Double {
        get { try! _default.get_RadiusXImpl() }
        set { try! _default.put_RadiusXImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.rectangle.radiusy)
    public var radiusY : Double {
        get { try! _default.get_RadiusYImpl() }
        set { try! _default.put_RadiusYImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Rectangle
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIRectangle
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Shapes.IRectangle
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape)
open class Shape : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Shapes.IShape
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIShape
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIShape>?) -> Shape? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IShapeFactory : __ABI_Microsoft_UI_Xaml_Shapes.IShapeFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Shapes.Shape"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IShapeFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IShapeStatics: __ABI_Microsoft_UI_Xaml_Shapes.IShapeStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Shapes.Shape"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.fillproperty)
    public class var fillProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_FillPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.stretchproperty)
    public class var stretchProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_StretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokedasharrayproperty)
    public class var strokeDashArrayProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_StrokeDashArrayPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokedashcapproperty)
    public class var strokeDashCapProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_StrokeDashCapPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokedashoffsetproperty)
    public class var strokeDashOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_StrokeDashOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokeendlinecapproperty)
    public class var strokeEndLineCapProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_StrokeEndLineCapPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokelinejoinproperty)
    public class var strokeLineJoinProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_StrokeLineJoinPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokemiterlimitproperty)
    public class var strokeMiterLimitProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_StrokeMiterLimitPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokeproperty)
    public class var strokeProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_StrokePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokestartlinecapproperty)
    public class var strokeStartLineCapProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_StrokeStartLineCapPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokethicknessproperty)
    public class var strokeThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IShapeStatics.get_StrokeThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.getalphamask)
    public func getAlphaMask() throws -> WinAppSDK.CompositionBrush! {
        try _default.GetAlphaMaskImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.fill)
    public var fill : WinUI.Brush! {
        get { try! _default.get_FillImpl() }
        set { try! _default.put_FillImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.geometrytransform)
    public var geometryTransform : WinUI.Transform! {
        get { try! _default.get_GeometryTransformImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.stretch)
    public var stretch : WinUI.Stretch {
        get { try! _default.get_StretchImpl() }
        set { try! _default.put_StretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.stroke)
    public var stroke : WinUI.Brush! {
        get { try! _default.get_StrokeImpl() }
        set { try! _default.put_StrokeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokedasharray)
    public var strokeDashArray : WinUI.DoubleCollection! {
        get { try! _default.get_StrokeDashArrayImpl() }
        set { try! _default.put_StrokeDashArrayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokedashcap)
    public var strokeDashCap : WinUI.PenLineCap {
        get { try! _default.get_StrokeDashCapImpl() }
        set { try! _default.put_StrokeDashCapImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokedashoffset)
    public var strokeDashOffset : Double {
        get { try! _default.get_StrokeDashOffsetImpl() }
        set { try! _default.put_StrokeDashOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokeendlinecap)
    public var strokeEndLineCap : WinUI.PenLineCap {
        get { try! _default.get_StrokeEndLineCapImpl() }
        set { try! _default.put_StrokeEndLineCapImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokelinejoin)
    public var strokeLineJoin : WinUI.PenLineJoin {
        get { try! _default.get_StrokeLineJoinImpl() }
        set { try! _default.put_StrokeLineJoinImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokemiterlimit)
    public var strokeMiterLimit : Double {
        get { try! _default.get_StrokeMiterLimitImpl() }
        set { try! _default.put_StrokeMiterLimitImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokestartlinecap)
    public var strokeStartLineCap : WinUI.PenLineCap {
        get { try! _default.get_StrokeStartLineCapImpl() }
        set { try! _default.put_StrokeStartLineCapImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.shapes.shape.strokethickness)
    public var strokeThickness : Double {
        get { try! _default.get_StrokeThicknessImpl() }
        set { try! _default.put_StrokeThicknessImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Shape
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CShapes_CIShape
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Shapes.IShape
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}


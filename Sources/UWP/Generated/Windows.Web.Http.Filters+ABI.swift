// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CWeb_CHttp_CFilters_CIHttpFilter: WindowsFoundation.IID {
    .init(Data1: 0xA4CB6DD5, Data2: 0x0902, Data3: 0x439E, Data4: ( 0xBF,0xD7,0xE1,0x25,0x52,0xB1,0x65,0xCE ))// A4CB6DD5-0902-439E-BFD7-E12552B165CE
}

public enum __ABI_Windows_Web_Http_Filters {
    public class IHttpFilter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CWeb_CHttp_CFilters_CIHttpFilter }

        open func SendRequestAsyncImpl(_ request: UWP.HttpRequestMessage?) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.HttpResponseMessage?, UWP.HttpProgress>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CWeb_CHttp_CFilters_CIHttpFilter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SendRequestAsync(pThis, RawPointer(request), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressWrapper.unwrapFrom(abi: operation)
        }

    }

    internal static var IHttpFilterVTable: __x_ABI_CWindows_CWeb_CHttp_CFilters_CIHttpFilterVtbl = .init(
        QueryInterface: { IHttpFilterWrapper.queryInterface($0, $1, $2) },
        AddRef: { IHttpFilterWrapper.addRef($0) },
        Release: { IHttpFilterWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Web_Http_Filters.IHttpFilterWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Web.Http.Filters.IHttpFilter").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        SendRequestAsync: {
            do {
                guard let __unwrapped__instance = IHttpFilterWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let request: UWP.HttpRequestMessage? = .from(abi: ComPtr($1))
                let operation = try __unwrapped__instance.sendRequestAsync(request)
                let operationWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CWeb__CHttp__CHttpResponseMessage___x_ABI_CWindows__CWeb__CHttp__CHttpProgressWrapper(operation)
                operationWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IHttpFilterWrapper = InterfaceWrapperBase<__IMPL_Windows_Web_Http_Filters.IHttpFilterBridge>
}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardhistoryitemsresultstatus)
public typealias ClipboardHistoryItemsResultStatus = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CClipboardHistoryItemsResultStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageoperation)
public typealias DataPackageOperation = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.sethistoryitemascontentstatus)
public typealias SetHistoryItemAsContentStatus = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CSetHistoryItemAsContentStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareuitheme)
public typealias ShareUITheme = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CShareUITheme
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard)
public final class Clipboard {
    private static let _IClipboardStatics: __ABI_Windows_ApplicationModel_DataTransfer.IClipboardStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.Clipboard"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.getcontent)
    public static func getContent() -> DataPackageView! {
        return try! _IClipboardStatics.GetContentImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.setcontent)
    public static func setContent(_ content: DataPackage!) {
        try! _IClipboardStatics.SetContentImpl(content)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.flush)
    public static func flush() {
        try! _IClipboardStatics.FlushImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.clear)
    public static func clear() {
        try! _IClipboardStatics.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.contentchanged)
    public static var contentChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IClipboardStatics.add_ContentChangedImpl($0) },
        remove: { try? _IClipboardStatics.remove_ContentChangedImpl($0) }
      )
    }()

    private static let _IClipboardStatics2: __ABI_Windows_ApplicationModel_DataTransfer.IClipboardStatics2 = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.Clipboard"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.gethistoryitemsasync)
    public static func getHistoryItemsAsync() -> WindowsFoundation.AnyIAsyncOperation<ClipboardHistoryItemsResult?>! {
        return try! _IClipboardStatics2.GetHistoryItemsAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.clearhistory)
    public static func clearHistory() -> Bool {
        return try! _IClipboardStatics2.ClearHistoryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.deleteitemfromhistory)
    public static func deleteItemFromHistory(_ item: ClipboardHistoryItem!) -> Bool {
        return try! _IClipboardStatics2.DeleteItemFromHistoryImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.sethistoryitemascontent)
    public static func setHistoryItemAsContent(_ item: ClipboardHistoryItem!) -> SetHistoryItemAsContentStatus {
        return try! _IClipboardStatics2.SetHistoryItemAsContentImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.ishistoryenabled)
    public static func isHistoryEnabled() -> Bool {
        return try! _IClipboardStatics2.IsHistoryEnabledImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.isroamingenabled)
    public static func isRoamingEnabled() -> Bool {
        return try! _IClipboardStatics2.IsRoamingEnabledImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.setcontentwithoptions)
    public static func setContentWithOptions(_ content: DataPackage!, _ options: ClipboardContentOptions!) -> Bool {
        return try! _IClipboardStatics2.SetContentWithOptionsImpl(content, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.historychanged)
    public static var historyChanged : Event<EventHandler<ClipboardHistoryChangedEventArgs?>> = {
      .init(
        add: { try! _IClipboardStatics2.add_HistoryChangedImpl($0) },
        remove: { try? _IClipboardStatics2.remove_HistoryChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.historyenabledchanged)
    public static var historyEnabledChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IClipboardStatics2.add_HistoryEnabledChangedImpl($0) },
        remove: { try? _IClipboardStatics2.remove_HistoryEnabledChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboard.roamingenabledchanged)
    public static var roamingEnabledChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IClipboardStatics2.add_RoamingEnabledChangedImpl($0) },
        remove: { try? _IClipboardStatics2.remove_RoamingEnabledChangedImpl($0) }
      )
    }()

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardcontentoptions)
public final class ClipboardContentOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IClipboardContentOptions
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIClipboardContentOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIClipboardContentOptions>?) -> ClipboardContentOptions? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.DataTransfer.ClipboardContentOptions")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardcontentoptions.historyformats)
    public var historyFormats : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_HistoryFormatsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardcontentoptions.isallowedinhistory)
    public var isAllowedInHistory : Bool {
        get { try! _default.get_IsAllowedInHistoryImpl() }
        set { try! _default.put_IsAllowedInHistoryImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardcontentoptions.isroamable)
    public var isRoamable : Bool {
        get { try! _default.get_IsRoamableImpl() }
        set { try! _default.put_IsRoamableImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardcontentoptions.roamingformats)
    public var roamingFormats : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_RoamingFormatsImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardhistorychangedeventargs)
public final class ClipboardHistoryChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IClipboardHistoryChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIClipboardHistoryChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIClipboardHistoryChangedEventArgs>?) -> ClipboardHistoryChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardhistoryitem)
public final class ClipboardHistoryItem : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IClipboardHistoryItem
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIClipboardHistoryItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIClipboardHistoryItem>?) -> ClipboardHistoryItem? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardhistoryitem.content)
    public var content : DataPackageView! {
        get { try! _default.get_ContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardhistoryitem.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardhistoryitem.timestamp)
    public var timestamp : WindowsFoundation.DateTime {
        get { try! _default.get_TimestampImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardhistoryitemsresult)
public final class ClipboardHistoryItemsResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IClipboardHistoryItemsResult
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIClipboardHistoryItemsResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIClipboardHistoryItemsResult>?) -> ClipboardHistoryItemsResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardhistoryitemsresult.items)
    public var items : WindowsFoundation.AnyIVectorView<ClipboardHistoryItem?>! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.clipboardhistoryitemsresult.status)
    public var status : ClipboardHistoryItemsResultStatus {
        get { try! _default.get_StatusImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage)
public final class DataPackage : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IDataPackage
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackage>?) -> DataPackage? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.DataTransfer.DataPackage")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.getview)
    public func getView() throws -> DataPackageView! {
        try _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.setdata)
    public func setData(_ formatId: String, _ value: Any!) throws {
        try _default.SetDataImpl(formatId, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.setdataprovider)
    public func setDataProvider(_ formatId: String, _ delayRenderer: DataProviderHandler!) throws {
        try _default.SetDataProviderImpl(formatId, delayRenderer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.settext)
    public func setText(_ value: String) throws {
        try _default.SetTextImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.seturi)
    public func setUri(_ value: WindowsFoundation.Uri!) throws {
        try _default.SetUriImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.sethtmlformat)
    public func setHtmlFormat(_ value: String) throws {
        try _default.SetHtmlFormatImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.setrtf)
    public func setRtf(_ value: String) throws {
        try _default.SetRtfImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.setbitmap)
    public func setBitmap(_ value: UWP.RandomAccessStreamReference!) throws {
        try _default.SetBitmapImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.setstorageitems)
    public func setStorageItems(_ value: WindowsFoundation.AnyIIterable<UWP.AnyIStorageItem?>!) throws {
        try _default.SetStorageItemsReadOnlyImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.setstorageitems)
    public func setStorageItems(_ value: WindowsFoundation.AnyIIterable<UWP.AnyIStorageItem?>!, _ readOnly: Bool) throws {
        try _default.SetStorageItemsImpl(value, readOnly)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.properties)
    public var properties : DataPackagePropertySet! {
        get { try! _default.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.requestedoperation)
    public var requestedOperation : DataPackageOperation {
        get { try! _default.get_RequestedOperationImpl() }
        set { try! _default.put_RequestedOperationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.resourcemap)
    public var resourceMap : WindowsFoundation.AnyIMap<String, UWP.RandomAccessStreamReference?>! {
        get { try! _default.get_ResourceMapImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.destroyed)
    public lazy var destroyed : Event<TypedEventHandler<DataPackage?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DestroyedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DestroyedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.operationcompleted)
    public lazy var operationCompleted : Event<TypedEventHandler<DataPackage?, OperationCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_OperationCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_OperationCompletedImpl($0)
       }
      )
    }()

    private lazy var _IDataPackage2: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackage2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.setapplicationlink)
    public func setApplicationLink(_ value: WindowsFoundation.Uri!) throws {
        try _IDataPackage2.SetApplicationLinkImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.setweblink)
    public func setWebLink(_ value: WindowsFoundation.Uri!) throws {
        try _IDataPackage2.SetWebLinkImpl(value)
    }

    private lazy var _IDataPackage3: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackage3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackage.sharecompleted)
    public lazy var shareCompleted : Event<TypedEventHandler<DataPackage?, ShareCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IDataPackage3 else { return .init() }
          return try! this.add_ShareCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IDataPackage3.remove_ShareCompletedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
        _IDataPackage2 = nil
        _IDataPackage3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset)
public final class DataPackagePropertySet : WinRTClass, IMap, IIterable {
    public typealias K = String
    public typealias V = Any?
    public typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IDataPackagePropertySet
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackagePropertySet
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackagePropertySet>?) -> DataPackagePropertySet? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IMap: IMapString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.lookup)
    public func lookup(_ key: String) -> Any? {
        try! _IMap.LookupImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.haskey)
    public func hasKey(_ key: String) -> Bool {
        try! _IMap.HasKeyImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.getview)
    public func getView() -> WindowsFoundation.AnyIMapView<String, Any?>? {
        try! _IMap.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.insert)
    public func insert(_ key: String, _ value: Any?) -> Bool {
        try! _IMap.InsertImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.remove)
    public func remove(_ key: String) {
        try! _IMap.RemoveImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.clear)
    public func clear() {
        try! _IMap.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.size)
    public var size : UInt32 {
        get { try! _IMap.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        try! _IIterable.FirstImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.applicationlistinguri)
    public var applicationListingUri : WindowsFoundation.Uri! {
        get { try! _default.get_ApplicationListingUriImpl() }
        set { try! _default.put_ApplicationListingUriImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.applicationname)
    public var applicationName : String {
        get { try! _default.get_ApplicationNameImpl() }
        set { try! _default.put_ApplicationNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.description)
    public var description : String {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.filetypes)
    public var fileTypes : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_FileTypesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.thumbnail)
    public var thumbnail : UWP.AnyIRandomAccessStreamReference! {
        get { try! _default.get_ThumbnailImpl() }
        set { try! _default.put_ThumbnailImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    private lazy var _IDataPackagePropertySet2: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackagePropertySet2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.contentsourceapplicationlink)
    public var contentSourceApplicationLink : WindowsFoundation.Uri! {
        get { try! _IDataPackagePropertySet2.get_ContentSourceApplicationLinkImpl() }
        set { try! _IDataPackagePropertySet2.put_ContentSourceApplicationLinkImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.contentsourceweblink)
    public var contentSourceWebLink : WindowsFoundation.Uri! {
        get { try! _IDataPackagePropertySet2.get_ContentSourceWebLinkImpl() }
        set { try! _IDataPackagePropertySet2.put_ContentSourceWebLinkImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.logobackgroundcolor)
    public var logoBackgroundColor : UWP.Color {
        get { try! _IDataPackagePropertySet2.get_LogoBackgroundColorImpl() }
        set { try! _IDataPackagePropertySet2.put_LogoBackgroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.packagefamilyname)
    public var packageFamilyName : String {
        get { try! _IDataPackagePropertySet2.get_PackageFamilyNameImpl() }
        set { try! _IDataPackagePropertySet2.put_PackageFamilyNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.square30x30logo)
    public var square30x30Logo : UWP.AnyIRandomAccessStreamReference! {
        get { try! _IDataPackagePropertySet2.get_Square30x30LogoImpl() }
        set { try! _IDataPackagePropertySet2.put_Square30x30LogoImpl(newValue) }
    }

    private lazy var _IDataPackagePropertySet3: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackagePropertySet3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.enterpriseid)
    public var enterpriseId : String {
        get { try! _IDataPackagePropertySet3.get_EnterpriseIdImpl() }
        set { try! _IDataPackagePropertySet3.put_EnterpriseIdImpl(newValue) }
    }

    private lazy var _IDataPackagePropertySet4: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackagePropertySet4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertyset.contentsourceuseractivityjson)
    public var contentSourceUserActivityJson : String {
        get { try! _IDataPackagePropertySet4.get_ContentSourceUserActivityJsonImpl() }
        set { try! _IDataPackagePropertySet4.put_ContentSourceUserActivityJsonImpl(newValue) }
    }

    deinit {
        _IMap = nil
        _IIterable = nil
        _default = nil
        _IDataPackagePropertySet2 = nil
        _IDataPackagePropertySet3 = nil
        _IDataPackagePropertySet4 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview)
public final class DataPackagePropertySetView : WinRTClass, IMapView, IIterable {
    public typealias K = String
    public typealias V = Any?
    public typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IDataPackagePropertySetView
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackagePropertySetView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackagePropertySetView>?) -> DataPackagePropertySetView? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.applicationlistinguri)
    public var applicationListingUri : WindowsFoundation.Uri! {
        get { try! _default.get_ApplicationListingUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.applicationname)
    public var applicationName : String {
        get { try! _default.get_ApplicationNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.description)
    public var description : String {
        get { try! _default.get_DescriptionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.filetypes)
    public var fileTypes : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_FileTypesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.thumbnail)
    public var thumbnail : UWP.RandomAccessStreamReference! {
        get { try! _default.get_ThumbnailImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
    }

    private lazy var _IDataPackagePropertySetView2: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackagePropertySetView2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.contentsourceapplicationlink)
    public var contentSourceApplicationLink : WindowsFoundation.Uri! {
        get { try! _IDataPackagePropertySetView2.get_ContentSourceApplicationLinkImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.contentsourceweblink)
    public var contentSourceWebLink : WindowsFoundation.Uri! {
        get { try! _IDataPackagePropertySetView2.get_ContentSourceWebLinkImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.logobackgroundcolor)
    public var logoBackgroundColor : UWP.Color {
        get { try! _IDataPackagePropertySetView2.get_LogoBackgroundColorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.packagefamilyname)
    public var packageFamilyName : String {
        get { try! _IDataPackagePropertySetView2.get_PackageFamilyNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.square30x30logo)
    public var square30x30Logo : UWP.AnyIRandomAccessStreamReference! {
        get { try! _IDataPackagePropertySetView2.get_Square30x30LogoImpl() }
    }

    private lazy var _IDataPackagePropertySetView3: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackagePropertySetView3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.enterpriseid)
    public var enterpriseId : String {
        get { try! _IDataPackagePropertySetView3.get_EnterpriseIdImpl() }
    }

    private lazy var _IDataPackagePropertySetView4: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackagePropertySetView4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.contentsourceuseractivityjson)
    public var contentSourceUserActivityJson : String {
        get { try! _IDataPackagePropertySetView4.get_ContentSourceUserActivityJsonImpl() }
    }

    private lazy var _IDataPackagePropertySetView5: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackagePropertySetView5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.isfromroamingclipboard)
    public var isFromRoamingClipboard : Bool {
        get { try! _IDataPackagePropertySetView5.get_IsFromRoamingClipboardImpl() }
    }

    private lazy var _IMapView: IMapViewString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.lookup)
    public func lookup(_ key: String) -> Any? {
        try! _IMapView.LookupImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.haskey)
    public func hasKey(_ key: String) -> Bool {
        try! _IMapView.HasKeyImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.split)
    public func split(_ first: inout WindowsFoundation.AnyIMapView<String, Any?>?, _ second: inout WindowsFoundation.AnyIMapView<String, Any?>?) {
        try! _IMapView.SplitImpl(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.size)
    public var size : UInt32 {
        get { try! _IMapView.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackagepropertysetview.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IDataPackagePropertySetView2 = nil
        _IDataPackagePropertySetView3 = nil
        _IDataPackagePropertySetView4 = nil
        _IDataPackagePropertySetView5 = nil
        _IMapView = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview)
public final class DataPackageView : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IDataPackageView
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackageView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataPackageView>?) -> DataPackageView? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.reportoperationcompleted)
    public func reportOperationCompleted(_ value: DataPackageOperation) throws {
        try _default.ReportOperationCompletedImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.contains)
    public func contains(_ formatId: String) throws -> Bool {
        try _default.ContainsImpl(formatId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.getdataasync)
    public func getDataAsync(_ formatId: String) throws -> WindowsFoundation.AnyIAsyncOperation<Any?>! {
        try _default.GetDataAsyncImpl(formatId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.gettextasync)
    public func getTextAsync() throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _default.GetTextAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.gettextasync)
    public func getTextAsync(_ formatId: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _default.GetCustomTextAsyncImpl(formatId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.geturiasync)
    public func getUriAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.Uri?>! {
        try _default.GetUriAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.gethtmlformatasync)
    public func getHtmlFormatAsync() throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _default.GetHtmlFormatAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.getresourcemapasync)
    public func getResourceMapAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?>! {
        try _default.GetResourceMapAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.getrtfasync)
    public func getRtfAsync() throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _default.GetRtfAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.getbitmapasync)
    public func getBitmapAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.RandomAccessStreamReference?>! {
        try _default.GetBitmapAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.getstorageitemsasync)
    public func getStorageItemsAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>?>! {
        try _default.GetStorageItemsAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.availableformats)
    public var availableFormats : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_AvailableFormatsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.properties)
    public var properties : DataPackagePropertySetView! {
        get { try! _default.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.requestedoperation)
    public var requestedOperation : DataPackageOperation {
        get { try! _default.get_RequestedOperationImpl() }
    }

    private lazy var _IDataPackageView2: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackageView2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.getapplicationlinkasync)
    public func getApplicationLinkAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.Uri?>! {
        try _IDataPackageView2.GetApplicationLinkAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.getweblinkasync)
    public func getWebLinkAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.Uri?>! {
        try _IDataPackageView2.GetWebLinkAsyncImpl()
    }

    private lazy var _IDataPackageView3: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackageView3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.requestaccessasync)
    public func requestAccessAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.ProtectionPolicyEvaluationResult>! {
        try _IDataPackageView3.RequestAccessAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.requestaccessasync)
    public func requestAccessAsync(_ enterpriseId: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.ProtectionPolicyEvaluationResult>! {
        try _IDataPackageView3.RequestAccessWithEnterpriseIdAsyncImpl(enterpriseId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.unlockandassumeenterpriseidentity)
    public func unlockAndAssumeEnterpriseIdentity() throws -> UWP.ProtectionPolicyEvaluationResult {
        try _IDataPackageView3.UnlockAndAssumeEnterpriseIdentityImpl()
    }

    private lazy var _IDataPackageView4: __ABI_Windows_ApplicationModel_DataTransfer.IDataPackageView4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datapackageview.setacceptedformatid)
    public func setAcceptedFormatId(_ formatId: String) throws {
        try _IDataPackageView4.SetAcceptedFormatIdImpl(formatId)
    }

    deinit {
        _default = nil
        _IDataPackageView2 = nil
        _IDataPackageView3 = nil
        _IDataPackageView4 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dataproviderdeferral)
public final class DataProviderDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IDataProviderDeferral
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataProviderDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataProviderDeferral>?) -> DataProviderDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dataproviderdeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dataproviderrequest)
public final class DataProviderRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IDataProviderRequest
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataProviderRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataProviderRequest>?) -> DataProviderRequest? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dataproviderrequest.getdeferral)
    public func getDeferral() throws -> DataProviderDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dataproviderrequest.setdata)
    public func setData(_ value: Any!) throws {
        try _default.SetDataImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dataproviderrequest.deadline)
    public var deadline : WindowsFoundation.DateTime {
        get { try! _default.get_DeadlineImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dataproviderrequest.formatid)
    public var formatId : String {
        get { try! _default.get_FormatIdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datarequest)
public final class DataRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IDataRequest
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataRequest>?) -> DataRequest? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datarequest.failwithdisplaytext)
    public func failWithDisplayText(_ value: String) throws {
        try _default.FailWithDisplayTextImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datarequest.getdeferral)
    public func getDeferral() throws -> DataRequestDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datarequest.data)
    public var data : DataPackage! {
        get { try! _default.get_DataImpl() }
        set { try! _default.put_DataImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datarequest.deadline)
    public var deadline : WindowsFoundation.DateTime {
        get { try! _default.get_DeadlineImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datarequestdeferral)
public final class DataRequestDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IDataRequestDeferral
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataRequestDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataRequestDeferral>?) -> DataRequestDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datarequestdeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datarequestedeventargs)
public final class DataRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IDataRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataRequestedEventArgs>?) -> DataRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datarequestedeventargs.request)
    public var request : DataRequest! {
        get { try! _default.get_RequestImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datatransfermanager)
public final class DataTransferManager : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IDataTransferManager
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataTransferManager
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIDataTransferManager>?) -> DataTransferManager? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IDataTransferManagerStatics: __ABI_Windows_ApplicationModel_DataTransfer.IDataTransferManagerStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.DataTransferManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datatransfermanager.showshareui)
    public static func showShareUI() {
        try! _IDataTransferManagerStatics.ShowShareUIImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datatransfermanager.getforcurrentview)
    public static func getForCurrentView() -> DataTransferManager! {
        return try! _IDataTransferManagerStatics.GetForCurrentViewImpl()
    }

    private static let _IDataTransferManagerStatics2: __ABI_Windows_ApplicationModel_DataTransfer.IDataTransferManagerStatics2 = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.DataTransferManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datatransfermanager.issupported)
    public static func isSupported() -> Bool {
        return try! _IDataTransferManagerStatics2.IsSupportedImpl()
    }

    private static let _IDataTransferManagerStatics3: __ABI_Windows_ApplicationModel_DataTransfer.IDataTransferManagerStatics3 = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.DataTransferManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datatransfermanager.showshareui)
    public static func showShareUI(_ options: ShareUIOptions!) {
        try! _IDataTransferManagerStatics3.ShowShareUIWithOptionsImpl(options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datatransfermanager.datarequested)
    public lazy var dataRequested : Event<TypedEventHandler<DataTransferManager?, DataRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DataRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DataRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datatransfermanager.targetapplicationchosen)
    public lazy var targetApplicationChosen : Event<TypedEventHandler<DataTransferManager?, TargetApplicationChosenEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TargetApplicationChosenImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TargetApplicationChosenImpl($0)
       }
      )
    }()

    private lazy var _IDataTransferManager2: __ABI_Windows_ApplicationModel_DataTransfer.IDataTransferManager2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.datatransfermanager.shareprovidersrequested)
    public lazy var shareProvidersRequested : Event<TypedEventHandler<DataTransferManager?, ShareProvidersRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IDataTransferManager2 else { return .init() }
          return try! this.add_ShareProvidersRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IDataTransferManager2.remove_ShareProvidersRequestedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
        _IDataTransferManager2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.htmlformathelper)
public final class HtmlFormatHelper {
    private static let _IHtmlFormatHelperStatics: __ABI_Windows_ApplicationModel_DataTransfer.IHtmlFormatHelperStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.HtmlFormatHelper"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.htmlformathelper.getstaticfragment)
    public static func getStaticFragment(_ htmlFormat: String) -> String {
        return try! _IHtmlFormatHelperStatics.GetStaticFragmentImpl(htmlFormat)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.htmlformathelper.createhtmlformat)
    public static func createHtmlFormat(_ htmlFragment: String) -> String {
        return try! _IHtmlFormatHelperStatics.CreateHtmlFormatImpl(htmlFragment)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.operationcompletedeventargs)
public final class OperationCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IOperationCompletedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIOperationCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIOperationCompletedEventArgs>?) -> OperationCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.operationcompletedeventargs.operation)
    public var operation : DataPackageOperation {
        get { try! _default.get_OperationImpl() }
    }

    private lazy var _IOperationCompletedEventArgs2: __ABI_Windows_ApplicationModel_DataTransfer.IOperationCompletedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.operationcompletedeventargs.acceptedformatid)
    public var acceptedFormatId : String {
        get { try! _IOperationCompletedEventArgs2.get_AcceptedFormatIdImpl() }
    }

    deinit {
        _default = nil
        _IOperationCompletedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.sharecompletedeventargs)
public final class ShareCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IShareCompletedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareCompletedEventArgs>?) -> ShareCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.sharecompletedeventargs.sharetarget)
    public var shareTarget : ShareTargetInfo! {
        get { try! _default.get_ShareTargetImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovider)
public final class ShareProvider : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IShareProvider
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareProvider
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareProvider>?) -> ShareProvider? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IShareProviderFactory: __ABI_Windows_ApplicationModel_DataTransfer.IShareProviderFactory = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.ShareProvider"))
    public init(_ title: String, _ displayIcon: UWP.RandomAccessStreamReference!, _ backgroundColor: UWP.Color, _ handler: ShareProviderHandler!) {
        super.init(try! Self._IShareProviderFactory.CreateImpl(title, displayIcon, backgroundColor, handler))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovider.backgroundcolor)
    public var backgroundColor : UWP.Color {
        get { try! _default.get_BackgroundColorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovider.displayicon)
    public var displayIcon : UWP.RandomAccessStreamReference! {
        get { try! _default.get_DisplayIconImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovider.tag)
    public var tag : Any! {
        get { try! _default.get_TagImpl() }
        set { try! _default.put_TagImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovider.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovideroperation)
public final class ShareProviderOperation : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IShareProviderOperation
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareProviderOperation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareProviderOperation>?) -> ShareProviderOperation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovideroperation.reportcompleted)
    public func reportCompleted() throws {
        try _default.ReportCompletedImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovideroperation.data)
    public var data : DataPackageView! {
        get { try! _default.get_DataImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovideroperation.provider)
    public var provider : ShareProvider! {
        get { try! _default.get_ProviderImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovidersrequestedeventargs)
public final class ShareProvidersRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IShareProvidersRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareProvidersRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareProvidersRequestedEventArgs>?) -> ShareProvidersRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovidersrequestedeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovidersrequestedeventargs.data)
    public var data : DataPackageView! {
        get { try! _default.get_DataImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareprovidersrequestedeventargs.providers)
    public var providers : WindowsFoundation.AnyIVector<ShareProvider?>! {
        get { try! _default.get_ProvidersImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.sharetargetinfo)
public final class ShareTargetInfo : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IShareTargetInfo
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareTargetInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareTargetInfo>?) -> ShareTargetInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.sharetargetinfo.appusermodelid)
    public var appUserModelId : String {
        get { try! _default.get_AppUserModelIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.sharetargetinfo.shareprovider)
    public var shareProvider : ShareProvider! {
        get { try! _default.get_ShareProviderImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareuioptions)
public final class ShareUIOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.IShareUIOptions
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareUIOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CIShareUIOptions>?) -> ShareUIOptions? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.DataTransfer.ShareUIOptions")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareuioptions.selectionrect)
    public var selectionRect : WindowsFoundation.Rect? {
        get { try! _default.get_SelectionRectImpl() }
        set { try! _default.put_SelectionRectImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.shareuioptions.theme)
    public var theme : ShareUITheme {
        get { try! _default.get_ThemeImpl() }
        set { try! _default.put_ThemeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.sharedstorageaccessmanager)
public final class SharedStorageAccessManager {
    private static let _ISharedStorageAccessManagerStatics: __ABI_Windows_ApplicationModel_DataTransfer.ISharedStorageAccessManagerStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.SharedStorageAccessManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.sharedstorageaccessmanager.addfile)
    public static func addFile(_ file: UWP.AnyIStorageFile!) -> String {
        return try! _ISharedStorageAccessManagerStatics.AddFileImpl(file)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.sharedstorageaccessmanager.redeemtokenforfileasync)
    public static func redeemTokenForFileAsync(_ token: String) -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>! {
        return try! _ISharedStorageAccessManagerStatics.RedeemTokenForFileAsyncImpl(token)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.sharedstorageaccessmanager.removefile)
    public static func removeFile(_ token: String) {
        try! _ISharedStorageAccessManagerStatics.RemoveFileImpl(token)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.standarddataformats)
public final class StandardDataFormats {
    private static let _IStandardDataFormatsStatics: __ABI_Windows_ApplicationModel_DataTransfer.IStandardDataFormatsStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.StandardDataFormats"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.standarddataformats.bitmap)
    public static var bitmap : String {
        get { try! _IStandardDataFormatsStatics.get_BitmapImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.standarddataformats.html)
    public static var html : String {
        get { try! _IStandardDataFormatsStatics.get_HtmlImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.standarddataformats.rtf)
    public static var rtf : String {
        get { try! _IStandardDataFormatsStatics.get_RtfImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.standarddataformats.storageitems)
    public static var storageItems : String {
        get { try! _IStandardDataFormatsStatics.get_StorageItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.standarddataformats.text)
    public static var text : String {
        get { try! _IStandardDataFormatsStatics.get_TextImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.standarddataformats.uri)
    public static var uri : String {
        get { try! _IStandardDataFormatsStatics.get_UriImpl() }
    }

    private static let _IStandardDataFormatsStatics2: __ABI_Windows_ApplicationModel_DataTransfer.IStandardDataFormatsStatics2 = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.StandardDataFormats"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.standarddataformats.applicationlink)
    public static var applicationLink : String {
        get { try! _IStandardDataFormatsStatics2.get_ApplicationLinkImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.standarddataformats.weblink)
    public static var webLink : String {
        get { try! _IStandardDataFormatsStatics2.get_WebLinkImpl() }
    }

    private static let _IStandardDataFormatsStatics3: __ABI_Windows_ApplicationModel_DataTransfer.IStandardDataFormatsStatics3 = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.StandardDataFormats"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.standarddataformats.useractivityjsonarray)
    public static var userActivityJsonArray : String {
        get { try! _IStandardDataFormatsStatics3.get_UserActivityJsonArrayImpl() }
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.targetapplicationchoseneventargs)
public final class TargetApplicationChosenEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_DataTransfer.ITargetApplicationChosenEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CITargetApplicationChosenEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CITargetApplicationChosenEventArgs>?) -> TargetApplicationChosenEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.targetapplicationchoseneventargs.applicationname)
    public var applicationName : String {
        get { try! _default.get_ApplicationNameImpl() }
    }

    deinit {
        _default = nil
    }
}

public typealias DataProviderHandler = (DataProviderRequest?) -> ()
public typealias ShareProviderHandler = (ShareProviderOperation?) -> ()
extension UWP.ClipboardHistoryItemsResultStatus {
    public static var success : UWP.ClipboardHistoryItemsResultStatus {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CClipboardHistoryItemsResultStatus_Success
    }
    public static var accessDenied : UWP.ClipboardHistoryItemsResultStatus {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CClipboardHistoryItemsResultStatus_AccessDenied
    }
    public static var clipboardHistoryDisabled : UWP.ClipboardHistoryItemsResultStatus {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CClipboardHistoryItemsResultStatus_ClipboardHistoryDisabled
    }
}
extension UWP.ClipboardHistoryItemsResultStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.DataPackageOperation {
    public static var none : UWP.DataPackageOperation {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation_None
    }
    public static var copy : UWP.DataPackageOperation {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation_Copy
    }
    public static var move : UWP.DataPackageOperation {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation_Move
    }
    public static var link : UWP.DataPackageOperation {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation_Link
    }
}
extension UWP.DataPackageOperation: @retroactive Hashable, @retroactive Codable {}

extension UWP.SetHistoryItemAsContentStatus {
    public static var success : UWP.SetHistoryItemAsContentStatus {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CSetHistoryItemAsContentStatus_Success
    }
    public static var accessDenied : UWP.SetHistoryItemAsContentStatus {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CSetHistoryItemAsContentStatus_AccessDenied
    }
    public static var itemDeleted : UWP.SetHistoryItemAsContentStatus {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CSetHistoryItemAsContentStatus_ItemDeleted
    }
}
extension UWP.SetHistoryItemAsContentStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.ShareUITheme {
    public static var `default` : UWP.ShareUITheme {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CShareUITheme_Default
    }
    public static var light : UWP.ShareUITheme {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CShareUITheme_Light
    }
    public static var dark : UWP.ShareUITheme {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CShareUITheme_Dark
    }
}
extension UWP.ShareUITheme: @retroactive Hashable, @retroactive Codable {}


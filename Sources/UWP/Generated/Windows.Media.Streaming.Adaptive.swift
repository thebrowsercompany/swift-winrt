// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcecreationstatus)
public typealias AdaptiveMediaSourceCreationStatus = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceCreationStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnostictype)
public typealias AdaptiveMediaSourceDiagnosticType = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDiagnosticType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadbitratechangedreason)
public typealias AdaptiveMediaSourceDownloadBitrateChangedReason = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDownloadBitrateChangedReason
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourceresourcetype)
public typealias AdaptiveMediaSourceResourceType = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceResourceType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource)
public final class AdaptiveMediaSource : WinRTClass, UWP.IMediaSource, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSource
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource>?) -> AdaptiveMediaSource? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IAdaptiveMediaSourceStatics: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceStatics = try! RoGetActivationFactory(HString("Windows.Media.Streaming.Adaptive.AdaptiveMediaSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.iscontenttypesupported)
    public static func isContentTypeSupported(_ contentType: String) -> Bool {
        return try! _IAdaptiveMediaSourceStatics.IsContentTypeSupportedImpl(contentType)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.createfromuriasync)
    public static func createFromUriAsync(_ uri: WindowsFoundation.Uri!) -> WindowsFoundation.AnyIAsyncOperation<AdaptiveMediaSourceCreationResult?>! {
        return try! _IAdaptiveMediaSourceStatics.CreateFromUriAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.createfromuriasync)
    public static func createFromUriAsync(_ uri: WindowsFoundation.Uri!, _ httpClient: UWP.HttpClient!) -> WindowsFoundation.AnyIAsyncOperation<AdaptiveMediaSourceCreationResult?>! {
        return try! _IAdaptiveMediaSourceStatics.CreateFromUriWithDownloaderAsyncImpl(uri, httpClient)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.createfromstreamasync)
    public static func createFromStreamAsync(_ stream: UWP.AnyIInputStream!, _ uri: WindowsFoundation.Uri!, _ contentType: String) -> WindowsFoundation.AnyIAsyncOperation<AdaptiveMediaSourceCreationResult?>! {
        return try! _IAdaptiveMediaSourceStatics.CreateFromStreamAsyncImpl(stream, uri, contentType)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.createfromstreamasync)
    public static func createFromStreamAsync(_ stream: UWP.AnyIInputStream!, _ uri: WindowsFoundation.Uri!, _ contentType: String, _ httpClient: UWP.HttpClient!) -> WindowsFoundation.AnyIAsyncOperation<AdaptiveMediaSourceCreationResult?>! {
        return try! _IAdaptiveMediaSourceStatics.CreateFromStreamWithDownloaderAsyncImpl(stream, uri, contentType, httpClient)
    }

    private lazy var _IMediaSource: __ABI_Windows_Media_Core.IMediaSource! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.audioonlyplayback)
    public var audioOnlyPlayback : Bool {
        get { try! _default.get_AudioOnlyPlaybackImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.availablebitrates)
    public var availableBitrates : WindowsFoundation.AnyIVectorView<UInt32>! {
        get { try! _default.get_AvailableBitratesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.currentdownloadbitrate)
    public var currentDownloadBitrate : UInt32 {
        get { try! _default.get_CurrentDownloadBitrateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.currentplaybackbitrate)
    public var currentPlaybackBitrate : UInt32 {
        get { try! _default.get_CurrentPlaybackBitrateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.desiredliveoffset)
    public var desiredLiveOffset : WindowsFoundation.TimeSpan {
        get { try! _default.get_DesiredLiveOffsetImpl() }
        set { try! _default.put_DesiredLiveOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.desiredmaxbitrate)
    public var desiredMaxBitrate : UInt32? {
        get { try! _default.get_DesiredMaxBitrateImpl() }
        set { try! _default.put_DesiredMaxBitrateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.desiredminbitrate)
    public var desiredMinBitrate : UInt32? {
        get { try! _default.get_DesiredMinBitrateImpl() }
        set { try! _default.put_DesiredMinBitrateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.inboundbitspersecond)
    public var inboundBitsPerSecond : UInt64 {
        get { try! _default.get_InboundBitsPerSecondImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.inboundbitspersecondwindow)
    public var inboundBitsPerSecondWindow : WindowsFoundation.TimeSpan {
        get { try! _default.get_InboundBitsPerSecondWindowImpl() }
        set { try! _default.put_InboundBitsPerSecondWindowImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.initialbitrate)
    public var initialBitrate : UInt32 {
        get { try! _default.get_InitialBitrateImpl() }
        set { try! _default.put_InitialBitrateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.islive)
    public var isLive : Bool {
        get { try! _default.get_IsLiveImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.downloadbitratechanged)
    public lazy var downloadBitrateChanged : Event<TypedEventHandler<AdaptiveMediaSource?, AdaptiveMediaSourceDownloadBitrateChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DownloadBitrateChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DownloadBitrateChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.downloadcompleted)
    public lazy var downloadCompleted : Event<TypedEventHandler<AdaptiveMediaSource?, AdaptiveMediaSourceDownloadCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DownloadCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DownloadCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.downloadfailed)
    public lazy var downloadFailed : Event<TypedEventHandler<AdaptiveMediaSource?, AdaptiveMediaSourceDownloadFailedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DownloadFailedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DownloadFailedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.downloadrequested)
    public lazy var downloadRequested : Event<TypedEventHandler<AdaptiveMediaSource?, AdaptiveMediaSourceDownloadRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DownloadRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DownloadRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.playbackbitratechanged)
    public lazy var playbackBitrateChanged : Event<TypedEventHandler<AdaptiveMediaSource?, AdaptiveMediaSourcePlaybackBitrateChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PlaybackBitrateChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PlaybackBitrateChangedImpl($0)
       }
      )
    }()

    private lazy var _IAdaptiveMediaSource2: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSource2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.advancedsettings)
    public var advancedSettings : AdaptiveMediaSourceAdvancedSettings! {
        get { try! _IAdaptiveMediaSource2.get_AdvancedSettingsImpl() }
    }

    private lazy var _IAdaptiveMediaSource3: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSource3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.getcorrelatedtimes)
    public func getCorrelatedTimes() throws -> AdaptiveMediaSourceCorrelatedTimes! {
        try _IAdaptiveMediaSource3.GetCorrelatedTimesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.desiredseekablewindowsize)
    public var desiredSeekableWindowSize : WindowsFoundation.TimeSpan? {
        get { try! _IAdaptiveMediaSource3.get_DesiredSeekableWindowSizeImpl() }
        set { try! _IAdaptiveMediaSource3.put_DesiredSeekableWindowSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.diagnostics)
    public var diagnostics : AdaptiveMediaSourceDiagnostics! {
        get { try! _IAdaptiveMediaSource3.get_DiagnosticsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.maxseekablewindowsize)
    public var maxSeekableWindowSize : WindowsFoundation.TimeSpan? {
        get { try! _IAdaptiveMediaSource3.get_MaxSeekableWindowSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.minliveoffset)
    public var minLiveOffset : WindowsFoundation.TimeSpan? {
        get { try! _IAdaptiveMediaSource3.get_MinLiveOffsetImpl() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasource.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    deinit {
        _IMediaSource = nil
        _default = nil
        _IAdaptiveMediaSource2 = nil
        _IAdaptiveMediaSource3 = nil
        _IClosable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourceadvancedsettings)
public final class AdaptiveMediaSourceAdvancedSettings : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceAdvancedSettings
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceAdvancedSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceAdvancedSettings>?) -> AdaptiveMediaSourceAdvancedSettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourceadvancedsettings.allsegmentsindependent)
    public var allSegmentsIndependent : Bool {
        get { try! _default.get_AllSegmentsIndependentImpl() }
        set { try! _default.put_AllSegmentsIndependentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourceadvancedsettings.bitratedowngradetriggerratio)
    public var bitrateDowngradeTriggerRatio : Double? {
        get { try! _default.get_BitrateDowngradeTriggerRatioImpl() }
        set { try! _default.put_BitrateDowngradeTriggerRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourceadvancedsettings.desiredbitrateheadroomratio)
    public var desiredBitrateHeadroomRatio : Double? {
        get { try! _default.get_DesiredBitrateHeadroomRatioImpl() }
        set { try! _default.put_DesiredBitrateHeadroomRatioImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcecorrelatedtimes)
public final class AdaptiveMediaSourceCorrelatedTimes : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceCorrelatedTimes
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceCorrelatedTimes
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceCorrelatedTimes>?) -> AdaptiveMediaSourceCorrelatedTimes? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcecorrelatedtimes.position)
    public var position : WindowsFoundation.TimeSpan? {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcecorrelatedtimes.presentationtimestamp)
    public var presentationTimeStamp : WindowsFoundation.TimeSpan? {
        get { try! _default.get_PresentationTimeStampImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcecorrelatedtimes.programdatetime)
    public var programDateTime : WindowsFoundation.DateTime? {
        get { try! _default.get_ProgramDateTimeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcecreationresult)
public final class AdaptiveMediaSourceCreationResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceCreationResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceCreationResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceCreationResult>?) -> AdaptiveMediaSourceCreationResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcecreationresult.httpresponsemessage)
    public var httpResponseMessage : UWP.HttpResponseMessage! {
        get { try! _default.get_HttpResponseMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcecreationresult.mediasource)
    public var mediaSource : AdaptiveMediaSource! {
        get { try! _default.get_MediaSourceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcecreationresult.status)
    public var status : AdaptiveMediaSourceCreationStatus {
        get { try! _default.get_StatusImpl() }
    }

    private lazy var _IAdaptiveMediaSourceCreationResult2: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceCreationResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcecreationresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _IAdaptiveMediaSourceCreationResult2.get_ExtendedErrorImpl() }
    }

    deinit {
        _default = nil
        _IAdaptiveMediaSourceCreationResult2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs)
public final class AdaptiveMediaSourceDiagnosticAvailableEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDiagnosticAvailableEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDiagnosticAvailableEventArgs>?) -> AdaptiveMediaSourceDiagnosticAvailableEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.bitrate)
    public var bitrate : UInt32? {
        get { try! _default.get_BitrateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.diagnostictype)
    public var diagnosticType : AdaptiveMediaSourceDiagnosticType {
        get { try! _default.get_DiagnosticTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.position)
    public var position : WindowsFoundation.TimeSpan? {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.requestid)
    public var requestId : Int32? {
        get { try! _default.get_RequestIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.resourcebyterangelength)
    public var resourceByteRangeLength : UInt64? {
        get { try! _default.get_ResourceByteRangeLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.resourcebyterangeoffset)
    public var resourceByteRangeOffset : UInt64? {
        get { try! _default.get_ResourceByteRangeOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.resourcetype)
    public var resourceType : AdaptiveMediaSourceResourceType? {
        get { try! _default.get_ResourceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.resourceuri)
    public var resourceUri : WindowsFoundation.Uri! {
        get { try! _default.get_ResourceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.segmentid)
    public var segmentId : UInt64? {
        get { try! _default.get_SegmentIdImpl() }
    }

    private lazy var _IAdaptiveMediaSourceDiagnosticAvailableEventArgs2: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.extendederror)
    public var extendedError : HRESULT {
        get { try! _IAdaptiveMediaSourceDiagnosticAvailableEventArgs2.get_ExtendedErrorImpl() }
    }

    private lazy var _IAdaptiveMediaSourceDiagnosticAvailableEventArgs3: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.resourcecontenttype)
    public var resourceContentType : String {
        get { try! _IAdaptiveMediaSourceDiagnosticAvailableEventArgs3.get_ResourceContentTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnosticavailableeventargs.resourceduration)
    public var resourceDuration : WindowsFoundation.TimeSpan? {
        get { try! _IAdaptiveMediaSourceDiagnosticAvailableEventArgs3.get_ResourceDurationImpl() }
    }

    deinit {
        _default = nil
        _IAdaptiveMediaSourceDiagnosticAvailableEventArgs2 = nil
        _IAdaptiveMediaSourceDiagnosticAvailableEventArgs3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnostics)
public final class AdaptiveMediaSourceDiagnostics : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDiagnostics
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDiagnostics
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDiagnostics>?) -> AdaptiveMediaSourceDiagnostics? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcediagnostics.diagnosticavailable)
    public lazy var diagnosticAvailable : Event<TypedEventHandler<AdaptiveMediaSourceDiagnostics?, AdaptiveMediaSourceDiagnosticAvailableEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DiagnosticAvailableImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DiagnosticAvailableImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadbitratechangedeventargs)
public final class AdaptiveMediaSourceDownloadBitrateChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadBitrateChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadBitrateChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadBitrateChangedEventArgs>?) -> AdaptiveMediaSourceDownloadBitrateChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadbitratechangedeventargs.newvalue)
    public var newValue : UInt32 {
        get { try! _default.get_NewValueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadbitratechangedeventargs.oldvalue)
    public var oldValue : UInt32 {
        get { try! _default.get_OldValueImpl() }
    }

    private lazy var _IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadbitratechangedeventargs.reason)
    public var reason : AdaptiveMediaSourceDownloadBitrateChangedReason {
        get { try! _IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2.get_ReasonImpl() }
    }

    deinit {
        _default = nil
        _IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs)
public final class AdaptiveMediaSourceDownloadCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadCompletedEventArgs>?) -> AdaptiveMediaSourceDownloadCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs.httpresponsemessage)
    public var httpResponseMessage : UWP.HttpResponseMessage! {
        get { try! _default.get_HttpResponseMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs.resourcebyterangelength)
    public var resourceByteRangeLength : UInt64? {
        get { try! _default.get_ResourceByteRangeLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs.resourcebyterangeoffset)
    public var resourceByteRangeOffset : UInt64? {
        get { try! _default.get_ResourceByteRangeOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs.resourcetype)
    public var resourceType : AdaptiveMediaSourceResourceType {
        get { try! _default.get_ResourceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs.resourceuri)
    public var resourceUri : WindowsFoundation.Uri! {
        get { try! _default.get_ResourceUriImpl() }
    }

    private lazy var _IAdaptiveMediaSourceDownloadCompletedEventArgs2: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs.position)
    public var position : WindowsFoundation.TimeSpan? {
        get { try! _IAdaptiveMediaSourceDownloadCompletedEventArgs2.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs.requestid)
    public var requestId : Int32 {
        get { try! _IAdaptiveMediaSourceDownloadCompletedEventArgs2.get_RequestIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs.statistics)
    public var statistics : AdaptiveMediaSourceDownloadStatistics! {
        get { try! _IAdaptiveMediaSourceDownloadCompletedEventArgs2.get_StatisticsImpl() }
    }

    private lazy var _IAdaptiveMediaSourceDownloadCompletedEventArgs3: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs.resourcecontenttype)
    public var resourceContentType : String {
        get { try! _IAdaptiveMediaSourceDownloadCompletedEventArgs3.get_ResourceContentTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadcompletedeventargs.resourceduration)
    public var resourceDuration : WindowsFoundation.TimeSpan? {
        get { try! _IAdaptiveMediaSourceDownloadCompletedEventArgs3.get_ResourceDurationImpl() }
    }

    deinit {
        _default = nil
        _IAdaptiveMediaSourceDownloadCompletedEventArgs2 = nil
        _IAdaptiveMediaSourceDownloadCompletedEventArgs3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs)
public final class AdaptiveMediaSourceDownloadFailedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadFailedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadFailedEventArgs>?) -> AdaptiveMediaSourceDownloadFailedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.httpresponsemessage)
    public var httpResponseMessage : UWP.HttpResponseMessage! {
        get { try! _default.get_HttpResponseMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.resourcebyterangelength)
    public var resourceByteRangeLength : UInt64? {
        get { try! _default.get_ResourceByteRangeLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.resourcebyterangeoffset)
    public var resourceByteRangeOffset : UInt64? {
        get { try! _default.get_ResourceByteRangeOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.resourcetype)
    public var resourceType : AdaptiveMediaSourceResourceType {
        get { try! _default.get_ResourceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.resourceuri)
    public var resourceUri : WindowsFoundation.Uri! {
        get { try! _default.get_ResourceUriImpl() }
    }

    private lazy var _IAdaptiveMediaSourceDownloadFailedEventArgs2: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.extendederror)
    public var extendedError : HRESULT {
        get { try! _IAdaptiveMediaSourceDownloadFailedEventArgs2.get_ExtendedErrorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.position)
    public var position : WindowsFoundation.TimeSpan? {
        get { try! _IAdaptiveMediaSourceDownloadFailedEventArgs2.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.requestid)
    public var requestId : Int32 {
        get { try! _IAdaptiveMediaSourceDownloadFailedEventArgs2.get_RequestIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.statistics)
    public var statistics : AdaptiveMediaSourceDownloadStatistics! {
        get { try! _IAdaptiveMediaSourceDownloadFailedEventArgs2.get_StatisticsImpl() }
    }

    private lazy var _IAdaptiveMediaSourceDownloadFailedEventArgs3: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.resourcecontenttype)
    public var resourceContentType : String {
        get { try! _IAdaptiveMediaSourceDownloadFailedEventArgs3.get_ResourceContentTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadfailedeventargs.resourceduration)
    public var resourceDuration : WindowsFoundation.TimeSpan? {
        get { try! _IAdaptiveMediaSourceDownloadFailedEventArgs3.get_ResourceDurationImpl() }
    }

    deinit {
        _default = nil
        _IAdaptiveMediaSourceDownloadFailedEventArgs2 = nil
        _IAdaptiveMediaSourceDownloadFailedEventArgs3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequesteddeferral)
public final class AdaptiveMediaSourceDownloadRequestedDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadRequestedDeferral
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadRequestedDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadRequestedDeferral>?) -> AdaptiveMediaSourceDownloadRequestedDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequesteddeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs)
public final class AdaptiveMediaSourceDownloadRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadRequestedEventArgs>?) -> AdaptiveMediaSourceDownloadRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs.getdeferral)
    public func getDeferral() throws -> AdaptiveMediaSourceDownloadRequestedDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs.resourcebyterangelength)
    public var resourceByteRangeLength : UInt64? {
        get { try! _default.get_ResourceByteRangeLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs.resourcebyterangeoffset)
    public var resourceByteRangeOffset : UInt64? {
        get { try! _default.get_ResourceByteRangeOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs.resourcetype)
    public var resourceType : AdaptiveMediaSourceResourceType {
        get { try! _default.get_ResourceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs.resourceuri)
    public var resourceUri : WindowsFoundation.Uri! {
        get { try! _default.get_ResourceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs.result)
    public var result : AdaptiveMediaSourceDownloadResult! {
        get { try! _default.get_ResultImpl() }
    }

    private lazy var _IAdaptiveMediaSourceDownloadRequestedEventArgs2: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs.position)
    public var position : WindowsFoundation.TimeSpan? {
        get { try! _IAdaptiveMediaSourceDownloadRequestedEventArgs2.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs.requestid)
    public var requestId : Int32 {
        get { try! _IAdaptiveMediaSourceDownloadRequestedEventArgs2.get_RequestIdImpl() }
    }

    private lazy var _IAdaptiveMediaSourceDownloadRequestedEventArgs3: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs.resourcecontenttype)
    public var resourceContentType : String {
        get { try! _IAdaptiveMediaSourceDownloadRequestedEventArgs3.get_ResourceContentTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadrequestedeventargs.resourceduration)
    public var resourceDuration : WindowsFoundation.TimeSpan? {
        get { try! _IAdaptiveMediaSourceDownloadRequestedEventArgs3.get_ResourceDurationImpl() }
    }

    deinit {
        _default = nil
        _IAdaptiveMediaSourceDownloadRequestedEventArgs2 = nil
        _IAdaptiveMediaSourceDownloadRequestedEventArgs3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadresult)
public final class AdaptiveMediaSourceDownloadResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadResult>?) -> AdaptiveMediaSourceDownloadResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadresult.buffer)
    public var buffer : UWP.AnyIBuffer! {
        get { try! _default.get_BufferImpl() }
        set { try! _default.put_BufferImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadresult.contenttype)
    public var contentType : String {
        get { try! _default.get_ContentTypeImpl() }
        set { try! _default.put_ContentTypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadresult.extendedstatus)
    public var extendedStatus : UInt32 {
        get { try! _default.get_ExtendedStatusImpl() }
        set { try! _default.put_ExtendedStatusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadresult.inputstream)
    public var inputStream : UWP.AnyIInputStream! {
        get { try! _default.get_InputStreamImpl() }
        set { try! _default.put_InputStreamImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadresult.resourceuri)
    public var resourceUri : WindowsFoundation.Uri! {
        get { try! _default.get_ResourceUriImpl() }
        set { try! _default.put_ResourceUriImpl(newValue) }
    }

    private lazy var _IAdaptiveMediaSourceDownloadResult2: __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadresult.resourcebyterangelength)
    public var resourceByteRangeLength : UInt64? {
        get { try! _IAdaptiveMediaSourceDownloadResult2.get_ResourceByteRangeLengthImpl() }
        set { try! _IAdaptiveMediaSourceDownloadResult2.put_ResourceByteRangeLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadresult.resourcebyterangeoffset)
    public var resourceByteRangeOffset : UInt64? {
        get { try! _IAdaptiveMediaSourceDownloadResult2.get_ResourceByteRangeOffsetImpl() }
        set { try! _IAdaptiveMediaSourceDownloadResult2.put_ResourceByteRangeOffsetImpl(newValue) }
    }

    deinit {
        _default = nil
        _IAdaptiveMediaSourceDownloadResult2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadstatistics)
public final class AdaptiveMediaSourceDownloadStatistics : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourceDownloadStatistics
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadStatistics
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourceDownloadStatistics>?) -> AdaptiveMediaSourceDownloadStatistics? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadstatistics.contentbytesreceivedcount)
    public var contentBytesReceivedCount : UInt64 {
        get { try! _default.get_ContentBytesReceivedCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadstatistics.timetofirstbytereceived)
    public var timeToFirstByteReceived : WindowsFoundation.TimeSpan? {
        get { try! _default.get_TimeToFirstByteReceivedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadstatistics.timetoheadersreceived)
    public var timeToHeadersReceived : WindowsFoundation.TimeSpan? {
        get { try! _default.get_TimeToHeadersReceivedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourcedownloadstatistics.timetolastbytereceived)
    public var timeToLastByteReceived : WindowsFoundation.TimeSpan? {
        get { try! _default.get_TimeToLastByteReceivedImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourceplaybackbitratechangedeventargs)
public final class AdaptiveMediaSourcePlaybackBitrateChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Streaming_Adaptive.IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourcePlaybackBitrateChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSourcePlaybackBitrateChangedEventArgs>?) -> AdaptiveMediaSourcePlaybackBitrateChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourceplaybackbitratechangedeventargs.audioonly)
    public var audioOnly : Bool {
        get { try! _default.get_AudioOnlyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourceplaybackbitratechangedeventargs.newvalue)
    public var newValue : UInt32 {
        get { try! _default.get_NewValueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.streaming.adaptive.adaptivemediasourceplaybackbitratechangedeventargs.oldvalue)
    public var oldValue : UInt32 {
        get { try! _default.get_OldValueImpl() }
    }

    deinit {
        _default = nil
    }
}

extension UWP.AdaptiveMediaSourceCreationStatus {
    public static var success : UWP.AdaptiveMediaSourceCreationStatus {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceCreationStatus_Success
    }
    public static var manifestDownloadFailure : UWP.AdaptiveMediaSourceCreationStatus {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceCreationStatus_ManifestDownloadFailure
    }
    public static var manifestParseFailure : UWP.AdaptiveMediaSourceCreationStatus {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceCreationStatus_ManifestParseFailure
    }
    public static var unsupportedManifestContentType : UWP.AdaptiveMediaSourceCreationStatus {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceCreationStatus_UnsupportedManifestContentType
    }
    public static var unsupportedManifestVersion : UWP.AdaptiveMediaSourceCreationStatus {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceCreationStatus_UnsupportedManifestVersion
    }
    public static var unsupportedManifestProfile : UWP.AdaptiveMediaSourceCreationStatus {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceCreationStatus_UnsupportedManifestProfile
    }
    public static var unknownFailure : UWP.AdaptiveMediaSourceCreationStatus {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceCreationStatus_UnknownFailure
    }
}
extension UWP.AdaptiveMediaSourceCreationStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.AdaptiveMediaSourceDiagnosticType {
    public static var manifestUnchangedUponReload : UWP.AdaptiveMediaSourceDiagnosticType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDiagnosticType_ManifestUnchangedUponReload
    }
    public static var manifestMismatchUponReload : UWP.AdaptiveMediaSourceDiagnosticType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDiagnosticType_ManifestMismatchUponReload
    }
    public static var manifestSignaledEndOfLiveEventUponReload : UWP.AdaptiveMediaSourceDiagnosticType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDiagnosticType_ManifestSignaledEndOfLiveEventUponReload
    }
    public static var mediaSegmentSkipped : UWP.AdaptiveMediaSourceDiagnosticType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDiagnosticType_MediaSegmentSkipped
    }
    public static var resourceNotFound : UWP.AdaptiveMediaSourceDiagnosticType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDiagnosticType_ResourceNotFound
    }
    public static var resourceTimedOut : UWP.AdaptiveMediaSourceDiagnosticType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDiagnosticType_ResourceTimedOut
    }
    public static var resourceParsingError : UWP.AdaptiveMediaSourceDiagnosticType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDiagnosticType_ResourceParsingError
    }
    public static var bitrateDisabled : UWP.AdaptiveMediaSourceDiagnosticType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDiagnosticType_BitrateDisabled
    }
    public static var fatalMediaSourceError : UWP.AdaptiveMediaSourceDiagnosticType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDiagnosticType_FatalMediaSourceError
    }
}
extension UWP.AdaptiveMediaSourceDiagnosticType: @retroactive Hashable, @retroactive Codable {}

extension UWP.AdaptiveMediaSourceDownloadBitrateChangedReason {
    public static var sufficientInboundBitsPerSecond : UWP.AdaptiveMediaSourceDownloadBitrateChangedReason {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDownloadBitrateChangedReason_SufficientInboundBitsPerSecond
    }
    public static var insufficientInboundBitsPerSecond : UWP.AdaptiveMediaSourceDownloadBitrateChangedReason {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDownloadBitrateChangedReason_InsufficientInboundBitsPerSecond
    }
    public static var lowBufferLevel : UWP.AdaptiveMediaSourceDownloadBitrateChangedReason {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDownloadBitrateChangedReason_LowBufferLevel
    }
    public static var positionChanged : UWP.AdaptiveMediaSourceDownloadBitrateChangedReason {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDownloadBitrateChangedReason_PositionChanged
    }
    public static var trackSelectionChanged : UWP.AdaptiveMediaSourceDownloadBitrateChangedReason {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDownloadBitrateChangedReason_TrackSelectionChanged
    }
    public static var desiredBitratesChanged : UWP.AdaptiveMediaSourceDownloadBitrateChangedReason {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDownloadBitrateChangedReason_DesiredBitratesChanged
    }
    public static var errorInPreviousBitrate : UWP.AdaptiveMediaSourceDownloadBitrateChangedReason {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceDownloadBitrateChangedReason_ErrorInPreviousBitrate
    }
}
extension UWP.AdaptiveMediaSourceDownloadBitrateChangedReason: @retroactive Hashable, @retroactive Codable {}

extension UWP.AdaptiveMediaSourceResourceType {
    public static var manifest : UWP.AdaptiveMediaSourceResourceType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceResourceType_Manifest
    }
    public static var initializationSegment : UWP.AdaptiveMediaSourceResourceType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceResourceType_InitializationSegment
    }
    public static var mediaSegment : UWP.AdaptiveMediaSourceResourceType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceResourceType_MediaSegment
    }
    public static var key : UWP.AdaptiveMediaSourceResourceType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceResourceType_Key
    }
    public static var initializationVector : UWP.AdaptiveMediaSourceResourceType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceResourceType_InitializationVector
    }
    public static var mediaSegmentIndex : UWP.AdaptiveMediaSourceResourceType {
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CAdaptiveMediaSourceResourceType_MediaSegmentIndex
    }
}
extension UWP.AdaptiveMediaSourceResourceType: @retroactive Hashable, @retroactive Codable {}


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.photoorientation)
public typealias PhotoOrientation = __x_ABI_CWindows_CStorage_CFileProperties_CPhotoOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.propertyprefetchoptions)
public typealias PropertyPrefetchOptions = __x_ABI_CWindows_CStorage_CFileProperties_CPropertyPrefetchOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.thumbnailmode)
public typealias ThumbnailMode = __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.thumbnailoptions)
public typealias ThumbnailOptions = __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.thumbnailtype)
public typealias ThumbnailType = __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoorientation)
public typealias VideoOrientation = __x_ABI_CWindows_CStorage_CFileProperties_CVideoOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.basicproperties)
public final class BasicProperties : WinRTClass, IStorageItemExtraProperties {
    private typealias SwiftABI = __ABI_Windows_Storage_FileProperties.IBasicProperties
    private typealias CABI = __x_ABI_CWindows_CStorage_CFileProperties_CIBasicProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CFileProperties_CIBasicProperties>?) -> BasicProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.basicproperties.datemodified)
    public var dateModified : WindowsFoundation.DateTime {
        get { try! _default.get_DateModifiedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.basicproperties.itemdate)
    public var itemDate : WindowsFoundation.DateTime {
        get { try! _default.get_ItemDateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.basicproperties.size)
    public var size : UInt64 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IStorageItemExtraProperties: __ABI_Windows_Storage_FileProperties.IStorageItemExtraProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.basicproperties.retrievepropertiesasync)
    public func retrievePropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>! {
        try _IStorageItemExtraProperties.RetrievePropertiesAsyncImpl(propertiesToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.basicproperties.savepropertiesasync)
    public func savePropertiesAsync(_ propertiesToSave: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncImpl(propertiesToSave)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.basicproperties.savepropertiesasync)
    public func savePropertiesAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncOverloadDefaultImpl()
    }

    deinit {
        _default = nil
        _IStorageItemExtraProperties = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.documentproperties)
public final class DocumentProperties : WinRTClass, IStorageItemExtraProperties {
    private typealias SwiftABI = __ABI_Windows_Storage_FileProperties.IDocumentProperties
    private typealias CABI = __x_ABI_CWindows_CStorage_CFileProperties_CIDocumentProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CFileProperties_CIDocumentProperties>?) -> DocumentProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IStorageItemExtraProperties: __ABI_Windows_Storage_FileProperties.IStorageItemExtraProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.documentproperties.retrievepropertiesasync)
    public func retrievePropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>! {
        try _IStorageItemExtraProperties.RetrievePropertiesAsyncImpl(propertiesToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.documentproperties.savepropertiesasync)
    public func savePropertiesAsync(_ propertiesToSave: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncImpl(propertiesToSave)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.documentproperties.savepropertiesasync)
    public func savePropertiesAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncOverloadDefaultImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.documentproperties.author)
    public var author : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_AuthorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.documentproperties.comment)
    public var comment : String {
        get { try! _default.get_CommentImpl() }
        set { try! _default.put_CommentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.documentproperties.keywords)
    public var keywords : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_KeywordsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.documentproperties.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    deinit {
        _IStorageItemExtraProperties = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties)
public final class ImageProperties : WinRTClass, IStorageItemExtraProperties {
    private typealias SwiftABI = __ABI_Windows_Storage_FileProperties.IImageProperties
    private typealias CABI = __x_ABI_CWindows_CStorage_CFileProperties_CIImageProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CFileProperties_CIImageProperties>?) -> ImageProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IStorageItemExtraProperties: __ABI_Windows_Storage_FileProperties.IStorageItemExtraProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.retrievepropertiesasync)
    public func retrievePropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>! {
        try _IStorageItemExtraProperties.RetrievePropertiesAsyncImpl(propertiesToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.savepropertiesasync)
    public func savePropertiesAsync(_ propertiesToSave: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncImpl(propertiesToSave)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.savepropertiesasync)
    public func savePropertiesAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncOverloadDefaultImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.cameramanufacturer)
    public var cameraManufacturer : String {
        get { try! _default.get_CameraManufacturerImpl() }
        set { try! _default.put_CameraManufacturerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.cameramodel)
    public var cameraModel : String {
        get { try! _default.get_CameraModelImpl() }
        set { try! _default.put_CameraModelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.datetaken)
    public var dateTaken : WindowsFoundation.DateTime {
        get { try! _default.get_DateTakenImpl() }
        set { try! _default.put_DateTakenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.height)
    public var height : UInt32 {
        get { try! _default.get_HeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.keywords)
    public var keywords : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_KeywordsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.latitude)
    public var latitude : Double? {
        get { try! _default.get_LatitudeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.longitude)
    public var longitude : Double? {
        get { try! _default.get_LongitudeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.orientation)
    public var orientation : PhotoOrientation {
        get { try! _default.get_OrientationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.peoplenames)
    public var peopleNames : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_PeopleNamesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.rating)
    public var rating : UInt32 {
        get { try! _default.get_RatingImpl() }
        set { try! _default.put_RatingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.imageproperties.width)
    public var width : UInt32 {
        get { try! _default.get_WidthImpl() }
    }

    deinit {
        _IStorageItemExtraProperties = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties)
public final class MusicProperties : WinRTClass, IStorageItemExtraProperties {
    private typealias SwiftABI = __ABI_Windows_Storage_FileProperties.IMusicProperties
    private typealias CABI = __x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties>?) -> MusicProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IStorageItemExtraProperties: __ABI_Windows_Storage_FileProperties.IStorageItemExtraProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.retrievepropertiesasync)
    public func retrievePropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>! {
        try _IStorageItemExtraProperties.RetrievePropertiesAsyncImpl(propertiesToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.savepropertiesasync)
    public func savePropertiesAsync(_ propertiesToSave: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncImpl(propertiesToSave)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.savepropertiesasync)
    public func savePropertiesAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncOverloadDefaultImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.album)
    public var album : String {
        get { try! _default.get_AlbumImpl() }
        set { try! _default.put_AlbumImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.albumartist)
    public var albumArtist : String {
        get { try! _default.get_AlbumArtistImpl() }
        set { try! _default.put_AlbumArtistImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.artist)
    public var artist : String {
        get { try! _default.get_ArtistImpl() }
        set { try! _default.put_ArtistImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.bitrate)
    public var bitrate : UInt32 {
        get { try! _default.get_BitrateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.composers)
    public var composers : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_ComposersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.conductors)
    public var conductors : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_ConductorsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DurationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.genre)
    public var genre : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_GenreImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.producers)
    public var producers : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_ProducersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.publisher)
    public var publisher : String {
        get { try! _default.get_PublisherImpl() }
        set { try! _default.put_PublisherImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.rating)
    public var rating : UInt32 {
        get { try! _default.get_RatingImpl() }
        set { try! _default.put_RatingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.subtitle)
    public var subtitle : String {
        get { try! _default.get_SubtitleImpl() }
        set { try! _default.put_SubtitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.tracknumber)
    public var trackNumber : UInt32 {
        get { try! _default.get_TrackNumberImpl() }
        set { try! _default.put_TrackNumberImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.writers)
    public var writers : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_WritersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.musicproperties.year)
    public var year : UInt32 {
        get { try! _default.get_YearImpl() }
        set { try! _default.put_YearImpl(newValue) }
    }

    deinit {
        _IStorageItemExtraProperties = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemcontentproperties)
public final class StorageItemContentProperties : WinRTClass, IStorageItemExtraProperties {
    private typealias SwiftABI = __ABI_Windows_Storage_FileProperties.IStorageItemContentProperties
    private typealias CABI = __x_ABI_CWindows_CStorage_CFileProperties_CIStorageItemContentProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CFileProperties_CIStorageItemContentProperties>?) -> StorageItemContentProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IStorageItemExtraProperties: __ABI_Windows_Storage_FileProperties.IStorageItemExtraProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemcontentproperties.retrievepropertiesasync)
    public func retrievePropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>! {
        try _IStorageItemExtraProperties.RetrievePropertiesAsyncImpl(propertiesToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemcontentproperties.savepropertiesasync)
    public func savePropertiesAsync(_ propertiesToSave: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncImpl(propertiesToSave)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemcontentproperties.savepropertiesasync)
    public func savePropertiesAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncOverloadDefaultImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemcontentproperties.getmusicpropertiesasync)
    public func getMusicPropertiesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<MusicProperties?>! {
        try _default.GetMusicPropertiesAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemcontentproperties.getvideopropertiesasync)
    public func getVideoPropertiesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<VideoProperties?>! {
        try _default.GetVideoPropertiesAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemcontentproperties.getimagepropertiesasync)
    public func getImagePropertiesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ImageProperties?>! {
        try _default.GetImagePropertiesAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemcontentproperties.getdocumentpropertiesasync)
    public func getDocumentPropertiesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<DocumentProperties?>! {
        try _default.GetDocumentPropertiesAsyncImpl()
    }

    deinit {
        _IStorageItemExtraProperties = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail)
public final class StorageItemThumbnail : WinRTClass, WindowsFoundation.IClosable, UWP.IInputStream, UWP.IOutputStream, UWP.IRandomAccessStream, UWP.IContentTypeProvider, UWP.IRandomAccessStreamWithContentType {
    private typealias SwiftABI = __ABI_Windows_Storage_Streams.IRandomAccessStreamWithContentType
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType>?) -> StorageItemThumbnail? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IInputStream: __ABI_Windows_Storage_Streams.IInputStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.readasync)
    public func readAsync(_ buffer: UWP.AnyIBuffer!, _ count: UInt32, _ options: UWP.InputStreamOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, UInt32>! {
        try _IInputStream.ReadAsyncImpl(buffer, count, options)
    }

    private lazy var _IOutputStream: __ABI_Windows_Storage_Streams.IOutputStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.writeasync)
    public func writeAsync(_ buffer: UWP.AnyIBuffer!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>! {
        try _IOutputStream.WriteAsyncImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.flushasync)
    public func flushAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _IOutputStream.FlushAsyncImpl()
    }

    private lazy var _IRandomAccessStream: __ABI_Windows_Storage_Streams.IRandomAccessStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.getinputstreamat)
    public func getInputStreamAt(_ position: UInt64) throws -> UWP.AnyIInputStream! {
        try _IRandomAccessStream.GetInputStreamAtImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.getoutputstreamat)
    public func getOutputStreamAt(_ position: UInt64) throws -> UWP.AnyIOutputStream! {
        try _IRandomAccessStream.GetOutputStreamAtImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.seek)
    public func seek(_ position: UInt64) throws {
        try _IRandomAccessStream.SeekImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.clonestream)
    public func cloneStream() throws -> UWP.AnyIRandomAccessStream! {
        try _IRandomAccessStream.CloneStreamImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.canread)
    public var canRead : Bool {
        get { try! _IRandomAccessStream.get_CanReadImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.canwrite)
    public var canWrite : Bool {
        get { try! _IRandomAccessStream.get_CanWriteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.position)
    public var position : UInt64 {
        get { try! _IRandomAccessStream.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.size)
    public var size : UInt64 {
        get { try! _IRandomAccessStream.get_SizeImpl() }
        set { try! _IRandomAccessStream.put_SizeImpl(newValue) }
    }

    private lazy var _IContentTypeProvider: __ABI_Windows_Storage_Streams.IContentTypeProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.contenttype)
    public var contentType : String {
        get { try! _IContentTypeProvider.get_ContentTypeImpl() }
    }

    private lazy var _IThumbnailProperties: __ABI_Windows_Storage_FileProperties.IThumbnailProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.originalheight)
    public var originalHeight : UInt32 {
        get { try! _IThumbnailProperties.get_OriginalHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.originalwidth)
    public var originalWidth : UInt32 {
        get { try! _IThumbnailProperties.get_OriginalWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.returnedsmallercachedsize)
    public var returnedSmallerCachedSize : Bool {
        get { try! _IThumbnailProperties.get_ReturnedSmallerCachedSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.storageitemthumbnail.type)
    public var type : ThumbnailType {
        get { try! _IThumbnailProperties.get_TypeImpl() }
    }

    deinit {
        _IClosable = nil
        _IInputStream = nil
        _IOutputStream = nil
        _IRandomAccessStream = nil
        _IContentTypeProvider = nil
        _default = nil
        _IThumbnailProperties = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties)
public final class VideoProperties : WinRTClass, IStorageItemExtraProperties {
    private typealias SwiftABI = __ABI_Windows_Storage_FileProperties.IVideoProperties
    private typealias CABI = __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties>?) -> VideoProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IStorageItemExtraProperties: __ABI_Windows_Storage_FileProperties.IStorageItemExtraProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.retrievepropertiesasync)
    public func retrievePropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>! {
        try _IStorageItemExtraProperties.RetrievePropertiesAsyncImpl(propertiesToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.savepropertiesasync)
    public func savePropertiesAsync(_ propertiesToSave: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncImpl(propertiesToSave)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.savepropertiesasync)
    public func savePropertiesAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IStorageItemExtraProperties.SavePropertiesAsyncOverloadDefaultImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.bitrate)
    public var bitrate : UInt32 {
        get { try! _default.get_BitrateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.directors)
    public var directors : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_DirectorsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DurationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.height)
    public var height : UInt32 {
        get { try! _default.get_HeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.keywords)
    public var keywords : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_KeywordsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.latitude)
    public var latitude : Double? {
        get { try! _default.get_LatitudeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.longitude)
    public var longitude : Double? {
        get { try! _default.get_LongitudeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.orientation)
    public var orientation : VideoOrientation {
        get { try! _default.get_OrientationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.producers)
    public var producers : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_ProducersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.publisher)
    public var publisher : String {
        get { try! _default.get_PublisherImpl() }
        set { try! _default.put_PublisherImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.rating)
    public var rating : UInt32 {
        get { try! _default.get_RatingImpl() }
        set { try! _default.put_RatingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.subtitle)
    public var subtitle : String {
        get { try! _default.get_SubtitleImpl() }
        set { try! _default.put_SubtitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.width)
    public var width : UInt32 {
        get { try! _default.get_WidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.writers)
    public var writers : WindowsFoundation.AnyIVector<String>! {
        get { try! _default.get_WritersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.videoproperties.year)
    public var year : UInt32 {
        get { try! _default.get_YearImpl() }
        set { try! _default.put_YearImpl(newValue) }
    }

    deinit {
        _IStorageItemExtraProperties = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.istorageitemextraproperties)
public protocol IStorageItemExtraProperties : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.istorageitemextraproperties.retrievepropertiesasync)
    func retrievePropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.istorageitemextraproperties.savepropertiesasync)
    func savePropertiesAsync(_ propertiesToSave: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>!) throws -> WindowsFoundation.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.fileproperties.istorageitemextraproperties.savepropertiesasync)
    func savePropertiesAsync() throws -> WindowsFoundation.AnyIAsyncAction!
}

extension IStorageItemExtraProperties {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_FileProperties.IStorageItemExtraPropertiesWrapper.IID:
                let wrapper = __ABI_Windows_Storage_FileProperties.IStorageItemExtraPropertiesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIStorageItemExtraProperties = any IStorageItemExtraProperties

extension UWP.PhotoOrientation {
    public static var unspecified : UWP.PhotoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CPhotoOrientation_Unspecified
    }
    public static var normal : UWP.PhotoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CPhotoOrientation_Normal
    }
    public static var flipHorizontal : UWP.PhotoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CPhotoOrientation_FlipHorizontal
    }
    public static var rotate180 : UWP.PhotoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CPhotoOrientation_Rotate180
    }
    public static var flipVertical : UWP.PhotoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CPhotoOrientation_FlipVertical
    }
    public static var transpose : UWP.PhotoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CPhotoOrientation_Transpose
    }
    public static var rotate270 : UWP.PhotoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CPhotoOrientation_Rotate270
    }
    public static var transverse : UWP.PhotoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CPhotoOrientation_Transverse
    }
    public static var rotate90 : UWP.PhotoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CPhotoOrientation_Rotate90
    }
}
extension UWP.PhotoOrientation: @retroactive Hashable, @retroactive Codable {}

extension UWP.PropertyPrefetchOptions {
    public static var none : UWP.PropertyPrefetchOptions {
        __x_ABI_CWindows_CStorage_CFileProperties_CPropertyPrefetchOptions_None
    }
    public static var musicProperties : UWP.PropertyPrefetchOptions {
        __x_ABI_CWindows_CStorage_CFileProperties_CPropertyPrefetchOptions_MusicProperties
    }
    public static var videoProperties : UWP.PropertyPrefetchOptions {
        __x_ABI_CWindows_CStorage_CFileProperties_CPropertyPrefetchOptions_VideoProperties
    }
    public static var imageProperties : UWP.PropertyPrefetchOptions {
        __x_ABI_CWindows_CStorage_CFileProperties_CPropertyPrefetchOptions_ImageProperties
    }
    public static var documentProperties : UWP.PropertyPrefetchOptions {
        __x_ABI_CWindows_CStorage_CFileProperties_CPropertyPrefetchOptions_DocumentProperties
    }
    public static var basicProperties : UWP.PropertyPrefetchOptions {
        __x_ABI_CWindows_CStorage_CFileProperties_CPropertyPrefetchOptions_BasicProperties
    }
}
extension UWP.PropertyPrefetchOptions: @retroactive Hashable, @retroactive Codable {}

extension UWP.ThumbnailMode {
    public static var picturesView : UWP.ThumbnailMode {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailMode_PicturesView
    }
    public static var videosView : UWP.ThumbnailMode {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailMode_VideosView
    }
    public static var musicView : UWP.ThumbnailMode {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailMode_MusicView
    }
    public static var documentsView : UWP.ThumbnailMode {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailMode_DocumentsView
    }
    public static var listView : UWP.ThumbnailMode {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailMode_ListView
    }
    public static var singleItem : UWP.ThumbnailMode {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailMode_SingleItem
    }
}
extension UWP.ThumbnailMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.ThumbnailOptions {
    public static var none : UWP.ThumbnailOptions {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailOptions_None
    }
    public static var returnOnlyIfCached : UWP.ThumbnailOptions {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailOptions_ReturnOnlyIfCached
    }
    public static var resizeThumbnail : UWP.ThumbnailOptions {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailOptions_ResizeThumbnail
    }
    public static var useCurrentScale : UWP.ThumbnailOptions {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailOptions_UseCurrentScale
    }
}
extension UWP.ThumbnailOptions: @retroactive Hashable, @retroactive Codable {}

extension UWP.ThumbnailType {
    public static var image : UWP.ThumbnailType {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailType_Image
    }
    public static var icon : UWP.ThumbnailType {
        __x_ABI_CWindows_CStorage_CFileProperties_CThumbnailType_Icon
    }
}
extension UWP.ThumbnailType: @retroactive Hashable, @retroactive Codable {}

extension UWP.VideoOrientation {
    public static var normal : UWP.VideoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CVideoOrientation_Normal
    }
    public static var rotate90 : UWP.VideoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CVideoOrientation_Rotate90
    }
    public static var rotate180 : UWP.VideoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CVideoOrientation_Rotate180
    }
    public static var rotate270 : UWP.VideoOrientation {
        __x_ABI_CWindows_CStorage_CFileProperties_CVideoOrientation_Rotate270
    }
}
extension UWP.VideoOrientation: @retroactive Hashable, @retroactive Codable {}


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpcompletionoption)
public typealias HttpCompletionOption = __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpprogressstage)
public typealias HttpProgressStage = __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessagesource)
public typealias HttpResponseMessageSource = __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpstatuscode)
public typealias HttpStatusCode = __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpversion)
public typealias HttpVersion = __x_ABI_CWindows_CWeb_CHttp_CHttpVersion
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient)
public final class HttpClient : WinRTClass, WindowsFoundation.IClosable, WindowsFoundation.IStringable {
    private typealias SwiftABI = __ABI_Windows_Web_Http.IHttpClient
    private typealias CABI = __x_ABI_CWindows_CWeb_CHttp_CIHttpClient
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CWeb_CHttp_CIHttpClient>?) -> HttpClient? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Web.Http.HttpClient")))
    }

    private static let _IHttpClientFactory: __ABI_Windows_Web_Http.IHttpClientFactory = try! RoGetActivationFactory(HString("Windows.Web.Http.HttpClient"))
    public init(_ filter: UWP.AnyIHttpFilter!) {
        super.init(try! Self._IHttpClientFactory.CreateImpl(filter))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.deleteasync)
    public func deleteAsync(_ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpResponseMessage?, HttpProgress>! {
        try _default.DeleteAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.getasync)
    public func getAsync(_ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpResponseMessage?, HttpProgress>! {
        try _default.GetAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.getasync)
    public func getAsync(_ uri: WindowsFoundation.Uri!, _ completionOption: HttpCompletionOption) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpResponseMessage?, HttpProgress>! {
        try _default.GetWithOptionAsyncImpl(uri, completionOption)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.getbufferasync)
    public func getBufferAsync(_ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, HttpProgress>! {
        try _default.GetBufferAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.getinputstreamasync)
    public func getInputStreamAsync(_ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIInputStream?, HttpProgress>! {
        try _default.GetInputStreamAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.getstringasync)
    public func getStringAsync(_ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<String, HttpProgress>! {
        try _default.GetStringAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.postasync)
    public func postAsync(_ uri: WindowsFoundation.Uri!, _ content: AnyIHttpContent!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpResponseMessage?, HttpProgress>! {
        try _default.PostAsyncImpl(uri, content)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.putasync)
    public func putAsync(_ uri: WindowsFoundation.Uri!, _ content: AnyIHttpContent!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpResponseMessage?, HttpProgress>! {
        try _default.PutAsyncImpl(uri, content)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.sendrequestasync)
    public func sendRequestAsync(_ request: HttpRequestMessage!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpResponseMessage?, HttpProgress>! {
        try _default.SendRequestAsyncImpl(request)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.sendrequestasync)
    public func sendRequestAsync(_ request: HttpRequestMessage!, _ completionOption: HttpCompletionOption) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpResponseMessage?, HttpProgress>! {
        try _default.SendRequestWithOptionAsyncImpl(request, completionOption)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.defaultrequestheaders)
    public var defaultRequestHeaders : UWP.HttpRequestHeaderCollection! {
        get { try! _default.get_DefaultRequestHeadersImpl() }
    }

    private lazy var _IHttpClient2: __ABI_Windows_Web_Http.IHttpClient2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.trydeleteasync)
    public func tryDeleteAsync(_ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpRequestResult?, HttpProgress>! {
        try _IHttpClient2.TryDeleteAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.trygetasync)
    public func tryGetAsync(_ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpRequestResult?, HttpProgress>! {
        try _IHttpClient2.TryGetAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.trygetasync)
    public func tryGetAsync(_ uri: WindowsFoundation.Uri!, _ completionOption: HttpCompletionOption) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpRequestResult?, HttpProgress>! {
        try _IHttpClient2.TryGetAsync2Impl(uri, completionOption)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.trygetbufferasync)
    public func tryGetBufferAsync(_ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpGetBufferResult?, HttpProgress>! {
        try _IHttpClient2.TryGetBufferAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.trygetinputstreamasync)
    public func tryGetInputStreamAsync(_ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpGetInputStreamResult?, HttpProgress>! {
        try _IHttpClient2.TryGetInputStreamAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.trygetstringasync)
    public func tryGetStringAsync(_ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpGetStringResult?, HttpProgress>! {
        try _IHttpClient2.TryGetStringAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.trypostasync)
    public func tryPostAsync(_ uri: WindowsFoundation.Uri!, _ content: AnyIHttpContent!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpRequestResult?, HttpProgress>! {
        try _IHttpClient2.TryPostAsyncImpl(uri, content)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.tryputasync)
    public func tryPutAsync(_ uri: WindowsFoundation.Uri!, _ content: AnyIHttpContent!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpRequestResult?, HttpProgress>! {
        try _IHttpClient2.TryPutAsyncImpl(uri, content)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.trysendrequestasync)
    public func trySendRequestAsync(_ request: HttpRequestMessage!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpRequestResult?, HttpProgress>! {
        try _IHttpClient2.TrySendRequestAsyncImpl(request)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.trysendrequestasync)
    public func trySendRequestAsync(_ request: HttpRequestMessage!, _ completionOption: HttpCompletionOption) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<HttpRequestResult?, HttpProgress>! {
        try _IHttpClient2.TrySendRequestAsync2Impl(request, completionOption)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IStringable: __ABI_Windows_Foundation.IStringable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpclient.tostring)
    public func toString() throws -> String {
        try _IStringable.ToStringImpl()
    }

    deinit {
        _default = nil
        _IHttpClient2 = nil
        _IClosable = nil
        _IStringable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetbufferresult)
public final class HttpGetBufferResult : WinRTClass, WindowsFoundation.IClosable, WindowsFoundation.IStringable {
    private typealias SwiftABI = __ABI_Windows_Web_Http.IHttpGetBufferResult
    private typealias CABI = __x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CWeb_CHttp_CIHttpGetBufferResult>?) -> HttpGetBufferResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetbufferresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedErrorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetbufferresult.requestmessage)
    public var requestMessage : HttpRequestMessage! {
        get { try! _default.get_RequestMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetbufferresult.responsemessage)
    public var responseMessage : HttpResponseMessage! {
        get { try! _default.get_ResponseMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetbufferresult.succeeded)
    public var succeeded : Bool {
        get { try! _default.get_SucceededImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetbufferresult.value)
    public var value : UWP.AnyIBuffer! {
        get { try! _default.get_ValueImpl() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetbufferresult.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IStringable: __ABI_Windows_Foundation.IStringable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetbufferresult.tostring)
    public func toString() throws -> String {
        try _IStringable.ToStringImpl()
    }

    deinit {
        _default = nil
        _IClosable = nil
        _IStringable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetinputstreamresult)
public final class HttpGetInputStreamResult : WinRTClass, WindowsFoundation.IClosable, WindowsFoundation.IStringable {
    private typealias SwiftABI = __ABI_Windows_Web_Http.IHttpGetInputStreamResult
    private typealias CABI = __x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CWeb_CHttp_CIHttpGetInputStreamResult>?) -> HttpGetInputStreamResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetinputstreamresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedErrorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetinputstreamresult.requestmessage)
    public var requestMessage : HttpRequestMessage! {
        get { try! _default.get_RequestMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetinputstreamresult.responsemessage)
    public var responseMessage : HttpResponseMessage! {
        get { try! _default.get_ResponseMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetinputstreamresult.succeeded)
    public var succeeded : Bool {
        get { try! _default.get_SucceededImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetinputstreamresult.value)
    public var value : UWP.AnyIInputStream! {
        get { try! _default.get_ValueImpl() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetinputstreamresult.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IStringable: __ABI_Windows_Foundation.IStringable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetinputstreamresult.tostring)
    public func toString() throws -> String {
        try _IStringable.ToStringImpl()
    }

    deinit {
        _default = nil
        _IClosable = nil
        _IStringable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetstringresult)
public final class HttpGetStringResult : WinRTClass, WindowsFoundation.IClosable, WindowsFoundation.IStringable {
    private typealias SwiftABI = __ABI_Windows_Web_Http.IHttpGetStringResult
    private typealias CABI = __x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CWeb_CHttp_CIHttpGetStringResult>?) -> HttpGetStringResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetstringresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedErrorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetstringresult.requestmessage)
    public var requestMessage : HttpRequestMessage! {
        get { try! _default.get_RequestMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetstringresult.responsemessage)
    public var responseMessage : HttpResponseMessage! {
        get { try! _default.get_ResponseMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetstringresult.succeeded)
    public var succeeded : Bool {
        get { try! _default.get_SucceededImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetstringresult.value)
    public var value : String {
        get { try! _default.get_ValueImpl() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetstringresult.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IStringable: __ABI_Windows_Foundation.IStringable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpgetstringresult.tostring)
    public func toString() throws -> String {
        try _IStringable.ToStringImpl()
    }

    deinit {
        _default = nil
        _IClosable = nil
        _IStringable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpmethod)
public final class HttpMethod : WinRTClass, WindowsFoundation.IStringable {
    private typealias SwiftABI = __ABI_Windows_Web_Http.IHttpMethod
    private typealias CABI = __x_ABI_CWindows_CWeb_CHttp_CIHttpMethod
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CWeb_CHttp_CIHttpMethod>?) -> HttpMethod? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IHttpMethodFactory: __ABI_Windows_Web_Http.IHttpMethodFactory = try! RoGetActivationFactory(HString("Windows.Web.Http.HttpMethod"))
    public init(_ method: String) {
        super.init(try! Self._IHttpMethodFactory.CreateImpl(method))
    }

    private static let _IHttpMethodStatics: __ABI_Windows_Web_Http.IHttpMethodStatics = try! RoGetActivationFactory(HString("Windows.Web.Http.HttpMethod"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpmethod.delete)
    public static var delete : HttpMethod! {
        get { try! _IHttpMethodStatics.get_DeleteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpmethod.get)
    public static var get : HttpMethod! {
        get { try! _IHttpMethodStatics.get_GetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpmethod.head)
    public static var head : HttpMethod! {
        get { try! _IHttpMethodStatics.get_HeadImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpmethod.options)
    public static var options : HttpMethod! {
        get { try! _IHttpMethodStatics.get_OptionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpmethod.patch)
    public static var patch : HttpMethod! {
        get { try! _IHttpMethodStatics.get_PatchImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpmethod.post)
    public static var post : HttpMethod! {
        get { try! _IHttpMethodStatics.get_PostImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpmethod.put)
    public static var put : HttpMethod! {
        get { try! _IHttpMethodStatics.get_PutImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpmethod.method)
    public var method : String {
        get { try! _default.get_MethodImpl() }
    }

    private lazy var _IStringable: __ABI_Windows_Foundation.IStringable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpmethod.tostring)
    public func toString() throws -> String {
        try _IStringable.ToStringImpl()
    }

    deinit {
        _default = nil
        _IStringable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestmessage)
public final class HttpRequestMessage : WinRTClass, WindowsFoundation.IClosable, WindowsFoundation.IStringable {
    private typealias SwiftABI = __ABI_Windows_Web_Http.IHttpRequestMessage
    private typealias CABI = __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestMessage>?) -> HttpRequestMessage? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Web.Http.HttpRequestMessage")))
    }

    private static let _IHttpRequestMessageFactory: __ABI_Windows_Web_Http.IHttpRequestMessageFactory = try! RoGetActivationFactory(HString("Windows.Web.Http.HttpRequestMessage"))
    public init(_ method: HttpMethod!, _ uri: WindowsFoundation.Uri!) {
        super.init(try! Self._IHttpRequestMessageFactory.CreateImpl(method, uri))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestmessage.content)
    public var content : AnyIHttpContent! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestmessage.headers)
    public var headers : UWP.HttpRequestHeaderCollection! {
        get { try! _default.get_HeadersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestmessage.method)
    public var method : HttpMethod! {
        get { try! _default.get_MethodImpl() }
        set { try! _default.put_MethodImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestmessage.properties)
    public var properties : WindowsFoundation.AnyIMap<String, Any?>! {
        get { try! _default.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestmessage.requesturi)
    public var requestUri : WindowsFoundation.Uri! {
        get { try! _default.get_RequestUriImpl() }
        set { try! _default.put_RequestUriImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestmessage.transportinformation)
    public var transportInformation : HttpTransportInformation! {
        get { try! _default.get_TransportInformationImpl() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestmessage.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IStringable: __ABI_Windows_Foundation.IStringable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestmessage.tostring)
    public func toString() throws -> String {
        try _IStringable.ToStringImpl()
    }

    deinit {
        _default = nil
        _IClosable = nil
        _IStringable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestresult)
public final class HttpRequestResult : WinRTClass, WindowsFoundation.IClosable, WindowsFoundation.IStringable {
    private typealias SwiftABI = __ABI_Windows_Web_Http.IHttpRequestResult
    private typealias CABI = __x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CWeb_CHttp_CIHttpRequestResult>?) -> HttpRequestResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedErrorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestresult.requestmessage)
    public var requestMessage : HttpRequestMessage! {
        get { try! _default.get_RequestMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestresult.responsemessage)
    public var responseMessage : HttpResponseMessage! {
        get { try! _default.get_ResponseMessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestresult.succeeded)
    public var succeeded : Bool {
        get { try! _default.get_SucceededImpl() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestresult.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IStringable: __ABI_Windows_Foundation.IStringable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httprequestresult.tostring)
    public func toString() throws -> String {
        try _IStringable.ToStringImpl()
    }

    deinit {
        _default = nil
        _IClosable = nil
        _IStringable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage)
public final class HttpResponseMessage : WinRTClass, WindowsFoundation.IClosable, WindowsFoundation.IStringable {
    private typealias SwiftABI = __ABI_Windows_Web_Http.IHttpResponseMessage
    private typealias CABI = __x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CWeb_CHttp_CIHttpResponseMessage>?) -> HttpResponseMessage? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Web.Http.HttpResponseMessage")))
    }

    private static let _IHttpResponseMessageFactory: __ABI_Windows_Web_Http.IHttpResponseMessageFactory = try! RoGetActivationFactory(HString("Windows.Web.Http.HttpResponseMessage"))
    public init(_ statusCode: HttpStatusCode) {
        super.init(try! Self._IHttpResponseMessageFactory.CreateImpl(statusCode))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.ensuresuccessstatuscode)
    public func ensureSuccessStatusCode() throws -> HttpResponseMessage! {
        try _default.EnsureSuccessStatusCodeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.content)
    public var content : AnyIHttpContent! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.headers)
    public var headers : UWP.HttpResponseHeaderCollection! {
        get { try! _default.get_HeadersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.issuccessstatuscode)
    public var isSuccessStatusCode : Bool {
        get { try! _default.get_IsSuccessStatusCodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.reasonphrase)
    public var reasonPhrase : String {
        get { try! _default.get_ReasonPhraseImpl() }
        set { try! _default.put_ReasonPhraseImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.requestmessage)
    public var requestMessage : HttpRequestMessage! {
        get { try! _default.get_RequestMessageImpl() }
        set { try! _default.put_RequestMessageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.source)
    public var source : HttpResponseMessageSource {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.statuscode)
    public var statusCode : HttpStatusCode {
        get { try! _default.get_StatusCodeImpl() }
        set { try! _default.put_StatusCodeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.version)
    public var version : HttpVersion {
        get { try! _default.get_VersionImpl() }
        set { try! _default.put_VersionImpl(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IStringable: __ABI_Windows_Foundation.IStringable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpresponsemessage.tostring)
    public func toString() throws -> String {
        try _IStringable.ToStringImpl()
    }

    deinit {
        _default = nil
        _IClosable = nil
        _IStringable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httptransportinformation)
public final class HttpTransportInformation : WinRTClass, WindowsFoundation.IStringable {
    private typealias SwiftABI = __ABI_Windows_Web_Http.IHttpTransportInformation
    private typealias CABI = __x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CWeb_CHttp_CIHttpTransportInformation>?) -> HttpTransportInformation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httptransportinformation.servercertificate)
    public var serverCertificate : UWP.Certificate! {
        get { try! _default.get_ServerCertificateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httptransportinformation.servercertificateerrorseverity)
    public var serverCertificateErrorSeverity : UWP.SocketSslErrorSeverity {
        get { try! _default.get_ServerCertificateErrorSeverityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httptransportinformation.servercertificateerrors)
    public var serverCertificateErrors : WindowsFoundation.AnyIVectorView<UWP.ChainValidationResult>! {
        get { try! _default.get_ServerCertificateErrorsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httptransportinformation.serverintermediatecertificates)
    public var serverIntermediateCertificates : WindowsFoundation.AnyIVectorView<UWP.Certificate?>! {
        get { try! _default.get_ServerIntermediateCertificatesImpl() }
    }

    private lazy var _IStringable: __ABI_Windows_Foundation.IStringable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httptransportinformation.tostring)
    public func toString() throws -> String {
        try _IStringable.ToStringImpl()
    }

    deinit {
        _default = nil
        _IStringable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpprogress)
public struct HttpProgress: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpprogress.stage)
    public var stage: HttpProgressStage = .init(0)
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpprogress.bytessent)
    public var bytesSent: UInt64 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpprogress.totalbytestosend)
    public var totalBytesToSend: UInt64?
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpprogress.bytesreceived)
    public var bytesReceived: UInt64 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpprogress.totalbytestoreceive)
    public var totalBytesToReceive: UInt64?
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.httpprogress.retries)
    public var retries: UInt32 = 0
    public init() {}
    public init(stage: HttpProgressStage, bytesSent: UInt64, totalBytesToSend: UInt64?, bytesReceived: UInt64, totalBytesToReceive: UInt64?, retries: UInt32) {
        self.stage = stage
        self.bytesSent = bytesSent
        self.totalBytesToSend = totalBytesToSend
        self.bytesReceived = bytesReceived
        self.totalBytesToReceive = totalBytesToReceive
        self.retries = retries
    }
    public static func from(abi: __x_ABI_CWindows_CWeb_CHttp_CHttpProgress) -> HttpProgress {
        .init(stage: abi.Stage, bytesSent: abi.BytesSent, totalBytesToSend: UWP.__x_ABI_C__FIReference_1_UINT64Wrapper.unwrapFrom(abi: ComPtr(abi.TotalBytesToSend)), bytesReceived: abi.BytesReceived, totalBytesToReceive: UWP.__x_ABI_C__FIReference_1_UINT64Wrapper.unwrapFrom(abi: ComPtr(abi.TotalBytesToReceive)), retries: abi.Retries)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent)
public protocol IHttpContent : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.bufferallasync)
    func bufferAllAsync() throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.readasbufferasync)
    func readAsBufferAsync() throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, UInt64>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.readasinputstreamasync)
    func readAsInputStreamAsync() throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIInputStream?, UInt64>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.readasstringasync)
    func readAsStringAsync() throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<String, UInt64>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.trycomputelength)
    func tryComputeLength(_ length: inout UInt64) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.writetostreamasync)
    func writeToStreamAsync(_ outputStream: UWP.AnyIOutputStream!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.headers)
    var headers: UWP.HttpContentHeaderCollection! { get }
}

extension IHttpContent {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Web_Http.IHttpContentWrapper.IID:
                let wrapper = __ABI_Windows_Web_Http.IHttpContentWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIHttpContent = any IHttpContent

extension UWP.HttpCompletionOption {
    public static var responseContentRead : UWP.HttpCompletionOption {
        __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption_ResponseContentRead
    }
    public static var responseHeadersRead : UWP.HttpCompletionOption {
        __x_ABI_CWindows_CWeb_CHttp_CHttpCompletionOption_ResponseHeadersRead
    }
}
extension UWP.HttpCompletionOption: @retroactive Hashable, @retroactive Codable {}

extension UWP.HttpProgressStage {
    public static var none : UWP.HttpProgressStage {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_None
    }
    public static var detectingProxy : UWP.HttpProgressStage {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_DetectingProxy
    }
    public static var resolvingName : UWP.HttpProgressStage {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_ResolvingName
    }
    public static var connectingToServer : UWP.HttpProgressStage {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_ConnectingToServer
    }
    public static var negotiatingSsl : UWP.HttpProgressStage {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_NegotiatingSsl
    }
    public static var sendingHeaders : UWP.HttpProgressStage {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_SendingHeaders
    }
    public static var sendingContent : UWP.HttpProgressStage {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_SendingContent
    }
    public static var waitingForResponse : UWP.HttpProgressStage {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_WaitingForResponse
    }
    public static var receivingHeaders : UWP.HttpProgressStage {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_ReceivingHeaders
    }
    public static var receivingContent : UWP.HttpProgressStage {
        __x_ABI_CWindows_CWeb_CHttp_CHttpProgressStage_ReceivingContent
    }
}
extension UWP.HttpProgressStage: @retroactive Hashable, @retroactive Codable {}

extension UWP.HttpResponseMessageSource {
    public static var none : UWP.HttpResponseMessageSource {
        __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource_None
    }
    public static var cache : UWP.HttpResponseMessageSource {
        __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource_Cache
    }
    public static var network : UWP.HttpResponseMessageSource {
        __x_ABI_CWindows_CWeb_CHttp_CHttpResponseMessageSource_Network
    }
}
extension UWP.HttpResponseMessageSource: @retroactive Hashable, @retroactive Codable {}

extension UWP.HttpStatusCode {
    public static var none : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_None
    }
    public static var `continue` : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Continue
    }
    public static var switchingProtocols : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_SwitchingProtocols
    }
    public static var processing : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Processing
    }
    public static var ok : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Ok
    }
    public static var created : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Created
    }
    public static var accepted : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Accepted
    }
    public static var nonAuthoritativeInformation : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NonAuthoritativeInformation
    }
    public static var noContent : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NoContent
    }
    public static var resetContent : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_ResetContent
    }
    public static var partialContent : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_PartialContent
    }
    public static var multiStatus : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_MultiStatus
    }
    public static var alreadyReported : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_AlreadyReported
    }
    public static var imUsed : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_IMUsed
    }
    public static var multipleChoices : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_MultipleChoices
    }
    public static var movedPermanently : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_MovedPermanently
    }
    public static var found : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Found
    }
    public static var seeOther : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_SeeOther
    }
    public static var notModified : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NotModified
    }
    public static var useProxy : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_UseProxy
    }
    public static var temporaryRedirect : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_TemporaryRedirect
    }
    public static var permanentRedirect : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_PermanentRedirect
    }
    public static var badRequest : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_BadRequest
    }
    public static var unauthorized : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Unauthorized
    }
    public static var paymentRequired : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_PaymentRequired
    }
    public static var forbidden : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Forbidden
    }
    public static var notFound : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NotFound
    }
    public static var methodNotAllowed : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_MethodNotAllowed
    }
    public static var notAcceptable : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NotAcceptable
    }
    public static var proxyAuthenticationRequired : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_ProxyAuthenticationRequired
    }
    public static var requestTimeout : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_RequestTimeout
    }
    public static var conflict : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Conflict
    }
    public static var gone : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Gone
    }
    public static var lengthRequired : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_LengthRequired
    }
    public static var preconditionFailed : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_PreconditionFailed
    }
    public static var requestEntityTooLarge : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_RequestEntityTooLarge
    }
    public static var requestUriTooLong : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_RequestUriTooLong
    }
    public static var unsupportedMediaType : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_UnsupportedMediaType
    }
    public static var requestedRangeNotSatisfiable : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_RequestedRangeNotSatisfiable
    }
    public static var expectationFailed : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_ExpectationFailed
    }
    public static var unprocessableEntity : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_UnprocessableEntity
    }
    public static var locked : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_Locked
    }
    public static var failedDependency : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_FailedDependency
    }
    public static var upgradeRequired : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_UpgradeRequired
    }
    public static var preconditionRequired : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_PreconditionRequired
    }
    public static var tooManyRequests : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_TooManyRequests
    }
    public static var requestHeaderFieldsTooLarge : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_RequestHeaderFieldsTooLarge
    }
    public static var internalServerError : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_InternalServerError
    }
    public static var notImplemented : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NotImplemented
    }
    public static var badGateway : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_BadGateway
    }
    public static var serviceUnavailable : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_ServiceUnavailable
    }
    public static var gatewayTimeout : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_GatewayTimeout
    }
    public static var httpVersionNotSupported : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_HttpVersionNotSupported
    }
    public static var variantAlsoNegotiates : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_VariantAlsoNegotiates
    }
    public static var insufficientStorage : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_InsufficientStorage
    }
    public static var loopDetected : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_LoopDetected
    }
    public static var notExtended : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NotExtended
    }
    public static var networkAuthenticationRequired : UWP.HttpStatusCode {
        __x_ABI_CWindows_CWeb_CHttp_CHttpStatusCode_NetworkAuthenticationRequired
    }
}
extension UWP.HttpStatusCode: @retroactive Hashable, @retroactive Codable {}

extension UWP.HttpVersion {
    public static var none : UWP.HttpVersion {
        __x_ABI_CWindows_CWeb_CHttp_CHttpVersion_None
    }
    public static var http10 : UWP.HttpVersion {
        __x_ABI_CWindows_CWeb_CHttp_CHttpVersion_Http10
    }
    public static var http11 : UWP.HttpVersion {
        __x_ABI_CWindows_CWeb_CHttp_CHttpVersion_Http11
    }
    public static var http20 : UWP.HttpVersion {
        __x_ABI_CWindows_CWeb_CHttp_CHttpVersion_Http20
    }
}
extension UWP.HttpVersion: @retroactive Hashable, @retroactive Codable {}


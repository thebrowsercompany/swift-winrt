// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.pointint32)
public struct PointInt32: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.pointint32.x)
    public var x: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.pointint32.y)
    public var y: Int32 = 0
    public init() {}
    public init(x: Int32, y: Int32) {
        self.x = x
        self.y = y
    }
    public static func from(abi: __x_ABI_CWindows_CGraphics_CPointInt32) -> PointInt32 {
        .init(x: abi.X, y: abi.Y)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.rectint32)
public struct RectInt32: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.rectint32.x)
    public var x: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.rectint32.y)
    public var y: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.rectint32.width)
    public var width: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.rectint32.height)
    public var height: Int32 = 0
    public init() {}
    public init(x: Int32, y: Int32, width: Int32, height: Int32) {
        self.x = x
        self.y = y
        self.width = width
        self.height = height
    }
    public static func from(abi: __x_ABI_CWindows_CGraphics_CRectInt32) -> RectInt32 {
        .init(x: abi.X, y: abi.Y, width: abi.Width, height: abi.Height)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.sizeint32)
public struct SizeInt32: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.sizeint32.width)
    public var width: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.sizeint32.height)
    public var height: Int32 = 0
    public init() {}
    public init(width: Int32, height: Int32) {
        self.width = width
        self.height = height
    }
    public static func from(abi: __x_ABI_CWindows_CGraphics_CSizeInt32) -> SizeInt32 {
        .init(width: abi.Width, height: abi.Height)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.igeometrysource2d)
public protocol IGeometrySource2D : WinRTInterface {
}

extension IGeometrySource2D {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Graphics.IGeometrySource2DWrapper.IID:
                let wrapper = __ABI_Windows_Graphics.IGeometrySource2DWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIGeometrySource2D = any IGeometrySource2D


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofiledeletestatus)
public typealias ConnectionProfileDeleteStatus = __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.datausagegranularity)
public typealias DataUsageGranularity = __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.domainconnectivitylevel)
public typealias DomainConnectivityLevel = __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkauthenticationtype)
public typealias NetworkAuthenticationType = __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkconnectivitylevel)
public typealias NetworkConnectivityLevel = __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkcosttype)
public typealias NetworkCostType = __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkencryptiontype)
public typealias NetworkEncryptionType = __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networktypes)
public typealias NetworkTypes = __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.roamingstates)
public typealias RoamingStates = __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.tristates)
public typealias TriStates = __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wwandataclass)
public typealias WwanDataClass = __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wwannetworkipkind)
public typealias WwanNetworkIPKind = __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wwannetworkregistrationstate)
public typealias WwanNetworkRegistrationState = __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.attributednetworkusage)
public final class AttributedNetworkUsage : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IAttributedNetworkUsage
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage>?) -> AttributedNetworkUsage? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.attributednetworkusage.attributionid)
    public var attributionId : String {
        get { try! _default.get_AttributionIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.attributednetworkusage.attributionname)
    public var attributionName : String {
        get { try! _default.get_AttributionNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.attributednetworkusage.attributionthumbnail)
    public var attributionThumbnail : UWP.AnyIRandomAccessStreamReference! {
        get { try! _default.get_AttributionThumbnailImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.attributednetworkusage.bytesreceived)
    public var bytesReceived : UInt64 {
        get { try! _default.get_BytesReceivedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.attributednetworkusage.bytessent)
    public var bytesSent : UInt64 {
        get { try! _default.get_BytesSentImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectioncost)
public final class ConnectionCost : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IConnectionCost
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost>?) -> ConnectionCost? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectioncost.approachingdatalimit)
    public var approachingDataLimit : Bool {
        get { try! _default.get_ApproachingDataLimitImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectioncost.networkcosttype)
    public var networkCostType : NetworkCostType {
        get { try! _default.get_NetworkCostTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectioncost.overdatalimit)
    public var overDataLimit : Bool {
        get { try! _default.get_OverDataLimitImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectioncost.roaming)
    public var roaming : Bool {
        get { try! _default.get_RoamingImpl() }
    }

    private lazy var _IConnectionCost2: __ABI_Windows_Networking_Connectivity.IConnectionCost2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectioncost.backgrounddatausagerestricted)
    public var backgroundDataUsageRestricted : Bool {
        get { try! _IConnectionCost2.get_BackgroundDataUsageRestrictedImpl() }
    }

    deinit {
        _default = nil
        _IConnectionCost2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile)
public final class ConnectionProfile : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IConnectionProfile
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile>?) -> ConnectionProfile? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getnetworkconnectivitylevel)
    public func getNetworkConnectivityLevel() throws -> NetworkConnectivityLevel {
        try _default.GetNetworkConnectivityLevelImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getnetworknames)
    public func getNetworkNames() throws -> WindowsFoundation.AnyIVectorView<String>! {
        try _default.GetNetworkNamesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getconnectioncost)
    public func getConnectionCost() throws -> ConnectionCost! {
        try _default.GetConnectionCostImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getdataplanstatus)
    public func getDataPlanStatus() throws -> DataPlanStatus! {
        try _default.GetDataPlanStatusImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getlocalusage)
    public func getLocalUsage(_ StartTime: WindowsFoundation.DateTime, _ EndTime: WindowsFoundation.DateTime) throws -> DataUsage! {
        try _default.GetLocalUsageImpl(StartTime, EndTime)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getlocalusage)
    public func getLocalUsage(_ StartTime: WindowsFoundation.DateTime, _ EndTime: WindowsFoundation.DateTime, _ States: RoamingStates) throws -> DataUsage! {
        try _default.GetLocalUsagePerRoamingStatesImpl(StartTime, EndTime, States)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.networkadapter)
    public var networkAdapter : NetworkAdapter! {
        get { try! _default.get_NetworkAdapterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.networksecuritysettings)
    public var networkSecuritySettings : NetworkSecuritySettings! {
        get { try! _default.get_NetworkSecuritySettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.profilename)
    public var profileName : String {
        get { try! _default.get_ProfileNameImpl() }
    }

    private lazy var _IConnectionProfile2: __ABI_Windows_Networking_Connectivity.IConnectionProfile2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getsignalbars)
    public func getSignalBars() throws -> UInt8? {
        try _IConnectionProfile2.GetSignalBarsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getdomainconnectivitylevel)
    public func getDomainConnectivityLevel() throws -> DomainConnectivityLevel {
        try _IConnectionProfile2.GetDomainConnectivityLevelImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getnetworkusageasync)
    public func getNetworkUsageAsync(_ startTime: WindowsFoundation.DateTime, _ endTime: WindowsFoundation.DateTime, _ granularity: DataUsageGranularity, _ states: NetworkUsageStates) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<NetworkUsage?>?>! {
        try _IConnectionProfile2.GetNetworkUsageAsyncImpl(startTime, endTime, granularity, states)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getconnectivityintervalsasync)
    public func getConnectivityIntervalsAsync(_ startTime: WindowsFoundation.DateTime, _ endTime: WindowsFoundation.DateTime, _ states: NetworkUsageStates) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<ConnectivityInterval?>?>! {
        try _IConnectionProfile2.GetConnectivityIntervalsAsyncImpl(startTime, endTime, states)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.iswlanconnectionprofile)
    public var isWlanConnectionProfile : Bool {
        get { try! _IConnectionProfile2.get_IsWlanConnectionProfileImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.iswwanconnectionprofile)
    public var isWwanConnectionProfile : Bool {
        get { try! _IConnectionProfile2.get_IsWwanConnectionProfileImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.serviceproviderguid)
    public var serviceProviderGuid : Foundation.UUID? {
        get { try! _IConnectionProfile2.get_ServiceProviderGuidImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.wlanconnectionprofiledetails)
    public var wlanConnectionProfileDetails : WlanConnectionProfileDetails! {
        get { try! _IConnectionProfile2.get_WlanConnectionProfileDetailsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.wwanconnectionprofiledetails)
    public var wwanConnectionProfileDetails : WwanConnectionProfileDetails! {
        get { try! _IConnectionProfile2.get_WwanConnectionProfileDetailsImpl() }
    }

    private lazy var _IConnectionProfile3: __ABI_Windows_Networking_Connectivity.IConnectionProfile3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getattributednetworkusageasync)
    public func getAttributedNetworkUsageAsync(_ startTime: WindowsFoundation.DateTime, _ endTime: WindowsFoundation.DateTime, _ states: NetworkUsageStates) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<AttributedNetworkUsage?>?>! {
        try _IConnectionProfile3.GetAttributedNetworkUsageAsyncImpl(startTime, endTime, states)
    }

    private lazy var _IConnectionProfile4: __ABI_Windows_Networking_Connectivity.IConnectionProfile4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.getprovidernetworkusageasync)
    public func getProviderNetworkUsageAsync(_ startTime: WindowsFoundation.DateTime, _ endTime: WindowsFoundation.DateTime, _ states: NetworkUsageStates) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<ProviderNetworkUsage?>?>! {
        try _IConnectionProfile4.GetProviderNetworkUsageAsyncImpl(startTime, endTime, states)
    }

    private lazy var _IConnectionProfile5: __ABI_Windows_Networking_Connectivity.IConnectionProfile5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.trydeleteasync)
    public func tryDeleteAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ConnectionProfileDeleteStatus>! {
        try _IConnectionProfile5.TryDeleteAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectionprofile.candelete)
    public var canDelete : Bool {
        get { try! _IConnectionProfile5.get_CanDeleteImpl() }
    }

    deinit {
        _default = nil
        _IConnectionProfile2 = nil
        _IConnectionProfile3 = nil
        _IConnectionProfile4 = nil
        _IConnectionProfile5 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectivityinterval)
public final class ConnectivityInterval : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IConnectivityInterval
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval>?) -> ConnectivityInterval? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectivityinterval.connectionduration)
    public var connectionDuration : WindowsFoundation.TimeSpan {
        get { try! _default.get_ConnectionDurationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.connectivityinterval.starttime)
    public var startTime : WindowsFoundation.DateTime {
        get { try! _default.get_StartTimeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.dataplanstatus)
public final class DataPlanStatus : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IDataPlanStatus
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus>?) -> DataPlanStatus? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.dataplanstatus.datalimitinmegabytes)
    public var dataLimitInMegabytes : UInt32? {
        get { try! _default.get_DataLimitInMegabytesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.dataplanstatus.dataplanusage)
    public var dataPlanUsage : DataPlanUsage! {
        get { try! _default.get_DataPlanUsageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.dataplanstatus.inboundbitspersecond)
    public var inboundBitsPerSecond : UInt64? {
        get { try! _default.get_InboundBitsPerSecondImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.dataplanstatus.maxtransfersizeinmegabytes)
    public var maxTransferSizeInMegabytes : UInt32? {
        get { try! _default.get_MaxTransferSizeInMegabytesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.dataplanstatus.nextbillingcycle)
    public var nextBillingCycle : WindowsFoundation.DateTime? {
        get { try! _default.get_NextBillingCycleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.dataplanstatus.outboundbitspersecond)
    public var outboundBitsPerSecond : UInt64? {
        get { try! _default.get_OutboundBitsPerSecondImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.dataplanusage)
public final class DataPlanUsage : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IDataPlanUsage
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage>?) -> DataPlanUsage? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.dataplanusage.lastsynctime)
    public var lastSyncTime : WindowsFoundation.DateTime {
        get { try! _default.get_LastSyncTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.dataplanusage.megabytesused)
    public var megabytesUsed : UInt32 {
        get { try! _default.get_MegabytesUsedImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.datausage)
public final class DataUsage : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IDataUsage
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage>?) -> DataUsage? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.datausage.bytesreceived)
    public var bytesReceived : UInt64 {
        get { try! _default.get_BytesReceivedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.datausage.bytessent)
    public var bytesSent : UInt64 {
        get { try! _default.get_BytesSentImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.ipinformation)
public final class IPInformation : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IIPInformation
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation>?) -> IPInformation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.ipinformation.networkadapter)
    public var networkAdapter : NetworkAdapter! {
        get { try! _default.get_NetworkAdapterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.ipinformation.prefixlength)
    public var prefixLength : UInt8? {
        get { try! _default.get_PrefixLengthImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkadapter)
public final class NetworkAdapter : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.INetworkAdapter
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter>?) -> NetworkAdapter? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkadapter.getconnectedprofileasync)
    public func getConnectedProfileAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ConnectionProfile?>! {
        try _default.GetConnectedProfileAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkadapter.ianainterfacetype)
    public var ianaInterfaceType : UInt32 {
        get { try! _default.get_IanaInterfaceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkadapter.inboundmaxbitspersecond)
    public var inboundMaxBitsPerSecond : UInt64 {
        get { try! _default.get_InboundMaxBitsPerSecondImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkadapter.networkadapterid)
    public var networkAdapterId : Foundation.UUID {
        get { try! _default.get_NetworkAdapterIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkadapter.networkitem)
    public var networkItem : NetworkItem! {
        get { try! _default.get_NetworkItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkadapter.outboundmaxbitspersecond)
    public var outboundMaxBitsPerSecond : UInt64 {
        get { try! _default.get_OutboundMaxBitsPerSecondImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkitem)
public final class NetworkItem : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.INetworkItem
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem>?) -> NetworkItem? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkitem.getnetworktypes)
    public func getNetworkTypes() throws -> NetworkTypes {
        try _default.GetNetworkTypesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkitem.networkid)
    public var networkId : Foundation.UUID {
        get { try! _default.get_NetworkIdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networksecuritysettings)
public final class NetworkSecuritySettings : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.INetworkSecuritySettings
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings>?) -> NetworkSecuritySettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networksecuritysettings.networkauthenticationtype)
    public var networkAuthenticationType : NetworkAuthenticationType {
        get { try! _default.get_NetworkAuthenticationTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networksecuritysettings.networkencryptiontype)
    public var networkEncryptionType : NetworkEncryptionType {
        get { try! _default.get_NetworkEncryptionTypeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkusage)
public final class NetworkUsage : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.INetworkUsage
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage>?) -> NetworkUsage? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkusage.bytesreceived)
    public var bytesReceived : UInt64 {
        get { try! _default.get_BytesReceivedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkusage.bytessent)
    public var bytesSent : UInt64 {
        get { try! _default.get_BytesSentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkusage.connectionduration)
    public var connectionDuration : WindowsFoundation.TimeSpan {
        get { try! _default.get_ConnectionDurationImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.providernetworkusage)
public final class ProviderNetworkUsage : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IProviderNetworkUsage
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage>?) -> ProviderNetworkUsage? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.providernetworkusage.bytesreceived)
    public var bytesReceived : UInt64 {
        get { try! _default.get_BytesReceivedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.providernetworkusage.bytessent)
    public var bytesSent : UInt64 {
        get { try! _default.get_BytesSentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.providernetworkusage.providerid)
    public var providerId : String {
        get { try! _default.get_ProviderIdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wlanconnectionprofiledetails)
public final class WlanConnectionProfileDetails : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IWlanConnectionProfileDetails
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails>?) -> WlanConnectionProfileDetails? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wlanconnectionprofiledetails.getconnectedssid)
    public func getConnectedSsid() throws -> String {
        try _default.GetConnectedSsidImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wwanconnectionprofiledetails)
public final class WwanConnectionProfileDetails : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Networking_Connectivity.IWwanConnectionProfileDetails
    private typealias CABI = __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails>?) -> WwanConnectionProfileDetails? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wwanconnectionprofiledetails.getnetworkregistrationstate)
    public func getNetworkRegistrationState() throws -> WwanNetworkRegistrationState {
        try _default.GetNetworkRegistrationStateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wwanconnectionprofiledetails.getcurrentdataclass)
    public func getCurrentDataClass() throws -> WwanDataClass {
        try _default.GetCurrentDataClassImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wwanconnectionprofiledetails.accesspointname)
    public var accessPointName : String {
        get { try! _default.get_AccessPointNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wwanconnectionprofiledetails.homeproviderid)
    public var homeProviderId : String {
        get { try! _default.get_HomeProviderIdImpl() }
    }

    private lazy var _IWwanConnectionProfileDetails2: __ABI_Windows_Networking_Connectivity.IWwanConnectionProfileDetails2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wwanconnectionprofiledetails.ipkind)
    public var ipKind : WwanNetworkIPKind {
        get { try! _IWwanConnectionProfileDetails2.get_IPKindImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.wwanconnectionprofiledetails.purposeguids)
    public var purposeGuids : WindowsFoundation.AnyIVectorView<Foundation.UUID>! {
        get { try! _IWwanConnectionProfileDetails2.get_PurposeGuidsImpl() }
    }

    deinit {
        _default = nil
        _IWwanConnectionProfileDetails2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkusagestates)
public struct NetworkUsageStates: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkusagestates.roaming)
    public var roaming: TriStates = .init(0)
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.connectivity.networkusagestates.shared)
    public var shared: TriStates = .init(0)
    public init() {}
    public init(roaming: TriStates, shared: TriStates) {
        self.roaming = roaming
        self.shared = shared
    }
    public static func from(abi: __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkUsageStates) -> NetworkUsageStates {
        .init(roaming: abi.Roaming, shared: abi.Shared)
    }
}

extension UWP.ConnectionProfileDeleteStatus {
    public static var success : UWP.ConnectionProfileDeleteStatus {
        __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_Success
    }
    public static var deniedByUser : UWP.ConnectionProfileDeleteStatus {
        __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_DeniedByUser
    }
    public static var deniedBySystem : UWP.ConnectionProfileDeleteStatus {
        __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_DeniedBySystem
    }
    public static var unknownError : UWP.ConnectionProfileDeleteStatus {
        __x_ABI_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_UnknownError
    }
}
extension UWP.ConnectionProfileDeleteStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.DataUsageGranularity {
    public static var perMinute : UWP.DataUsageGranularity {
        __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_PerMinute
    }
    public static var perHour : UWP.DataUsageGranularity {
        __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_PerHour
    }
    public static var perDay : UWP.DataUsageGranularity {
        __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_PerDay
    }
    public static var total : UWP.DataUsageGranularity {
        __x_ABI_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_Total
    }
}
extension UWP.DataUsageGranularity: @retroactive Hashable, @retroactive Codable {}

extension UWP.DomainConnectivityLevel {
    public static var none : UWP.DomainConnectivityLevel {
        __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel_None
    }
    public static var unauthenticated : UWP.DomainConnectivityLevel {
        __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel_Unauthenticated
    }
    public static var authenticated : UWP.DomainConnectivityLevel {
        __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel_Authenticated
    }
}
extension UWP.DomainConnectivityLevel: @retroactive Hashable, @retroactive Codable {}

extension UWP.NetworkAuthenticationType {
    public static var none : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_None
    }
    public static var unknown : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Unknown
    }
    public static var open80211 : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Open80211
    }
    public static var sharedKey80211 : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_SharedKey80211
    }
    public static var wpa : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa
    }
    public static var wpaPsk : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_WpaPsk
    }
    public static var wpaNone : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_WpaNone
    }
    public static var rsna : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Rsna
    }
    public static var rsnaPsk : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_RsnaPsk
    }
    public static var ihv : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Ihv
    }
    public static var wpa3 : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa3
    }
    public static var wpa3Sae : UWP.NetworkAuthenticationType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa3Sae
    }
}
extension UWP.NetworkAuthenticationType: @retroactive Hashable, @retroactive Codable {}

extension UWP.NetworkConnectivityLevel {
    public static var none : UWP.NetworkConnectivityLevel {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_None
    }
    public static var localAccess : UWP.NetworkConnectivityLevel {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_LocalAccess
    }
    public static var constrainedInternetAccess : UWP.NetworkConnectivityLevel {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_ConstrainedInternetAccess
    }
    public static var internetAccess : UWP.NetworkConnectivityLevel {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_InternetAccess
    }
}
extension UWP.NetworkConnectivityLevel: @retroactive Hashable, @retroactive Codable {}

extension UWP.NetworkCostType {
    public static var unknown : UWP.NetworkCostType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType_Unknown
    }
    public static var unrestricted : UWP.NetworkCostType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType_Unrestricted
    }
    public static var fixed : UWP.NetworkCostType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType_Fixed
    }
    public static var variable : UWP.NetworkCostType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType_Variable
    }
}
extension UWP.NetworkCostType: @retroactive Hashable, @retroactive Codable {}

extension UWP.NetworkEncryptionType {
    public static var none : UWP.NetworkEncryptionType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_None
    }
    public static var unknown : UWP.NetworkEncryptionType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Unknown
    }
    public static var wep : UWP.NetworkEncryptionType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Wep
    }
    public static var wep40 : UWP.NetworkEncryptionType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Wep40
    }
    public static var wep104 : UWP.NetworkEncryptionType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Wep104
    }
    public static var tkip : UWP.NetworkEncryptionType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Tkip
    }
    public static var ccmp : UWP.NetworkEncryptionType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Ccmp
    }
    public static var wpaUseGroup : UWP.NetworkEncryptionType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_WpaUseGroup
    }
    public static var rsnUseGroup : UWP.NetworkEncryptionType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_RsnUseGroup
    }
    public static var ihv : UWP.NetworkEncryptionType {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Ihv
    }
}
extension UWP.NetworkEncryptionType: @retroactive Hashable, @retroactive Codable {}

extension UWP.NetworkTypes {
    public static var none : UWP.NetworkTypes {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes_None
    }
    public static var internet : UWP.NetworkTypes {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes_Internet
    }
    public static var privateNetwork : UWP.NetworkTypes {
        __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes_PrivateNetwork
    }
}
extension UWP.NetworkTypes: @retroactive Hashable, @retroactive Codable {}

extension UWP.RoamingStates {
    public static var none : UWP.RoamingStates {
        __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates_None
    }
    public static var notRoaming : UWP.RoamingStates {
        __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates_NotRoaming
    }
    public static var roaming : UWP.RoamingStates {
        __x_ABI_CWindows_CNetworking_CConnectivity_CRoamingStates_Roaming
    }
}
extension UWP.RoamingStates: @retroactive Hashable, @retroactive Codable {}

extension UWP.TriStates {
    public static var doNotCare : UWP.TriStates {
        __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates_DoNotCare
    }
    public static var no : UWP.TriStates {
        __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates_No
    }
    public static var yes : UWP.TriStates {
        __x_ABI_CWindows_CNetworking_CConnectivity_CTriStates_Yes
    }
}
extension UWP.TriStates: @retroactive Hashable, @retroactive Codable {}

extension UWP.WwanDataClass {
    public static var none : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_None
    }
    public static var gprs : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Gprs
    }
    public static var edge : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Edge
    }
    public static var umts : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Umts
    }
    public static var hsdpa : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Hsdpa
    }
    public static var hsupa : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Hsupa
    }
    public static var lteAdvanced : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_LteAdvanced
    }
    public static var cdma1xRtt : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xRtt
    }
    public static var cdma1xEvdo : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdo
    }
    public static var cdma1xEvdoRevA : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdoRevA
    }
    public static var cdma1xEvdv : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdv
    }
    public static var cdma3xRtt : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma3xRtt
    }
    public static var cdma1xEvdoRevB : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdoRevB
    }
    public static var cdmaUmb : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_CdmaUmb
    }
    public static var custom : UWP.WwanDataClass {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass_Custom
    }
}
extension UWP.WwanDataClass: @retroactive Hashable, @retroactive Codable {}

extension UWP.WwanNetworkIPKind {
    public static var none : UWP.WwanNetworkIPKind {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_None
    }
    public static var ipv4 : UWP.WwanNetworkIPKind {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv4
    }
    public static var ipv6 : UWP.WwanNetworkIPKind {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv6
    }
    public static var ipv4v6 : UWP.WwanNetworkIPKind {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv4v6
    }
    public static var ipv4v6v4Xlat : UWP.WwanNetworkIPKind {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv4v6v4Xlat
    }
}
extension UWP.WwanNetworkIPKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.WwanNetworkRegistrationState {
    public static var none : UWP.WwanNetworkRegistrationState {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_None
    }
    public static var deregistered : UWP.WwanNetworkRegistrationState {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Deregistered
    }
    public static var searching : UWP.WwanNetworkRegistrationState {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Searching
    }
    public static var home : UWP.WwanNetworkRegistrationState {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Home
    }
    public static var roaming : UWP.WwanNetworkRegistrationState {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Roaming
    }
    public static var partner : UWP.WwanNetworkRegistrationState {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Partner
    }
    public static var denied : UWP.WwanNetworkRegistrationState {
        __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Denied
    }
}
extension UWP.WwanNetworkRegistrationState: @retroactive Hashable, @retroactive Codable {}


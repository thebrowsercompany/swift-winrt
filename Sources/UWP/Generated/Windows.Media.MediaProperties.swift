// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediapixelformat)
public typealias MediaPixelFormat = __x_ABI_CWindows_CMedia_CMediaProperties_CMediaPixelFormat
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediarotation)
public typealias MediaRotation = __x_ABI_CWindows_CMedia_CMediaProperties_CMediaRotation
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediathumbnailformat)
public typealias MediaThumbnailFormat = __x_ABI_CWindows_CMedia_CMediaProperties_CMediaThumbnailFormat
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.sphericalvideoframeformat)
public typealias SphericalVideoFrameFormat = __x_ABI_CWindows_CMedia_CMediaProperties_CSphericalVideoFrameFormat
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.stereoscopicvideopackingmode)
public typealias StereoscopicVideoPackingMode = __x_ABI_CWindows_CMedia_CMediaProperties_CStereoscopicVideoPackingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties)
public final class AudioEncodingProperties : WinRTClass, IMediaEncodingProperties {
    private typealias SwiftABI = __ABI_Windows_Media_MediaProperties.IAudioEncodingProperties
    private typealias CABI = __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties>?) -> AudioEncodingProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Media.MediaProperties.AudioEncodingProperties")))
    }

    private static let _IAudioEncodingPropertiesStatics: __ABI_Windows_Media_MediaProperties.IAudioEncodingPropertiesStatics = try! RoGetActivationFactory(HString("Windows.Media.MediaProperties.AudioEncodingProperties"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.createaac)
    public static func createAac(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitrate: UInt32) -> AudioEncodingProperties! {
        return try! _IAudioEncodingPropertiesStatics.CreateAacImpl(sampleRate, channelCount, bitrate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.createaacadts)
    public static func createAacAdts(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitrate: UInt32) -> AudioEncodingProperties! {
        return try! _IAudioEncodingPropertiesStatics.CreateAacAdtsImpl(sampleRate, channelCount, bitrate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.createmp3)
    public static func createMp3(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitrate: UInt32) -> AudioEncodingProperties! {
        return try! _IAudioEncodingPropertiesStatics.CreateMp3Impl(sampleRate, channelCount, bitrate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.createpcm)
    public static func createPcm(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitsPerSample: UInt32) -> AudioEncodingProperties! {
        return try! _IAudioEncodingPropertiesStatics.CreatePcmImpl(sampleRate, channelCount, bitsPerSample)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.createwma)
    public static func createWma(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitrate: UInt32) -> AudioEncodingProperties! {
        return try! _IAudioEncodingPropertiesStatics.CreateWmaImpl(sampleRate, channelCount, bitrate)
    }

    private static let _IAudioEncodingPropertiesStatics2: __ABI_Windows_Media_MediaProperties.IAudioEncodingPropertiesStatics2 = try! RoGetActivationFactory(HString("Windows.Media.MediaProperties.AudioEncodingProperties"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.createalac)
    public static func createAlac(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitsPerSample: UInt32) -> AudioEncodingProperties! {
        return try! _IAudioEncodingPropertiesStatics2.CreateAlacImpl(sampleRate, channelCount, bitsPerSample)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.createflac)
    public static func createFlac(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitsPerSample: UInt32) -> AudioEncodingProperties! {
        return try! _IAudioEncodingPropertiesStatics2.CreateFlacImpl(sampleRate, channelCount, bitsPerSample)
    }

    private lazy var _IMediaEncodingProperties: __ABI_Windows_Media_MediaProperties.IMediaEncodingProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.properties)
    public var properties : MediaPropertySet! {
        get { try! _IMediaEncodingProperties.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.subtype)
    public var subtype : String {
        get { try! _IMediaEncodingProperties.get_SubtypeImpl() }
        set { try! _IMediaEncodingProperties.put_SubtypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.type)
    public var type : String {
        get { try! _IMediaEncodingProperties.get_TypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.bitrate)
    public var bitrate : UInt32 {
        get { try! _default.get_BitrateImpl() }
        set { try! _default.put_BitrateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.bitspersample)
    public var bitsPerSample : UInt32 {
        get { try! _default.get_BitsPerSampleImpl() }
        set { try! _default.put_BitsPerSampleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.channelcount)
    public var channelCount : UInt32 {
        get { try! _default.get_ChannelCountImpl() }
        set { try! _default.put_ChannelCountImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.samplerate)
    public var sampleRate : UInt32 {
        get { try! _default.get_SampleRateImpl() }
        set { try! _default.put_SampleRateImpl(newValue) }
    }

    private lazy var _IAudioEncodingPropertiesWithFormatUserData: __ABI_Windows_Media_MediaProperties.IAudioEncodingPropertiesWithFormatUserData! = getInterfaceForCaching()
    private lazy var _IAudioEncodingProperties2: __ABI_Windows_Media_MediaProperties.IAudioEncodingProperties2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.isspatial)
    public var isSpatial : Bool {
        get { try! _IAudioEncodingProperties2.get_IsSpatialImpl() }
    }

    private lazy var _IAudioEncodingProperties3: __ABI_Windows_Media_MediaProperties.IAudioEncodingProperties3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.audioencodingproperties.copy)
    public func copy() throws -> AudioEncodingProperties! {
        try _IAudioEncodingProperties3.CopyImpl()
    }

    deinit {
        _IMediaEncodingProperties = nil
        _default = nil
        _IAudioEncodingPropertiesWithFormatUserData = nil
        _IAudioEncodingProperties2 = nil
        _IAudioEncodingProperties3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediapropertyset)
public final class MediaPropertySet : WinRTClass, IMap, IIterable {
    public typealias K = Foundation.UUID
    public typealias V = Any?
    public typealias T = WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, Any?>?
    private typealias SwiftABI = UWP.IMapUUID_Any
    private typealias CABI = __x_ABI_C__FIMap_2_GUID_IInspectable
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIMap_2_GUID_IInspectable>?) -> MediaPropertySet? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Media.MediaProperties.MediaPropertySet")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediapropertyset.lookup)
    public func lookup(_ key: Foundation.UUID) -> Any? {
        try! _default.LookupImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediapropertyset.haskey)
    public func hasKey(_ key: Foundation.UUID) -> Bool {
        try! _default.HasKeyImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediapropertyset.getview)
    public func getView() -> WindowsFoundation.AnyIMapView<Foundation.UUID, Any?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediapropertyset.insert)
    public func insert(_ key: Foundation.UUID, _ value: Any?) -> Bool {
        try! _default.InsertImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediapropertyset.remove)
    public func remove(_ key: Foundation.UUID) {
        try! _default.RemoveImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediapropertyset.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediapropertyset.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairUUID_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediapropertyset.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, Any?>?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediaratio)
public final class MediaRatio : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_MediaProperties.IMediaRatio
    private typealias CABI = __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio>?) -> MediaRatio? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediaratio.denominator)
    public var denominator : UInt32 {
        get { try! _default.get_DenominatorImpl() }
        set { try! _default.put_DenominatorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.mediaratio.numerator)
    public var numerator : UInt32 {
        get { try! _default.get_NumeratorImpl() }
        set { try! _default.put_NumeratorImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties)
public final class VideoEncodingProperties : WinRTClass, IMediaEncodingProperties {
    private typealias SwiftABI = __ABI_Windows_Media_MediaProperties.IVideoEncodingProperties
    private typealias CABI = __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties>?) -> VideoEncodingProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Media.MediaProperties.VideoEncodingProperties")))
    }

    private static let _IVideoEncodingPropertiesStatics: __ABI_Windows_Media_MediaProperties.IVideoEncodingPropertiesStatics = try! RoGetActivationFactory(HString("Windows.Media.MediaProperties.VideoEncodingProperties"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.createh264)
    public static func createH264() -> VideoEncodingProperties! {
        return try! _IVideoEncodingPropertiesStatics.CreateH264Impl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.creatempeg2)
    public static func createMpeg2() -> VideoEncodingProperties! {
        return try! _IVideoEncodingPropertiesStatics.CreateMpeg2Impl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.createuncompressed)
    public static func createUncompressed(_ subtype: String, _ width: UInt32, _ height: UInt32) -> VideoEncodingProperties! {
        return try! _IVideoEncodingPropertiesStatics.CreateUncompressedImpl(subtype, width, height)
    }

    private static let _IVideoEncodingPropertiesStatics2: __ABI_Windows_Media_MediaProperties.IVideoEncodingPropertiesStatics2 = try! RoGetActivationFactory(HString("Windows.Media.MediaProperties.VideoEncodingProperties"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.createhevc)
    public static func createHevc() -> VideoEncodingProperties! {
        return try! _IVideoEncodingPropertiesStatics2.CreateHevcImpl()
    }

    private lazy var _IMediaEncodingProperties: __ABI_Windows_Media_MediaProperties.IMediaEncodingProperties! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.properties)
    public var properties : MediaPropertySet! {
        get { try! _IMediaEncodingProperties.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.subtype)
    public var subtype : String {
        get { try! _IMediaEncodingProperties.get_SubtypeImpl() }
        set { try! _IMediaEncodingProperties.put_SubtypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.type)
    public var type : String {
        get { try! _IMediaEncodingProperties.get_TypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.bitrate)
    public var bitrate : UInt32 {
        get { try! _default.get_BitrateImpl() }
        set { try! _default.put_BitrateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.framerate)
    public var frameRate : MediaRatio! {
        get { try! _default.get_FrameRateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.height)
    public var height : UInt32 {
        get { try! _default.get_HeightImpl() }
        set { try! _default.put_HeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.pixelaspectratio)
    public var pixelAspectRatio : MediaRatio! {
        get { try! _default.get_PixelAspectRatioImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.width)
    public var width : UInt32 {
        get { try! _default.get_WidthImpl() }
        set { try! _default.put_WidthImpl(newValue) }
    }

    private lazy var _IVideoEncodingProperties2: __ABI_Windows_Media_MediaProperties.IVideoEncodingProperties2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.profileid)
    public var profileId : Int32 {
        get { try! _IVideoEncodingProperties2.get_ProfileIdImpl() }
        set { try! _IVideoEncodingProperties2.put_ProfileIdImpl(newValue) }
    }

    private lazy var _IVideoEncodingProperties3: __ABI_Windows_Media_MediaProperties.IVideoEncodingProperties3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.stereoscopicvideopackingmode)
    public var stereoscopicVideoPackingMode : StereoscopicVideoPackingMode {
        get { try! _IVideoEncodingProperties3.get_StereoscopicVideoPackingModeImpl() }
    }

    private lazy var _IVideoEncodingProperties4: __ABI_Windows_Media_MediaProperties.IVideoEncodingProperties4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.sphericalvideoframeformat)
    public var sphericalVideoFrameFormat : SphericalVideoFrameFormat {
        get { try! _IVideoEncodingProperties4.get_SphericalVideoFrameFormatImpl() }
    }

    private lazy var _IVideoEncodingProperties5: __ABI_Windows_Media_MediaProperties.IVideoEncodingProperties5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.videoencodingproperties.copy)
    public func copy() throws -> VideoEncodingProperties! {
        try _IVideoEncodingProperties5.CopyImpl()
    }

    deinit {
        _IMediaEncodingProperties = nil
        _default = nil
        _IVideoEncodingProperties2 = nil
        _IVideoEncodingProperties3 = nil
        _IVideoEncodingProperties4 = nil
        _IVideoEncodingProperties5 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.imediaencodingproperties)
public protocol IMediaEncodingProperties : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.imediaencodingproperties.properties)
    var properties: UWP.MediaPropertySet! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.imediaencodingproperties.subtype)
    var subtype: String { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.mediaproperties.imediaencodingproperties.type)
    var type: String { get }
}

extension IMediaEncodingProperties {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Media_MediaProperties.IMediaEncodingPropertiesWrapper.IID:
                let wrapper = __ABI_Windows_Media_MediaProperties.IMediaEncodingPropertiesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIMediaEncodingProperties = any IMediaEncodingProperties

extension UWP.MediaPixelFormat {
    public static var nv12 : UWP.MediaPixelFormat {
        __x_ABI_CWindows_CMedia_CMediaProperties_CMediaPixelFormat_Nv12
    }
    public static var bgra8 : UWP.MediaPixelFormat {
        __x_ABI_CWindows_CMedia_CMediaProperties_CMediaPixelFormat_Bgra8
    }
    public static var p010 : UWP.MediaPixelFormat {
        __x_ABI_CWindows_CMedia_CMediaProperties_CMediaPixelFormat_P010
    }
}
extension UWP.MediaPixelFormat: @retroactive Hashable, @retroactive Codable {}

extension UWP.MediaRotation {
    public static var none : UWP.MediaRotation {
        __x_ABI_CWindows_CMedia_CMediaProperties_CMediaRotation_None
    }
    public static var clockwise90Degrees : UWP.MediaRotation {
        __x_ABI_CWindows_CMedia_CMediaProperties_CMediaRotation_Clockwise90Degrees
    }
    public static var clockwise180Degrees : UWP.MediaRotation {
        __x_ABI_CWindows_CMedia_CMediaProperties_CMediaRotation_Clockwise180Degrees
    }
    public static var clockwise270Degrees : UWP.MediaRotation {
        __x_ABI_CWindows_CMedia_CMediaProperties_CMediaRotation_Clockwise270Degrees
    }
}
extension UWP.MediaRotation: @retroactive Hashable, @retroactive Codable {}

extension UWP.MediaThumbnailFormat {
    public static var bmp : UWP.MediaThumbnailFormat {
        __x_ABI_CWindows_CMedia_CMediaProperties_CMediaThumbnailFormat_Bmp
    }
    public static var bgra8 : UWP.MediaThumbnailFormat {
        __x_ABI_CWindows_CMedia_CMediaProperties_CMediaThumbnailFormat_Bgra8
    }
}
extension UWP.MediaThumbnailFormat: @retroactive Hashable, @retroactive Codable {}

extension UWP.SphericalVideoFrameFormat {
    public static var none : UWP.SphericalVideoFrameFormat {
        __x_ABI_CWindows_CMedia_CMediaProperties_CSphericalVideoFrameFormat_None
    }
    public static var unsupported : UWP.SphericalVideoFrameFormat {
        __x_ABI_CWindows_CMedia_CMediaProperties_CSphericalVideoFrameFormat_Unsupported
    }
    public static var equirectangular : UWP.SphericalVideoFrameFormat {
        __x_ABI_CWindows_CMedia_CMediaProperties_CSphericalVideoFrameFormat_Equirectangular
    }
}
extension UWP.SphericalVideoFrameFormat: @retroactive Hashable, @retroactive Codable {}

extension UWP.StereoscopicVideoPackingMode {
    public static var none : UWP.StereoscopicVideoPackingMode {
        __x_ABI_CWindows_CMedia_CMediaProperties_CStereoscopicVideoPackingMode_None
    }
    public static var sideBySide : UWP.StereoscopicVideoPackingMode {
        __x_ABI_CWindows_CMedia_CMediaProperties_CStereoscopicVideoPackingMode_SideBySide
    }
    public static var topBottom : UWP.StereoscopicVideoPackingMode {
        __x_ABI_CWindows_CMedia_CMediaProperties_CStereoscopicVideoPackingMode_TopBottom
    }
}
extension UWP.StereoscopicVideoPackingMode: @retroactive Hashable, @retroactive Codable {}


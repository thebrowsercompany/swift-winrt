// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.addpackagebyappinstalleroptions)
public typealias AddPackageByAppInstallerOptions = __x_ABI_CWindows_CManagement_CDeployment_CAddPackageByAppInstallerOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.deploymentoptions)
public typealias DeploymentOptions = __x_ABI_CWindows_CManagement_CDeployment_CDeploymentOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.deploymentprogressstate)
public typealias DeploymentProgressState = __x_ABI_CWindows_CManagement_CDeployment_CDeploymentProgressState
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packageinstallstate)
public typealias PackageInstallState = __x_ABI_CWindows_CManagement_CDeployment_CPackageInstallState
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagestate)
public typealias PackageState = __x_ABI_CWindows_CManagement_CDeployment_CPackageState
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagetypes)
public typealias PackageTypes = __x_ABI_CWindows_CManagement_CDeployment_CPackageTypes
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.removaloptions)
public typealias RemovalOptions = __x_ABI_CWindows_CManagement_CDeployment_CRemovalOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.deploymentresult)
public final class DeploymentResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Management_Deployment.IDeploymentResult
    private typealias CABI = __x_ABI_CWindows_CManagement_CDeployment_CIDeploymentResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CManagement_CDeployment_CIDeploymentResult>?) -> DeploymentResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.deploymentresult.activityid)
    public var activityId : Foundation.UUID {
        get { try! _default.get_ActivityIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.deploymentresult.errortext)
    public var errorText : String {
        get { try! _default.get_ErrorTextImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.deploymentresult.extendederrorcode)
    public var extendedErrorCode : HRESULT {
        get { try! _default.get_ExtendedErrorCodeImpl() }
    }

    private lazy var _IDeploymentResult2: __ABI_Windows_Management_Deployment.IDeploymentResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.deploymentresult.isregistered)
    public var isRegistered : Bool {
        get { try! _IDeploymentResult2.get_IsRegisteredImpl() }
    }

    deinit {
        _default = nil
        _IDeploymentResult2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager)
public final class PackageManager : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Management_Deployment.IPackageManager
    private typealias CABI = __x_ABI_CWindows_CManagement_CDeployment_CIPackageManager
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CManagement_CDeployment_CIPackageManager>?) -> PackageManager? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Management.Deployment.PackageManager")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.addpackageasync)
    public func addPackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _default.AddPackageAsyncImpl(packageUri, dependencyPackageUris, deploymentOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.updatepackageasync)
    public func updatePackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _default.UpdatePackageAsyncImpl(packageUri, dependencyPackageUris, deploymentOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.removepackageasync)
    public func removePackageAsync(_ packageFullName: String) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _default.RemovePackageAsyncImpl(packageFullName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.stagepackageasync)
    public func stagePackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _default.StagePackageAsyncImpl(packageUri, dependencyPackageUris)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.registerpackageasync)
    public func registerPackageAsync(_ manifestUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _default.RegisterPackageAsyncImpl(manifestUri, dependencyPackageUris, deploymentOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackages)
    public func findPackages() throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _default.FindPackagesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackagesforuser)
    public func findPackagesForUser(_ userSecurityId: String) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _default.FindPackagesByUserSecurityIdImpl(userSecurityId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackages)
    public func findPackages(_ packageName: String, _ packagePublisher: String) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _default.FindPackagesByNamePublisherImpl(packageName, packagePublisher)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackagesforuser)
    public func findPackagesForUser(_ userSecurityId: String, _ packageName: String, _ packagePublisher: String) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _default.FindPackagesByUserSecurityIdNamePublisherImpl(userSecurityId, packageName, packagePublisher)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findusers)
    public func findUsers(_ packageFullName: String) throws -> WindowsFoundation.AnyIIterable<PackageUserInformation?>! {
        try _default.FindUsersImpl(packageFullName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.setpackagestate)
    public func setPackageState(_ packageFullName: String, _ packageState: PackageState) throws {
        try _default.SetPackageStateImpl(packageFullName, packageState)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackage)
    public func findPackage(_ packageFullName: String) throws -> UWP.Package! {
        try _default.FindPackageByPackageFullNameImpl(packageFullName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.cleanuppackageforuserasync)
    public func cleanupPackageForUserAsync(_ packageName: String, _ userSecurityId: String) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _default.CleanupPackageForUserAsyncImpl(packageName, userSecurityId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackages)
    public func findPackages(_ packageFamilyName: String) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _default.FindPackagesByPackageFamilyNameImpl(packageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackagesforuser)
    public func findPackagesForUser(_ userSecurityId: String, _ packageFamilyName: String) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _default.FindPackagesByUserSecurityIdPackageFamilyNameImpl(userSecurityId, packageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackageforuser)
    public func findPackageForUser(_ userSecurityId: String, _ packageFullName: String) throws -> UWP.Package! {
        try _default.FindPackageByUserSecurityIdPackageFullNameImpl(userSecurityId, packageFullName)
    }

    private lazy var _IPackageManager2: __ABI_Windows_Management_Deployment.IPackageManager2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.removepackageasync)
    public func removePackageAsync(_ packageFullName: String, _ removalOptions: RemovalOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager2.RemovePackageWithOptionsAsyncImpl(packageFullName, removalOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.stagepackageasync)
    public func stagePackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager2.StagePackageWithOptionsAsyncImpl(packageUri, dependencyPackageUris, deploymentOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.registerpackagebyfullnameasync)
    public func registerPackageByFullNameAsync(_ mainPackageFullName: String, _ dependencyPackageFullNames: WindowsFoundation.AnyIIterable<String>!, _ deploymentOptions: DeploymentOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager2.RegisterPackageByFullNameAsyncImpl(mainPackageFullName, dependencyPackageFullNames, deploymentOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackageswithpackagetypes)
    public func findPackagesWithPackageTypes(_ packageTypes: PackageTypes) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _IPackageManager2.FindPackagesWithPackageTypesImpl(packageTypes)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackagesforuserwithpackagetypes)
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: String, _ packageTypes: PackageTypes) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _IPackageManager2.FindPackagesByUserSecurityIdWithPackageTypesImpl(userSecurityId, packageTypes)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackageswithpackagetypes)
    public func findPackagesWithPackageTypes(_ packageName: String, _ packagePublisher: String, _ packageTypes: PackageTypes) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _IPackageManager2.FindPackagesByNamePublisherWithPackageTypesImpl(packageName, packagePublisher, packageTypes)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackagesforuserwithpackagetypes)
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: String, _ packageName: String, _ packagePublisher: String, _ packageTypes: PackageTypes) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _IPackageManager2.FindPackagesByUserSecurityIdNamePublisherWithPackageTypesImpl(userSecurityId, packageName, packagePublisher, packageTypes)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackageswithpackagetypes)
    public func findPackagesWithPackageTypes(_ packageFamilyName: String, _ packageTypes: PackageTypes) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _IPackageManager2.FindPackagesByPackageFamilyNameWithPackageTypesImpl(packageFamilyName, packageTypes)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackagesforuserwithpackagetypes)
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: String, _ packageFamilyName: String, _ packageTypes: PackageTypes) throws -> WindowsFoundation.AnyIIterable<UWP.Package?>! {
        try _IPackageManager2.FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypesImpl(userSecurityId, packageFamilyName, packageTypes)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.stageuserdataasync)
    public func stageUserDataAsync(_ packageFullName: String) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager2.StageUserDataAsyncImpl(packageFullName)
    }

    private lazy var _IPackageManager3: __ABI_Windows_Management_Deployment.IPackageManager3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.addpackagevolumeasync)
    public func addPackageVolumeAsync(_ packageStorePath: String) throws -> WindowsFoundation.AnyIAsyncOperation<PackageVolume?>! {
        try _IPackageManager3.AddPackageVolumeAsyncImpl(packageStorePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.addpackageasync)
    public func addPackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions, _ targetVolume: PackageVolume!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager3.AddPackageToVolumeAsyncImpl(packageUri, dependencyPackageUris, deploymentOptions, targetVolume)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.registerpackageasync)
    public func registerPackageAsync(_ manifestUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions, _ appDataVolume: PackageVolume!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager3.RegisterPackageWithAppDataVolumeAsyncImpl(manifestUri, dependencyPackageUris, deploymentOptions, appDataVolume)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackagevolume)
    public func findPackageVolume(_ volumeName: String) throws -> PackageVolume! {
        try _IPackageManager3.FindPackageVolumeByNameImpl(volumeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.findpackagevolumes)
    public func findPackageVolumes() throws -> WindowsFoundation.AnyIIterable<PackageVolume?>! {
        try _IPackageManager3.FindPackageVolumesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.getdefaultpackagevolume)
    public func getDefaultPackageVolume() throws -> PackageVolume! {
        try _IPackageManager3.GetDefaultPackageVolumeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.movepackagetovolumeasync)
    public func movePackageToVolumeAsync(_ packageFullName: String, _ deploymentOptions: DeploymentOptions, _ targetVolume: PackageVolume!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager3.MovePackageToVolumeAsyncImpl(packageFullName, deploymentOptions, targetVolume)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.removepackagevolumeasync)
    public func removePackageVolumeAsync(_ volume: PackageVolume!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager3.RemovePackageVolumeAsyncImpl(volume)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.setdefaultpackagevolume)
    public func setDefaultPackageVolume(_ volume: PackageVolume!) throws {
        try _IPackageManager3.SetDefaultPackageVolumeImpl(volume)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.setpackagevolumeofflineasync)
    public func setPackageVolumeOfflineAsync(_ packageVolume: PackageVolume!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager3.SetPackageVolumeOfflineAsyncImpl(packageVolume)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.setpackagevolumeonlineasync)
    public func setPackageVolumeOnlineAsync(_ packageVolume: PackageVolume!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager3.SetPackageVolumeOnlineAsyncImpl(packageVolume)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.stagepackageasync)
    public func stagePackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions, _ targetVolume: PackageVolume!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager3.StagePackageToVolumeAsyncImpl(packageUri, dependencyPackageUris, deploymentOptions, targetVolume)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.stageuserdataasync)
    public func stageUserDataAsync(_ packageFullName: String, _ deploymentOptions: DeploymentOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager3.StageUserDataWithOptionsAsyncImpl(packageFullName, deploymentOptions)
    }

    private lazy var _IPackageManager4: __ABI_Windows_Management_Deployment.IPackageManager4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.getpackagevolumesasync)
    public func getPackageVolumesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<PackageVolume?>?>! {
        try _IPackageManager4.GetPackageVolumesAsyncImpl()
    }

    private lazy var _IPackageManager5: __ABI_Windows_Management_Deployment.IPackageManager5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.addpackageasync)
    public func addPackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions, _ targetVolume: PackageVolume!, _ optionalPackageFamilyNames: WindowsFoundation.AnyIIterable<String>!, _ externalPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager5.AddPackageToVolumeAndOptionalPackagesAsyncImpl(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, externalPackageUris)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.stagepackageasync)
    public func stagePackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions, _ targetVolume: PackageVolume!, _ optionalPackageFamilyNames: WindowsFoundation.AnyIIterable<String>!, _ externalPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager5.StagePackageToVolumeAndOptionalPackagesAsyncImpl(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, externalPackageUris)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.registerpackagebyfamilynameasync)
    public func registerPackageByFamilyNameAsync(_ mainPackageFamilyName: String, _ dependencyPackageFamilyNames: WindowsFoundation.AnyIIterable<String>!, _ deploymentOptions: DeploymentOptions, _ appDataVolume: PackageVolume!, _ optionalPackageFamilyNames: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager5.RegisterPackageByFamilyNameAndOptionalPackagesAsyncImpl(mainPackageFamilyName, dependencyPackageFamilyNames, deploymentOptions, appDataVolume, optionalPackageFamilyNames)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.debugsettings)
    public var debugSettings : PackageManagerDebugSettings! {
        get { try! _IPackageManager5.get_DebugSettingsImpl() }
    }

    private lazy var _IPackageManager6: __ABI_Windows_Management_Deployment.IPackageManager6! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.provisionpackageforallusersasync)
    public func provisionPackageForAllUsersAsync(_ packageFamilyName: String) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager6.ProvisionPackageForAllUsersAsyncImpl(packageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.addpackagebyappinstallerfileasync)
    public func addPackageByAppInstallerFileAsync(_ appInstallerFileUri: WindowsFoundation.Uri!, _ options: AddPackageByAppInstallerOptions, _ targetVolume: PackageVolume!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager6.AddPackageByAppInstallerFileAsyncImpl(appInstallerFileUri, options, targetVolume)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.requestaddpackagebyappinstallerfileasync)
    public func requestAddPackageByAppInstallerFileAsync(_ appInstallerFileUri: WindowsFoundation.Uri!, _ options: AddPackageByAppInstallerOptions, _ targetVolume: PackageVolume!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager6.RequestAddPackageByAppInstallerFileAsyncImpl(appInstallerFileUri, options, targetVolume)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.addpackageasync)
    public func addPackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ options: DeploymentOptions, _ targetVolume: PackageVolume!, _ optionalPackageFamilyNames: WindowsFoundation.AnyIIterable<String>!, _ packageUrisToInstall: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ relatedPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager6.AddPackageToVolumeAndRelatedSetAsyncImpl(packageUri, dependencyPackageUris, options, targetVolume, optionalPackageFamilyNames, packageUrisToInstall, relatedPackageUris)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.stagepackageasync)
    public func stagePackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ options: DeploymentOptions, _ targetVolume: PackageVolume!, _ optionalPackageFamilyNames: WindowsFoundation.AnyIIterable<String>!, _ packageUrisToInstall: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ relatedPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager6.StagePackageToVolumeAndRelatedSetAsyncImpl(packageUri, dependencyPackageUris, options, targetVolume, optionalPackageFamilyNames, packageUrisToInstall, relatedPackageUris)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.requestaddpackageasync)
    public func requestAddPackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions, _ targetVolume: PackageVolume!, _ optionalPackageFamilyNames: WindowsFoundation.AnyIIterable<String>!, _ relatedPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager6.RequestAddPackageAsyncImpl(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, relatedPackageUris)
    }

    private lazy var _IPackageManager7: __ABI_Windows_Management_Deployment.IPackageManager7! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.requestaddpackageasync)
    public func requestAddPackageAsync(_ packageUri: WindowsFoundation.Uri!, _ dependencyPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ deploymentOptions: DeploymentOptions, _ targetVolume: PackageVolume!, _ optionalPackageFamilyNames: WindowsFoundation.AnyIIterable<String>!, _ relatedPackageUris: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ packageUrisToInstall: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager7.RequestAddPackageAndRelatedSetAsyncImpl(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, relatedPackageUris, packageUrisToInstall)
    }

    private lazy var _IPackageManager8: __ABI_Windows_Management_Deployment.IPackageManager8! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanager.deprovisionpackageforallusersasync)
    public func deprovisionPackageForAllUsersAsync(_ packageFamilyName: String) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<DeploymentResult?, DeploymentProgress>! {
        try _IPackageManager8.DeprovisionPackageForAllUsersAsyncImpl(packageFamilyName)
    }

    deinit {
        _default = nil
        _IPackageManager2 = nil
        _IPackageManager3 = nil
        _IPackageManager4 = nil
        _IPackageManager5 = nil
        _IPackageManager6 = nil
        _IPackageManager7 = nil
        _IPackageManager8 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanagerdebugsettings)
public final class PackageManagerDebugSettings : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Management_Deployment.IPackageManagerDebugSettings
    private typealias CABI = __x_ABI_CWindows_CManagement_CDeployment_CIPackageManagerDebugSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CManagement_CDeployment_CIPackageManagerDebugSettings>?) -> PackageManagerDebugSettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanagerdebugsettings.setcontentgroupstateasync)
    public func setContentGroupStateAsync(_ package: UWP.Package!, _ contentGroupName: String, _ state: UWP.PackageContentGroupState) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SetContentGroupStateAsyncImpl(package, contentGroupName, state)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagemanagerdebugsettings.setcontentgroupstateasync)
    public func setContentGroupStateAsync(_ package: UWP.Package!, _ contentGroupName: String, _ state: UWP.PackageContentGroupState, _ completionPercentage: Double) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SetContentGroupStateWithPercentageAsyncImpl(package, contentGroupName, state, completionPercentage)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packageuserinformation)
public final class PackageUserInformation : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Management_Deployment.IPackageUserInformation
    private typealias CABI = __x_ABI_CWindows_CManagement_CDeployment_CIPackageUserInformation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CManagement_CDeployment_CIPackageUserInformation>?) -> PackageUserInformation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packageuserinformation.installstate)
    public var installState : PackageInstallState {
        get { try! _default.get_InstallStateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packageuserinformation.usersecurityid)
    public var userSecurityId : String {
        get { try! _default.get_UserSecurityIdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume)
public final class PackageVolume : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Management_Deployment.IPackageVolume
    private typealias CABI = __x_ABI_CWindows_CManagement_CDeployment_CIPackageVolume
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CManagement_CDeployment_CIPackageVolume>?) -> PackageVolume? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackages)
    public func findPackages() throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackages)
    public func findPackages(_ packageName: String, _ packagePublisher: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesByNamePublisherImpl(packageName, packagePublisher)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackages)
    public func findPackages(_ packageFamilyName: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesByPackageFamilyNameImpl(packageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackageswithpackagetypes)
    public func findPackagesWithPackageTypes(_ packageTypes: PackageTypes) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesWithPackageTypesImpl(packageTypes)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackageswithpackagetypes)
    public func findPackagesWithPackageTypes(_ packageTypes: PackageTypes, _ packageName: String, _ packagePublisher: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesByNamePublisherWithPackagesTypesImpl(packageTypes, packageName, packagePublisher)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackageswithpackagetypes)
    public func findPackagesWithPackageTypes(_ packageTypes: PackageTypes, _ packageFamilyName: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesByPackageFamilyNameWithPackageTypesImpl(packageTypes, packageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackage)
    public func findPackage(_ packageFullName: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackageByPackageFullNameImpl(packageFullName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackagesforuser)
    public func findPackagesForUser(_ userSecurityId: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesByUserSecurityIdImpl(userSecurityId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackagesforuser)
    public func findPackagesForUser(_ userSecurityId: String, _ packageName: String, _ packagePublisher: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesByUserSecurityIdNamePublisherImpl(userSecurityId, packageName, packagePublisher)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackagesforuser)
    public func findPackagesForUser(_ userSecurityId: String, _ packageFamilyName: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesByUserSecurityIdPackageFamilyNameImpl(userSecurityId, packageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackagesforuserwithpackagetypes)
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: String, _ packageTypes: PackageTypes) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesByUserSecurityIdWithPackageTypesImpl(userSecurityId, packageTypes)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackagesforuserwithpackagetypes)
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: String, _ packageTypes: PackageTypes, _ packageName: String, _ packagePublisher: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesByUserSecurityIdNamePublisherWithPackageTypesImpl(userSecurityId, packageTypes, packageName, packagePublisher)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackagesforuserwithpackagetypes)
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: String, _ packageTypes: PackageTypes, _ packageFamilyName: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackagesByUserSecurityIdPackageFamilyNameWithPackagesTypesImpl(userSecurityId, packageTypes, packageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.findpackageforuser)
    public func findPackageForUser(_ userSecurityId: String, _ packageFullName: String) throws -> WindowsFoundation.AnyIVector<UWP.Package?>! {
        try _default.FindPackageByUserSecurityIdPackageFullNameImpl(userSecurityId, packageFullName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.isoffline)
    public var isOffline : Bool {
        get { try! _default.get_IsOfflineImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.issystemvolume)
    public var isSystemVolume : Bool {
        get { try! _default.get_IsSystemVolumeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.mountpoint)
    public var mountPoint : String {
        get { try! _default.get_MountPointImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.name)
    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.packagestorepath)
    public var packageStorePath : String {
        get { try! _default.get_PackageStorePathImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.supportshardlinks)
    public var supportsHardLinks : Bool {
        get { try! _default.get_SupportsHardLinksImpl() }
    }

    private lazy var _IPackageVolume2: __ABI_Windows_Management_Deployment.IPackageVolume2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.getavailablespaceasync)
    public func getAvailableSpaceAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UInt64>! {
        try _IPackageVolume2.GetAvailableSpaceAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.isappxinstallsupported)
    public var isAppxInstallSupported : Bool {
        get { try! _IPackageVolume2.get_IsAppxInstallSupportedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.packagevolume.isfulltrustpackagesupported)
    public var isFullTrustPackageSupported : Bool {
        get { try! _IPackageVolume2.get_IsFullTrustPackageSupportedImpl() }
    }

    deinit {
        _default = nil
        _IPackageVolume2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.deploymentprogress)
public struct DeploymentProgress: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.deploymentprogress.state)
    public var state: DeploymentProgressState = .init(0)
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.management.deployment.deploymentprogress.percentage)
    public var percentage: UInt32 = 0
    public init() {}
    public init(state: DeploymentProgressState, percentage: UInt32) {
        self.state = state
        self.percentage = percentage
    }
    public static func from(abi: __x_ABI_CWindows_CManagement_CDeployment_CDeploymentProgress) -> DeploymentProgress {
        .init(state: abi.state, percentage: abi.percentage)
    }
}

extension UWP.AddPackageByAppInstallerOptions {
    public static var none : UWP.AddPackageByAppInstallerOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CAddPackageByAppInstallerOptions_None
    }
    public static var installAllResources : UWP.AddPackageByAppInstallerOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CAddPackageByAppInstallerOptions_InstallAllResources
    }
    public static var forceTargetAppShutdown : UWP.AddPackageByAppInstallerOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CAddPackageByAppInstallerOptions_ForceTargetAppShutdown
    }
    public static var requiredContentGroupOnly : UWP.AddPackageByAppInstallerOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CAddPackageByAppInstallerOptions_RequiredContentGroupOnly
    }
    public static var limitToExistingPackages : UWP.AddPackageByAppInstallerOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CAddPackageByAppInstallerOptions_LimitToExistingPackages
    }
}
extension UWP.AddPackageByAppInstallerOptions: @retroactive Hashable, @retroactive Codable {}

extension UWP.DeploymentOptions {
    public static var none : UWP.DeploymentOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CDeploymentOptions_None
    }
    public static var forceApplicationShutdown : UWP.DeploymentOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CDeploymentOptions_ForceApplicationShutdown
    }
    public static var developmentMode : UWP.DeploymentOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CDeploymentOptions_DevelopmentMode
    }
    public static var installAllResources : UWP.DeploymentOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CDeploymentOptions_InstallAllResources
    }
    public static var forceTargetApplicationShutdown : UWP.DeploymentOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CDeploymentOptions_ForceTargetApplicationShutdown
    }
    public static var requiredContentGroupOnly : UWP.DeploymentOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CDeploymentOptions_RequiredContentGroupOnly
    }
    public static var forceUpdateFromAnyVersion : UWP.DeploymentOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CDeploymentOptions_ForceUpdateFromAnyVersion
    }
    public static var retainFilesOnFailure : UWP.DeploymentOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CDeploymentOptions_RetainFilesOnFailure
    }
}
extension UWP.DeploymentOptions: @retroactive Hashable, @retroactive Codable {}

extension UWP.DeploymentProgressState {
    public static var queued : UWP.DeploymentProgressState {
        __x_ABI_CWindows_CManagement_CDeployment_CDeploymentProgressState_Queued
    }
    public static var processing : UWP.DeploymentProgressState {
        __x_ABI_CWindows_CManagement_CDeployment_CDeploymentProgressState_Processing
    }
}
extension UWP.DeploymentProgressState: @retroactive Hashable, @retroactive Codable {}

extension UWP.PackageInstallState {
    public static var notInstalled : UWP.PackageInstallState {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageInstallState_NotInstalled
    }
    public static var staged : UWP.PackageInstallState {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageInstallState_Staged
    }
    public static var installed : UWP.PackageInstallState {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageInstallState_Installed
    }
    public static var paused : UWP.PackageInstallState {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageInstallState_Paused
    }
}
extension UWP.PackageInstallState: @retroactive Hashable, @retroactive Codable {}

extension UWP.PackageState {
    public static var normal : UWP.PackageState {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageState_Normal
    }
    public static var licenseInvalid : UWP.PackageState {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageState_LicenseInvalid
    }
    public static var modified : UWP.PackageState {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageState_Modified
    }
    public static var tampered : UWP.PackageState {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageState_Tampered
    }
}
extension UWP.PackageState: @retroactive Hashable, @retroactive Codable {}

extension UWP.PackageTypes {
    public static var none : UWP.PackageTypes {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageTypes_None
    }
    public static var main : UWP.PackageTypes {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageTypes_Main
    }
    public static var framework : UWP.PackageTypes {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageTypes_Framework
    }
    public static var resource : UWP.PackageTypes {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageTypes_Resource
    }
    public static var bundle : UWP.PackageTypes {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageTypes_Bundle
    }
    public static var xap : UWP.PackageTypes {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageTypes_Xap
    }
    public static var optional : UWP.PackageTypes {
        __x_ABI_CWindows_CManagement_CDeployment_CPackageTypes_Optional
    }
}
extension UWP.PackageTypes: @retroactive Hashable, @retroactive Codable {}

extension UWP.RemovalOptions {
    public static var none : UWP.RemovalOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CRemovalOptions_None
    }
    public static var preserveApplicationData : UWP.RemovalOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CRemovalOptions_PreserveApplicationData
    }
    public static var removeForAllUsers : UWP.RemovalOptions {
        __x_ABI_CWindows_CManagement_CDeployment_CRemovalOptions_RemoveForAllUsers
    }
}
extension UWP.RemovalOptions: @retroactive Hashable, @retroactive Codable {}


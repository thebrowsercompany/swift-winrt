// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationcontrollerprogressbehavior)
public typealias AnimationControllerProgressBehavior = __x_ABI_CWindows_CUI_CComposition_CAnimationControllerProgressBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationdelaybehavior)
public typealias AnimationDelayBehavior = __x_ABI_CWindows_CUI_CComposition_CAnimationDelayBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationdirection)
public typealias AnimationDirection = __x_ABI_CWindows_CUI_CComposition_CAnimationDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationiterationbehavior)
public typealias AnimationIterationBehavior = __x_ABI_CWindows_CUI_CComposition_CAnimationIterationBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationpropertyaccessmode)
public typealias AnimationPropertyAccessMode = __x_ABI_CWindows_CUI_CComposition_CAnimationPropertyAccessMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationstopbehavior)
public typealias AnimationStopBehavior = __x_ABI_CWindows_CUI_CComposition_CAnimationStopBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionbackfacevisibility)
public typealias CompositionBackfaceVisibility = __x_ABI_CWindows_CUI_CComposition_CCompositionBackfaceVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionbatchtypes)
public typealias CompositionBatchTypes = __x_ABI_CWindows_CUI_CComposition_CCompositionBatchTypes
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionbitmapinterpolationmode)
public typealias CompositionBitmapInterpolationMode = __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionbordermode)
public typealias CompositionBorderMode = __x_ABI_CWindows_CUI_CComposition_CCompositionBorderMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorspace)
public typealias CompositionColorSpace = __x_ABI_CWindows_CUI_CComposition_CCompositionColorSpace
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncompositemode)
public typealias CompositionCompositeMode = __x_ABI_CWindows_CUI_CComposition_CCompositionCompositeMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiondropshadowsourcepolicy)
public typealias CompositionDropShadowSourcePolicy = __x_ABI_CWindows_CUI_CComposition_CCompositionDropShadowSourcePolicy
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioneffectfactoryloadstatus)
public typealias CompositionEffectFactoryLoadStatus = __x_ABI_CWindows_CUI_CComposition_CCompositionEffectFactoryLoadStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongetvaluestatus)
public typealias CompositionGetValueStatus = __x_ABI_CWindows_CUI_CComposition_CCompositionGetValueStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientextendmode)
public typealias CompositionGradientExtendMode = __x_ABI_CWindows_CUI_CComposition_CCompositionGradientExtendMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionmappingmode)
public typealias CompositionMappingMode = __x_ABI_CWindows_CUI_CComposition_CCompositionMappingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstretch)
public typealias CompositionStretch = __x_ABI_CWindows_CUI_CComposition_CCompositionStretch
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokecap)
public typealias CompositionStrokeCap = __x_ABI_CWindows_CUI_CComposition_CCompositionStrokeCap
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokelinejoin)
public typealias CompositionStrokeLineJoin = __x_ABI_CWindows_CUI_CComposition_CCompositionStrokeLineJoin
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.ambientlight)
public final class AmbientLight : UWP.CompositionLight {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IAmbientLight
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIAmbientLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIAmbientLight>?) -> AmbientLight? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.ambientlight.color)
    public var color : UWP.Color {
        get { try! _default.get_ColorImpl() }
        set { try! _default.put_ColorImpl(newValue) }
    }

    private lazy var _IAmbientLight2: __ABI_Windows_UI_Composition.IAmbientLight2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.ambientlight.intensity)
    public var intensity : Float {
        get { try! _IAmbientLight2.get_IntensityImpl() }
        set { try! _IAmbientLight2.put_IntensityImpl(newValue) }
    }

    deinit {
        _default = nil
        _IAmbientLight2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationcontroller)
public final class AnimationController : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IAnimationController
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIAnimationController
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIAnimationController>?) -> AnimationController? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IAnimationControllerStatics: __ABI_Windows_UI_Composition.IAnimationControllerStatics = try! RoGetActivationFactory(HString("Windows.UI.Composition.AnimationController"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationcontroller.maxplaybackrate)
    public static var maxPlaybackRate : Float {
        get { try! _IAnimationControllerStatics.get_MaxPlaybackRateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationcontroller.minplaybackrate)
    public static var minPlaybackRate : Float {
        get { try! _IAnimationControllerStatics.get_MinPlaybackRateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationcontroller.pause)
    public func pause() throws {
        try _default.PauseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationcontroller.resume)
    public func resume() throws {
        try _default.ResumeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationcontroller.playbackrate)
    public var playbackRate : Float {
        get { try! _default.get_PlaybackRateImpl() }
        set { try! _default.put_PlaybackRateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationcontroller.progress)
    public var progress : Float {
        get { try! _default.get_ProgressImpl() }
        set { try! _default.put_ProgressImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationcontroller.progressbehavior)
    public var progressBehavior : AnimationControllerProgressBehavior {
        get { try! _default.get_ProgressBehaviorImpl() }
        set { try! _default.put_ProgressBehaviorImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationpropertyinfo)
public final class AnimationPropertyInfo : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IAnimationPropertyInfo
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIAnimationPropertyInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIAnimationPropertyInfo>?) -> AnimationPropertyInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.animationpropertyinfo.accessmode)
    public var accessMode : AnimationPropertyAccessMode {
        get { try! _default.get_AccessModeImpl() }
        set { try! _default.put_AccessModeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.booleankeyframeanimation)
public final class BooleanKeyFrameAnimation : UWP.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IBooleanKeyFrameAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIBooleanKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIBooleanKeyFrameAnimation>?) -> BooleanKeyFrameAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.booleankeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: Bool) throws {
        try _default.InsertKeyFrameImpl(normalizedProgressKey, value)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.bouncescalarnaturalmotionanimation)
public final class BounceScalarNaturalMotionAnimation : UWP.ScalarNaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IBounceScalarNaturalMotionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIBounceScalarNaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIBounceScalarNaturalMotionAnimation>?) -> BounceScalarNaturalMotionAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.bouncescalarnaturalmotionanimation.acceleration)
    public var acceleration : Float {
        get { try! _default.get_AccelerationImpl() }
        set { try! _default.put_AccelerationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.bouncescalarnaturalmotionanimation.restitution)
    public var restitution : Float {
        get { try! _default.get_RestitutionImpl() }
        set { try! _default.put_RestitutionImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.bouncevector2naturalmotionanimation)
public final class BounceVector2NaturalMotionAnimation : UWP.Vector2NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IBounceVector2NaturalMotionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIBounceVector2NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIBounceVector2NaturalMotionAnimation>?) -> BounceVector2NaturalMotionAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.bouncevector2naturalmotionanimation.acceleration)
    public var acceleration : Float {
        get { try! _default.get_AccelerationImpl() }
        set { try! _default.put_AccelerationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.bouncevector2naturalmotionanimation.restitution)
    public var restitution : Float {
        get { try! _default.get_RestitutionImpl() }
        set { try! _default.put_RestitutionImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.bouncevector3naturalmotionanimation)
public final class BounceVector3NaturalMotionAnimation : UWP.Vector3NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IBounceVector3NaturalMotionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIBounceVector3NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIBounceVector3NaturalMotionAnimation>?) -> BounceVector3NaturalMotionAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.bouncevector3naturalmotionanimation.acceleration)
    public var acceleration : Float {
        get { try! _default.get_AccelerationImpl() }
        set { try! _default.put_AccelerationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.bouncevector3naturalmotionanimation.restitution)
    public var restitution : Float {
        get { try! _default.get_RestitutionImpl() }
        set { try! _default.put_RestitutionImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.colorkeyframeanimation)
public final class ColorKeyFrameAnimation : UWP.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IColorKeyFrameAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIColorKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIColorKeyFrameAnimation>?) -> ColorKeyFrameAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.colorkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: UWP.Color) throws {
        try _default.InsertKeyFrameImpl(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.colorkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: UWP.Color, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunctionImpl(normalizedProgressKey, value, easingFunction)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.colorkeyframeanimation.interpolationcolorspace)
    public var interpolationColorSpace : CompositionColorSpace {
        get { try! _default.get_InterpolationColorSpaceImpl() }
        set { try! _default.put_InterpolationColorSpaceImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation)
open class CompositionAnimation : UWP.CompositionObject, ICompositionAnimationBase {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionAnimation>?) -> CompositionAnimation? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionAnimationFactory : __ABI_Windows_UI_Composition.ICompositionAnimationFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionAnimation"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.clearallparameters)
    public func clearAllParameters() throws {
        try _default.ClearAllParametersImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.clearparameter)
    public func clearParameter(_ key: String) throws {
        try _default.ClearParameterImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setcolorparameter)
    public func setColorParameter(_ key: String, _ value: UWP.Color) throws {
        try _default.SetColorParameterImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setmatrix3x2parameter)
    public func setMatrix3x2Parameter(_ key: String, _ value: WindowsFoundation.Matrix3x2) throws {
        try _default.SetMatrix3x2ParameterImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setmatrix4x4parameter)
    public func setMatrix4x4Parameter(_ key: String, _ value: WindowsFoundation.Matrix4x4) throws {
        try _default.SetMatrix4x4ParameterImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setquaternionparameter)
    public func setQuaternionParameter(_ key: String, _ value: WindowsFoundation.Quaternion) throws {
        try _default.SetQuaternionParameterImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setreferenceparameter)
    public func setReferenceParameter(_ key: String, _ compositionObject: CompositionObject!) throws {
        try _default.SetReferenceParameterImpl(key, compositionObject)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setscalarparameter)
    public func setScalarParameter(_ key: String, _ value: Float) throws {
        try _default.SetScalarParameterImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setvector2parameter)
    public func setVector2Parameter(_ key: String, _ value: WindowsFoundation.Vector2) throws {
        try _default.SetVector2ParameterImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setvector3parameter)
    public func setVector3Parameter(_ key: String, _ value: WindowsFoundation.Vector3) throws {
        try _default.SetVector3ParameterImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setvector4parameter)
    public func setVector4Parameter(_ key: String, _ value: WindowsFoundation.Vector4) throws {
        try _default.SetVector4ParameterImpl(key, value)
    }

    private lazy var _ICompositionAnimation2: __ABI_Windows_UI_Composition.ICompositionAnimation2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setbooleanparameter)
    public func setBooleanParameter(_ key: String, _ value: Bool) throws {
        try _ICompositionAnimation2.SetBooleanParameterImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.target)
    public var target : String {
        get { try! _ICompositionAnimation2.get_TargetImpl() }
        set { try! _ICompositionAnimation2.put_TargetImpl(newValue) }
    }

    private lazy var _ICompositionAnimation3: __ABI_Windows_UI_Composition.ICompositionAnimation3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.initialvalueexpressions)
    public var initialValueExpressions : InitialValueExpressionCollection! {
        get { try! _ICompositionAnimation3.get_InitialValueExpressionsImpl() }
    }

    private lazy var _ICompositionAnimation4: __ABI_Windows_UI_Composition.ICompositionAnimation4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimation.setexpressionreferenceparameter)
    public func setExpressionReferenceParameter(_ parameterName: String, _ source: AnyIAnimationObject!) throws {
        try _ICompositionAnimation4.SetExpressionReferenceParameterImpl(parameterName, source)
    }

    private lazy var _ICompositionAnimationBase: __ABI_Windows_UI_Composition.ICompositionAnimationBase! = getInterfaceForCaching()
    internal enum ICompositionAnimation : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionAnimation
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionAnimation
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionAnimation
        }
    }
    internal typealias Composable = ICompositionAnimation
    deinit {
        _default = nil
        _ICompositionAnimation2 = nil
        _ICompositionAnimation3 = nil
        _ICompositionAnimation4 = nil
        _ICompositionAnimationBase = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimationgroup)
public final class CompositionAnimationGroup : UWP.CompositionObject, IIterable, ICompositionAnimationBase {
    public typealias T = CompositionAnimation?
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionAnimationGroup
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionAnimationGroup
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionAnimationGroup>?) -> CompositionAnimationGroup? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IIterable: IIterableCompositionAnimation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimationgroup.first)
    public func first() -> WindowsFoundation.AnyIIterator<CompositionAnimation?>? {
        try! _IIterable.FirstImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimationgroup.add)
    public func add(_ value: CompositionAnimation!) throws {
        try _default.AddImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimationgroup.remove)
    public func remove(_ value: CompositionAnimation!) throws {
        try _default.RemoveImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimationgroup.removeall)
    public func removeAll() throws {
        try _default.RemoveAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionanimationgroup.count)
    public var count : Int32 {
        get { try! _default.get_CountImpl() }
    }

    private lazy var _ICompositionAnimationBase: __ABI_Windows_UI_Composition.ICompositionAnimationBase! = getInterfaceForCaching()
    deinit {
        _IIterable = nil
        _default = nil
        _ICompositionAnimationBase = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionbackdropbrush)
public final class CompositionBackdropBrush : UWP.CompositionBrush {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionBackdropBrush
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionBackdropBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionBackdropBrush>?) -> CompositionBackdropBrush? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionbatchcompletedeventargs)
public final class CompositionBatchCompletedEventArgs : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionBatchCompletedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionBatchCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionBatchCompletedEventArgs>?) -> CompositionBatchCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionbrush)
open class CompositionBrush : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionBrush
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionBrush>?) -> CompositionBrush? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionBrushFactory : __ABI_Windows_UI_Composition.ICompositionBrushFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionBrush"))

    internal enum ICompositionBrush : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionBrush
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionBrush
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionBrush
        }
    }
    internal typealias Composable = ICompositionBrush
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionclip)
open class CompositionClip : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionClip
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionClip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionClip>?) -> CompositionClip? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionClipFactory : __ABI_Windows_UI_Composition.ICompositionClipFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionClip"))

    private lazy var _ICompositionClip2: __ABI_Windows_UI_Composition.ICompositionClip2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionclip.anchorpoint)
    public var anchorPoint : WindowsFoundation.Vector2 {
        get { try! _ICompositionClip2.get_AnchorPointImpl() }
        set { try! _ICompositionClip2.put_AnchorPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionclip.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _ICompositionClip2.get_CenterPointImpl() }
        set { try! _ICompositionClip2.put_CenterPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionclip.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _ICompositionClip2.get_OffsetImpl() }
        set { try! _ICompositionClip2.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionclip.rotationangle)
    public var rotationAngle : Float {
        get { try! _ICompositionClip2.get_RotationAngleImpl() }
        set { try! _ICompositionClip2.put_RotationAngleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionclip.rotationangleindegrees)
    public var rotationAngleInDegrees : Float {
        get { try! _ICompositionClip2.get_RotationAngleInDegreesImpl() }
        set { try! _ICompositionClip2.put_RotationAngleInDegreesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionclip.scale)
    public var scale : WindowsFoundation.Vector2 {
        get { try! _ICompositionClip2.get_ScaleImpl() }
        set { try! _ICompositionClip2.put_ScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionclip.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix3x2 {
        get { try! _ICompositionClip2.get_TransformMatrixImpl() }
        set { try! _ICompositionClip2.put_TransformMatrixImpl(newValue) }
    }

    internal enum ICompositionClip : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionClip
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionClip
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionClip
        }
    }
    internal typealias Composable = ICompositionClip
    deinit {
        _default = nil
        _ICompositionClip2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorbrush)
public final class CompositionColorBrush : UWP.CompositionBrush {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionColorBrush
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionColorBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionColorBrush>?) -> CompositionColorBrush? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorbrush.color)
    public var color : UWP.Color {
        get { try! _default.get_ColorImpl() }
        set { try! _default.put_ColorImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstop)
public final class CompositionColorGradientStop : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionColorGradientStop
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionColorGradientStop
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionColorGradientStop>?) -> CompositionColorGradientStop? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstop.color)
    public var color : UWP.Color {
        get { try! _default.get_ColorImpl() }
        set { try! _default.put_ColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstop.offset)
    public var offset : Float {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection)
public final class CompositionColorGradientStopCollection : WinRTClass, IVector, IIterable {
    public typealias T = CompositionColorGradientStop?
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionColorGradientStopCollection
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionColorGradientStopCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionColorGradientStopCollection>?) -> CompositionColorGradientStopCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    private lazy var _IVector: IVectorCompositionColorGradientStop! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.getat)
    public func getAt(_ index: UInt32) -> CompositionColorGradientStop? {
        try! _IVector.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<CompositionColorGradientStop?>? {
        try! _IVector.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.indexof)
    public func indexOf(_ value: CompositionColorGradientStop?, _ index: inout UInt32) -> Bool {
        try! _IVector.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.setat)
    public func setAt(_ index: UInt32, _ value: CompositionColorGradientStop?) {
        try! _IVector.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: CompositionColorGradientStop?) {
        try! _IVector.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.append)
    public func append(_ value: CompositionColorGradientStop?) {
        try! _IVector.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.removeatend)
    public func removeAtEnd() {
        try! _IVector.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.clear)
    public func clear() {
        try! _IVector.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.size)
    public var size : UInt32 {
        get { try! _IVector.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableCompositionColorGradientStop! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncolorgradientstopcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<CompositionColorGradientStop?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _IVector = nil
        _IIterable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncommitbatch)
public final class CompositionCommitBatch : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionCommitBatch
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionCommitBatch
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionCommitBatch>?) -> CompositionCommitBatch? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncommitbatch.isactive)
    public var isActive : Bool {
        get { try! _default.get_IsActiveImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncommitbatch.isended)
    public var isEnded : Bool {
        get { try! _default.get_IsEndedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncommitbatch.completed)
    public lazy var completed : Event<TypedEventHandler<Any?, CompositionBatchCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CompletedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncontainershape)
public final class CompositionContainerShape : UWP.CompositionShape {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionContainerShape
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionContainerShape
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionContainerShape>?) -> CompositionContainerShape? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioncontainershape.shapes)
    public var shapes : CompositionShapeCollection! {
        get { try! _default.get_ShapesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioneasingfunction)
open class CompositionEasingFunction : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionEasingFunction
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionEasingFunction>?) -> CompositionEasingFunction? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionEasingFunctionFactory : __ABI_Windows_UI_Composition.ICompositionEasingFunctionFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionEasingFunction"))

    internal enum ICompositionEasingFunction : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionEasingFunction
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionEasingFunction
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionEasingFunction
        }
    }
    internal typealias Composable = ICompositionEasingFunction
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioneffectbrush)
public final class CompositionEffectBrush : UWP.CompositionBrush {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionEffectBrush
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionEffectBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionEffectBrush>?) -> CompositionEffectBrush? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioneffectbrush.getsourceparameter)
    public func getSourceParameter(_ name: String) throws -> CompositionBrush! {
        try _default.GetSourceParameterImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioneffectbrush.setsourceparameter)
    public func setSourceParameter(_ name: String, _ source: CompositionBrush!) throws {
        try _default.SetSourceParameterImpl(name, source)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioneffectfactory)
public final class CompositionEffectFactory : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionEffectFactory
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionEffectFactory
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionEffectFactory>?) -> CompositionEffectFactory? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioneffectfactory.createbrush)
    public func createBrush() throws -> CompositionEffectBrush! {
        try _default.CreateBrushImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioneffectfactory.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedErrorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositioneffectfactory.loadstatus)
    public var loadStatus : CompositionEffectFactoryLoadStatus {
        get { try! _default.get_LoadStatusImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionellipsegeometry)
public final class CompositionEllipseGeometry : UWP.CompositionGeometry {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionEllipseGeometry
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionEllipseGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionEllipseGeometry>?) -> CompositionEllipseGeometry? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionellipsegeometry.center)
    public var center : WindowsFoundation.Vector2 {
        get { try! _default.get_CenterImpl() }
        set { try! _default.put_CenterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionellipsegeometry.radius)
    public var radius : WindowsFoundation.Vector2 {
        get { try! _default.get_RadiusImpl() }
        set { try! _default.put_RadiusImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongeometricclip)
public final class CompositionGeometricClip : UWP.CompositionClip {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionGeometricClip
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionGeometricClip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionGeometricClip>?) -> CompositionGeometricClip? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongeometricclip.geometry)
    public var geometry : CompositionGeometry! {
        get { try! _default.get_GeometryImpl() }
        set { try! _default.put_GeometryImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongeometricclip.viewbox)
    public var viewBox : CompositionViewBox! {
        get { try! _default.get_ViewBoxImpl() }
        set { try! _default.put_ViewBoxImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongeometry)
open class CompositionGeometry : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionGeometry
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionGeometry>?) -> CompositionGeometry? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionGeometryFactory : __ABI_Windows_UI_Composition.ICompositionGeometryFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionGeometry"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongeometry.trimend)
    public var trimEnd : Float {
        get { try! _default.get_TrimEndImpl() }
        set { try! _default.put_TrimEndImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongeometry.trimoffset)
    public var trimOffset : Float {
        get { try! _default.get_TrimOffsetImpl() }
        set { try! _default.put_TrimOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongeometry.trimstart)
    public var trimStart : Float {
        get { try! _default.get_TrimStartImpl() }
        set { try! _default.put_TrimStartImpl(newValue) }
    }

    internal enum ICompositionGeometry : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionGeometry
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionGeometry
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionGeometry
        }
    }
    internal typealias Composable = ICompositionGeometry
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush)
open class CompositionGradientBrush : UWP.CompositionBrush {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionGradientBrush
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionGradientBrush>?) -> CompositionGradientBrush? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionGradientBrushFactory : __ABI_Windows_UI_Composition.ICompositionGradientBrushFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionGradientBrush"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.anchorpoint)
    public var anchorPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_AnchorPointImpl() }
        set { try! _default.put_AnchorPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_CenterPointImpl() }
        set { try! _default.put_CenterPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.colorstops)
    public var colorStops : CompositionColorGradientStopCollection! {
        get { try! _default.get_ColorStopsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.extendmode)
    public var extendMode : CompositionGradientExtendMode {
        get { try! _default.get_ExtendModeImpl() }
        set { try! _default.put_ExtendModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.interpolationspace)
    public var interpolationSpace : CompositionColorSpace {
        get { try! _default.get_InterpolationSpaceImpl() }
        set { try! _default.put_InterpolationSpaceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.rotationangle)
    public var rotationAngle : Float {
        get { try! _default.get_RotationAngleImpl() }
        set { try! _default.put_RotationAngleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.rotationangleindegrees)
    public var rotationAngleInDegrees : Float {
        get { try! _default.get_RotationAngleInDegreesImpl() }
        set { try! _default.put_RotationAngleInDegreesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.scale)
    public var scale : WindowsFoundation.Vector2 {
        get { try! _default.get_ScaleImpl() }
        set { try! _default.put_ScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix3x2 {
        get { try! _default.get_TransformMatrixImpl() }
        set { try! _default.put_TransformMatrixImpl(newValue) }
    }

    private lazy var _ICompositionGradientBrush2: __ABI_Windows_UI_Composition.ICompositionGradientBrush2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiongradientbrush.mappingmode)
    public var mappingMode : CompositionMappingMode {
        get { try! _ICompositionGradientBrush2.get_MappingModeImpl() }
        set { try! _ICompositionGradientBrush2.put_MappingModeImpl(newValue) }
    }

    internal enum ICompositionGradientBrush : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionGradientBrush
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionGradientBrush
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionGradientBrush
        }
    }
    internal typealias Composable = ICompositionGradientBrush
    deinit {
        _default = nil
        _ICompositionGradientBrush2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionlight)
open class CompositionLight : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionLight
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionLight>?) -> CompositionLight? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionLightFactory : __ABI_Windows_UI_Composition.ICompositionLightFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionLight"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionlight.targets)
    public var targets : VisualUnorderedCollection! {
        get { try! _default.get_TargetsImpl() }
    }

    private lazy var _ICompositionLight2: __ABI_Windows_UI_Composition.ICompositionLight2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionlight.exclusionsfromtargets)
    public var exclusionsFromTargets : VisualUnorderedCollection! {
        get { try! _ICompositionLight2.get_ExclusionsFromTargetsImpl() }
    }

    private lazy var _ICompositionLight3: __ABI_Windows_UI_Composition.ICompositionLight3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionlight.isenabled)
    public var isEnabled : Bool {
        get { try! _ICompositionLight3.get_IsEnabledImpl() }
        set { try! _ICompositionLight3.put_IsEnabledImpl(newValue) }
    }

    internal enum ICompositionLight : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionLight
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionLight
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionLight
        }
    }
    internal typealias Composable = ICompositionLight
    deinit {
        _default = nil
        _ICompositionLight2 = nil
        _ICompositionLight3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionlinegeometry)
public final class CompositionLineGeometry : UWP.CompositionGeometry {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionLineGeometry
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionLineGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionLineGeometry>?) -> CompositionLineGeometry? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionlinegeometry.end)
    public var end : WindowsFoundation.Vector2 {
        get { try! _default.get_EndImpl() }
        set { try! _default.put_EndImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionlinegeometry.start)
    public var start : WindowsFoundation.Vector2 {
        get { try! _default.get_StartImpl() }
        set { try! _default.put_StartImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionlineargradientbrush)
public final class CompositionLinearGradientBrush : UWP.CompositionGradientBrush {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionLinearGradientBrush
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionLinearGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionLinearGradientBrush>?) -> CompositionLinearGradientBrush? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionlineargradientbrush.endpoint)
    public var endPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_EndPointImpl() }
        set { try! _default.put_EndPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionlineargradientbrush.startpoint)
    public var startPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_StartPointImpl() }
        set { try! _default.put_StartPointImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionmaskbrush)
public final class CompositionMaskBrush : UWP.CompositionBrush {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionMaskBrush
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionMaskBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionMaskBrush>?) -> CompositionMaskBrush? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionmaskbrush.mask)
    public var mask : CompositionBrush! {
        get { try! _default.get_MaskImpl() }
        set { try! _default.put_MaskImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionmaskbrush.source)
    public var source : CompositionBrush! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush)
public final class CompositionNineGridBrush : UWP.CompositionBrush {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionNineGridBrush
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionNineGridBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionNineGridBrush>?) -> CompositionNineGridBrush? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.setinsets)
    public func setInsets(_ inset: Float) throws {
        try _default.SetInsetsImpl(inset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.setinsets)
    public func setInsets(_ left: Float, _ top: Float, _ right: Float, _ bottom: Float) throws {
        try _default.SetInsetsWithValuesImpl(left, top, right, bottom)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.setinsetscales)
    public func setInsetScales(_ scale: Float) throws {
        try _default.SetInsetScalesImpl(scale)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.setinsetscales)
    public func setInsetScales(_ left: Float, _ top: Float, _ right: Float, _ bottom: Float) throws {
        try _default.SetInsetScalesWithValuesImpl(left, top, right, bottom)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.bottominset)
    public var bottomInset : Float {
        get { try! _default.get_BottomInsetImpl() }
        set { try! _default.put_BottomInsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.bottominsetscale)
    public var bottomInsetScale : Float {
        get { try! _default.get_BottomInsetScaleImpl() }
        set { try! _default.put_BottomInsetScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.iscenterhollow)
    public var isCenterHollow : Bool {
        get { try! _default.get_IsCenterHollowImpl() }
        set { try! _default.put_IsCenterHollowImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.leftinset)
    public var leftInset : Float {
        get { try! _default.get_LeftInsetImpl() }
        set { try! _default.put_LeftInsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.leftinsetscale)
    public var leftInsetScale : Float {
        get { try! _default.get_LeftInsetScaleImpl() }
        set { try! _default.put_LeftInsetScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.rightinset)
    public var rightInset : Float {
        get { try! _default.get_RightInsetImpl() }
        set { try! _default.put_RightInsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.rightinsetscale)
    public var rightInsetScale : Float {
        get { try! _default.get_RightInsetScaleImpl() }
        set { try! _default.put_RightInsetScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.source)
    public var source : CompositionBrush! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.topinset)
    public var topInset : Float {
        get { try! _default.get_TopInsetImpl() }
        set { try! _default.put_TopInsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionninegridbrush.topinsetscale)
    public var topInsetScale : Float {
        get { try! _default.get_TopInsetScaleImpl() }
        set { try! _default.put_TopInsetScaleImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject)
open class CompositionObject : WinRTClass, WindowsFoundation.IClosable, IAnimationObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionObject
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionObject
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionObject>?) -> CompositionObject? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionObjectFactory : __ABI_Windows_UI_Composition.ICompositionObjectFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionObject"))

    private static let _ICompositionObjectStatics: __ABI_Windows_UI_Composition.ICompositionObjectStatics = try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionObject"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.startanimationwithianimationobject)
    public class func startAnimationWithIAnimationObject(_ target: AnyIAnimationObject!, _ propertyName: String, _ animation: CompositionAnimation!) {
        try! _ICompositionObjectStatics.StartAnimationWithIAnimationObjectImpl(target, propertyName, animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.startanimationgroupwithianimationobject)
    public class func startAnimationGroupWithIAnimationObject(_ target: AnyIAnimationObject!, _ animation: AnyICompositionAnimationBase!) {
        try! _ICompositionObjectStatics.StartAnimationGroupWithIAnimationObjectImpl(target, animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.startanimation)
    public func startAnimation(_ propertyName: String, _ animation: CompositionAnimation!) throws {
        try _default.StartAnimationImpl(propertyName, animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.stopanimation)
    public func stopAnimation(_ propertyName: String) throws {
        try _default.StopAnimationImpl(propertyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.compositor)
    public var compositor : Compositor! {
        get { try! _default.get_CompositorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.dispatcher)
    public var dispatcher : UWP.CoreDispatcher! {
        get { try! _default.get_DispatcherImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.properties)
    public var properties : CompositionPropertySet! {
        get { try! _default.get_PropertiesImpl() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _ICompositionObject2: __ABI_Windows_UI_Composition.ICompositionObject2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.startanimationgroup)
    public func startAnimationGroup(_ value: AnyICompositionAnimationBase!) throws {
        try _ICompositionObject2.StartAnimationGroupImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.stopanimationgroup)
    public func stopAnimationGroup(_ value: AnyICompositionAnimationBase!) throws {
        try _ICompositionObject2.StopAnimationGroupImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.comment)
    public var comment : String {
        get { try! _ICompositionObject2.get_CommentImpl() }
        set { try! _ICompositionObject2.put_CommentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.implicitanimations)
    public var implicitAnimations : ImplicitAnimationCollection! {
        get { try! _ICompositionObject2.get_ImplicitAnimationsImpl() }
        set { try! _ICompositionObject2.put_ImplicitAnimationsImpl(newValue) }
    }

    private lazy var _ICompositionObject3: __ABI_Windows_UI_Composition.ICompositionObject3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.dispatcherqueue)
    public var dispatcherQueue : UWP.DispatcherQueue! {
        get { try! _ICompositionObject3.get_DispatcherQueueImpl() }
    }

    private lazy var _ICompositionObject4: __ABI_Windows_UI_Composition.ICompositionObject4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.trygetanimationcontroller)
    public func tryGetAnimationController(_ propertyName: String) throws -> AnimationController! {
        try _ICompositionObject4.TryGetAnimationControllerImpl(propertyName)
    }

    private lazy var _IAnimationObject: __ABI_Windows_UI_Composition.IAnimationObject! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionobject.populatepropertyinfo)
    public func populatePropertyInfo(_ propertyName: String, _ propertyInfo: AnimationPropertyInfo!) throws {
        try _IAnimationObject.PopulatePropertyInfoImpl(propertyName, propertyInfo)
    }

    internal enum ICompositionObject : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionObject
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionObject
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionObject
        }
    }
    internal typealias Composable = ICompositionObject
    deinit {
        _default = nil
        _IClosable = nil
        _ICompositionObject2 = nil
        _ICompositionObject3 = nil
        _ICompositionObject4 = nil
        _IAnimationObject = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpath)
public final class CompositionPath : WinRTClass, UWP.IGeometrySource2D {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionPath
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionPath
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionPath>?) -> CompositionPath? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICompositionPathFactory: __ABI_Windows_UI_Composition.ICompositionPathFactory = try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionPath"))
    public init(_ source: UWP.AnyIGeometrySource2D!) {
        super.init(try! Self._ICompositionPathFactory.CreateImpl(source))
    }

    private lazy var _IGeometrySource2D: __ABI_Windows_Graphics.IGeometrySource2D! = getInterfaceForCaching()
    deinit {
        _default = nil
        _IGeometrySource2D = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpathgeometry)
public final class CompositionPathGeometry : UWP.CompositionGeometry {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionPathGeometry
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionPathGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionPathGeometry>?) -> CompositionPathGeometry? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpathgeometry.path)
    public var path : CompositionPath! {
        get { try! _default.get_PathImpl() }
        set { try! _default.put_PathImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadow)
public final class CompositionProjectedShadow : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionProjectedShadow
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionProjectedShadow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionProjectedShadow>?) -> CompositionProjectedShadow? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadow.blurradiusmultiplier)
    public var blurRadiusMultiplier : Float {
        get { try! _default.get_BlurRadiusMultiplierImpl() }
        set { try! _default.put_BlurRadiusMultiplierImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadow.casters)
    public var casters : CompositionProjectedShadowCasterCollection! {
        get { try! _default.get_CastersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadow.lightsource)
    public var lightSource : CompositionLight! {
        get { try! _default.get_LightSourceImpl() }
        set { try! _default.put_LightSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadow.maxblurradius)
    public var maxBlurRadius : Float {
        get { try! _default.get_MaxBlurRadiusImpl() }
        set { try! _default.put_MaxBlurRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadow.minblurradius)
    public var minBlurRadius : Float {
        get { try! _default.get_MinBlurRadiusImpl() }
        set { try! _default.put_MinBlurRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadow.receivers)
    public var receivers : CompositionProjectedShadowReceiverUnorderedCollection! {
        get { try! _default.get_ReceiversImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcaster)
public final class CompositionProjectedShadowCaster : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionProjectedShadowCaster
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionProjectedShadowCaster
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionProjectedShadowCaster>?) -> CompositionProjectedShadowCaster? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcaster.brush)
    public var brush : CompositionBrush! {
        get { try! _default.get_BrushImpl() }
        set { try! _default.put_BrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcaster.castingvisual)
    public var castingVisual : Visual! {
        get { try! _default.get_CastingVisualImpl() }
        set { try! _default.put_CastingVisualImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcastercollection)
public final class CompositionProjectedShadowCasterCollection : UWP.CompositionObject, IIterable {
    public typealias T = CompositionProjectedShadowCaster?
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionProjectedShadowCasterCollection
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionProjectedShadowCasterCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionProjectedShadowCasterCollection>?) -> CompositionProjectedShadowCasterCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICompositionProjectedShadowCasterCollectionStatics: __ABI_Windows_UI_Composition.ICompositionProjectedShadowCasterCollectionStatics = try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionProjectedShadowCasterCollection"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcastercollection.maxrespectedcasters)
    public static var maxRespectedCasters : Int32 {
        get { try! _ICompositionProjectedShadowCasterCollectionStatics.get_MaxRespectedCastersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcastercollection.insertabove)
    public func insertAbove(_ newCaster: CompositionProjectedShadowCaster!, _ reference: CompositionProjectedShadowCaster!) throws {
        try _default.InsertAboveImpl(newCaster, reference)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcastercollection.insertatbottom)
    public func insertAtBottom(_ newCaster: CompositionProjectedShadowCaster!) throws {
        try _default.InsertAtBottomImpl(newCaster)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcastercollection.insertattop)
    public func insertAtTop(_ newCaster: CompositionProjectedShadowCaster!) throws {
        try _default.InsertAtTopImpl(newCaster)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcastercollection.insertbelow)
    public func insertBelow(_ newCaster: CompositionProjectedShadowCaster!, _ reference: CompositionProjectedShadowCaster!) throws {
        try _default.InsertBelowImpl(newCaster, reference)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcastercollection.remove)
    public func remove(_ caster: CompositionProjectedShadowCaster!) throws {
        try _default.RemoveImpl(caster)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcastercollection.removeall)
    public func removeAll() throws {
        try _default.RemoveAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcastercollection.count)
    public var count : Int32 {
        get { try! _default.get_CountImpl() }
    }

    private lazy var _IIterable: IIterableCompositionProjectedShadowCaster! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowcastercollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<CompositionProjectedShadowCaster?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowreceiver)
public final class CompositionProjectedShadowReceiver : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionProjectedShadowReceiver
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionProjectedShadowReceiver
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionProjectedShadowReceiver>?) -> CompositionProjectedShadowReceiver? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowreceiver.receivingvisual)
    public var receivingVisual : Visual! {
        get { try! _default.get_ReceivingVisualImpl() }
        set { try! _default.put_ReceivingVisualImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowreceiverunorderedcollection)
public final class CompositionProjectedShadowReceiverUnorderedCollection : UWP.CompositionObject, IIterable {
    public typealias T = CompositionProjectedShadowReceiver?
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionProjectedShadowReceiverUnorderedCollection
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionProjectedShadowReceiverUnorderedCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionProjectedShadowReceiverUnorderedCollection>?) -> CompositionProjectedShadowReceiverUnorderedCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowreceiverunorderedcollection.add)
    public func add(_ value: CompositionProjectedShadowReceiver!) throws {
        try _default.AddImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowreceiverunorderedcollection.remove)
    public func remove(_ value: CompositionProjectedShadowReceiver!) throws {
        try _default.RemoveImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowreceiverunorderedcollection.removeall)
    public func removeAll() throws {
        try _default.RemoveAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowreceiverunorderedcollection.count)
    public var count : Int32 {
        get { try! _default.get_CountImpl() }
    }

    private lazy var _IIterable: IIterableCompositionProjectedShadowReceiver! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionprojectedshadowreceiverunorderedcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<CompositionProjectedShadowReceiver?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset)
public final class CompositionPropertySet : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionPropertySet
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionPropertySet
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionPropertySet>?) -> CompositionPropertySet? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.insertcolor)
    public func insertColor(_ propertyName: String, _ value: UWP.Color) throws {
        try _default.InsertColorImpl(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.insertmatrix3x2)
    public func insertMatrix3x2(_ propertyName: String, _ value: WindowsFoundation.Matrix3x2) throws {
        try _default.InsertMatrix3x2Impl(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.insertmatrix4x4)
    public func insertMatrix4x4(_ propertyName: String, _ value: WindowsFoundation.Matrix4x4) throws {
        try _default.InsertMatrix4x4Impl(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.insertquaternion)
    public func insertQuaternion(_ propertyName: String, _ value: WindowsFoundation.Quaternion) throws {
        try _default.InsertQuaternionImpl(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.insertscalar)
    public func insertScalar(_ propertyName: String, _ value: Float) throws {
        try _default.InsertScalarImpl(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.insertvector2)
    public func insertVector2(_ propertyName: String, _ value: WindowsFoundation.Vector2) throws {
        try _default.InsertVector2Impl(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.insertvector3)
    public func insertVector3(_ propertyName: String, _ value: WindowsFoundation.Vector3) throws {
        try _default.InsertVector3Impl(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.insertvector4)
    public func insertVector4(_ propertyName: String, _ value: WindowsFoundation.Vector4) throws {
        try _default.InsertVector4Impl(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.trygetcolor)
    public func tryGetColor(_ propertyName: String, _ value: inout UWP.Color) throws -> CompositionGetValueStatus {
        try _default.TryGetColorImpl(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.trygetmatrix3x2)
    public func tryGetMatrix3x2(_ propertyName: String, _ value: inout WindowsFoundation.Matrix3x2) throws -> CompositionGetValueStatus {
        try _default.TryGetMatrix3x2Impl(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.trygetmatrix4x4)
    public func tryGetMatrix4x4(_ propertyName: String, _ value: inout WindowsFoundation.Matrix4x4) throws -> CompositionGetValueStatus {
        try _default.TryGetMatrix4x4Impl(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.trygetquaternion)
    public func tryGetQuaternion(_ propertyName: String, _ value: inout WindowsFoundation.Quaternion) throws -> CompositionGetValueStatus {
        try _default.TryGetQuaternionImpl(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.trygetscalar)
    public func tryGetScalar(_ propertyName: String, _ value: inout Float) throws -> CompositionGetValueStatus {
        try _default.TryGetScalarImpl(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.trygetvector2)
    public func tryGetVector2(_ propertyName: String, _ value: inout WindowsFoundation.Vector2) throws -> CompositionGetValueStatus {
        try _default.TryGetVector2Impl(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.trygetvector3)
    public func tryGetVector3(_ propertyName: String, _ value: inout WindowsFoundation.Vector3) throws -> CompositionGetValueStatus {
        try _default.TryGetVector3Impl(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.trygetvector4)
    public func tryGetVector4(_ propertyName: String, _ value: inout WindowsFoundation.Vector4) throws -> CompositionGetValueStatus {
        try _default.TryGetVector4Impl(propertyName, &value)
    }

    private lazy var _ICompositionPropertySet2: __ABI_Windows_UI_Composition.ICompositionPropertySet2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.insertboolean)
    public func insertBoolean(_ propertyName: String, _ value: Bool) throws {
        try _ICompositionPropertySet2.InsertBooleanImpl(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionpropertyset.trygetboolean)
    public func tryGetBoolean(_ propertyName: String, _ value: inout Bool) throws -> CompositionGetValueStatus {
        try _ICompositionPropertySet2.TryGetBooleanImpl(propertyName, &value)
    }

    deinit {
        _default = nil
        _ICompositionPropertySet2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionradialgradientbrush)
public final class CompositionRadialGradientBrush : UWP.CompositionGradientBrush {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionRadialGradientBrush
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionRadialGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionRadialGradientBrush>?) -> CompositionRadialGradientBrush? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionradialgradientbrush.ellipsecenter)
    public var ellipseCenter : WindowsFoundation.Vector2 {
        get { try! _default.get_EllipseCenterImpl() }
        set { try! _default.put_EllipseCenterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionradialgradientbrush.ellipseradius)
    public var ellipseRadius : WindowsFoundation.Vector2 {
        get { try! _default.get_EllipseRadiusImpl() }
        set { try! _default.put_EllipseRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionradialgradientbrush.gradientoriginoffset)
    public var gradientOriginOffset : WindowsFoundation.Vector2 {
        get { try! _default.get_GradientOriginOffsetImpl() }
        set { try! _default.put_GradientOriginOffsetImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionrectanglegeometry)
public final class CompositionRectangleGeometry : UWP.CompositionGeometry {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionRectangleGeometry
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionRectangleGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionRectangleGeometry>?) -> CompositionRectangleGeometry? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionrectanglegeometry.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionrectanglegeometry.size)
    public var size : WindowsFoundation.Vector2 {
        get { try! _default.get_SizeImpl() }
        set { try! _default.put_SizeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionroundedrectanglegeometry)
public final class CompositionRoundedRectangleGeometry : UWP.CompositionGeometry {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionRoundedRectangleGeometry
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionRoundedRectangleGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionRoundedRectangleGeometry>?) -> CompositionRoundedRectangleGeometry? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionroundedrectanglegeometry.cornerradius)
    public var cornerRadius : WindowsFoundation.Vector2 {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionroundedrectanglegeometry.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionroundedrectanglegeometry.size)
    public var size : WindowsFoundation.Vector2 {
        get { try! _default.get_SizeImpl() }
        set { try! _default.put_SizeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionscopedbatch)
public final class CompositionScopedBatch : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionScopedBatch
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionScopedBatch
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionScopedBatch>?) -> CompositionScopedBatch? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionscopedbatch.end)
    public func end() throws {
        try _default.EndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionscopedbatch.resume)
    public func resume() throws {
        try _default.ResumeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionscopedbatch.suspend)
    public func suspend() throws {
        try _default.SuspendImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionscopedbatch.isactive)
    public var isActive : Bool {
        get { try! _default.get_IsActiveImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionscopedbatch.isended)
    public var isEnded : Bool {
        get { try! _default.get_IsEndedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionscopedbatch.completed)
    public lazy var completed : Event<TypedEventHandler<Any?, CompositionBatchCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CompletedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshadow)
open class CompositionShadow : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionShadow
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionShadow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionShadow>?) -> CompositionShadow? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionShadowFactory : __ABI_Windows_UI_Composition.ICompositionShadowFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionShadow"))

    internal enum ICompositionShadow : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionShadow
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionShadow
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionShadow
        }
    }
    internal typealias Composable = ICompositionShadow
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshape)
open class CompositionShape : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionShape
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionShape
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionShape>?) -> CompositionShape? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionShapeFactory : __ABI_Windows_UI_Composition.ICompositionShapeFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionShape"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshape.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_CenterPointImpl() }
        set { try! _default.put_CenterPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshape.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshape.rotationangle)
    public var rotationAngle : Float {
        get { try! _default.get_RotationAngleImpl() }
        set { try! _default.put_RotationAngleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshape.rotationangleindegrees)
    public var rotationAngleInDegrees : Float {
        get { try! _default.get_RotationAngleInDegreesImpl() }
        set { try! _default.put_RotationAngleInDegreesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshape.scale)
    public var scale : WindowsFoundation.Vector2 {
        get { try! _default.get_ScaleImpl() }
        set { try! _default.put_ScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshape.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix3x2 {
        get { try! _default.get_TransformMatrixImpl() }
        set { try! _default.put_TransformMatrixImpl(newValue) }
    }

    internal enum ICompositionShape : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionShape
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionShape
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionShape
        }
    }
    internal typealias Composable = ICompositionShape
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection)
public final class CompositionShapeCollection : UWP.CompositionObject, IVector, IIterable {
    public typealias T = CompositionShape?
    private typealias SwiftABI = UWP.IVectorCompositionShape
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape>?) -> CompositionShapeCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.getat)
    public func getAt(_ index: UInt32) -> CompositionShape? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<CompositionShape?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.indexof)
    public func indexOf(_ value: CompositionShape?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.setat)
    public func setAt(_ index: UInt32, _ value: CompositionShape?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: CompositionShape?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.append)
    public func append(_ value: CompositionShape?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableCompositionShape! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionshapecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<CompositionShape?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape)
public final class CompositionSpriteShape : UWP.CompositionShape {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionSpriteShape
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionSpriteShape
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionSpriteShape>?) -> CompositionSpriteShape? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.fillbrush)
    public var fillBrush : CompositionBrush! {
        get { try! _default.get_FillBrushImpl() }
        set { try! _default.put_FillBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.geometry)
    public var geometry : CompositionGeometry! {
        get { try! _default.get_GeometryImpl() }
        set { try! _default.put_GeometryImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.isstrokenonscaling)
    public var isStrokeNonScaling : Bool {
        get { try! _default.get_IsStrokeNonScalingImpl() }
        set { try! _default.put_IsStrokeNonScalingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.strokebrush)
    public var strokeBrush : CompositionBrush! {
        get { try! _default.get_StrokeBrushImpl() }
        set { try! _default.put_StrokeBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.strokedasharray)
    public var strokeDashArray : CompositionStrokeDashArray! {
        get { try! _default.get_StrokeDashArrayImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.strokedashcap)
    public var strokeDashCap : CompositionStrokeCap {
        get { try! _default.get_StrokeDashCapImpl() }
        set { try! _default.put_StrokeDashCapImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.strokedashoffset)
    public var strokeDashOffset : Float {
        get { try! _default.get_StrokeDashOffsetImpl() }
        set { try! _default.put_StrokeDashOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.strokeendcap)
    public var strokeEndCap : CompositionStrokeCap {
        get { try! _default.get_StrokeEndCapImpl() }
        set { try! _default.put_StrokeEndCapImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.strokelinejoin)
    public var strokeLineJoin : CompositionStrokeLineJoin {
        get { try! _default.get_StrokeLineJoinImpl() }
        set { try! _default.put_StrokeLineJoinImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.strokemiterlimit)
    public var strokeMiterLimit : Float {
        get { try! _default.get_StrokeMiterLimitImpl() }
        set { try! _default.put_StrokeMiterLimitImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.strokestartcap)
    public var strokeStartCap : CompositionStrokeCap {
        get { try! _default.get_StrokeStartCapImpl() }
        set { try! _default.put_StrokeStartCapImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionspriteshape.strokethickness)
    public var strokeThickness : Float {
        get { try! _default.get_StrokeThicknessImpl() }
        set { try! _default.put_StrokeThicknessImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray)
public final class CompositionStrokeDashArray : UWP.CompositionObject, IVector, IIterable {
    public typealias T = Float
    private typealias SwiftABI = UWP.IVectorFloat
    private typealias CABI = __x_ABI_C__FIVector_1_float
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1_float>?) -> CompositionStrokeDashArray? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.getat)
    public func getAt(_ index: UInt32) -> Float {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<Float>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.indexof)
    public func indexOf(_ value: Float, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.setat)
    public func setAt(_ index: UInt32, _ value: Float) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.insertat)
    public func insertAt(_ index: UInt32, _ value: Float) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.append)
    public func append(_ value: Float) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableFloat! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionstrokedasharray.first)
    public func first() -> WindowsFoundation.AnyIIterator<Float>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush)
public final class CompositionSurfaceBrush : UWP.CompositionBrush {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionSurfaceBrush
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionSurfaceBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionSurfaceBrush>?) -> CompositionSurfaceBrush? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.bitmapinterpolationmode)
    public var bitmapInterpolationMode : CompositionBitmapInterpolationMode {
        get { try! _default.get_BitmapInterpolationModeImpl() }
        set { try! _default.put_BitmapInterpolationModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.horizontalalignmentratio)
    public var horizontalAlignmentRatio : Float {
        get { try! _default.get_HorizontalAlignmentRatioImpl() }
        set { try! _default.put_HorizontalAlignmentRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.stretch)
    public var stretch : CompositionStretch {
        get { try! _default.get_StretchImpl() }
        set { try! _default.put_StretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.surface)
    public var surface : AnyICompositionSurface! {
        get { try! _default.get_SurfaceImpl() }
        set { try! _default.put_SurfaceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.verticalalignmentratio)
    public var verticalAlignmentRatio : Float {
        get { try! _default.get_VerticalAlignmentRatioImpl() }
        set { try! _default.put_VerticalAlignmentRatioImpl(newValue) }
    }

    private lazy var _ICompositionSurfaceBrush2: __ABI_Windows_UI_Composition.ICompositionSurfaceBrush2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.anchorpoint)
    public var anchorPoint : WindowsFoundation.Vector2 {
        get { try! _ICompositionSurfaceBrush2.get_AnchorPointImpl() }
        set { try! _ICompositionSurfaceBrush2.put_AnchorPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _ICompositionSurfaceBrush2.get_CenterPointImpl() }
        set { try! _ICompositionSurfaceBrush2.put_CenterPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _ICompositionSurfaceBrush2.get_OffsetImpl() }
        set { try! _ICompositionSurfaceBrush2.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.rotationangle)
    public var rotationAngle : Float {
        get { try! _ICompositionSurfaceBrush2.get_RotationAngleImpl() }
        set { try! _ICompositionSurfaceBrush2.put_RotationAngleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.rotationangleindegrees)
    public var rotationAngleInDegrees : Float {
        get { try! _ICompositionSurfaceBrush2.get_RotationAngleInDegreesImpl() }
        set { try! _ICompositionSurfaceBrush2.put_RotationAngleInDegreesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.scale)
    public var scale : WindowsFoundation.Vector2 {
        get { try! _ICompositionSurfaceBrush2.get_ScaleImpl() }
        set { try! _ICompositionSurfaceBrush2.put_ScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix3x2 {
        get { try! _ICompositionSurfaceBrush2.get_TransformMatrixImpl() }
        set { try! _ICompositionSurfaceBrush2.put_TransformMatrixImpl(newValue) }
    }

    private lazy var _ICompositionSurfaceBrush3: __ABI_Windows_UI_Composition.ICompositionSurfaceBrush3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionsurfacebrush.snaptopixels)
    public var snapToPixels : Bool {
        get { try! _ICompositionSurfaceBrush3.get_SnapToPixelsImpl() }
        set { try! _ICompositionSurfaceBrush3.put_SnapToPixelsImpl(newValue) }
    }

    deinit {
        _default = nil
        _ICompositionSurfaceBrush2 = nil
        _ICompositionSurfaceBrush3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiontarget)
open class CompositionTarget : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionTarget
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionTarget
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionTarget>?) -> CompositionTarget? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionTargetFactory : __ABI_Windows_UI_Composition.ICompositionTargetFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.CompositionTarget"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositiontarget.root)
    public var root : Visual! {
        get { try! _default.get_RootImpl() }
        set { try! _default.put_RootImpl(newValue) }
    }

    internal enum ICompositionTarget : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CompositionTarget
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionTarget
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionTarget
        }
    }
    internal typealias Composable = ICompositionTarget
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionviewbox)
public final class CompositionViewBox : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionViewBox
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionViewBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionViewBox>?) -> CompositionViewBox? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionviewbox.horizontalalignmentratio)
    public var horizontalAlignmentRatio : Float {
        get { try! _default.get_HorizontalAlignmentRatioImpl() }
        set { try! _default.put_HorizontalAlignmentRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionviewbox.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionviewbox.size)
    public var size : WindowsFoundation.Vector2 {
        get { try! _default.get_SizeImpl() }
        set { try! _default.put_SizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionviewbox.stretch)
    public var stretch : CompositionStretch {
        get { try! _default.get_StretchImpl() }
        set { try! _default.put_StretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionviewbox.verticalalignmentratio)
    public var verticalAlignmentRatio : Float {
        get { try! _default.get_VerticalAlignmentRatioImpl() }
        set { try! _default.put_VerticalAlignmentRatioImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionvisualsurface)
public final class CompositionVisualSurface : UWP.CompositionObject, ICompositionSurface {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositionVisualSurface
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositionVisualSurface
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositionVisualSurface>?) -> CompositionVisualSurface? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionvisualsurface.sourceoffset)
    public var sourceOffset : WindowsFoundation.Vector2 {
        get { try! _default.get_SourceOffsetImpl() }
        set { try! _default.put_SourceOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionvisualsurface.sourcesize)
    public var sourceSize : WindowsFoundation.Vector2 {
        get { try! _default.get_SourceSizeImpl() }
        set { try! _default.put_SourceSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositionvisualsurface.sourcevisual)
    public var sourceVisual : Visual! {
        get { try! _default.get_SourceVisualImpl() }
        set { try! _default.put_SourceVisualImpl(newValue) }
    }

    private lazy var _ICompositionSurface: __ABI_Windows_UI_Composition.ICompositionSurface! = getInterfaceForCaching()
    deinit {
        _default = nil
        _ICompositionSurface = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor)
public final class Compositor : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICompositor
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICompositor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICompositor>?) -> Compositor? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.UI.Composition.Compositor")))
    }

    private static let _ICompositorStatics: __ABI_Windows_UI_Composition.ICompositorStatics = try! RoGetActivationFactory(HString("Windows.UI.Composition.Compositor"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.maxglobalplaybackrate)
    public static var maxGlobalPlaybackRate : Float {
        get { try! _ICompositorStatics.get_MaxGlobalPlaybackRateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.minglobalplaybackrate)
    public static var minGlobalPlaybackRate : Float {
        get { try! _ICompositorStatics.get_MinGlobalPlaybackRateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createcolorkeyframeanimation)
    public func createColorKeyFrameAnimation() throws -> ColorKeyFrameAnimation! {
        try _default.CreateColorKeyFrameAnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createcolorbrush)
    public func createColorBrush() throws -> CompositionColorBrush! {
        try _default.CreateColorBrushImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createcolorbrush)
    public func createColorBrush(_ color: UWP.Color) throws -> CompositionColorBrush! {
        try _default.CreateColorBrushWithColorImpl(color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createcontainervisual)
    public func createContainerVisual() throws -> ContainerVisual! {
        try _default.CreateContainerVisualImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createcubicbeziereasingfunction)
    public func createCubicBezierEasingFunction(_ controlPoint1: WindowsFoundation.Vector2, _ controlPoint2: WindowsFoundation.Vector2) throws -> CubicBezierEasingFunction! {
        try _default.CreateCubicBezierEasingFunctionImpl(controlPoint1, controlPoint2)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createeffectfactory)
    public func createEffectFactory(_ graphicsEffect: UWP.AnyIGraphicsEffect!) throws -> CompositionEffectFactory! {
        try _default.CreateEffectFactoryImpl(graphicsEffect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createeffectfactory)
    public func createEffectFactory(_ graphicsEffect: UWP.AnyIGraphicsEffect!, _ animatableProperties: WindowsFoundation.AnyIIterable<String>!) throws -> CompositionEffectFactory! {
        try _default.CreateEffectFactoryWithPropertiesImpl(graphicsEffect, animatableProperties)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createexpressionanimation)
    public func createExpressionAnimation() throws -> ExpressionAnimation! {
        try _default.CreateExpressionAnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createexpressionanimation)
    public func createExpressionAnimation(_ expression: String) throws -> ExpressionAnimation! {
        try _default.CreateExpressionAnimationWithExpressionImpl(expression)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createinsetclip)
    public func createInsetClip() throws -> InsetClip! {
        try _default.CreateInsetClipImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createinsetclip)
    public func createInsetClip(_ leftInset: Float, _ topInset: Float, _ rightInset: Float, _ bottomInset: Float) throws -> InsetClip! {
        try _default.CreateInsetClipWithInsetsImpl(leftInset, topInset, rightInset, bottomInset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createlineareasingfunction)
    public func createLinearEasingFunction() throws -> LinearEasingFunction! {
        try _default.CreateLinearEasingFunctionImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createpropertyset)
    public func createPropertySet() throws -> CompositionPropertySet! {
        try _default.CreatePropertySetImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createquaternionkeyframeanimation)
    public func createQuaternionKeyFrameAnimation() throws -> QuaternionKeyFrameAnimation! {
        try _default.CreateQuaternionKeyFrameAnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createscalarkeyframeanimation)
    public func createScalarKeyFrameAnimation() throws -> ScalarKeyFrameAnimation! {
        try _default.CreateScalarKeyFrameAnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createscopedbatch)
    public func createScopedBatch(_ batchType: CompositionBatchTypes) throws -> CompositionScopedBatch! {
        try _default.CreateScopedBatchImpl(batchType)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createspritevisual)
    public func createSpriteVisual() throws -> SpriteVisual! {
        try _default.CreateSpriteVisualImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createsurfacebrush)
    public func createSurfaceBrush() throws -> CompositionSurfaceBrush! {
        try _default.CreateSurfaceBrushImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createsurfacebrush)
    public func createSurfaceBrush(_ surface: AnyICompositionSurface!) throws -> CompositionSurfaceBrush! {
        try _default.CreateSurfaceBrushWithSurfaceImpl(surface)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createtargetforcurrentview)
    public func createTargetForCurrentView() throws -> CompositionTarget! {
        try _default.CreateTargetForCurrentViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createvector2keyframeanimation)
    public func createVector2KeyFrameAnimation() throws -> Vector2KeyFrameAnimation! {
        try _default.CreateVector2KeyFrameAnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createvector3keyframeanimation)
    public func createVector3KeyFrameAnimation() throws -> Vector3KeyFrameAnimation! {
        try _default.CreateVector3KeyFrameAnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createvector4keyframeanimation)
    public func createVector4KeyFrameAnimation() throws -> Vector4KeyFrameAnimation! {
        try _default.CreateVector4KeyFrameAnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.getcommitbatch)
    public func getCommitBatch(_ batchType: CompositionBatchTypes) throws -> CompositionCommitBatch! {
        try _default.GetCommitBatchImpl(batchType)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _ICompositor2: __ABI_Windows_UI_Composition.ICompositor2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createambientlight)
    public func createAmbientLight() throws -> AmbientLight! {
        try _ICompositor2.CreateAmbientLightImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createanimationgroup)
    public func createAnimationGroup() throws -> CompositionAnimationGroup! {
        try _ICompositor2.CreateAnimationGroupImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createbackdropbrush)
    public func createBackdropBrush() throws -> CompositionBackdropBrush! {
        try _ICompositor2.CreateBackdropBrushImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createdistantlight)
    public func createDistantLight() throws -> DistantLight! {
        try _ICompositor2.CreateDistantLightImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createdropshadow)
    public func createDropShadow() throws -> DropShadow! {
        try _ICompositor2.CreateDropShadowImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createimplicitanimationcollection)
    public func createImplicitAnimationCollection() throws -> ImplicitAnimationCollection! {
        try _ICompositor2.CreateImplicitAnimationCollectionImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createlayervisual)
    public func createLayerVisual() throws -> LayerVisual! {
        try _ICompositor2.CreateLayerVisualImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createmaskbrush)
    public func createMaskBrush() throws -> CompositionMaskBrush! {
        try _ICompositor2.CreateMaskBrushImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createninegridbrush)
    public func createNineGridBrush() throws -> CompositionNineGridBrush! {
        try _ICompositor2.CreateNineGridBrushImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createpointlight)
    public func createPointLight() throws -> PointLight! {
        try _ICompositor2.CreatePointLightImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createspotlight)
    public func createSpotLight() throws -> SpotLight! {
        try _ICompositor2.CreateSpotLightImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createstepeasingfunction)
    public func createStepEasingFunction() throws -> StepEasingFunction! {
        try _ICompositor2.CreateStepEasingFunctionImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createstepeasingfunction)
    public func createStepEasingFunction(_ stepCount: Int32) throws -> StepEasingFunction! {
        try _ICompositor2.CreateStepEasingFunctionWithStepCountImpl(stepCount)
    }

    private lazy var _ICompositor3: __ABI_Windows_UI_Composition.ICompositor3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createhostbackdropbrush)
    public func createHostBackdropBrush() throws -> CompositionBackdropBrush! {
        try _ICompositor3.CreateHostBackdropBrushImpl()
    }

    private lazy var _ICompositor4: __ABI_Windows_UI_Composition.ICompositor4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createcolorgradientstop)
    public func createColorGradientStop() throws -> CompositionColorGradientStop! {
        try _ICompositor4.CreateColorGradientStopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createcolorgradientstop)
    public func createColorGradientStop(_ offset: Float, _ color: UWP.Color) throws -> CompositionColorGradientStop! {
        try _ICompositor4.CreateColorGradientStopWithOffsetAndColorImpl(offset, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createlineargradientbrush)
    public func createLinearGradientBrush() throws -> CompositionLinearGradientBrush! {
        try _ICompositor4.CreateLinearGradientBrushImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createspringscalaranimation)
    public func createSpringScalarAnimation() throws -> SpringScalarNaturalMotionAnimation! {
        try _ICompositor4.CreateSpringScalarAnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createspringvector2animation)
    public func createSpringVector2Animation() throws -> SpringVector2NaturalMotionAnimation! {
        try _ICompositor4.CreateSpringVector2AnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createspringvector3animation)
    public func createSpringVector3Animation() throws -> SpringVector3NaturalMotionAnimation! {
        try _ICompositor4.CreateSpringVector3AnimationImpl()
    }

    private lazy var _ICompositor5: __ABI_Windows_UI_Composition.ICompositor5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createbouncescalaranimation)
    public func createBounceScalarAnimation() throws -> BounceScalarNaturalMotionAnimation! {
        try _ICompositor5.CreateBounceScalarAnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createbouncevector2animation)
    public func createBounceVector2Animation() throws -> BounceVector2NaturalMotionAnimation! {
        try _ICompositor5.CreateBounceVector2AnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createbouncevector3animation)
    public func createBounceVector3Animation() throws -> BounceVector3NaturalMotionAnimation! {
        try _ICompositor5.CreateBounceVector3AnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createcontainershape)
    public func createContainerShape() throws -> CompositionContainerShape! {
        try _ICompositor5.CreateContainerShapeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createellipsegeometry)
    public func createEllipseGeometry() throws -> CompositionEllipseGeometry! {
        try _ICompositor5.CreateEllipseGeometryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createlinegeometry)
    public func createLineGeometry() throws -> CompositionLineGeometry! {
        try _ICompositor5.CreateLineGeometryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createpathgeometry)
    public func createPathGeometry() throws -> CompositionPathGeometry! {
        try _ICompositor5.CreatePathGeometryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createpathgeometry)
    public func createPathGeometry(_ path: CompositionPath!) throws -> CompositionPathGeometry! {
        try _ICompositor5.CreatePathGeometryWithPathImpl(path)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createpathkeyframeanimation)
    public func createPathKeyFrameAnimation() throws -> PathKeyFrameAnimation! {
        try _ICompositor5.CreatePathKeyFrameAnimationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createrectanglegeometry)
    public func createRectangleGeometry() throws -> CompositionRectangleGeometry! {
        try _ICompositor5.CreateRectangleGeometryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createroundedrectanglegeometry)
    public func createRoundedRectangleGeometry() throws -> CompositionRoundedRectangleGeometry! {
        try _ICompositor5.CreateRoundedRectangleGeometryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createshapevisual)
    public func createShapeVisual() throws -> ShapeVisual! {
        try _ICompositor5.CreateShapeVisualImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createspriteshape)
    public func createSpriteShape() throws -> CompositionSpriteShape! {
        try _ICompositor5.CreateSpriteShapeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createspriteshape)
    public func createSpriteShape(_ geometry: CompositionGeometry!) throws -> CompositionSpriteShape! {
        try _ICompositor5.CreateSpriteShapeWithGeometryImpl(geometry)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createviewbox)
    public func createViewBox() throws -> CompositionViewBox! {
        try _ICompositor5.CreateViewBoxImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.requestcommitasync)
    public func requestCommitAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _ICompositor5.RequestCommitAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.comment)
    public var comment : String {
        get { try! _ICompositor5.get_CommentImpl() }
        set { try! _ICompositor5.put_CommentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.globalplaybackrate)
    public var globalPlaybackRate : Float {
        get { try! _ICompositor5.get_GlobalPlaybackRateImpl() }
        set { try! _ICompositor5.put_GlobalPlaybackRateImpl(newValue) }
    }

    private lazy var _ICompositor6: __ABI_Windows_UI_Composition.ICompositor6! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.creategeometricclip)
    public func createGeometricClip() throws -> CompositionGeometricClip! {
        try _ICompositor6.CreateGeometricClipImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.creategeometricclip)
    public func createGeometricClip(_ geometry: CompositionGeometry!) throws -> CompositionGeometricClip! {
        try _ICompositor6.CreateGeometricClipWithGeometryImpl(geometry)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createredirectvisual)
    public func createRedirectVisual() throws -> RedirectVisual! {
        try _ICompositor6.CreateRedirectVisualImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createredirectvisual)
    public func createRedirectVisual(_ source: Visual!) throws -> RedirectVisual! {
        try _ICompositor6.CreateRedirectVisualWithSourceVisualImpl(source)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createbooleankeyframeanimation)
    public func createBooleanKeyFrameAnimation() throws -> BooleanKeyFrameAnimation! {
        try _ICompositor6.CreateBooleanKeyFrameAnimationImpl()
    }

    private lazy var _ICompositorWithProjectedShadow: __ABI_Windows_UI_Composition.ICompositorWithProjectedShadow! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createprojectedshadowcaster)
    public func createProjectedShadowCaster() throws -> CompositionProjectedShadowCaster! {
        try _ICompositorWithProjectedShadow.CreateProjectedShadowCasterImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createprojectedshadow)
    public func createProjectedShadow() throws -> CompositionProjectedShadow! {
        try _ICompositorWithProjectedShadow.CreateProjectedShadowImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createprojectedshadowreceiver)
    public func createProjectedShadowReceiver() throws -> CompositionProjectedShadowReceiver! {
        try _ICompositorWithProjectedShadow.CreateProjectedShadowReceiverImpl()
    }

    private lazy var _ICompositorWithRadialGradient: __ABI_Windows_UI_Composition.ICompositorWithRadialGradient! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createradialgradientbrush)
    public func createRadialGradientBrush() throws -> CompositionRadialGradientBrush! {
        try _ICompositorWithRadialGradient.CreateRadialGradientBrushImpl()
    }

    private lazy var _ICompositorWithVisualSurface: __ABI_Windows_UI_Composition.ICompositorWithVisualSurface! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.compositor.createvisualsurface)
    public func createVisualSurface() throws -> CompositionVisualSurface! {
        try _ICompositorWithVisualSurface.CreateVisualSurfaceImpl()
    }

    deinit {
        _default = nil
        _IClosable = nil
        _ICompositor2 = nil
        _ICompositor3 = nil
        _ICompositor4 = nil
        _ICompositor5 = nil
        _ICompositor6 = nil
        _ICompositorWithProjectedShadow = nil
        _ICompositorWithRadialGradient = nil
        _ICompositorWithVisualSurface = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.containervisual)
open class ContainerVisual : UWP.Visual {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IContainerVisual
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIContainerVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIContainerVisual>?) -> ContainerVisual? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IContainerVisualFactory : __ABI_Windows_UI_Composition.IContainerVisualFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.ContainerVisual"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.containervisual.children)
    public var children : VisualCollection! {
        get { try! _default.get_ChildrenImpl() }
    }

    internal enum IContainerVisual : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ContainerVisual
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIContainerVisual
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.IContainerVisual
        }
    }
    internal typealias Composable = IContainerVisual
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.cubicbeziereasingfunction)
public final class CubicBezierEasingFunction : UWP.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ICubicBezierEasingFunction
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CICubicBezierEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CICubicBezierEasingFunction>?) -> CubicBezierEasingFunction? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.cubicbeziereasingfunction.controlpoint1)
    public var controlPoint1 : WindowsFoundation.Vector2 {
        get { try! _default.get_ControlPoint1Impl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.cubicbeziereasingfunction.controlpoint2)
    public var controlPoint2 : WindowsFoundation.Vector2 {
        get { try! _default.get_ControlPoint2Impl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.distantlight)
public final class DistantLight : UWP.CompositionLight {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IDistantLight
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIDistantLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIDistantLight>?) -> DistantLight? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.distantlight.color)
    public var color : UWP.Color {
        get { try! _default.get_ColorImpl() }
        set { try! _default.put_ColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.distantlight.coordinatespace)
    public var coordinateSpace : Visual! {
        get { try! _default.get_CoordinateSpaceImpl() }
        set { try! _default.put_CoordinateSpaceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.distantlight.direction)
    public var direction : WindowsFoundation.Vector3 {
        get { try! _default.get_DirectionImpl() }
        set { try! _default.put_DirectionImpl(newValue) }
    }

    private lazy var _IDistantLight2: __ABI_Windows_UI_Composition.IDistantLight2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.distantlight.intensity)
    public var intensity : Float {
        get { try! _IDistantLight2.get_IntensityImpl() }
        set { try! _IDistantLight2.put_IntensityImpl(newValue) }
    }

    deinit {
        _default = nil
        _IDistantLight2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.dropshadow)
public final class DropShadow : UWP.CompositionShadow {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IDropShadow
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIDropShadow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIDropShadow>?) -> DropShadow? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.dropshadow.blurradius)
    public var blurRadius : Float {
        get { try! _default.get_BlurRadiusImpl() }
        set { try! _default.put_BlurRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.dropshadow.color)
    public var color : UWP.Color {
        get { try! _default.get_ColorImpl() }
        set { try! _default.put_ColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.dropshadow.mask)
    public var mask : CompositionBrush! {
        get { try! _default.get_MaskImpl() }
        set { try! _default.put_MaskImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.dropshadow.offset)
    public var offset : WindowsFoundation.Vector3 {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.dropshadow.opacity)
    public var opacity : Float {
        get { try! _default.get_OpacityImpl() }
        set { try! _default.put_OpacityImpl(newValue) }
    }

    private lazy var _IDropShadow2: __ABI_Windows_UI_Composition.IDropShadow2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.dropshadow.sourcepolicy)
    public var sourcePolicy : CompositionDropShadowSourcePolicy {
        get { try! _IDropShadow2.get_SourcePolicyImpl() }
        set { try! _IDropShadow2.put_SourcePolicyImpl(newValue) }
    }

    deinit {
        _default = nil
        _IDropShadow2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.expressionanimation)
public final class ExpressionAnimation : UWP.CompositionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IExpressionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIExpressionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIExpressionAnimation>?) -> ExpressionAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.expressionanimation.expression)
    public var expression : String {
        get { try! _default.get_ExpressionImpl() }
        set { try! _default.put_ExpressionImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.implicitanimationcollection)
public final class ImplicitAnimationCollection : UWP.CompositionObject, IMap, IIterable {
    public typealias K = String
    public typealias V = AnyICompositionAnimationBase?
    public typealias T = WindowsFoundation.AnyIKeyValuePair<String, AnyICompositionAnimationBase?>?
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IImplicitAnimationCollection
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIImplicitAnimationCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIImplicitAnimationCollection>?) -> ImplicitAnimationCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IMap: IMapString_ICompositionAnimationBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.implicitanimationcollection.lookup)
    public func lookup(_ key: String) -> AnyICompositionAnimationBase? {
        try! _IMap.LookupImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.implicitanimationcollection.haskey)
    public func hasKey(_ key: String) -> Bool {
        try! _IMap.HasKeyImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.implicitanimationcollection.getview)
    public func getView() -> WindowsFoundation.AnyIMapView<String, AnyICompositionAnimationBase?>? {
        try! _IMap.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.implicitanimationcollection.insert)
    public func insert(_ key: String, _ value: AnyICompositionAnimationBase?) -> Bool {
        try! _IMap.InsertImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.implicitanimationcollection.remove)
    public func remove(_ key: String) {
        try! _IMap.RemoveImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.implicitanimationcollection.clear)
    public func clear() {
        try! _IMap.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.implicitanimationcollection.size)
    public var size : UInt32 {
        get { try! _IMap.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_ICompositionAnimationBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.implicitanimationcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, AnyICompositionAnimationBase?>?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _IMap = nil
        _IIterable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.initialvalueexpressioncollection)
public final class InitialValueExpressionCollection : UWP.CompositionObject, IMap, IIterable {
    public typealias K = String
    public typealias V = String
    public typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    private typealias SwiftABI = UWP.IMapString_String
    private typealias CABI = __x_ABI_C__FIMap_2_HSTRING_HSTRING
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIMap_2_HSTRING_HSTRING>?) -> InitialValueExpressionCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.initialvalueexpressioncollection.lookup)
    public func lookup(_ key: String) -> String {
        try! _default.LookupImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.initialvalueexpressioncollection.haskey)
    public func hasKey(_ key: String) -> Bool {
        try! _default.HasKeyImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.initialvalueexpressioncollection.getview)
    public func getView() -> WindowsFoundation.AnyIMapView<String, String>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.initialvalueexpressioncollection.insert)
    public func insert(_ key: String, _ value: String) -> Bool {
        try! _default.InsertImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.initialvalueexpressioncollection.remove)
    public func remove(_ key: String) {
        try! _default.RemoveImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.initialvalueexpressioncollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.initialvalueexpressioncollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_String! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.initialvalueexpressioncollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.insetclip)
public final class InsetClip : UWP.CompositionClip {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IInsetClip
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIInsetClip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIInsetClip>?) -> InsetClip? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.insetclip.bottominset)
    public var bottomInset : Float {
        get { try! _default.get_BottomInsetImpl() }
        set { try! _default.put_BottomInsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.insetclip.leftinset)
    public var leftInset : Float {
        get { try! _default.get_LeftInsetImpl() }
        set { try! _default.put_LeftInsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.insetclip.rightinset)
    public var rightInset : Float {
        get { try! _default.get_RightInsetImpl() }
        set { try! _default.put_RightInsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.insetclip.topinset)
    public var topInset : Float {
        get { try! _default.get_TopInsetImpl() }
        set { try! _default.put_TopInsetImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation)
open class KeyFrameAnimation : UWP.CompositionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IKeyFrameAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIKeyFrameAnimation>?) -> KeyFrameAnimation? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IKeyFrameAnimationFactory : __ABI_Windows_UI_Composition.IKeyFrameAnimationFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.KeyFrameAnimation"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation.insertexpressionkeyframe)
    public func insertExpressionKeyFrame(_ normalizedProgressKey: Float, _ value: String) throws {
        try _default.InsertExpressionKeyFrameImpl(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation.insertexpressionkeyframe)
    public func insertExpressionKeyFrame(_ normalizedProgressKey: Float, _ value: String, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertExpressionKeyFrameWithEasingFunctionImpl(normalizedProgressKey, value, easingFunction)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation.delaytime)
    public var delayTime : WindowsFoundation.TimeSpan {
        get { try! _default.get_DelayTimeImpl() }
        set { try! _default.put_DelayTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DurationImpl() }
        set { try! _default.put_DurationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation.iterationbehavior)
    public var iterationBehavior : AnimationIterationBehavior {
        get { try! _default.get_IterationBehaviorImpl() }
        set { try! _default.put_IterationBehaviorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation.iterationcount)
    public var iterationCount : Int32 {
        get { try! _default.get_IterationCountImpl() }
        set { try! _default.put_IterationCountImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation.keyframecount)
    public var keyFrameCount : Int32 {
        get { try! _default.get_KeyFrameCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation.stopbehavior)
    public var stopBehavior : AnimationStopBehavior {
        get { try! _default.get_StopBehaviorImpl() }
        set { try! _default.put_StopBehaviorImpl(newValue) }
    }

    private lazy var _IKeyFrameAnimation2: __ABI_Windows_UI_Composition.IKeyFrameAnimation2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation.direction)
    public var direction : AnimationDirection {
        get { try! _IKeyFrameAnimation2.get_DirectionImpl() }
        set { try! _IKeyFrameAnimation2.put_DirectionImpl(newValue) }
    }

    private lazy var _IKeyFrameAnimation3: __ABI_Windows_UI_Composition.IKeyFrameAnimation3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.keyframeanimation.delaybehavior)
    public var delayBehavior : AnimationDelayBehavior {
        get { try! _IKeyFrameAnimation3.get_DelayBehaviorImpl() }
        set { try! _IKeyFrameAnimation3.put_DelayBehaviorImpl(newValue) }
    }

    internal enum IKeyFrameAnimation : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = KeyFrameAnimation
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIKeyFrameAnimation
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.IKeyFrameAnimation
        }
    }
    internal typealias Composable = IKeyFrameAnimation
    deinit {
        _default = nil
        _IKeyFrameAnimation2 = nil
        _IKeyFrameAnimation3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.layervisual)
public final class LayerVisual : UWP.ContainerVisual {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ILayerVisual
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CILayerVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CILayerVisual>?) -> LayerVisual? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.layervisual.effect)
    public var effect : CompositionEffectBrush! {
        get { try! _default.get_EffectImpl() }
        set { try! _default.put_EffectImpl(newValue) }
    }

    private lazy var _ILayerVisual2: __ABI_Windows_UI_Composition.ILayerVisual2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.layervisual.shadow)
    public var shadow : CompositionShadow! {
        get { try! _ILayerVisual2.get_ShadowImpl() }
        set { try! _ILayerVisual2.put_ShadowImpl(newValue) }
    }

    deinit {
        _default = nil
        _ILayerVisual2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.lineareasingfunction)
public final class LinearEasingFunction : UWP.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ILinearEasingFunction
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CILinearEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CILinearEasingFunction>?) -> LinearEasingFunction? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.naturalmotionanimation)
open class NaturalMotionAnimation : UWP.CompositionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.INaturalMotionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CINaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CINaturalMotionAnimation>?) -> NaturalMotionAnimation? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INaturalMotionAnimationFactory : __ABI_Windows_UI_Composition.INaturalMotionAnimationFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.NaturalMotionAnimation"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.naturalmotionanimation.delaybehavior)
    public var delayBehavior : AnimationDelayBehavior {
        get { try! _default.get_DelayBehaviorImpl() }
        set { try! _default.put_DelayBehaviorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.naturalmotionanimation.delaytime)
    public var delayTime : WindowsFoundation.TimeSpan {
        get { try! _default.get_DelayTimeImpl() }
        set { try! _default.put_DelayTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.naturalmotionanimation.stopbehavior)
    public var stopBehavior : AnimationStopBehavior {
        get { try! _default.get_StopBehaviorImpl() }
        set { try! _default.put_StopBehaviorImpl(newValue) }
    }

    internal enum INaturalMotionAnimation : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = NaturalMotionAnimation
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CINaturalMotionAnimation
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.INaturalMotionAnimation
        }
    }
    internal typealias Composable = INaturalMotionAnimation
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pathkeyframeanimation)
public final class PathKeyFrameAnimation : UWP.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IPathKeyFrameAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIPathKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIPathKeyFrameAnimation>?) -> PathKeyFrameAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pathkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ path: CompositionPath!) throws {
        try _default.InsertKeyFrameImpl(normalizedProgressKey, path)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pathkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ path: CompositionPath!, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunctionImpl(normalizedProgressKey, path, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pointlight)
public final class PointLight : UWP.CompositionLight {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IPointLight
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIPointLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIPointLight>?) -> PointLight? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pointlight.color)
    public var color : UWP.Color {
        get { try! _default.get_ColorImpl() }
        set { try! _default.put_ColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pointlight.constantattenuation)
    public var constantAttenuation : Float {
        get { try! _default.get_ConstantAttenuationImpl() }
        set { try! _default.put_ConstantAttenuationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pointlight.coordinatespace)
    public var coordinateSpace : Visual! {
        get { try! _default.get_CoordinateSpaceImpl() }
        set { try! _default.put_CoordinateSpaceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pointlight.linearattenuation)
    public var linearAttenuation : Float {
        get { try! _default.get_LinearAttenuationImpl() }
        set { try! _default.put_LinearAttenuationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pointlight.offset)
    public var offset : WindowsFoundation.Vector3 {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pointlight.quadraticattenuation)
    public var quadraticAttenuation : Float {
        get { try! _default.get_QuadraticAttenuationImpl() }
        set { try! _default.put_QuadraticAttenuationImpl(newValue) }
    }

    private lazy var _IPointLight2: __ABI_Windows_UI_Composition.IPointLight2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pointlight.intensity)
    public var intensity : Float {
        get { try! _IPointLight2.get_IntensityImpl() }
        set { try! _IPointLight2.put_IntensityImpl(newValue) }
    }

    private lazy var _IPointLight3: __ABI_Windows_UI_Composition.IPointLight3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pointlight.maxattenuationcutoff)
    public var maxAttenuationCutoff : Float {
        get { try! _IPointLight3.get_MaxAttenuationCutoffImpl() }
        set { try! _IPointLight3.put_MaxAttenuationCutoffImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.pointlight.minattenuationcutoff)
    public var minAttenuationCutoff : Float {
        get { try! _IPointLight3.get_MinAttenuationCutoffImpl() }
        set { try! _IPointLight3.put_MinAttenuationCutoffImpl(newValue) }
    }

    deinit {
        _default = nil
        _IPointLight2 = nil
        _IPointLight3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.quaternionkeyframeanimation)
public final class QuaternionKeyFrameAnimation : UWP.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IQuaternionKeyFrameAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIQuaternionKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIQuaternionKeyFrameAnimation>?) -> QuaternionKeyFrameAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.quaternionkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Quaternion) throws {
        try _default.InsertKeyFrameImpl(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.quaternionkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Quaternion, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunctionImpl(normalizedProgressKey, value, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.redirectvisual)
public final class RedirectVisual : UWP.ContainerVisual {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IRedirectVisual
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIRedirectVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIRedirectVisual>?) -> RedirectVisual? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.redirectvisual.source)
    public var source : Visual! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.scalarkeyframeanimation)
public final class ScalarKeyFrameAnimation : UWP.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IScalarKeyFrameAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIScalarKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIScalarKeyFrameAnimation>?) -> ScalarKeyFrameAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.scalarkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: Float) throws {
        try _default.InsertKeyFrameImpl(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.scalarkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: Float, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunctionImpl(normalizedProgressKey, value, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.scalarnaturalmotionanimation)
open class ScalarNaturalMotionAnimation : UWP.NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IScalarNaturalMotionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIScalarNaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIScalarNaturalMotionAnimation>?) -> ScalarNaturalMotionAnimation? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScalarNaturalMotionAnimationFactory : __ABI_Windows_UI_Composition.IScalarNaturalMotionAnimationFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.ScalarNaturalMotionAnimation"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.scalarnaturalmotionanimation.finalvalue)
    public var finalValue : Float? {
        get { try! _default.get_FinalValueImpl() }
        set { try! _default.put_FinalValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.scalarnaturalmotionanimation.initialvalue)
    public var initialValue : Float? {
        get { try! _default.get_InitialValueImpl() }
        set { try! _default.put_InitialValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.scalarnaturalmotionanimation.initialvelocity)
    public var initialVelocity : Float {
        get { try! _default.get_InitialVelocityImpl() }
        set { try! _default.put_InitialVelocityImpl(newValue) }
    }

    internal enum IScalarNaturalMotionAnimation : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ScalarNaturalMotionAnimation
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIScalarNaturalMotionAnimation
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.IScalarNaturalMotionAnimation
        }
    }
    internal typealias Composable = IScalarNaturalMotionAnimation
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.shapevisual)
public final class ShapeVisual : UWP.ContainerVisual {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IShapeVisual
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIShapeVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIShapeVisual>?) -> ShapeVisual? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.shapevisual.shapes)
    public var shapes : CompositionShapeCollection! {
        get { try! _default.get_ShapesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.shapevisual.viewbox)
    public var viewBox : CompositionViewBox! {
        get { try! _default.get_ViewBoxImpl() }
        set { try! _default.put_ViewBoxImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight)
public final class SpotLight : UWP.CompositionLight {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ISpotLight
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CISpotLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CISpotLight>?) -> SpotLight? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.constantattenuation)
    public var constantAttenuation : Float {
        get { try! _default.get_ConstantAttenuationImpl() }
        set { try! _default.put_ConstantAttenuationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.coordinatespace)
    public var coordinateSpace : Visual! {
        get { try! _default.get_CoordinateSpaceImpl() }
        set { try! _default.put_CoordinateSpaceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.direction)
    public var direction : WindowsFoundation.Vector3 {
        get { try! _default.get_DirectionImpl() }
        set { try! _default.put_DirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.innerconeangle)
    public var innerConeAngle : Float {
        get { try! _default.get_InnerConeAngleImpl() }
        set { try! _default.put_InnerConeAngleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.innerconeangleindegrees)
    public var innerConeAngleInDegrees : Float {
        get { try! _default.get_InnerConeAngleInDegreesImpl() }
        set { try! _default.put_InnerConeAngleInDegreesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.innerconecolor)
    public var innerConeColor : UWP.Color {
        get { try! _default.get_InnerConeColorImpl() }
        set { try! _default.put_InnerConeColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.linearattenuation)
    public var linearAttenuation : Float {
        get { try! _default.get_LinearAttenuationImpl() }
        set { try! _default.put_LinearAttenuationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.offset)
    public var offset : WindowsFoundation.Vector3 {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.outerconeangle)
    public var outerConeAngle : Float {
        get { try! _default.get_OuterConeAngleImpl() }
        set { try! _default.put_OuterConeAngleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.outerconeangleindegrees)
    public var outerConeAngleInDegrees : Float {
        get { try! _default.get_OuterConeAngleInDegreesImpl() }
        set { try! _default.put_OuterConeAngleInDegreesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.outerconecolor)
    public var outerConeColor : UWP.Color {
        get { try! _default.get_OuterConeColorImpl() }
        set { try! _default.put_OuterConeColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.quadraticattenuation)
    public var quadraticAttenuation : Float {
        get { try! _default.get_QuadraticAttenuationImpl() }
        set { try! _default.put_QuadraticAttenuationImpl(newValue) }
    }

    private lazy var _ISpotLight2: __ABI_Windows_UI_Composition.ISpotLight2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.innerconeintensity)
    public var innerConeIntensity : Float {
        get { try! _ISpotLight2.get_InnerConeIntensityImpl() }
        set { try! _ISpotLight2.put_InnerConeIntensityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.outerconeintensity)
    public var outerConeIntensity : Float {
        get { try! _ISpotLight2.get_OuterConeIntensityImpl() }
        set { try! _ISpotLight2.put_OuterConeIntensityImpl(newValue) }
    }

    private lazy var _ISpotLight3: __ABI_Windows_UI_Composition.ISpotLight3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.maxattenuationcutoff)
    public var maxAttenuationCutoff : Float {
        get { try! _ISpotLight3.get_MaxAttenuationCutoffImpl() }
        set { try! _ISpotLight3.put_MaxAttenuationCutoffImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spotlight.minattenuationcutoff)
    public var minAttenuationCutoff : Float {
        get { try! _ISpotLight3.get_MinAttenuationCutoffImpl() }
        set { try! _ISpotLight3.put_MinAttenuationCutoffImpl(newValue) }
    }

    deinit {
        _default = nil
        _ISpotLight2 = nil
        _ISpotLight3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.springscalarnaturalmotionanimation)
public final class SpringScalarNaturalMotionAnimation : UWP.ScalarNaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ISpringScalarNaturalMotionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CISpringScalarNaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CISpringScalarNaturalMotionAnimation>?) -> SpringScalarNaturalMotionAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.springscalarnaturalmotionanimation.dampingratio)
    public var dampingRatio : Float {
        get { try! _default.get_DampingRatioImpl() }
        set { try! _default.put_DampingRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.springscalarnaturalmotionanimation.period)
    public var period : WindowsFoundation.TimeSpan {
        get { try! _default.get_PeriodImpl() }
        set { try! _default.put_PeriodImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.springvector2naturalmotionanimation)
public final class SpringVector2NaturalMotionAnimation : UWP.Vector2NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ISpringVector2NaturalMotionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CISpringVector2NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CISpringVector2NaturalMotionAnimation>?) -> SpringVector2NaturalMotionAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.springvector2naturalmotionanimation.dampingratio)
    public var dampingRatio : Float {
        get { try! _default.get_DampingRatioImpl() }
        set { try! _default.put_DampingRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.springvector2naturalmotionanimation.period)
    public var period : WindowsFoundation.TimeSpan {
        get { try! _default.get_PeriodImpl() }
        set { try! _default.put_PeriodImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.springvector3naturalmotionanimation)
public final class SpringVector3NaturalMotionAnimation : UWP.Vector3NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ISpringVector3NaturalMotionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CISpringVector3NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CISpringVector3NaturalMotionAnimation>?) -> SpringVector3NaturalMotionAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.springvector3naturalmotionanimation.dampingratio)
    public var dampingRatio : Float {
        get { try! _default.get_DampingRatioImpl() }
        set { try! _default.put_DampingRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.springvector3naturalmotionanimation.period)
    public var period : WindowsFoundation.TimeSpan {
        get { try! _default.get_PeriodImpl() }
        set { try! _default.put_PeriodImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spritevisual)
public final class SpriteVisual : UWP.ContainerVisual {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.ISpriteVisual
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CISpriteVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CISpriteVisual>?) -> SpriteVisual? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spritevisual.brush)
    public var brush : CompositionBrush! {
        get { try! _default.get_BrushImpl() }
        set { try! _default.put_BrushImpl(newValue) }
    }

    private lazy var _ISpriteVisual2: __ABI_Windows_UI_Composition.ISpriteVisual2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.spritevisual.shadow)
    public var shadow : CompositionShadow! {
        get { try! _ISpriteVisual2.get_ShadowImpl() }
        set { try! _ISpriteVisual2.put_ShadowImpl(newValue) }
    }

    deinit {
        _default = nil
        _ISpriteVisual2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.stepeasingfunction)
public final class StepEasingFunction : UWP.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IStepEasingFunction
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIStepEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIStepEasingFunction>?) -> StepEasingFunction? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.stepeasingfunction.finalstep)
    public var finalStep : Int32 {
        get { try! _default.get_FinalStepImpl() }
        set { try! _default.put_FinalStepImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.stepeasingfunction.initialstep)
    public var initialStep : Int32 {
        get { try! _default.get_InitialStepImpl() }
        set { try! _default.put_InitialStepImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.stepeasingfunction.isfinalstepsingleframe)
    public var isFinalStepSingleFrame : Bool {
        get { try! _default.get_IsFinalStepSingleFrameImpl() }
        set { try! _default.put_IsFinalStepSingleFrameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.stepeasingfunction.isinitialstepsingleframe)
    public var isInitialStepSingleFrame : Bool {
        get { try! _default.get_IsInitialStepSingleFrameImpl() }
        set { try! _default.put_IsInitialStepSingleFrameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.stepeasingfunction.stepcount)
    public var stepCount : Int32 {
        get { try! _default.get_StepCountImpl() }
        set { try! _default.put_StepCountImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector2keyframeanimation)
public final class Vector2KeyFrameAnimation : UWP.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IVector2KeyFrameAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVector2KeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIVector2KeyFrameAnimation>?) -> Vector2KeyFrameAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector2keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector2) throws {
        try _default.InsertKeyFrameImpl(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector2keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector2, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunctionImpl(normalizedProgressKey, value, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector2naturalmotionanimation)
open class Vector2NaturalMotionAnimation : UWP.NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IVector2NaturalMotionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVector2NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIVector2NaturalMotionAnimation>?) -> Vector2NaturalMotionAnimation? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IVector2NaturalMotionAnimationFactory : __ABI_Windows_UI_Composition.IVector2NaturalMotionAnimationFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.Vector2NaturalMotionAnimation"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector2naturalmotionanimation.finalvalue)
    public var finalValue : WindowsFoundation.Vector2? {
        get { try! _default.get_FinalValueImpl() }
        set { try! _default.put_FinalValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector2naturalmotionanimation.initialvalue)
    public var initialValue : WindowsFoundation.Vector2? {
        get { try! _default.get_InitialValueImpl() }
        set { try! _default.put_InitialValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector2naturalmotionanimation.initialvelocity)
    public var initialVelocity : WindowsFoundation.Vector2 {
        get { try! _default.get_InitialVelocityImpl() }
        set { try! _default.put_InitialVelocityImpl(newValue) }
    }

    internal enum IVector2NaturalMotionAnimation : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = Vector2NaturalMotionAnimation
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVector2NaturalMotionAnimation
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.IVector2NaturalMotionAnimation
        }
    }
    internal typealias Composable = IVector2NaturalMotionAnimation
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector3keyframeanimation)
public final class Vector3KeyFrameAnimation : UWP.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IVector3KeyFrameAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVector3KeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIVector3KeyFrameAnimation>?) -> Vector3KeyFrameAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector3keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector3) throws {
        try _default.InsertKeyFrameImpl(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector3keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector3, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunctionImpl(normalizedProgressKey, value, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector3naturalmotionanimation)
open class Vector3NaturalMotionAnimation : UWP.NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IVector3NaturalMotionAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVector3NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIVector3NaturalMotionAnimation>?) -> Vector3NaturalMotionAnimation? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IVector3NaturalMotionAnimationFactory : __ABI_Windows_UI_Composition.IVector3NaturalMotionAnimationFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.Vector3NaturalMotionAnimation"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector3naturalmotionanimation.finalvalue)
    public var finalValue : WindowsFoundation.Vector3? {
        get { try! _default.get_FinalValueImpl() }
        set { try! _default.put_FinalValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector3naturalmotionanimation.initialvalue)
    public var initialValue : WindowsFoundation.Vector3? {
        get { try! _default.get_InitialValueImpl() }
        set { try! _default.put_InitialValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector3naturalmotionanimation.initialvelocity)
    public var initialVelocity : WindowsFoundation.Vector3 {
        get { try! _default.get_InitialVelocityImpl() }
        set { try! _default.put_InitialVelocityImpl(newValue) }
    }

    internal enum IVector3NaturalMotionAnimation : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = Vector3NaturalMotionAnimation
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVector3NaturalMotionAnimation
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.IVector3NaturalMotionAnimation
        }
    }
    internal typealias Composable = IVector3NaturalMotionAnimation
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector4keyframeanimation)
public final class Vector4KeyFrameAnimation : UWP.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IVector4KeyFrameAnimation
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVector4KeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIVector4KeyFrameAnimation>?) -> Vector4KeyFrameAnimation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector4keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector4) throws {
        try _default.InsertKeyFrameImpl(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.vector4keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector4, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunctionImpl(normalizedProgressKey, value, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual)
open class Visual : UWP.CompositionObject {
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IVisual
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIVisual>?) -> Visual? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IVisualFactory : __ABI_Windows_UI_Composition.IVisualFactory =  try! RoGetActivationFactory(HString("Windows.UI.Composition.Visual"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.anchorpoint)
    public var anchorPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_AnchorPointImpl() }
        set { try! _default.put_AnchorPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.backfacevisibility)
    public var backfaceVisibility : CompositionBackfaceVisibility {
        get { try! _default.get_BackfaceVisibilityImpl() }
        set { try! _default.put_BackfaceVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.bordermode)
    public var borderMode : CompositionBorderMode {
        get { try! _default.get_BorderModeImpl() }
        set { try! _default.put_BorderModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.centerpoint)
    public var centerPoint : WindowsFoundation.Vector3 {
        get { try! _default.get_CenterPointImpl() }
        set { try! _default.put_CenterPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.clip)
    public var clip : CompositionClip! {
        get { try! _default.get_ClipImpl() }
        set { try! _default.put_ClipImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.compositemode)
    public var compositeMode : CompositionCompositeMode {
        get { try! _default.get_CompositeModeImpl() }
        set { try! _default.put_CompositeModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.isvisible)
    public var isVisible : Bool {
        get { try! _default.get_IsVisibleImpl() }
        set { try! _default.put_IsVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.offset)
    public var offset : WindowsFoundation.Vector3 {
        get { try! _default.get_OffsetImpl() }
        set { try! _default.put_OffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.opacity)
    public var opacity : Float {
        get { try! _default.get_OpacityImpl() }
        set { try! _default.put_OpacityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.orientation)
    public var orientation : WindowsFoundation.Quaternion {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.parent)
    public var parent : ContainerVisual! {
        get { try! _default.get_ParentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.rotationangle)
    public var rotationAngle : Float {
        get { try! _default.get_RotationAngleImpl() }
        set { try! _default.put_RotationAngleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.rotationangleindegrees)
    public var rotationAngleInDegrees : Float {
        get { try! _default.get_RotationAngleInDegreesImpl() }
        set { try! _default.put_RotationAngleInDegreesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.rotationaxis)
    public var rotationAxis : WindowsFoundation.Vector3 {
        get { try! _default.get_RotationAxisImpl() }
        set { try! _default.put_RotationAxisImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.scale)
    public var scale : WindowsFoundation.Vector3 {
        get { try! _default.get_ScaleImpl() }
        set { try! _default.put_ScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.size)
    public var size : WindowsFoundation.Vector2 {
        get { try! _default.get_SizeImpl() }
        set { try! _default.put_SizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix4x4 {
        get { try! _default.get_TransformMatrixImpl() }
        set { try! _default.put_TransformMatrixImpl(newValue) }
    }

    private lazy var _IVisual2: __ABI_Windows_UI_Composition.IVisual2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.parentfortransform)
    public var parentForTransform : Visual! {
        get { try! _IVisual2.get_ParentForTransformImpl() }
        set { try! _IVisual2.put_ParentForTransformImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.relativeoffsetadjustment)
    public var relativeOffsetAdjustment : WindowsFoundation.Vector3 {
        get { try! _IVisual2.get_RelativeOffsetAdjustmentImpl() }
        set { try! _IVisual2.put_RelativeOffsetAdjustmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visual.relativesizeadjustment)
    public var relativeSizeAdjustment : WindowsFoundation.Vector2 {
        get { try! _IVisual2.get_RelativeSizeAdjustmentImpl() }
        set { try! _IVisual2.put_RelativeSizeAdjustmentImpl(newValue) }
    }

    internal enum IVisual : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = Visual
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVisual
            internal typealias SwiftABI = __ABI_Windows_UI_Composition.IVisual
        }
    }
    internal typealias Composable = IVisual
    deinit {
        _default = nil
        _IVisual2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualcollection)
public final class VisualCollection : UWP.CompositionObject, IIterable {
    public typealias T = Visual?
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IVisualCollection
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVisualCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIVisualCollection>?) -> VisualCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IIterable: IIterableVisual! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Visual?>? {
        try! _IIterable.FirstImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualcollection.insertabove)
    public func insertAbove(_ newChild: Visual!, _ sibling: Visual!) throws {
        try _default.InsertAboveImpl(newChild, sibling)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualcollection.insertatbottom)
    public func insertAtBottom(_ newChild: Visual!) throws {
        try _default.InsertAtBottomImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualcollection.insertattop)
    public func insertAtTop(_ newChild: Visual!) throws {
        try _default.InsertAtTopImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualcollection.insertbelow)
    public func insertBelow(_ newChild: Visual!, _ sibling: Visual!) throws {
        try _default.InsertBelowImpl(newChild, sibling)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualcollection.remove)
    public func remove(_ child: Visual!) throws {
        try _default.RemoveImpl(child)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualcollection.removeall)
    public func removeAll() throws {
        try _default.RemoveAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualcollection.count)
    public var count : Int32 {
        get { try! _default.get_CountImpl() }
    }

    deinit {
        _IIterable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualunorderedcollection)
public final class VisualUnorderedCollection : UWP.CompositionObject, IIterable {
    public typealias T = Visual?
    private typealias SwiftABI = __ABI_Windows_UI_Composition.IVisualUnorderedCollection
    private typealias CABI = __x_ABI_CWindows_CUI_CComposition_CIVisualUnorderedCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CComposition_CIVisualUnorderedCollection>?) -> VisualUnorderedCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IIterable: IIterableVisual! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualunorderedcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Visual?>? {
        try! _IIterable.FirstImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualunorderedcollection.add)
    public func add(_ newVisual: Visual!) throws {
        try _default.AddImpl(newVisual)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualunorderedcollection.remove)
    public func remove(_ visual: Visual!) throws {
        try _default.RemoveImpl(visual)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualunorderedcollection.removeall)
    public func removeAll() throws {
        try _default.RemoveAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.visualunorderedcollection.count)
    public var count : Int32 {
        get { try! _default.get_CountImpl() }
    }

    deinit {
        _IIterable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.ianimationobject)
public protocol IAnimationObject : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.ianimationobject.populatepropertyinfo)
    func populatePropertyInfo(_ propertyName: String, _ propertyInfo: UWP.AnimationPropertyInfo!) throws
}

extension IAnimationObject {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_UI_Composition.IAnimationObjectWrapper.IID:
                let wrapper = __ABI_Windows_UI_Composition.IAnimationObjectWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAnimationObject = any IAnimationObject

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.icompositionanimationbase)
public protocol ICompositionAnimationBase : WinRTInterface {
}

extension ICompositionAnimationBase {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_UI_Composition.ICompositionAnimationBaseWrapper.IID:
                let wrapper = __ABI_Windows_UI_Composition.ICompositionAnimationBaseWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICompositionAnimationBase = any ICompositionAnimationBase

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.composition.icompositionsurface)
public protocol ICompositionSurface : WinRTInterface {
}

extension ICompositionSurface {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_UI_Composition.ICompositionSurfaceWrapper.IID:
                let wrapper = __ABI_Windows_UI_Composition.ICompositionSurfaceWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICompositionSurface = any ICompositionSurface

extension UWP.AnimationControllerProgressBehavior {
    public static var `default` : UWP.AnimationControllerProgressBehavior {
        __x_ABI_CWindows_CUI_CComposition_CAnimationControllerProgressBehavior_Default
    }
    public static var includesDelayTime : UWP.AnimationControllerProgressBehavior {
        __x_ABI_CWindows_CUI_CComposition_CAnimationControllerProgressBehavior_IncludesDelayTime
    }
}
extension UWP.AnimationControllerProgressBehavior: @retroactive Hashable, @retroactive Codable {}

extension UWP.AnimationDelayBehavior {
    public static var setInitialValueAfterDelay : UWP.AnimationDelayBehavior {
        __x_ABI_CWindows_CUI_CComposition_CAnimationDelayBehavior_SetInitialValueAfterDelay
    }
    public static var setInitialValueBeforeDelay : UWP.AnimationDelayBehavior {
        __x_ABI_CWindows_CUI_CComposition_CAnimationDelayBehavior_SetInitialValueBeforeDelay
    }
}
extension UWP.AnimationDelayBehavior: @retroactive Hashable, @retroactive Codable {}

extension UWP.AnimationDirection {
    public static var normal : UWP.AnimationDirection {
        __x_ABI_CWindows_CUI_CComposition_CAnimationDirection_Normal
    }
    public static var reverse : UWP.AnimationDirection {
        __x_ABI_CWindows_CUI_CComposition_CAnimationDirection_Reverse
    }
    public static var alternate : UWP.AnimationDirection {
        __x_ABI_CWindows_CUI_CComposition_CAnimationDirection_Alternate
    }
    public static var alternateReverse : UWP.AnimationDirection {
        __x_ABI_CWindows_CUI_CComposition_CAnimationDirection_AlternateReverse
    }
}
extension UWP.AnimationDirection: @retroactive Hashable, @retroactive Codable {}

extension UWP.AnimationIterationBehavior {
    public static var count : UWP.AnimationIterationBehavior {
        __x_ABI_CWindows_CUI_CComposition_CAnimationIterationBehavior_Count
    }
    public static var forever : UWP.AnimationIterationBehavior {
        __x_ABI_CWindows_CUI_CComposition_CAnimationIterationBehavior_Forever
    }
}
extension UWP.AnimationIterationBehavior: @retroactive Hashable, @retroactive Codable {}

extension UWP.AnimationPropertyAccessMode {
    public static var none : UWP.AnimationPropertyAccessMode {
        __x_ABI_CWindows_CUI_CComposition_CAnimationPropertyAccessMode_None
    }
    public static var readOnly : UWP.AnimationPropertyAccessMode {
        __x_ABI_CWindows_CUI_CComposition_CAnimationPropertyAccessMode_ReadOnly
    }
    public static var writeOnly : UWP.AnimationPropertyAccessMode {
        __x_ABI_CWindows_CUI_CComposition_CAnimationPropertyAccessMode_WriteOnly
    }
    public static var readWrite : UWP.AnimationPropertyAccessMode {
        __x_ABI_CWindows_CUI_CComposition_CAnimationPropertyAccessMode_ReadWrite
    }
}
extension UWP.AnimationPropertyAccessMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.AnimationStopBehavior {
    public static var leaveCurrentValue : UWP.AnimationStopBehavior {
        __x_ABI_CWindows_CUI_CComposition_CAnimationStopBehavior_LeaveCurrentValue
    }
    public static var setToInitialValue : UWP.AnimationStopBehavior {
        __x_ABI_CWindows_CUI_CComposition_CAnimationStopBehavior_SetToInitialValue
    }
    public static var setToFinalValue : UWP.AnimationStopBehavior {
        __x_ABI_CWindows_CUI_CComposition_CAnimationStopBehavior_SetToFinalValue
    }
}
extension UWP.AnimationStopBehavior: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionBackfaceVisibility {
    public static var inherit : UWP.CompositionBackfaceVisibility {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBackfaceVisibility_Inherit
    }
    public static var visible : UWP.CompositionBackfaceVisibility {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBackfaceVisibility_Visible
    }
    public static var hidden : UWP.CompositionBackfaceVisibility {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBackfaceVisibility_Hidden
    }
}
extension UWP.CompositionBackfaceVisibility: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionBatchTypes {
    public static var none : UWP.CompositionBatchTypes {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBatchTypes_None
    }
    public static var animation : UWP.CompositionBatchTypes {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBatchTypes_Animation
    }
    public static var effect : UWP.CompositionBatchTypes {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBatchTypes_Effect
    }
    public static var infiniteAnimation : UWP.CompositionBatchTypes {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBatchTypes_InfiniteAnimation
    }
    public static var allAnimations : UWP.CompositionBatchTypes {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBatchTypes_AllAnimations
    }
}
extension UWP.CompositionBatchTypes: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionBitmapInterpolationMode {
    public static var nearestNeighbor : UWP.CompositionBitmapInterpolationMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode_NearestNeighbor
    }
    public static var linear : UWP.CompositionBitmapInterpolationMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode_Linear
    }
    public static var magLinearMinLinearMipLinear : UWP.CompositionBitmapInterpolationMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode_MagLinearMinLinearMipLinear
    }
    public static var magLinearMinLinearMipNearest : UWP.CompositionBitmapInterpolationMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode_MagLinearMinLinearMipNearest
    }
    public static var magLinearMinNearestMipLinear : UWP.CompositionBitmapInterpolationMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode_MagLinearMinNearestMipLinear
    }
    public static var magLinearMinNearestMipNearest : UWP.CompositionBitmapInterpolationMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode_MagLinearMinNearestMipNearest
    }
    public static var magNearestMinLinearMipLinear : UWP.CompositionBitmapInterpolationMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode_MagNearestMinLinearMipLinear
    }
    public static var magNearestMinLinearMipNearest : UWP.CompositionBitmapInterpolationMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode_MagNearestMinLinearMipNearest
    }
    public static var magNearestMinNearestMipLinear : UWP.CompositionBitmapInterpolationMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode_MagNearestMinNearestMipLinear
    }
    public static var magNearestMinNearestMipNearest : UWP.CompositionBitmapInterpolationMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBitmapInterpolationMode_MagNearestMinNearestMipNearest
    }
}
extension UWP.CompositionBitmapInterpolationMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionBorderMode {
    public static var inherit : UWP.CompositionBorderMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBorderMode_Inherit
    }
    public static var soft : UWP.CompositionBorderMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBorderMode_Soft
    }
    public static var hard : UWP.CompositionBorderMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionBorderMode_Hard
    }
}
extension UWP.CompositionBorderMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionColorSpace {
    public static var auto : UWP.CompositionColorSpace {
        __x_ABI_CWindows_CUI_CComposition_CCompositionColorSpace_Auto
    }
    public static var hsl : UWP.CompositionColorSpace {
        __x_ABI_CWindows_CUI_CComposition_CCompositionColorSpace_Hsl
    }
    public static var rgb : UWP.CompositionColorSpace {
        __x_ABI_CWindows_CUI_CComposition_CCompositionColorSpace_Rgb
    }
    public static var hslLinear : UWP.CompositionColorSpace {
        __x_ABI_CWindows_CUI_CComposition_CCompositionColorSpace_HslLinear
    }
    public static var rgbLinear : UWP.CompositionColorSpace {
        __x_ABI_CWindows_CUI_CComposition_CCompositionColorSpace_RgbLinear
    }
}
extension UWP.CompositionColorSpace: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionCompositeMode {
    public static var inherit : UWP.CompositionCompositeMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionCompositeMode_Inherit
    }
    public static var sourceOver : UWP.CompositionCompositeMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionCompositeMode_SourceOver
    }
    public static var destinationInvert : UWP.CompositionCompositeMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionCompositeMode_DestinationInvert
    }
    public static var minBlend : UWP.CompositionCompositeMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionCompositeMode_MinBlend
    }
}
extension UWP.CompositionCompositeMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionDropShadowSourcePolicy {
    public static var `default` : UWP.CompositionDropShadowSourcePolicy {
        __x_ABI_CWindows_CUI_CComposition_CCompositionDropShadowSourcePolicy_Default
    }
    public static var inheritFromVisualContent : UWP.CompositionDropShadowSourcePolicy {
        __x_ABI_CWindows_CUI_CComposition_CCompositionDropShadowSourcePolicy_InheritFromVisualContent
    }
}
extension UWP.CompositionDropShadowSourcePolicy: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionEffectFactoryLoadStatus {
    public static var success : UWP.CompositionEffectFactoryLoadStatus {
        __x_ABI_CWindows_CUI_CComposition_CCompositionEffectFactoryLoadStatus_Success
    }
    public static var effectTooComplex : UWP.CompositionEffectFactoryLoadStatus {
        __x_ABI_CWindows_CUI_CComposition_CCompositionEffectFactoryLoadStatus_EffectTooComplex
    }
    public static var pending : UWP.CompositionEffectFactoryLoadStatus {
        __x_ABI_CWindows_CUI_CComposition_CCompositionEffectFactoryLoadStatus_Pending
    }
    public static var other : UWP.CompositionEffectFactoryLoadStatus {
        __x_ABI_CWindows_CUI_CComposition_CCompositionEffectFactoryLoadStatus_Other
    }
}
extension UWP.CompositionEffectFactoryLoadStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionGetValueStatus {
    public static var succeeded : UWP.CompositionGetValueStatus {
        __x_ABI_CWindows_CUI_CComposition_CCompositionGetValueStatus_Succeeded
    }
    public static var typeMismatch : UWP.CompositionGetValueStatus {
        __x_ABI_CWindows_CUI_CComposition_CCompositionGetValueStatus_TypeMismatch
    }
    public static var notFound : UWP.CompositionGetValueStatus {
        __x_ABI_CWindows_CUI_CComposition_CCompositionGetValueStatus_NotFound
    }
}
extension UWP.CompositionGetValueStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionGradientExtendMode {
    public static var clamp : UWP.CompositionGradientExtendMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionGradientExtendMode_Clamp
    }
    public static var wrap : UWP.CompositionGradientExtendMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionGradientExtendMode_Wrap
    }
    public static var mirror : UWP.CompositionGradientExtendMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionGradientExtendMode_Mirror
    }
}
extension UWP.CompositionGradientExtendMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionMappingMode {
    public static var absolute : UWP.CompositionMappingMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionMappingMode_Absolute
    }
    public static var relative : UWP.CompositionMappingMode {
        __x_ABI_CWindows_CUI_CComposition_CCompositionMappingMode_Relative
    }
}
extension UWP.CompositionMappingMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionStretch {
    public static var none : UWP.CompositionStretch {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStretch_None
    }
    public static var fill : UWP.CompositionStretch {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStretch_Fill
    }
    public static var uniform : UWP.CompositionStretch {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStretch_Uniform
    }
    public static var uniformToFill : UWP.CompositionStretch {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStretch_UniformToFill
    }
}
extension UWP.CompositionStretch: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionStrokeCap {
    public static var flat : UWP.CompositionStrokeCap {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStrokeCap_Flat
    }
    public static var square : UWP.CompositionStrokeCap {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStrokeCap_Square
    }
    public static var round : UWP.CompositionStrokeCap {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStrokeCap_Round
    }
    public static var triangle : UWP.CompositionStrokeCap {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStrokeCap_Triangle
    }
}
extension UWP.CompositionStrokeCap: @retroactive Hashable, @retroactive Codable {}

extension UWP.CompositionStrokeLineJoin {
    public static var miter : UWP.CompositionStrokeLineJoin {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStrokeLineJoin_Miter
    }
    public static var bevel : UWP.CompositionStrokeLineJoin {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStrokeLineJoin_Bevel
    }
    public static var round : UWP.CompositionStrokeLineJoin {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStrokeLineJoin_Round
    }
    public static var miterOrBevel : UWP.CompositionStrokeLineJoin {
        __x_ABI_CWindows_CUI_CComposition_CCompositionStrokeLineJoin_MiterOrBevel
    }
}
extension UWP.CompositionStrokeLineJoin: @retroactive Hashable, @retroactive Codable {}


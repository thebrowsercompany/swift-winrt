// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CDevices_CInput_CIPointerDevice: WindowsFoundation.IID {
    .init(Data1: 0x93C9BAFC, Data2: 0xEBCB, Data3: 0x467E, Data4: ( 0x82,0xC6,0x27,0x6F,0xEA,0xE3,0x6B,0x5A ))// 93C9BAFC-EBCB-467E-82C6-276FEAE36B5A
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIPointerDevice2: WindowsFoundation.IID {
    .init(Data1: 0xF8A6D2A0, Data2: 0xC484, Data3: 0x489F, Data4: ( 0xAE,0x3E,0x30,0xD2,0xEE,0x1F,0xFD,0x3E ))// F8A6D2A0-C484-489F-AE3E-30D2EE1FFD3E
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIPointerDeviceStatics: WindowsFoundation.IID {
    .init(Data1: 0xD8B89AA1, Data2: 0xD1C6, Data3: 0x416E, Data4: ( 0xBD,0x8D,0x57,0x90,0x91,0x4D,0xC5,0x63 ))// D8B89AA1-D1C6-416E-BD8D-5790914DC563
}

public enum __ABI_Windows_Devices_Input {
    public class IPointerDevice: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIPointerDevice }

        internal func get_PointerDeviceTypeImpl() throws -> UWP.PointerDeviceType {
            var value: __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal func get_IsIntegratedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIntegrated(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_MaxContactsImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxContacts(pThis, &value))
            }
            return value
        }

        internal func get_PhysicalDeviceRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PhysicalDeviceRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_ScreenRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScreenRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SupportedUsagesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.PointerDeviceUsage>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedUsages(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.unwrapFrom(abi: value)
        }

    }

    public class IPointerDevice2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIPointerDevice2 }

        internal func get_MaxPointersWithZDistanceImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxPointersWithZDistance(pThis, &value))
            }
            return value
        }

    }

    public class IPointerDeviceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIPointerDeviceStatics }

        internal func GetPointerDeviceImpl(_ pointerId: UInt32) throws -> UWP.PointerDevice? {
            let (pointerDevice) = try ComPtrs.initialize { pointerDeviceAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDeviceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPointerDevice(pThis, pointerId, &pointerDeviceAbi))
                }
            }
            return .from(abi: pointerDevice)
        }

        internal func GetPointerDevicesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.PointerDevice?>? {
            let (pointerDevices) = try ComPtrs.initialize { pointerDevicesAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDeviceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPointerDevices(pThis, &pointerDevicesAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.unwrapFrom(abi: pointerDevices)
        }

    }

}
extension __x_ABI_CWindows_CDevices_CInput_CPointerDeviceUsage {
        public static func from(swift: UWP.PointerDeviceUsage) -> __x_ABI_CWindows_CDevices_CInput_CPointerDeviceUsage {
            .init(UsagePage: swift.usagePage, Usage: swift.usage, MinLogical: swift.minLogical, MaxLogical: swift.maxLogical, MinPhysical: swift.minPhysical, MaxPhysical: swift.maxPhysical, Unit: swift.unit, PhysicalMultiplier: swift.physicalMultiplier)
        }
    }
    
// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.handpreference)
public typealias HandPreference = __x_ABI_CWindows_CUI_CViewManagement_CHandPreference
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uicolortype)
public typealias UIColorType = __x_ABI_CWindows_CUI_CViewManagement_CUIColorType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uielementtype)
public typealias UIElementType = __x_ABI_CWindows_CUI_CViewManagement_CUIElementType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.viewsizepreference)
public typealias ViewSizePreference = __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.activationviewswitcher)
public final class ActivationViewSwitcher : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_ViewManagement.IActivationViewSwitcher
    private typealias CABI = __x_ABI_CWindows_CUI_CViewManagement_CIActivationViewSwitcher
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CViewManagement_CIActivationViewSwitcher>?) -> ActivationViewSwitcher? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.activationviewswitcher.showasstandaloneasync)
    public func showAsStandaloneAsync(_ viewId: Int32) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.ShowAsStandaloneAsyncImpl(viewId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.activationviewswitcher.showasstandaloneasync)
    public func showAsStandaloneAsync(_ viewId: Int32, _ sizePreference: ViewSizePreference) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.ShowAsStandaloneWithSizePreferenceAsyncImpl(viewId, sizePreference)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.activationviewswitcher.isviewpresentedonactivationvirtualdesktop)
    public func isViewPresentedOnActivationVirtualDesktop(_ viewId: Int32) throws -> Bool {
        try _default.IsViewPresentedOnActivationVirtualDesktopImpl(viewId)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings)
public final class UISettings : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_ViewManagement.IUISettings
    private typealias CABI = __x_ABI_CWindows_CUI_CViewManagement_CIUISettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CViewManagement_CIUISettings>?) -> UISettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.UI.ViewManagement.UISettings")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.uielementcolor)
    public func uiElementColor(_ desiredElement: UIElementType) throws -> UWP.Color {
        try _default.UIElementColorImpl(desiredElement)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.animationsenabled)
    public var animationsEnabled : Bool {
        get { try! _default.get_AnimationsEnabledImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.caretblinkrate)
    public var caretBlinkRate : UInt32 {
        get { try! _default.get_CaretBlinkRateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.caretbrowsingenabled)
    public var caretBrowsingEnabled : Bool {
        get { try! _default.get_CaretBrowsingEnabledImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.caretwidth)
    public var caretWidth : UInt32 {
        get { try! _default.get_CaretWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.cursorsize)
    public var cursorSize : WindowsFoundation.Size {
        get { try! _default.get_CursorSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.doubleclicktime)
    public var doubleClickTime : UInt32 {
        get { try! _default.get_DoubleClickTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.handpreference)
    public var handPreference : HandPreference {
        get { try! _default.get_HandPreferenceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.messageduration)
    public var messageDuration : UInt32 {
        get { try! _default.get_MessageDurationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.mousehovertime)
    public var mouseHoverTime : UInt32 {
        get { try! _default.get_MouseHoverTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.scrollbararrowsize)
    public var scrollBarArrowSize : WindowsFoundation.Size {
        get { try! _default.get_ScrollBarArrowSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.scrollbarsize)
    public var scrollBarSize : WindowsFoundation.Size {
        get { try! _default.get_ScrollBarSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.scrollbarthumbboxsize)
    public var scrollBarThumbBoxSize : WindowsFoundation.Size {
        get { try! _default.get_ScrollBarThumbBoxSizeImpl() }
    }

    private lazy var _IUISettings2: __ABI_Windows_UI_ViewManagement.IUISettings2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.textscalefactor)
    public var textScaleFactor : Double {
        get { try! _IUISettings2.get_TextScaleFactorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.textscalefactorchanged)
    public lazy var textScaleFactorChanged : Event<TypedEventHandler<UISettings?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IUISettings2 else { return .init() }
          return try! this.add_TextScaleFactorChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IUISettings2.remove_TextScaleFactorChangedImpl($0)
       }
      )
    }()

    private lazy var _IUISettings3: __ABI_Windows_UI_ViewManagement.IUISettings3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.getcolorvalue)
    public func getColorValue(_ desiredColor: UIColorType) throws -> UWP.Color {
        try _IUISettings3.GetColorValueImpl(desiredColor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.colorvalueschanged)
    public lazy var colorValuesChanged : Event<TypedEventHandler<UISettings?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IUISettings3 else { return .init() }
          return try! this.add_ColorValuesChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IUISettings3.remove_ColorValuesChangedImpl($0)
       }
      )
    }()

    private lazy var _IUISettings4: __ABI_Windows_UI_ViewManagement.IUISettings4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.advancedeffectsenabled)
    public var advancedEffectsEnabled : Bool {
        get { try! _IUISettings4.get_AdvancedEffectsEnabledImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.advancedeffectsenabledchanged)
    public lazy var advancedEffectsEnabledChanged : Event<TypedEventHandler<UISettings?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IUISettings4 else { return .init() }
          return try! this.add_AdvancedEffectsEnabledChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IUISettings4.remove_AdvancedEffectsEnabledChangedImpl($0)
       }
      )
    }()

    private lazy var _IUISettings5: __ABI_Windows_UI_ViewManagement.IUISettings5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.autohidescrollbars)
    public var autoHideScrollBars : Bool {
        get { try! _IUISettings5.get_AutoHideScrollBarsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettings.autohidescrollbarschanged)
    public lazy var autoHideScrollBarsChanged : Event<TypedEventHandler<UISettings?, UISettingsAutoHideScrollBarsChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IUISettings5 else { return .init() }
          return try! this.add_AutoHideScrollBarsChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IUISettings5.remove_AutoHideScrollBarsChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
        _IUISettings2 = nil
        _IUISettings3 = nil
        _IUISettings4 = nil
        _IUISettings5 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.uisettingsautohidescrollbarschangedeventargs)
public final class UISettingsAutoHideScrollBarsChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_ViewManagement.IUISettingsAutoHideScrollBarsChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CViewManagement_CIUISettingsAutoHideScrollBarsChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CViewManagement_CIUISettingsAutoHideScrollBarsChangedEventArgs>?) -> UISettingsAutoHideScrollBarsChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

extension UWP.HandPreference {
    public static var leftHanded : UWP.HandPreference {
        __x_ABI_CWindows_CUI_CViewManagement_CHandPreference_LeftHanded
    }
    public static var rightHanded : UWP.HandPreference {
        __x_ABI_CWindows_CUI_CViewManagement_CHandPreference_RightHanded
    }
}
extension UWP.HandPreference: @retroactive Hashable, @retroactive Codable {}

extension UWP.UIColorType {
    public static var background : UWP.UIColorType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIColorType_Background
    }
    public static var foreground : UWP.UIColorType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIColorType_Foreground
    }
    public static var accentDark3 : UWP.UIColorType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIColorType_AccentDark3
    }
    public static var accentDark2 : UWP.UIColorType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIColorType_AccentDark2
    }
    public static var accentDark1 : UWP.UIColorType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIColorType_AccentDark1
    }
    public static var accent : UWP.UIColorType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIColorType_Accent
    }
    public static var accentLight1 : UWP.UIColorType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIColorType_AccentLight1
    }
    public static var accentLight2 : UWP.UIColorType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIColorType_AccentLight2
    }
    public static var accentLight3 : UWP.UIColorType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIColorType_AccentLight3
    }
    public static var complement : UWP.UIColorType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIColorType_Complement
    }
}
extension UWP.UIColorType: @retroactive Hashable, @retroactive Codable {}

extension UWP.UIElementType {
    public static var activeCaption : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_ActiveCaption
    }
    public static var background : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_Background
    }
    public static var buttonFace : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_ButtonFace
    }
    public static var buttonText : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_ButtonText
    }
    public static var captionText : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_CaptionText
    }
    public static var grayText : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_GrayText
    }
    public static var highlight : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_Highlight
    }
    public static var highlightText : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_HighlightText
    }
    public static var hotlight : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_Hotlight
    }
    public static var inactiveCaption : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_InactiveCaption
    }
    public static var inactiveCaptionText : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_InactiveCaptionText
    }
    public static var window : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_Window
    }
    public static var windowText : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_WindowText
    }
    public static var accentColor : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_AccentColor
    }
    public static var textHigh : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_TextHigh
    }
    public static var textMedium : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_TextMedium
    }
    public static var textLow : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_TextLow
    }
    public static var textContrastWithHigh : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_TextContrastWithHigh
    }
    public static var nonTextHigh : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_NonTextHigh
    }
    public static var nonTextMediumHigh : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_NonTextMediumHigh
    }
    public static var nonTextMedium : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_NonTextMedium
    }
    public static var nonTextMediumLow : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_NonTextMediumLow
    }
    public static var nonTextLow : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_NonTextLow
    }
    public static var pageBackground : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_PageBackground
    }
    public static var popupBackground : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_PopupBackground
    }
    public static var overlayOutsidePopup : UWP.UIElementType {
        __x_ABI_CWindows_CUI_CViewManagement_CUIElementType_OverlayOutsidePopup
    }
}
extension UWP.UIElementType: @retroactive Hashable, @retroactive Codable {}

extension UWP.ViewSizePreference {
    public static var `default` : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_Default
    }
    public static var useLess : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_UseLess
    }
    public static var useHalf : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_UseHalf
    }
    public static var useMore : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_UseMore
    }
    public static var useMinimum : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_UseMinimum
    }
    public static var useNone : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_UseNone
    }
    public static var custom : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_Custom
    }
}
extension UWP.ViewSizePreference: @retroactive Hashable, @retroactive Codable {}


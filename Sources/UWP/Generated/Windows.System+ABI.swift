// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CSystem_CIDispatcherQueue: WindowsFoundation.IID {
    .init(Data1: 0x603E88E4, Data2: 0xA338, Data3: 0x4FFE, Data4: ( 0xA4,0x57,0xA5,0xCF,0xB9,0xCE,0xB8,0x99 ))// 603E88E4-A338-4FFE-A457-A5CFB9CEB899
}

private var IID___x_ABI_CWindows_CSystem_CIDispatcherQueue2: WindowsFoundation.IID {
    .init(Data1: 0xC822C647, Data2: 0x30EF, Data3: 0x506E, Data4: ( 0xBD,0x1E,0xA6,0x47,0xAE,0x66,0x75,0xFF ))// C822C647-30EF-506E-BD1E-A647AE6675FF
}

private var IID___x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC4724C4C, Data2: 0xFF97, Data3: 0x40C0, Data4: ( 0xA2,0x26,0xCC,0x0A,0xAA,0x54,0x5E,0x89 ))// C4724C4C-FF97-40C0-A226-CC0AAA545E89
}

private var IID___x_ABI_CWindows_CSystem_CIDispatcherQueueStatics: WindowsFoundation.IID {
    .init(Data1: 0xA96D83D7, Data2: 0x9371, Data3: 0x4517, Data4: ( 0x92,0x45,0xD0,0x82,0x4A,0xC1,0x2C,0x74 ))// A96D83D7-9371-4517-9245-D0824AC12C74
}

private var IID___x_ABI_CWindows_CSystem_CIDispatcherQueueTimer: WindowsFoundation.IID {
    .init(Data1: 0x5FEABB1D, Data2: 0xA31C, Data3: 0x4727, Data4: ( 0xB1,0xAC,0x37,0x45,0x46,0x49,0xD5,0x6A ))// 5FEABB1D-A31C-4727-B1AC-37454649D56A
}

private var IID___x_ABI_CWindows_CSystem_CIFolderLauncherOptions: WindowsFoundation.IID {
    .init(Data1: 0xBB91C27D, Data2: 0x6B87, Data3: 0x432A, Data4: ( 0xBD,0x04,0x77,0x6C,0x6F,0x5F,0xB2,0xAB ))// BB91C27D-6B87-432A-BD04-776C6F5FB2AB
}

private var IID___x_ABI_CWindows_CSystem_CILaunchUriResult: WindowsFoundation.IID {
    .init(Data1: 0xEC27A8DF, Data2: 0xF6D5, Data3: 0x45CA, Data4: ( 0x91,0x3A,0x70,0xA4,0x0C,0x5C,0x82,0x21 ))// EC27A8DF-F6D5-45CA-913A-70A40C5C8221
}

private var IID___x_ABI_CWindows_CSystem_CILauncherOptions: WindowsFoundation.IID {
    .init(Data1: 0xBAFA21D8, Data2: 0xB071, Data3: 0x4CD8, Data4: ( 0x85,0x3E,0x34,0x12,0x03,0xE5,0x57,0xD3 ))// BAFA21D8-B071-4CD8-853E-341203E557D3
}

private var IID___x_ABI_CWindows_CSystem_CILauncherOptions2: WindowsFoundation.IID {
    .init(Data1: 0x3BA08EB4, Data2: 0x6E40, Data3: 0x4DCE, Data4: ( 0xA1,0xA3,0x2F,0x53,0x95,0x0A,0xFB,0x49 ))// 3BA08EB4-6E40-4DCE-A1A3-2F53950AFB49
}

private var IID___x_ABI_CWindows_CSystem_CILauncherOptions3: WindowsFoundation.IID {
    .init(Data1: 0xF0770655, Data2: 0x4B63, Data3: 0x4E3A, Data4: ( 0x91,0x07,0x4E,0x68,0x78,0x41,0x92,0x3A ))// F0770655-4B63-4E3A-9107-4E687841923A
}

private var IID___x_ABI_CWindows_CSystem_CILauncherOptions4: WindowsFoundation.IID {
    .init(Data1: 0xEF6FD10E, Data2: 0xE6FB, Data3: 0x4814, Data4: ( 0xA4,0x4E,0x57,0xE8,0xB9,0xD9,0xA0,0x1B ))// EF6FD10E-E6FB-4814-A44E-57E8B9D9A01B
}

private var IID___x_ABI_CWindows_CSystem_CILauncherStatics: WindowsFoundation.IID {
    .init(Data1: 0x277151C3, Data2: 0x9E3E, Data3: 0x42F6, Data4: ( 0x91,0xA4,0x5D,0xFD,0xEB,0x23,0x24,0x51 ))// 277151C3-9E3E-42F6-91A4-5DFDEB232451
}

private var IID___x_ABI_CWindows_CSystem_CILauncherStatics2: WindowsFoundation.IID {
    .init(Data1: 0x59BA2FBB, Data2: 0x24CB, Data3: 0x4C02, Data4: ( 0xA4,0xC4,0x82,0x94,0x56,0x9D,0x54,0xF1 ))// 59BA2FBB-24CB-4C02-A4C4-8294569D54F1
}

private var IID___x_ABI_CWindows_CSystem_CILauncherStatics3: WindowsFoundation.IID {
    .init(Data1: 0x234261A8, Data2: 0x9DB3, Data3: 0x4683, Data4: ( 0xAA,0x42,0xDC,0x6F,0x51,0xD3,0x38,0x47 ))// 234261A8-9DB3-4683-AA42-DC6F51D33847
}

private var IID___x_ABI_CWindows_CSystem_CILauncherStatics4: WindowsFoundation.IID {
    .init(Data1: 0xB9EC819F, Data2: 0xB5A5, Data3: 0x41C6, Data4: ( 0xB3,0xB3,0xDD,0x1B,0x31,0x78,0xBC,0xF2 ))// B9EC819F-B5A5-41C6-B3B3-DD1B3178BCF2
}

private var IID___x_ABI_CWindows_CSystem_CILauncherStatics5: WindowsFoundation.IID {
    .init(Data1: 0x5B24EF84, Data2: 0xD895, Data3: 0x5FEA, Data4: ( 0x91,0x53,0x1A,0xC4,0x9A,0xED,0x9B,0xA9 ))// 5B24EF84-D895-5FEA-9153-1AC49AED9BA9
}

private var IID___x_ABI_CWindows_CSystem_CILauncherUIOptions: WindowsFoundation.IID {
    .init(Data1: 0x1B25DA6E, Data2: 0x8AA6, Data3: 0x41E9, Data4: ( 0x82,0x51,0x41,0x65,0xF5,0x98,0x5F,0x49 ))// 1B25DA6E-8AA6-41E9-8251-4165F5985F49
}

private var IID___x_ABI_CWindows_CSystem_CILauncherViewOptions: WindowsFoundation.IID {
    .init(Data1: 0x8A9B29F1, Data2: 0x7CA7, Data3: 0x49DE, Data4: ( 0x9B,0xD3,0x3C,0x5B,0x71,0x84,0xF6,0x16 ))// 8A9B29F1-7CA7-49DE-9BD3-3C5B7184F616
}

private var IID___x_ABI_CWindows_CSystem_CIUser: WindowsFoundation.IID {
    .init(Data1: 0xDF9A26C6, Data2: 0xE746, Data3: 0x4BCD, Data4: ( 0xB5,0xD4,0x12,0x01,0x03,0xC4,0x20,0x9B ))// DF9A26C6-E746-4BCD-B5D4-120103C4209B
}

private var IID___x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral: WindowsFoundation.IID {
    .init(Data1: 0x88B59568, Data2: 0xBB30, Data3: 0x42FB, Data4: ( 0xA2,0x70,0xE9,0x90,0x2E,0x40,0xEF,0xA7 ))// 88B59568-BB30-42FB-A270-E9902E40EFA7
}

private var IID___x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x8C030F28, Data2: 0xA711, Data3: 0x4C1E, Data4: ( 0xAB,0x48,0x04,0x17,0x9C,0x15,0x93,0x8F ))// 8C030F28-A711-4C1E-AB48-04179C15938F
}

private var IID___x_ABI_CWindows_CSystem_CIUserChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x086459DC, Data2: 0x18C6, Data3: 0x48DB, Data4: ( 0xBC,0x99,0x72,0x4F,0xB9,0x20,0x3C,0xCC ))// 086459DC-18C6-48DB-BC99-724FB9203CCC
}

private var IID___x_ABI_CWindows_CSystem_CIUserStatics: WindowsFoundation.IID {
    .init(Data1: 0x155EB23B, Data2: 0x242A, Data3: 0x45E0, Data4: ( 0xA2,0xE9,0x31,0x71,0xFC,0x6A,0x7F,0xDD ))// 155EB23B-242A-45E0-A2E9-3171FC6A7FDD
}

private var IID___x_ABI_CWindows_CSystem_CIUserWatcher: WindowsFoundation.IID {
    .init(Data1: 0x155EB23B, Data2: 0x242A, Data3: 0x45E0, Data4: ( 0xA2,0xE9,0x31,0x71,0xFC,0x6A,0x7F,0xBB ))// 155EB23B-242A-45E0-A2E9-3171FC6A7FBB
}

private var IID___x_ABI_CWindows_CSystem_CIDispatcherQueueHandler: WindowsFoundation.IID {
    .init(Data1: 0xDFA2DC9C, Data2: 0x1A2D, Data3: 0x4917, Data4: ( 0x98,0xF2,0x93,0x9A,0xF1,0xD6,0xE0,0xC8 ))// DFA2DC9C-1A2D-4917-98F2-939AF1D6E0C8
}

public enum __ABI_Windows_System {
    public class IDispatcherQueue: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIDispatcherQueue }

        internal func CreateTimerImpl() throws -> UWP.DispatcherQueueTimer? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueue.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTimer(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func TryEnqueueImpl(_ callback: UWP.DispatcherQueueHandler?) throws -> Bool {
            var result: boolean = 0
            let callbackWrapper = __ABI_Windows_System.DispatcherQueueHandlerWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryEnqueue(pThis, _callback, &result))
            }
            return .init(from: result)
        }

        internal func TryEnqueueWithPriorityImpl(_ priority: UWP.DispatcherQueuePriority, _ callback: UWP.DispatcherQueueHandler?) throws -> Bool {
            var result: boolean = 0
            let callbackWrapper = __ABI_Windows_System.DispatcherQueueHandlerWrapper(callback)
            let _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryEnqueueWithPriority(pThis, priority, _callback, &result))
            }
            return .init(from: result)
        }

        internal func add_ShutdownStartingImpl(_ handler: TypedEventHandler<UWP.DispatcherQueue?, UWP.DispatcherQueueShutdownStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ShutdownStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ShutdownStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ShutdownStarting(pThis, token))
            }
        }

        internal func add_ShutdownCompletedImpl(_ handler: TypedEventHandler<UWP.DispatcherQueue?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ShutdownCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ShutdownCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ShutdownCompleted(pThis, token))
            }
        }

    }

    public class IDispatcherQueue2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIDispatcherQueue2 }

        internal func get_HasThreadAccessImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueue2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasThreadAccess(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IDispatcherQueueShutdownStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IDispatcherQueueStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIDispatcherQueueStatics }

        internal func GetForCurrentThreadImpl() throws -> UWP.DispatcherQueue? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForCurrentThread(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IDispatcherQueueTimer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIDispatcherQueueTimer }

        internal func get_IntervalImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Interval(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_IntervalImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Interval(pThis, .from(swift: value)))
            }
        }

        internal func get_IsRunningImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRunning(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsRepeatingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRepeating(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsRepeatingImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsRepeating(pThis, .init(from: value)))
            }
        }

        internal func StartImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
            }
        }

        internal func StopImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        internal func add_TickImpl(_ handler: TypedEventHandler<UWP.DispatcherQueueTimer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Tick(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Tick(pThis, token))
            }
        }

    }

    public class IFolderLauncherOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIFolderLauncherOptions }

        internal func get_ItemsToSelectImpl() throws -> WindowsFoundation.AnyIVector<UWP.AnyIStorageItem?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIFolderLauncherOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsToSelect(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: value)
        }

    }

    public class ILaunchUriResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILaunchUriResult }

        internal func get_StatusImpl() throws -> UWP.LaunchUriStatus {
            var value: __x_ABI_CWindows_CSystem_CLaunchUriStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILaunchUriResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal func get_ResultImpl() throws -> WindowsFoundation.ValueSet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILaunchUriResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Result(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ILauncherOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherOptions }

        internal func get_TreatAsUntrustedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TreatAsUntrusted(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TreatAsUntrustedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TreatAsUntrusted(pThis, .init(from: value)))
            }
        }

        internal func get_DisplayApplicationPickerImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayApplicationPicker(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_DisplayApplicationPickerImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayApplicationPicker(pThis, .init(from: value)))
            }
        }

        internal func get_UIImpl() throws -> UWP.LauncherUIOptions? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UI(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PreferredApplicationPackageFamilyNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredApplicationPackageFamilyName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PreferredApplicationPackageFamilyNameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredApplicationPackageFamilyName(pThis, _value.get()))
            }
        }

        internal func get_PreferredApplicationDisplayNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredApplicationDisplayName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PreferredApplicationDisplayNameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredApplicationDisplayName(pThis, _value.get()))
            }
        }

        internal func get_FallbackUriImpl() throws -> WindowsFoundation.Uri? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FallbackUri(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_FallbackUriImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FallbackUri(pThis, RawPointer(value)))
            }
        }

        internal func get_ContentTypeImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentType(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ContentTypeImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentType(pThis, _value.get()))
            }
        }

    }

    public class ILauncherOptions2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherOptions2 }

        internal func get_TargetApplicationPackageFamilyNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetApplicationPackageFamilyName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TargetApplicationPackageFamilyNameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TargetApplicationPackageFamilyName(pThis, _value.get()))
            }
        }

        internal func get_NeighboringFilesQueryImpl() throws -> UWP.StorageFileQueryResult? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NeighboringFilesQuery(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_NeighboringFilesQueryImpl(_ value: UWP.StorageFileQueryResult?) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NeighboringFilesQuery(pThis, RawPointer(value)))
            }
        }

    }

    public class ILauncherOptions3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherOptions3 }

        internal func get_IgnoreAppUriHandlersImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IgnoreAppUriHandlers(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IgnoreAppUriHandlersImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IgnoreAppUriHandlers(pThis, .init(from: value)))
            }
        }

    }

    public class ILauncherOptions4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherOptions4 }

        internal func get_LimitPickerToCurrentAppAndAppUriHandlersImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LimitPickerToCurrentAppAndAppUriHandlers(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LimitPickerToCurrentAppAndAppUriHandlersImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherOptions4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LimitPickerToCurrentAppAndAppUriHandlers(pThis, .init(from: value)))
            }
        }

    }

    public class ILauncherStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherStatics }

        internal func LaunchFileAsyncImpl(_ file: UWP.AnyIStorageFile?) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchFileAsync(pThis, _file, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchFileWithOptionsAsyncImpl(_ file: UWP.AnyIStorageFile?, _ options: UWP.LauncherOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchFileWithOptionsAsync(pThis, _file, RawPointer(options), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchUriAsyncImpl(_ uri: WindowsFoundation.Uri?) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchUriAsync(pThis, RawPointer(uri), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchUriWithOptionsAsyncImpl(_ uri: WindowsFoundation.Uri?, _ options: UWP.LauncherOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchUriWithOptionsAsync(pThis, RawPointer(uri), RawPointer(options), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ILauncherStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherStatics2 }

        internal func LaunchUriForResultsAsyncImpl(_ uri: WindowsFoundation.Uri?, _ options: UWP.LauncherOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriResult?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchUriForResultsAsync(pThis, RawPointer(uri), RawPointer(options), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchUriForResultsWithDataAsyncImpl(_ uri: WindowsFoundation.Uri?, _ options: UWP.LauncherOptions?, _ inputData: WindowsFoundation.ValueSet?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriResult?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchUriForResultsWithDataAsync(pThis, RawPointer(uri), RawPointer(options), RawPointer(inputData), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchUriWithDataAsyncImpl(_ uri: WindowsFoundation.Uri?, _ options: UWP.LauncherOptions?, _ inputData: WindowsFoundation.ValueSet?) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchUriWithDataAsync(pThis, RawPointer(uri), RawPointer(options), RawPointer(inputData), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal func QueryUriSupportAsyncImpl(_ uri: WindowsFoundation.Uri?, _ launchQuerySupportType: UWP.LaunchQuerySupportType) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchQuerySupportStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.QueryUriSupportAsync(pThis, RawPointer(uri), launchQuerySupportType, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.unwrapFrom(abi: operation)
        }

        internal func QueryUriSupportWithPackageFamilyNameAsyncImpl(_ uri: WindowsFoundation.Uri?, _ launchQuerySupportType: UWP.LaunchQuerySupportType, _ packageFamilyName: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchQuerySupportStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _packageFamilyName = try! HString(packageFamilyName)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.QueryUriSupportWithPackageFamilyNameAsync(pThis, RawPointer(uri), launchQuerySupportType, _packageFamilyName.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.unwrapFrom(abi: operation)
        }

        internal func QueryFileSupportAsyncImpl(_ file: UWP.StorageFile?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchQuerySupportStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.QueryFileSupportAsync(pThis, RawPointer(file), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.unwrapFrom(abi: operation)
        }

        internal func QueryFileSupportWithPackageFamilyNameAsyncImpl(_ file: UWP.StorageFile?, _ packageFamilyName: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchQuerySupportStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _packageFamilyName = try! HString(packageFamilyName)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.QueryFileSupportWithPackageFamilyNameAsync(pThis, RawPointer(file), _packageFamilyName.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.unwrapFrom(abi: operation)
        }

        internal func FindUriSchemeHandlersAsyncImpl(_ scheme: String) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _scheme = try! HString(scheme)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindUriSchemeHandlersAsync(pThis, _scheme.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.unwrapFrom(abi: operation)
        }

        internal func FindUriSchemeHandlersWithLaunchUriTypeAsyncImpl(_ scheme: String, _ launchQuerySupportType: UWP.LaunchQuerySupportType) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _scheme = try! HString(scheme)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindUriSchemeHandlersWithLaunchUriTypeAsync(pThis, _scheme.get(), launchQuerySupportType, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.unwrapFrom(abi: operation)
        }

        internal func FindFileHandlersAsyncImpl(_ `extension`: String) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _extension = try! HString(`extension`)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindFileHandlersAsync(pThis, _extension.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ILauncherStatics3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherStatics3 }

        internal func LaunchFolderAsyncImpl(_ folder: UWP.AnyIStorageFolder?) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let folderWrapper = __ABI_Windows_Storage.IStorageFolderWrapper(folder)
                let _folder = try! folderWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchFolderAsync(pThis, _folder, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchFolderWithOptionsAsyncImpl(_ folder: UWP.AnyIStorageFolder?, _ options: UWP.FolderLauncherOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let folderWrapper = __ABI_Windows_Storage.IStorageFolderWrapper(folder)
                let _folder = try! folderWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchFolderWithOptionsAsync(pThis, _folder, RawPointer(options), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ILauncherStatics4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherStatics4 }

        internal func QueryAppUriSupportAsyncImpl(_ uri: WindowsFoundation.Uri?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchQuerySupportStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.QueryAppUriSupportAsync(pThis, RawPointer(uri), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.unwrapFrom(abi: operation)
        }

        internal func QueryAppUriSupportWithPackageFamilyNameAsyncImpl(_ uri: WindowsFoundation.Uri?, _ packageFamilyName: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchQuerySupportStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _packageFamilyName = try! HString(packageFamilyName)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.QueryAppUriSupportWithPackageFamilyNameAsync(pThis, RawPointer(uri), _packageFamilyName.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.unwrapFrom(abi: operation)
        }

        internal func FindAppUriHandlersAsyncImpl(_ uri: WindowsFoundation.Uri?) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAppUriHandlersAsync(pThis, RawPointer(uri), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchUriForUserAsyncImpl(_ user: UWP.User?, _ uri: WindowsFoundation.Uri?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchUriForUserAsync(pThis, RawPointer(user), RawPointer(uri), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchUriWithOptionsForUserAsyncImpl(_ user: UWP.User?, _ uri: WindowsFoundation.Uri?, _ options: UWP.LauncherOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchUriWithOptionsForUserAsync(pThis, RawPointer(user), RawPointer(uri), RawPointer(options), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchUriWithDataForUserAsyncImpl(_ user: UWP.User?, _ uri: WindowsFoundation.Uri?, _ options: UWP.LauncherOptions?, _ inputData: WindowsFoundation.ValueSet?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchUriWithDataForUserAsync(pThis, RawPointer(user), RawPointer(uri), RawPointer(options), RawPointer(inputData), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchUriForResultsForUserAsyncImpl(_ user: UWP.User?, _ uri: WindowsFoundation.Uri?, _ options: UWP.LauncherOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriResult?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchUriForResultsForUserAsync(pThis, RawPointer(user), RawPointer(uri), RawPointer(options), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchUriForResultsWithDataForUserAsyncImpl(_ user: UWP.User?, _ uri: WindowsFoundation.Uri?, _ options: UWP.LauncherOptions?, _ inputData: WindowsFoundation.ValueSet?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriResult?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchUriForResultsWithDataForUserAsync(pThis, RawPointer(user), RawPointer(uri), RawPointer(options), RawPointer(inputData), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ILauncherStatics5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherStatics5 }

        internal func LaunchFolderPathAsyncImpl(_ path: String) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _path = try! HString(path)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics5.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchFolderPathAsync(pThis, _path.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchFolderPathWithOptionsAsyncImpl(_ path: String, _ options: UWP.FolderLauncherOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _path = try! HString(path)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics5.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchFolderPathWithOptionsAsync(pThis, _path.get(), RawPointer(options), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchFolderPathForUserAsyncImpl(_ user: UWP.User?, _ path: String) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _path = try! HString(path)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics5.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchFolderPathForUserAsync(pThis, RawPointer(user), _path.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal func LaunchFolderPathWithOptionsForUserAsyncImpl(_ user: UWP.User?, _ path: String, _ options: UWP.FolderLauncherOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _path = try! HString(path)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherStatics5.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchFolderPathWithOptionsForUserAsync(pThis, RawPointer(user), _path.get(), RawPointer(options), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ILauncherUIOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherUIOptions }

        internal func get_InvocationPointImpl() throws -> WindowsFoundation.Point? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherUIOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InvocationPoint(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointWrapper.unwrapFrom(abi: value)
        }

        internal func put_InvocationPointImpl(_ value: WindowsFoundation.Point?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherUIOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InvocationPoint(pThis, _value))
            }
        }

        internal func get_SelectionRectImpl() throws -> WindowsFoundation.Rect? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherUIOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionRect(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.unwrapFrom(abi: value)
        }

        internal func put_SelectionRectImpl(_ value: WindowsFoundation.Rect?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherUIOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionRect(pThis, _value))
            }
        }

        internal func get_PreferredPlacementImpl() throws -> UWP.Placement {
            var value: __x_ABI_CWindows_CUI_CPopups_CPlacement = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherUIOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredPlacement(pThis, &value))
            }
            return value
        }

        internal func put_PreferredPlacementImpl(_ value: UWP.Placement) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherUIOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredPlacement(pThis, value))
            }
        }

    }

    public class ILauncherViewOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CILauncherViewOptions }

        open func get_DesiredRemainingViewImpl() throws -> UWP.ViewSizePreference {
            var value: __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherViewOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredRemainingView(pThis, &value))
            }
            return value
        }

        open func put_DesiredRemainingViewImpl(_ value: UWP.ViewSizePreference) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CILauncherViewOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredRemainingView(pThis, value))
            }
        }

    }

    internal static var ILauncherViewOptionsVTable: __x_ABI_CWindows_CSystem_CILauncherViewOptionsVtbl = .init(
        QueryInterface: { ILauncherViewOptionsWrapper.queryInterface($0, $1, $2) },
        AddRef: { ILauncherViewOptionsWrapper.addRef($0) },
        Release: { ILauncherViewOptionsWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_System.ILauncherViewOptionsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.System.ILauncherViewOptions").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_DesiredRemainingView: {
            guard let __unwrapped__instance = ILauncherViewOptionsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.desiredRemainingView
            $1?.initialize(to: value)
            return S_OK
        },

        put_DesiredRemainingView: {
            guard let __unwrapped__instance = ILauncherViewOptionsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.ViewSizePreference = $1
            __unwrapped__instance.desiredRemainingView = value
            return S_OK
        }
    )

    public typealias ILauncherViewOptionsWrapper = InterfaceWrapperBase<__IMPL_Windows_System.ILauncherViewOptionsBridge>
    public class IUser: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIUser }

        internal func get_NonRoamableIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NonRoamableId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AuthenticationStatusImpl() throws -> UWP.UserAuthenticationStatus {
            var value: __x_ABI_CWindows_CSystem_CUserAuthenticationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AuthenticationStatus(pThis, &value))
            }
            return value
        }

        internal func get_TypeImpl() throws -> UWP.UserType {
            var value: __x_ABI_CWindows_CSystem_CUserType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        internal func GetPropertyAsyncImpl(_ value: String) throws -> WindowsFoundation.AnyIAsyncOperation<Any?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertyAsync(pThis, _value.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.unwrapFrom(abi: operation)
        }

        internal func GetPropertiesAsyncImpl(_ values: WindowsFoundation.AnyIVectorView<String>?) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIPropertySet?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let valuesWrapper = UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(values)
                let _values = try! valuesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertiesAsync(pThis, _values, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.unwrapFrom(abi: operation)
        }

        internal func GetPictureAsyncImpl(_ desiredSize: UWP.UserPictureSize) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStreamReference?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPictureAsync(pThis, desiredSize, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IUserAuthenticationStatusChangeDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IUserAuthenticationStatusChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs }

        internal func GetDeferralImpl() throws -> UWP.UserAuthenticationStatusChangeDeferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func get_UserImpl() throws -> UWP.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NewStatusImpl() throws -> UWP.UserAuthenticationStatus {
            var value: __x_ABI_CWindows_CSystem_CUserAuthenticationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewStatus(pThis, &value))
            }
            return value
        }

        internal func get_CurrentStatusImpl() throws -> UWP.UserAuthenticationStatus {
            var value: __x_ABI_CWindows_CSystem_CUserAuthenticationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentStatus(pThis, &value))
            }
            return value
        }

    }

    public class IUserChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIUserChangedEventArgs }

        internal func get_UserImpl() throws -> UWP.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IUserStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIUserStatics }

        internal func CreateWatcherImpl() throws -> UWP.UserWatcher? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWatcher(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func FindAllAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.User?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: operation)
        }

        internal func FindAllAsyncByTypeImpl(_ type: UWP.UserType) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.User?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsyncByType(pThis, type, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: operation)
        }

        internal func FindAllAsyncByTypeAndStatusImpl(_ type: UWP.UserType, _ status: UWP.UserAuthenticationStatus) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.User?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsyncByTypeAndStatus(pThis, type, status, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: operation)
        }

        internal func GetFromIdImpl(_ nonRoamableId: String) throws -> UWP.User? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _nonRoamableId = try! HString(nonRoamableId)
                _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromId(pThis, _nonRoamableId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IUserWatcher: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIUserWatcher }

        internal func get_StatusImpl() throws -> UWP.UserWatcherStatus {
            var value: __x_ABI_CWindows_CSystem_CUserWatcherStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal func StartImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
            }
        }

        internal func StopImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        internal func add_AddedImpl(_ handler: TypedEventHandler<UWP.UserWatcher?, UWP.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Added(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AddedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Added(pThis, token))
            }
        }

        internal func add_RemovedImpl(_ handler: TypedEventHandler<UWP.UserWatcher?, UWP.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Removed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_RemovedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Removed(pThis, token))
            }
        }

        internal func add_UpdatedImpl(_ handler: TypedEventHandler<UWP.UserWatcher?, UWP.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Updated(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_UpdatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Updated(pThis, token))
            }
        }

        internal func add_AuthenticationStatusChangedImpl(_ handler: TypedEventHandler<UWP.UserWatcher?, UWP.UserChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AuthenticationStatusChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AuthenticationStatusChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AuthenticationStatusChanged(pThis, token))
            }
        }

        internal func add_AuthenticationStatusChangingImpl(_ handler: TypedEventHandler<UWP.UserWatcher?, UWP.UserAuthenticationStatusChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AuthenticationStatusChanging(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AuthenticationStatusChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AuthenticationStatusChanging(pThis, token))
            }
        }

        internal func add_EnumerationCompletedImpl(_ handler: TypedEventHandler<UWP.UserWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnumerationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_EnumerationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnumerationCompleted(pThis, token))
            }
        }

        internal func add_StoppedImpl(_ handler: TypedEventHandler<UWP.UserWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Stopped(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_StoppedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIUserWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Stopped(pThis, token))
            }
        }

    }

}
// MARK - DispatcherQueueHandler
extension __ABI_Windows_System {
    public class DispatcherQueueHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSystem_CIDispatcherQueueHandler }

        open func InvokeImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CSystem_CIDispatcherQueueHandler.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis))
            }
        }

    }


    typealias DispatcherQueueHandlerWrapper = InterfaceWrapperBase<__IMPL_Windows_System.DispatcherQueueHandlerBridge>
    internal static var DispatcherQueueHandlerVTable: __x_ABI_CWindows_CSystem_CIDispatcherQueueHandlerVtbl = .init(
        QueryInterface: { DispatcherQueueHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { DispatcherQueueHandlerWrapper.addRef($0) },
        Release: { DispatcherQueueHandlerWrapper.release($0) },
        Invoke: {
            guard let __unwrapped__instance = DispatcherQueueHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            __unwrapped__instance()
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CWindows_CSystem_CIDispatcherQueueHandler {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_System.DispatcherQueueHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}


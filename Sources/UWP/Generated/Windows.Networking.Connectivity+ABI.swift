// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage: WindowsFoundation.IID {
    .init(Data1: 0xF769B039, Data2: 0xECA2, Data3: 0x45EB, Data4: ( 0xAD,0xE1,0xB0,0x36,0x8B,0x75,0x6C,0x49 ))// F769B039-ECA2-45EB-ADE1-B0368B756C49
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost: WindowsFoundation.IID {
    .init(Data1: 0xBAD7D829, Data2: 0x3416, Data3: 0x4B10, Data4: ( 0xA2,0x02,0xBA,0xC0,0xB0,0x75,0xBD,0xAE ))// BAD7D829-3416-4B10-A202-BAC0B075BDAE
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2: WindowsFoundation.IID {
    .init(Data1: 0x8E113A05, Data2: 0xE209, Data3: 0x4549, Data4: ( 0xBB,0x25,0x5E,0x0D,0xB6,0x91,0xCB,0x05 ))// 8E113A05-E209-4549-BB25-5E0DB691CB05
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile: WindowsFoundation.IID {
    .init(Data1: 0x71BA143C, Data2: 0x598E, Data3: 0x49D0, Data4: ( 0x84,0xEB,0x8F,0xEB,0xAE,0xDC,0xC1,0x95 ))// 71BA143C-598E-49D0-84EB-8FEBAEDCC195
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2: WindowsFoundation.IID {
    .init(Data1: 0xE2045145, Data2: 0x4C9F, Data3: 0x400C, Data4: ( 0x91,0x50,0x7E,0xC7,0xD6,0xE2,0x88,0x8A ))// E2045145-4C9F-400C-9150-7EC7D6E2888A
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3: WindowsFoundation.IID {
    .init(Data1: 0x578C2528, Data2: 0x4CD9, Data3: 0x4161, Data4: ( 0x80,0x45,0x20,0x1C,0xFD,0x5B,0x11,0x5C ))// 578C2528-4CD9-4161-8045-201CFD5B115C
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4: WindowsFoundation.IID {
    .init(Data1: 0x7A2D42CD, Data2: 0x81E0, Data3: 0x4AE6, Data4: ( 0xAB,0xED,0xAB,0x9C,0xA1,0x3E,0xB7,0x14 ))// 7A2D42CD-81E0-4AE6-ABED-AB9CA13EB714
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5: WindowsFoundation.IID {
    .init(Data1: 0x85361EC7, Data2: 0x9C73, Data3: 0x4BE0, Data4: ( 0x8F,0x14,0x57,0x8E,0xEC,0x71,0xEE,0x0E ))// 85361EC7-9C73-4BE0-8F14-578EEC71EE0E
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval: WindowsFoundation.IID {
    .init(Data1: 0x4FAA3FFF, Data2: 0x6746, Data3: 0x4824, Data4: ( 0xA9,0x64,0xEE,0xD8,0xE8,0x7F,0x87,0x09 ))// 4FAA3FFF-6746-4824-A964-EED8E87F8709
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus: WindowsFoundation.IID {
    .init(Data1: 0x977A8B8C, Data2: 0x3885, Data3: 0x40F3, Data4: ( 0x88,0x51,0x42,0xCD,0x2B,0xD5,0x68,0xBB ))// 977A8B8C-3885-40F3-8851-42CD2BD568BB
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage: WindowsFoundation.IID {
    .init(Data1: 0xB921492D, Data2: 0x3B44, Data3: 0x47FF, Data4: ( 0xB3,0x61,0xBE,0x59,0xE6,0x9E,0xD1,0xB0 ))// B921492D-3B44-47FF-B361-BE59E69ED1B0
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage: WindowsFoundation.IID {
    .init(Data1: 0xC1431DD3, Data2: 0xB146, Data3: 0x4D39, Data4: ( 0xB9,0x59,0x0C,0x69,0xB0,0x96,0xC5,0x12 ))// C1431DD3-B146-4D39-B959-0C69B096C512
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation: WindowsFoundation.IID {
    .init(Data1: 0xD85145E0, Data2: 0x138F, Data3: 0x47D7, Data4: ( 0x9B,0x3A,0x36,0xBB,0x48,0x8C,0xEF,0x33 ))// D85145E0-138F-47D7-9B3A-36BB488CEF33
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter: WindowsFoundation.IID {
    .init(Data1: 0x3B542E03, Data2: 0x5388, Data3: 0x496C, Data4: ( 0xA8,0xA3,0xAF,0xFD,0x39,0xAE,0xC2,0xE6 ))// 3B542E03-5388-496C-A8A3-AFFD39AEC2E6
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem: WindowsFoundation.IID {
    .init(Data1: 0x01BC4D39, Data2: 0xF5E0, Data3: 0x4567, Data4: ( 0xA2,0x8C,0x42,0x08,0x0C,0x83,0x1B,0x2B ))// 01BC4D39-F5E0-4567-A28C-42080C831B2B
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings: WindowsFoundation.IID {
    .init(Data1: 0x7CA07E8D, Data2: 0x917B, Data3: 0x4B5F, Data4: ( 0xB8,0x4D,0x28,0xF7,0xA5,0xAC,0x54,0x02 ))// 7CA07E8D-917B-4B5F-B84D-28F7A5AC5402
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage: WindowsFoundation.IID {
    .init(Data1: 0x49DA8FCE, Data2: 0x9985, Data3: 0x4927, Data4: ( 0xBF,0x5B,0x07,0x2B,0x5C,0x65,0xF8,0xD9 ))// 49DA8FCE-9985-4927-BF5B-072B5C65F8D9
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage: WindowsFoundation.IID {
    .init(Data1: 0x5EC69E04, Data2: 0x7931, Data3: 0x48C8, Data4: ( 0xB8,0xF3,0x46,0x30,0x0F,0xA4,0x27,0x28 ))// 5EC69E04-7931-48C8-B8F3-46300FA42728
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails: WindowsFoundation.IID {
    .init(Data1: 0x562098CB, Data2: 0xB35A, Data3: 0x4BF1, Data4: ( 0xA8,0x84,0xB7,0x55,0x7E,0x88,0xFF,0x86 ))// 562098CB-B35A-4BF1-A884-B7557E88FF86
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails: WindowsFoundation.IID {
    .init(Data1: 0x0E4DA8FE, Data2: 0x835F, Data3: 0x4DF3, Data4: ( 0x82,0xFD,0xDF,0x55,0x6E,0xBC,0x09,0xEF ))// 0E4DA8FE-835F-4DF3-82FD-DF556EBC09EF
}

private var IID___x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2: WindowsFoundation.IID {
    .init(Data1: 0x7A754EDE, Data2: 0xA1ED, Data3: 0x48B2, Data4: ( 0x8E,0x92,0xB4,0x60,0x03,0x3D,0x52,0xE2 ))// 7A754EDE-A1ED-48B2-8E92-B460033D52E2
}

public enum __ABI_Windows_Networking_Connectivity {
    public class IAttributedNetworkUsage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage }

        internal func get_BytesSentImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesSent(pThis, &value))
            }
            return value
        }

        internal func get_BytesReceivedImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesReceived(pThis, &value))
            }
            return value
        }

        internal func get_AttributionIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AttributionId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AttributionNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AttributionName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AttributionThumbnailImpl() throws -> UWP.AnyIRandomAccessStreamReference? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AttributionThumbnail(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper.unwrapFrom(abi: value)
        }

    }

    public class IConnectionCost: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost }

        internal func get_NetworkCostTypeImpl() throws -> UWP.NetworkCostType {
            var value: __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkCostType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkCostType(pThis, &value))
            }
            return value
        }

        internal func get_RoamingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Roaming(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_OverDataLimitImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OverDataLimit(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ApproachingDataLimitImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ApproachingDataLimit(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IConnectionCost2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2 }

        internal func get_BackgroundDataUsageRestrictedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionCost2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundDataUsageRestricted(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IConnectionProfile: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile }

        internal func get_ProfileNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfileName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func GetNetworkConnectivityLevelImpl() throws -> UWP.NetworkConnectivityLevel {
            var value: __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNetworkConnectivityLevel(pThis, &value))
            }
            return value
        }

        internal func GetNetworkNamesImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNetworkNames(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func GetConnectionCostImpl() throws -> UWP.ConnectionCost? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetConnectionCost(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetDataPlanStatusImpl() throws -> UWP.DataPlanStatus? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDataPlanStatus(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NetworkAdapterImpl() throws -> UWP.NetworkAdapter? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAdapter(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetLocalUsageImpl(_ StartTime: WindowsFoundation.DateTime, _ EndTime: WindowsFoundation.DateTime) throws -> UWP.DataUsage? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocalUsage(pThis, .from(swift: StartTime), .from(swift: EndTime), &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetLocalUsagePerRoamingStatesImpl(_ StartTime: WindowsFoundation.DateTime, _ EndTime: WindowsFoundation.DateTime, _ States: UWP.RoamingStates) throws -> UWP.DataUsage? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocalUsagePerRoamingStates(pThis, .from(swift: StartTime), .from(swift: EndTime), States, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NetworkSecuritySettingsImpl() throws -> UWP.NetworkSecuritySettings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkSecuritySettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IConnectionProfile2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2 }

        internal func get_IsWwanConnectionProfileImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsWwanConnectionProfile(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsWlanConnectionProfileImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsWlanConnectionProfile(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_WwanConnectionProfileDetailsImpl() throws -> UWP.WwanConnectionProfileDetails? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_WwanConnectionProfileDetails(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_WlanConnectionProfileDetailsImpl() throws -> UWP.WlanConnectionProfileDetails? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_WlanConnectionProfileDetails(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ServiceProviderGuidImpl() throws -> Foundation.UUID? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServiceProviderGuid(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_GUIDWrapper.unwrapFrom(abi: value)
        }

        internal func GetSignalBarsImpl() throws -> UInt8? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetSignalBars(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_byteWrapper.unwrapFrom(abi: value)
        }

        internal func GetDomainConnectivityLevelImpl() throws -> UWP.DomainConnectivityLevel {
            var value: __x_ABI_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDomainConnectivityLevel(pThis, &value))
            }
            return value
        }

        internal func GetNetworkUsageAsyncImpl(_ startTime: WindowsFoundation.DateTime, _ endTime: WindowsFoundation.DateTime, _ granularity: UWP.DataUsageGranularity, _ states: UWP.NetworkUsageStates) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.NetworkUsage?>?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNetworkUsageAsync(pThis, .from(swift: startTime), .from(swift: endTime), granularity, .from(swift: states), &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CNetworkUsageWrapper.unwrapFrom(abi: value)
        }

        internal func GetConnectivityIntervalsAsyncImpl(_ startTime: WindowsFoundation.DateTime, _ endTime: WindowsFoundation.DateTime, _ states: UWP.NetworkUsageStates) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.ConnectivityInterval?>?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetConnectivityIntervalsAsync(pThis, .from(swift: startTime), .from(swift: endTime), .from(swift: states), &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectivityIntervalWrapper.unwrapFrom(abi: value)
        }

    }

    public class IConnectionProfile3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3 }

        internal func GetAttributedNetworkUsageAsyncImpl(_ startTime: WindowsFoundation.DateTime, _ endTime: WindowsFoundation.DateTime, _ states: UWP.NetworkUsageStates) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AttributedNetworkUsage?>?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAttributedNetworkUsageAsync(pThis, .from(swift: startTime), .from(swift: endTime), .from(swift: states), &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CAttributedNetworkUsageWrapper.unwrapFrom(abi: value)
        }

    }

    public class IConnectionProfile4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4 }

        internal func GetProviderNetworkUsageAsyncImpl(_ startTime: WindowsFoundation.DateTime, _ endTime: WindowsFoundation.DateTime, _ states: UWP.NetworkUsageStates) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.ProviderNetworkUsage?>?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetProviderNetworkUsageAsync(pThis, .from(swift: startTime), .from(swift: endTime), .from(swift: states), &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CNetworking__CConnectivity__CProviderNetworkUsageWrapper.unwrapFrom(abi: value)
        }

    }

    public class IConnectionProfile5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5 }

        internal func get_CanDeleteImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDelete(pThis, &value))
            }
            return .init(from: value)
        }

        internal func TryDeleteAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.ConnectionProfileDeleteStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectionProfile5.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TryDeleteAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileDeleteStatusWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IConnectivityInterval: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval }

        internal func get_StartTimeImpl() throws -> WindowsFoundation.DateTime {
            var startTime: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartTime(pThis, &startTime))
            }
            return .from(abi: startTime)
        }

        internal func get_ConnectionDurationImpl() throws -> WindowsFoundation.TimeSpan {
            var duration: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIConnectivityInterval.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ConnectionDuration(pThis, &duration))
            }
            return .from(abi: duration)
        }

    }

    public class IDataPlanStatus: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus }

        internal func get_DataPlanUsageImpl() throws -> UWP.DataPlanUsage? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataPlanUsage(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DataLimitInMegabytesImpl() throws -> UInt32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataLimitInMegabytes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_UINT32Wrapper.unwrapFrom(abi: value)
        }

        internal func get_InboundBitsPerSecondImpl() throws -> UInt64? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InboundBitsPerSecond(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_UINT64Wrapper.unwrapFrom(abi: value)
        }

        internal func get_OutboundBitsPerSecondImpl() throws -> UInt64? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutboundBitsPerSecond(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_UINT64Wrapper.unwrapFrom(abi: value)
        }

        internal func get_NextBillingCycleImpl() throws -> WindowsFoundation.DateTime? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextBillingCycle(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper.unwrapFrom(abi: value)
        }

        internal func get_MaxTransferSizeInMegabytesImpl() throws -> UInt32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxTransferSizeInMegabytes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_UINT32Wrapper.unwrapFrom(abi: value)
        }

    }

    public class IDataPlanUsage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage }

        internal func get_MegabytesUsedImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MegabytesUsed(pThis, &value))
            }
            return value
        }

        internal func get_LastSyncTimeImpl() throws -> WindowsFoundation.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIDataPlanUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastSyncTime(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IDataUsage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage }

        internal func get_BytesSentImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesSent(pThis, &value))
            }
            return value
        }

        internal func get_BytesReceivedImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIDataUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesReceived(pThis, &value))
            }
            return value
        }

    }

    public class IIPInformation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation }

        internal func get_NetworkAdapterImpl() throws -> UWP.NetworkAdapter? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAdapter(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PrefixLengthImpl() throws -> UInt8? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIIPInformation.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrefixLength(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_byteWrapper.unwrapFrom(abi: value)
        }

    }

    public class INetworkAdapter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter }

        internal func get_OutboundMaxBitsPerSecondImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutboundMaxBitsPerSecond(pThis, &value))
            }
            return value
        }

        internal func get_InboundMaxBitsPerSecondImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InboundMaxBitsPerSecond(pThis, &value))
            }
            return value
        }

        internal func get_IanaInterfaceTypeImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IanaInterfaceType(pThis, &value))
            }
            return value
        }

        internal func get_NetworkItemImpl() throws -> UWP.NetworkItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NetworkAdapterIdImpl() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAdapterId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func GetConnectedProfileAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.ConnectionProfile?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetConnectedProfileAsync(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CNetworking__CConnectivity__CConnectionProfileWrapper.unwrapFrom(abi: value)
        }

    }

    public class INetworkItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem }

        internal func get_NetworkIdImpl() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func GetNetworkTypesImpl() throws -> UWP.NetworkTypes {
            var value: __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkTypes = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNetworkTypes(pThis, &value))
            }
            return value
        }

    }

    public class INetworkSecuritySettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings }

        internal func get_NetworkAuthenticationTypeImpl() throws -> UWP.NetworkAuthenticationType {
            var value: __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAuthenticationType(pThis, &value))
            }
            return value
        }

        internal func get_NetworkEncryptionTypeImpl() throws -> UWP.NetworkEncryptionType {
            var value: __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkEncryptionType(pThis, &value))
            }
            return value
        }

    }

    public class INetworkUsage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage }

        internal func get_BytesSentImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesSent(pThis, &value))
            }
            return value
        }

        internal func get_BytesReceivedImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesReceived(pThis, &value))
            }
            return value
        }

        internal func get_ConnectionDurationImpl() throws -> WindowsFoundation.TimeSpan {
            var duration: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ConnectionDuration(pThis, &duration))
            }
            return .from(abi: duration)
        }

    }

    public class IProviderNetworkUsage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage }

        internal func get_BytesSentImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesSent(pThis, &value))
            }
            return value
        }

        internal func get_BytesReceivedImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesReceived(pThis, &value))
            }
            return value
        }

        internal func get_ProviderIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IWlanConnectionProfileDetails: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails }

        internal func GetConnectedSsidImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetConnectedSsid(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IWwanConnectionProfileDetails: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails }

        internal func get_HomeProviderIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HomeProviderId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AccessPointNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessPointName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func GetNetworkRegistrationStateImpl() throws -> UWP.WwanNetworkRegistrationState {
            var value: __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNetworkRegistrationState(pThis, &value))
            }
            return value
        }

        internal func GetCurrentDataClassImpl() throws -> UWP.WwanDataClass {
            var value: __x_ABI_CWindows_CNetworking_CConnectivity_CWwanDataClass = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentDataClass(pThis, &value))
            }
            return value
        }

    }

    public class IWwanConnectionProfileDetails2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2 }

        internal func get_IPKindImpl() throws -> UWP.WwanNetworkIPKind {
            var value: __x_ABI_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IPKind(pThis, &value))
            }
            return value
        }

        internal func get_PurposeGuidsImpl() throws -> WindowsFoundation.AnyIVectorView<Foundation.UUID>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PurposeGuids(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_GUIDWrapper.unwrapFrom(abi: value)
        }

    }

}
extension __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkUsageStates {
        public static func from(swift: UWP.NetworkUsageStates) -> __x_ABI_CWindows_CNetworking_CConnectivity_CNetworkUsageStates {
            .init(Roaming: swift.roaming, Shared: swift.shared)
        }
    }
    
// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Windows_Graphics_DirectX_Direct3D11 {
    public enum IDirect3DDeviceBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice
        public typealias SwiftABI = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DDevice
        public typealias SwiftProjection = AnyIDirect3DDevice
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IDirect3DDeviceImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DDeviceVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IDirect3DDeviceImpl: IDirect3DDevice, WinRTAbiImpl {
        fileprivate typealias Bridge = IDirect3DDeviceBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.idirect3ddevice.trim)
        fileprivate func trim() throws {
            try _default.TrimImpl()
        }

        private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.idirect3ddevice.close)
        fileprivate func close() throws {
            try _IClosable.CloseImpl()
        }

    }

    public enum IDirect3DSurfaceBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface
        public typealias SwiftABI = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurface
        public typealias SwiftProjection = AnyIDirect3DSurface
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IDirect3DSurfaceImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IDirect3DSurfaceImpl: IDirect3DSurface, WinRTAbiImpl {
        fileprivate typealias Bridge = IDirect3DSurfaceBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.idirect3dsurface.description)
        fileprivate var description : Direct3DSurfaceDescription {
            get { try! _default.get_DescriptionImpl() }
        }

        private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.idirect3dsurface.close)
        fileprivate func close() throws {
            try _IClosable.CloseImpl()
        }

    }

}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.uicontext)
public final class UIContext : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI.IUIContext
    private typealias CABI = __x_ABI_CWindows_CUI_CIUIContext
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CIUIContext>?) -> UIContext? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.color)
public struct Color: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.color.a)
    public var a: UInt8 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.color.r)
    public var r: UInt8 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.color.g)
    public var g: UInt8 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.color.b)
    public var b: UInt8 = 0
    public init() {}
    public init(a: UInt8, r: UInt8, g: UInt8, b: UInt8) {
        self.a = a
        self.r = r
        self.g = g
        self.b = b
    }
    public static func from(abi: __x_ABI_CWindows_CUI_CColor) -> Color {
        .init(a: abi.A, r: abi.R, g: abi.G, b: abi.B)
    }
}


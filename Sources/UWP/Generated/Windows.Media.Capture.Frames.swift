// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegetpropertystatus)
public typealias MediaFrameSourceGetPropertyStatus = __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceGetPropertyStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcekind)
public typealias MediaFrameSourceKind = __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcesetpropertystatus)
public typealias MediaFrameSourceSetPropertyStatus = __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceSetPropertyStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.depthmediaframeformat)
public final class DepthMediaFrameFormat : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Capture_Frames.IDepthMediaFrameFormat
    private typealias CABI = __x_ABI_CWindows_CMedia_CCapture_CFrames_CIDepthMediaFrameFormat
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CCapture_CFrames_CIDepthMediaFrameFormat>?) -> DepthMediaFrameFormat? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.depthmediaframeformat.depthscaleinmeters)
    public var depthScaleInMeters : Double {
        get { try! _default.get_DepthScaleInMetersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.depthmediaframeformat.videoformat)
    public var videoFormat : VideoMediaFrameFormat! {
        get { try! _default.get_VideoFormatImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframeformat)
public final class MediaFrameFormat : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Capture_Frames.IMediaFrameFormat
    private typealias CABI = __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameFormat
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameFormat>?) -> MediaFrameFormat? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframeformat.framerate)
    public var frameRate : UWP.MediaRatio! {
        get { try! _default.get_FrameRateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframeformat.majortype)
    public var majorType : String {
        get { try! _default.get_MajorTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframeformat.properties)
    public var properties : WindowsFoundation.AnyIMapView<Foundation.UUID, Any?>! {
        get { try! _default.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframeformat.subtype)
    public var subtype : String {
        get { try! _default.get_SubtypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframeformat.videoformat)
    public var videoFormat : VideoMediaFrameFormat! {
        get { try! _default.get_VideoFormatImpl() }
    }

    private lazy var _IMediaFrameFormat2: __ABI_Windows_Media_Capture_Frames.IMediaFrameFormat2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframeformat.audioencodingproperties)
    public var audioEncodingProperties : UWP.AudioEncodingProperties! {
        get { try! _IMediaFrameFormat2.get_AudioEncodingPropertiesImpl() }
    }

    deinit {
        _default = nil
        _IMediaFrameFormat2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesource)
public final class MediaFrameSource : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Capture_Frames.IMediaFrameSource
    private typealias CABI = __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource>?) -> MediaFrameSource? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesource.setformatasync)
    public func setFormatAsync(_ format: MediaFrameFormat!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SetFormatAsyncImpl(format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesource.trygetcameraintrinsics)
    public func tryGetCameraIntrinsics(_ format: MediaFrameFormat!) throws -> UWP.CameraIntrinsics! {
        try _default.TryGetCameraIntrinsicsImpl(format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesource.controller)
    public var controller : MediaFrameSourceController! {
        get { try! _default.get_ControllerImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesource.currentformat)
    public var currentFormat : MediaFrameFormat! {
        get { try! _default.get_CurrentFormatImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesource.info)
    public var info : MediaFrameSourceInfo! {
        get { try! _default.get_InfoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesource.supportedformats)
    public var supportedFormats : WindowsFoundation.AnyIVectorView<MediaFrameFormat?>! {
        get { try! _default.get_SupportedFormatsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesource.formatchanged)
    public lazy var formatChanged : Event<TypedEventHandler<MediaFrameSource?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FormatChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FormatChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcecontroller)
public final class MediaFrameSourceController : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Capture_Frames.IMediaFrameSourceController
    private typealias CABI = __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSourceController
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSourceController>?) -> MediaFrameSourceController? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcecontroller.getpropertyasync)
    public func getPropertyAsync(_ propertyId: String) throws -> WindowsFoundation.AnyIAsyncOperation<MediaFrameSourceGetPropertyResult?>! {
        try _default.GetPropertyAsyncImpl(propertyId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcecontroller.setpropertyasync)
    public func setPropertyAsync(_ propertyId: String, _ propertyValue: Any!) throws -> WindowsFoundation.AnyIAsyncOperation<MediaFrameSourceSetPropertyStatus>! {
        try _default.SetPropertyAsyncImpl(propertyId, propertyValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcecontroller.videodevicecontroller)
    public var videoDeviceController : UWP.VideoDeviceController! {
        get { try! _default.get_VideoDeviceControllerImpl() }
    }

    private lazy var _IMediaFrameSourceController2: __ABI_Windows_Media_Capture_Frames.IMediaFrameSourceController2! = getInterfaceForCaching()
    private lazy var _IMediaFrameSourceController3: __ABI_Windows_Media_Capture_Frames.IMediaFrameSourceController3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcecontroller.audiodevicecontroller)
    public var audioDeviceController : UWP.AudioDeviceController! {
        get { try! _IMediaFrameSourceController3.get_AudioDeviceControllerImpl() }
    }

    deinit {
        _default = nil
        _IMediaFrameSourceController2 = nil
        _IMediaFrameSourceController3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegetpropertyresult)
public final class MediaFrameSourceGetPropertyResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Capture_Frames.IMediaFrameSourceGetPropertyResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSourceGetPropertyResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSourceGetPropertyResult>?) -> MediaFrameSourceGetPropertyResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegetpropertyresult.status)
    public var status : MediaFrameSourceGetPropertyStatus {
        get { try! _default.get_StatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegetpropertyresult.value)
    public var value : Any! {
        get { try! _default.get_ValueImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegroup)
public final class MediaFrameSourceGroup : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Capture_Frames.IMediaFrameSourceGroup
    private typealias CABI = __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSourceGroup
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSourceGroup>?) -> MediaFrameSourceGroup? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IMediaFrameSourceGroupStatics: __ABI_Windows_Media_Capture_Frames.IMediaFrameSourceGroupStatics = try! RoGetActivationFactory(HString("Windows.Media.Capture.Frames.MediaFrameSourceGroup"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegroup.findallasync)
    public static func findAllAsync() -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<MediaFrameSourceGroup?>?>! {
        return try! _IMediaFrameSourceGroupStatics.FindAllAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegroup.fromidasync)
    public static func fromIdAsync(_ id: String) -> WindowsFoundation.AnyIAsyncOperation<MediaFrameSourceGroup?>! {
        return try! _IMediaFrameSourceGroupStatics.FromIdAsyncImpl(id)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegroup.getdeviceselector)
    public static func getDeviceSelector() -> String {
        return try! _IMediaFrameSourceGroupStatics.GetDeviceSelectorImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegroup.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegroup.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourcegroup.sourceinfos)
    public var sourceInfos : WindowsFoundation.AnyIVectorView<MediaFrameSourceInfo?>! {
        get { try! _default.get_SourceInfosImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourceinfo)
public final class MediaFrameSourceInfo : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Capture_Frames.IMediaFrameSourceInfo
    private typealias CABI = __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSourceInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSourceInfo>?) -> MediaFrameSourceInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourceinfo.coordinatesystem)
    public var coordinateSystem : UWP.SpatialCoordinateSystem! {
        get { try! _default.get_CoordinateSystemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourceinfo.deviceinformation)
    public var deviceInformation : UWP.DeviceInformation! {
        get { try! _default.get_DeviceInformationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourceinfo.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourceinfo.mediastreamtype)
    public var mediaStreamType : UWP.MediaStreamType {
        get { try! _default.get_MediaStreamTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourceinfo.properties)
    public var properties : WindowsFoundation.AnyIMapView<Foundation.UUID, Any?>! {
        get { try! _default.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourceinfo.sourcegroup)
    public var sourceGroup : MediaFrameSourceGroup! {
        get { try! _default.get_SourceGroupImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourceinfo.sourcekind)
    public var sourceKind : MediaFrameSourceKind {
        get { try! _default.get_SourceKindImpl() }
    }

    private lazy var _IMediaFrameSourceInfo2: __ABI_Windows_Media_Capture_Frames.IMediaFrameSourceInfo2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourceinfo.profileid)
    public var profileId : String {
        get { try! _IMediaFrameSourceInfo2.get_ProfileIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.mediaframesourceinfo.videoprofilemediadescription)
    public var videoProfileMediaDescription : WindowsFoundation.AnyIVectorView<UWP.MediaCaptureVideoProfileMediaDescription?>! {
        get { try! _IMediaFrameSourceInfo2.get_VideoProfileMediaDescriptionImpl() }
    }

    deinit {
        _default = nil
        _IMediaFrameSourceInfo2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.videomediaframeformat)
public final class VideoMediaFrameFormat : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Capture_Frames.IVideoMediaFrameFormat
    private typealias CABI = __x_ABI_CWindows_CMedia_CCapture_CFrames_CIVideoMediaFrameFormat
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CCapture_CFrames_CIVideoMediaFrameFormat>?) -> VideoMediaFrameFormat? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.videomediaframeformat.depthformat)
    public var depthFormat : DepthMediaFrameFormat! {
        get { try! _default.get_DepthFormatImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.videomediaframeformat.height)
    public var height : UInt32 {
        get { try! _default.get_HeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.videomediaframeformat.mediaframeformat)
    public var mediaFrameFormat : MediaFrameFormat! {
        get { try! _default.get_MediaFrameFormatImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.capture.frames.videomediaframeformat.width)
    public var width : UInt32 {
        get { try! _default.get_WidthImpl() }
    }

    deinit {
        _default = nil
    }
}

extension UWP.MediaFrameSourceGetPropertyStatus {
    public static var success : UWP.MediaFrameSourceGetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceGetPropertyStatus_Success
    }
    public static var unknownFailure : UWP.MediaFrameSourceGetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceGetPropertyStatus_UnknownFailure
    }
    public static var notSupported : UWP.MediaFrameSourceGetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceGetPropertyStatus_NotSupported
    }
    public static var deviceNotAvailable : UWP.MediaFrameSourceGetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceGetPropertyStatus_DeviceNotAvailable
    }
    public static var maxPropertyValueSizeTooSmall : UWP.MediaFrameSourceGetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceGetPropertyStatus_MaxPropertyValueSizeTooSmall
    }
    public static var maxPropertyValueSizeRequired : UWP.MediaFrameSourceGetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceGetPropertyStatus_MaxPropertyValueSizeRequired
    }
}
extension UWP.MediaFrameSourceGetPropertyStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.MediaFrameSourceKind {
    public static var custom : UWP.MediaFrameSourceKind {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceKind_Custom
    }
    public static var color : UWP.MediaFrameSourceKind {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceKind_Color
    }
    public static var infrared : UWP.MediaFrameSourceKind {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceKind_Infrared
    }
    public static var depth : UWP.MediaFrameSourceKind {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceKind_Depth
    }
    public static var audio : UWP.MediaFrameSourceKind {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceKind_Audio
    }
    public static var image : UWP.MediaFrameSourceKind {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceKind_Image
    }
}
extension UWP.MediaFrameSourceKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.MediaFrameSourceSetPropertyStatus {
    public static var success : UWP.MediaFrameSourceSetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceSetPropertyStatus_Success
    }
    public static var unknownFailure : UWP.MediaFrameSourceSetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceSetPropertyStatus_UnknownFailure
    }
    public static var notSupported : UWP.MediaFrameSourceSetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceSetPropertyStatus_NotSupported
    }
    public static var invalidValue : UWP.MediaFrameSourceSetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceSetPropertyStatus_InvalidValue
    }
    public static var deviceNotAvailable : UWP.MediaFrameSourceSetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceSetPropertyStatus_DeviceNotAvailable
    }
    public static var notInControl : UWP.MediaFrameSourceSetPropertyStatus {
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CMediaFrameSourceSetPropertyStatus_NotInControl
    }
}
extension UWP.MediaFrameSourceSetPropertyStatus: @retroactive Hashable, @retroactive Codable {}


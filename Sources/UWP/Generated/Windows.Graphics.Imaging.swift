// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapalphamode)
public typealias BitmapAlphaMode = __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbufferaccessmode)
public typealias BitmapBufferAccessMode = __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapflip)
public typealias BitmapFlip = __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapinterpolationmode)
public typealias BitmapInterpolationMode = __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappixelformat)
public typealias BitmapPixelFormat = __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaprotation)
public typealias BitmapRotation = __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.colormanagementmode)
public typealias ColorManagementMode = __x_ABI_CWindows_CGraphics_CImaging_CColorManagementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.exiforientationmode)
public typealias ExifOrientationMode = __x_ABI_CWindows_CGraphics_CImaging_CExifOrientationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.jpegsubsamplingmode)
public typealias JpegSubsamplingMode = __x_ABI_CWindows_CGraphics_CImaging_CJpegSubsamplingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.pngfiltermode)
public typealias PngFilterMode = __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.tiffcompressionmode)
public typealias TiffCompressionMode = __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbuffer)
public final class BitmapBuffer : WinRTClass, WindowsFoundation.IClosable, WindowsFoundation.IMemoryBuffer {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapBuffer
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer>?) -> BitmapBuffer? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbuffer.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IMemoryBuffer: __ABI_Windows_Foundation.IMemoryBuffer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbuffer.createreference)
    public func createReference() throws -> WindowsFoundation.AnyIMemoryBufferReference! {
        try _IMemoryBuffer.CreateReferenceImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbuffer.getplanecount)
    public func getPlaneCount() throws -> Int32 {
        try _default.GetPlaneCountImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbuffer.getplanedescription)
    public func getPlaneDescription(_ index: Int32) throws -> BitmapPlaneDescription {
        try _default.GetPlaneDescriptionImpl(index)
    }

    deinit {
        _IClosable = nil
        _IMemoryBuffer = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapcodecinformation)
public final class BitmapCodecInformation : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapCodecInformation
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation>?) -> BitmapCodecInformation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapcodecinformation.codecid)
    public var codecId : Foundation.UUID {
        get { try! _default.get_CodecIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapcodecinformation.fileextensions)
    public var fileExtensions : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_FileExtensionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapcodecinformation.friendlyname)
    public var friendlyName : String {
        get { try! _default.get_FriendlyNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapcodecinformation.mimetypes)
    public var mimeTypes : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_MimeTypesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder)
public final class BitmapDecoder : WinRTClass, IBitmapFrame, IBitmapFrameWithSoftwareBitmap {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapDecoder
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder>?) -> BitmapDecoder? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IBitmapDecoderStatics: __ABI_Windows_Graphics_Imaging.IBitmapDecoderStatics = try! RoGetActivationFactory(HString("Windows.Graphics.Imaging.BitmapDecoder"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.getdecoderinformationenumerator)
    public static func getDecoderInformationEnumerator() -> WindowsFoundation.AnyIVectorView<BitmapCodecInformation?>! {
        return try! _IBitmapDecoderStatics.GetDecoderInformationEnumeratorImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.createasync)
    public static func createAsync(_ stream: UWP.AnyIRandomAccessStream!) -> WindowsFoundation.AnyIAsyncOperation<BitmapDecoder?>! {
        return try! _IBitmapDecoderStatics.CreateAsyncImpl(stream)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.createasync)
    public static func createAsync(_ decoderId: Foundation.UUID, _ stream: UWP.AnyIRandomAccessStream!) -> WindowsFoundation.AnyIAsyncOperation<BitmapDecoder?>! {
        return try! _IBitmapDecoderStatics.CreateWithIdAsyncImpl(decoderId, stream)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.bmpdecoderid)
    public static var bmpDecoderId : Foundation.UUID {
        get { try! _IBitmapDecoderStatics.get_BmpDecoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.gifdecoderid)
    public static var gifDecoderId : Foundation.UUID {
        get { try! _IBitmapDecoderStatics.get_GifDecoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.icodecoderid)
    public static var icoDecoderId : Foundation.UUID {
        get { try! _IBitmapDecoderStatics.get_IcoDecoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.jpegdecoderid)
    public static var jpegDecoderId : Foundation.UUID {
        get { try! _IBitmapDecoderStatics.get_JpegDecoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.jpegxrdecoderid)
    public static var jpegXRDecoderId : Foundation.UUID {
        get { try! _IBitmapDecoderStatics.get_JpegXRDecoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.pngdecoderid)
    public static var pngDecoderId : Foundation.UUID {
        get { try! _IBitmapDecoderStatics.get_PngDecoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.tiffdecoderid)
    public static var tiffDecoderId : Foundation.UUID {
        get { try! _IBitmapDecoderStatics.get_TiffDecoderIdImpl() }
    }

    private static let _IBitmapDecoderStatics2: __ABI_Windows_Graphics_Imaging.IBitmapDecoderStatics2 = try! RoGetActivationFactory(HString("Windows.Graphics.Imaging.BitmapDecoder"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.heifdecoderid)
    public static var heifDecoderId : Foundation.UUID {
        get { try! _IBitmapDecoderStatics2.get_HeifDecoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.webpdecoderid)
    public static var webpDecoderId : Foundation.UUID {
        get { try! _IBitmapDecoderStatics2.get_WebpDecoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.getpreviewasync)
    public func getPreviewAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ImageStream?>! {
        try _default.GetPreviewAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.getframeasync)
    public func getFrameAsync(_ frameIndex: UInt32) throws -> WindowsFoundation.AnyIAsyncOperation<BitmapFrame?>! {
        try _default.GetFrameAsyncImpl(frameIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.bitmapcontainerproperties)
    public var bitmapContainerProperties : BitmapPropertiesView! {
        get { try! _default.get_BitmapContainerPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.decoderinformation)
    public var decoderInformation : BitmapCodecInformation! {
        get { try! _default.get_DecoderInformationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.framecount)
    public var frameCount : UInt32 {
        get { try! _default.get_FrameCountImpl() }
    }

    private lazy var _IBitmapFrame: __ABI_Windows_Graphics_Imaging.IBitmapFrame! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.getthumbnailasync)
    public func getThumbnailAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ImageStream?>! {
        try _IBitmapFrame.GetThumbnailAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.getpixeldataasync)
    public func getPixelDataAsync() throws -> WindowsFoundation.AnyIAsyncOperation<PixelDataProvider?>! {
        try _IBitmapFrame.GetPixelDataAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.getpixeldataasync)
    public func getPixelDataAsync(_ pixelFormat: BitmapPixelFormat, _ alphaMode: BitmapAlphaMode, _ transform: BitmapTransform!, _ exifOrientationMode: ExifOrientationMode, _ colorManagementMode: ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<PixelDataProvider?>! {
        try _IBitmapFrame.GetPixelDataTransformedAsyncImpl(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.bitmapalphamode)
    public var bitmapAlphaMode : BitmapAlphaMode {
        get { try! _IBitmapFrame.get_BitmapAlphaModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.bitmappixelformat)
    public var bitmapPixelFormat : BitmapPixelFormat {
        get { try! _IBitmapFrame.get_BitmapPixelFormatImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.bitmapproperties)
    public var bitmapProperties : BitmapPropertiesView! {
        get { try! _IBitmapFrame.get_BitmapPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.dpix)
    public var dpiX : Double {
        get { try! _IBitmapFrame.get_DpiXImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.dpiy)
    public var dpiY : Double {
        get { try! _IBitmapFrame.get_DpiYImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.orientedpixelheight)
    public var orientedPixelHeight : UInt32 {
        get { try! _IBitmapFrame.get_OrientedPixelHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.orientedpixelwidth)
    public var orientedPixelWidth : UInt32 {
        get { try! _IBitmapFrame.get_OrientedPixelWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.pixelheight)
    public var pixelHeight : UInt32 {
        get { try! _IBitmapFrame.get_PixelHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.pixelwidth)
    public var pixelWidth : UInt32 {
        get { try! _IBitmapFrame.get_PixelWidthImpl() }
    }

    private lazy var _IBitmapFrameWithSoftwareBitmap: __ABI_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmap! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.getsoftwarebitmapasync)
    public func getSoftwareBitmapAsync() throws -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
        try _IBitmapFrameWithSoftwareBitmap.GetSoftwareBitmapAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.getsoftwarebitmapasync)
    public func getSoftwareBitmapAsync(_ pixelFormat: BitmapPixelFormat, _ alphaMode: BitmapAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
        try _IBitmapFrameWithSoftwareBitmap.GetSoftwareBitmapConvertedAsyncImpl(pixelFormat, alphaMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapdecoder.getsoftwarebitmapasync)
    public func getSoftwareBitmapAsync(_ pixelFormat: BitmapPixelFormat, _ alphaMode: BitmapAlphaMode, _ transform: BitmapTransform!, _ exifOrientationMode: ExifOrientationMode, _ colorManagementMode: ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
        try _IBitmapFrameWithSoftwareBitmap.GetSoftwareBitmapTransformedAsyncImpl(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode)
    }

    deinit {
        _default = nil
        _IBitmapFrame = nil
        _IBitmapFrameWithSoftwareBitmap = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder)
public final class BitmapEncoder : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapEncoder
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder>?) -> BitmapEncoder? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IBitmapEncoderStatics: __ABI_Windows_Graphics_Imaging.IBitmapEncoderStatics = try! RoGetActivationFactory(HString("Windows.Graphics.Imaging.BitmapEncoder"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.getencoderinformationenumerator)
    public static func getEncoderInformationEnumerator() -> WindowsFoundation.AnyIVectorView<BitmapCodecInformation?>! {
        return try! _IBitmapEncoderStatics.GetEncoderInformationEnumeratorImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.createasync)
    public static func createAsync(_ encoderId: Foundation.UUID, _ stream: UWP.AnyIRandomAccessStream!) -> WindowsFoundation.AnyIAsyncOperation<BitmapEncoder?>! {
        return try! _IBitmapEncoderStatics.CreateAsyncImpl(encoderId, stream)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.createasync)
    public static func createAsync(_ encoderId: Foundation.UUID, _ stream: UWP.AnyIRandomAccessStream!, _ encodingOptions: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, BitmapTypedValue?>?>!) -> WindowsFoundation.AnyIAsyncOperation<BitmapEncoder?>! {
        return try! _IBitmapEncoderStatics.CreateWithEncodingOptionsAsyncImpl(encoderId, stream, encodingOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.createfortranscodingasync)
    public static func createForTranscodingAsync(_ stream: UWP.AnyIRandomAccessStream!, _ bitmapDecoder: BitmapDecoder!) -> WindowsFoundation.AnyIAsyncOperation<BitmapEncoder?>! {
        return try! _IBitmapEncoderStatics.CreateForTranscodingAsyncImpl(stream, bitmapDecoder)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.createforinplacepropertyencodingasync)
    public static func createForInPlacePropertyEncodingAsync(_ bitmapDecoder: BitmapDecoder!) -> WindowsFoundation.AnyIAsyncOperation<BitmapEncoder?>! {
        return try! _IBitmapEncoderStatics.CreateForInPlacePropertyEncodingAsyncImpl(bitmapDecoder)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.bmpencoderid)
    public static var bmpEncoderId : Foundation.UUID {
        get { try! _IBitmapEncoderStatics.get_BmpEncoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.gifencoderid)
    public static var gifEncoderId : Foundation.UUID {
        get { try! _IBitmapEncoderStatics.get_GifEncoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.jpegencoderid)
    public static var jpegEncoderId : Foundation.UUID {
        get { try! _IBitmapEncoderStatics.get_JpegEncoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.jpegxrencoderid)
    public static var jpegXREncoderId : Foundation.UUID {
        get { try! _IBitmapEncoderStatics.get_JpegXREncoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.pngencoderid)
    public static var pngEncoderId : Foundation.UUID {
        get { try! _IBitmapEncoderStatics.get_PngEncoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.tiffencoderid)
    public static var tiffEncoderId : Foundation.UUID {
        get { try! _IBitmapEncoderStatics.get_TiffEncoderIdImpl() }
    }

    private static let _IBitmapEncoderStatics2: __ABI_Windows_Graphics_Imaging.IBitmapEncoderStatics2 = try! RoGetActivationFactory(HString("Windows.Graphics.Imaging.BitmapEncoder"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.heifencoderid)
    public static var heifEncoderId : Foundation.UUID {
        get { try! _IBitmapEncoderStatics2.get_HeifEncoderIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.gotonextframeasync)
    public func goToNextFrameAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.GoToNextFrameAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.gotonextframeasync)
    public func goToNextFrameAsync(_ encodingOptions: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, BitmapTypedValue?>?>!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.GoToNextFrameWithEncodingOptionsAsyncImpl(encodingOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.flushasync)
    public func flushAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.FlushAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.bitmapcontainerproperties)
    public var bitmapContainerProperties : BitmapProperties! {
        get { try! _default.get_BitmapContainerPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.bitmapproperties)
    public var bitmapProperties : BitmapProperties! {
        get { try! _default.get_BitmapPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.bitmaptransform)
    public var bitmapTransform : BitmapTransform! {
        get { try! _default.get_BitmapTransformImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.encoderinformation)
    public var encoderInformation : BitmapCodecInformation! {
        get { try! _default.get_EncoderInformationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.generatedthumbnailheight)
    public var generatedThumbnailHeight : UInt32 {
        get { try! _default.get_GeneratedThumbnailHeightImpl() }
        set { try! _default.put_GeneratedThumbnailHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.generatedthumbnailwidth)
    public var generatedThumbnailWidth : UInt32 {
        get { try! _default.get_GeneratedThumbnailWidthImpl() }
        set { try! _default.put_GeneratedThumbnailWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.isthumbnailgenerated)
    public var isThumbnailGenerated : Bool {
        get { try! _default.get_IsThumbnailGeneratedImpl() }
        set { try! _default.put_IsThumbnailGeneratedImpl(newValue) }
    }

    private lazy var _IBitmapEncoderWithSoftwareBitmap: __ABI_Windows_Graphics_Imaging.IBitmapEncoderWithSoftwareBitmap! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapencoder.setsoftwarebitmap)
    public func setSoftwareBitmap(_ bitmap: SoftwareBitmap!) throws {
        try _IBitmapEncoderWithSoftwareBitmap.SetSoftwareBitmapImpl(bitmap)
    }

    deinit {
        _default = nil
        _IBitmapEncoderWithSoftwareBitmap = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe)
public final class BitmapFrame : WinRTClass, IBitmapFrame, IBitmapFrameWithSoftwareBitmap {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapFrame
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame>?) -> BitmapFrame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.getthumbnailasync)
    public func getThumbnailAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ImageStream?>! {
        try _default.GetThumbnailAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.getpixeldataasync)
    public func getPixelDataAsync() throws -> WindowsFoundation.AnyIAsyncOperation<PixelDataProvider?>! {
        try _default.GetPixelDataAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.getpixeldataasync)
    public func getPixelDataAsync(_ pixelFormat: BitmapPixelFormat, _ alphaMode: BitmapAlphaMode, _ transform: BitmapTransform!, _ exifOrientationMode: ExifOrientationMode, _ colorManagementMode: ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<PixelDataProvider?>! {
        try _default.GetPixelDataTransformedAsyncImpl(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.bitmapalphamode)
    public var bitmapAlphaMode : BitmapAlphaMode {
        get { try! _default.get_BitmapAlphaModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.bitmappixelformat)
    public var bitmapPixelFormat : BitmapPixelFormat {
        get { try! _default.get_BitmapPixelFormatImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.bitmapproperties)
    public var bitmapProperties : BitmapPropertiesView! {
        get { try! _default.get_BitmapPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.dpix)
    public var dpiX : Double {
        get { try! _default.get_DpiXImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.dpiy)
    public var dpiY : Double {
        get { try! _default.get_DpiYImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.orientedpixelheight)
    public var orientedPixelHeight : UInt32 {
        get { try! _default.get_OrientedPixelHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.orientedpixelwidth)
    public var orientedPixelWidth : UInt32 {
        get { try! _default.get_OrientedPixelWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.pixelheight)
    public var pixelHeight : UInt32 {
        get { try! _default.get_PixelHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.pixelwidth)
    public var pixelWidth : UInt32 {
        get { try! _default.get_PixelWidthImpl() }
    }

    private lazy var _IBitmapFrameWithSoftwareBitmap: __ABI_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmap! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.getsoftwarebitmapasync)
    public func getSoftwareBitmapAsync() throws -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
        try _IBitmapFrameWithSoftwareBitmap.GetSoftwareBitmapAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.getsoftwarebitmapasync)
    public func getSoftwareBitmapAsync(_ pixelFormat: BitmapPixelFormat, _ alphaMode: BitmapAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
        try _IBitmapFrameWithSoftwareBitmap.GetSoftwareBitmapConvertedAsyncImpl(pixelFormat, alphaMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapframe.getsoftwarebitmapasync)
    public func getSoftwareBitmapAsync(_ pixelFormat: BitmapPixelFormat, _ alphaMode: BitmapAlphaMode, _ transform: BitmapTransform!, _ exifOrientationMode: ExifOrientationMode, _ colorManagementMode: ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
        try _IBitmapFrameWithSoftwareBitmap.GetSoftwareBitmapTransformedAsyncImpl(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode)
    }

    deinit {
        _default = nil
        _IBitmapFrameWithSoftwareBitmap = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapproperties)
public final class BitmapProperties : WinRTClass, IBitmapPropertiesView {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapProperties
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties>?) -> BitmapProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IBitmapPropertiesView: __ABI_Windows_Graphics_Imaging.IBitmapPropertiesView! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapproperties.getpropertiesasync)
    public func getPropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<BitmapPropertySet?>! {
        try _IBitmapPropertiesView.GetPropertiesAsyncImpl(propertiesToRetrieve)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapproperties.setpropertiesasync)
    public func setPropertiesAsync(_ propertiesToSet: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, BitmapTypedValue?>?>!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SetPropertiesAsyncImpl(propertiesToSet)
    }

    deinit {
        _IBitmapPropertiesView = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertiesview)
public final class BitmapPropertiesView : WinRTClass, IBitmapPropertiesView {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapPropertiesView
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView>?) -> BitmapPropertiesView? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertiesview.getpropertiesasync)
    public func getPropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<BitmapPropertySet?>! {
        try _default.GetPropertiesAsyncImpl(propertiesToRetrieve)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertyset)
public final class BitmapPropertySet : WinRTClass, IMap, IIterable {
    public typealias K = String
    public typealias V = BitmapTypedValue?
    public typealias T = WindowsFoundation.AnyIKeyValuePair<String, BitmapTypedValue?>?
    private typealias SwiftABI = UWP.IMapString_BitmapTypedValue
    private typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue>?) -> BitmapPropertySet? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Graphics.Imaging.BitmapPropertySet")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertyset.lookup)
    public func lookup(_ key: String) -> BitmapTypedValue? {
        try! _default.LookupImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertyset.haskey)
    public func hasKey(_ key: String) -> Bool {
        try! _default.HasKeyImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertyset.getview)
    public func getView() -> WindowsFoundation.AnyIMapView<String, BitmapTypedValue?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertyset.insert)
    public func insert(_ key: String, _ value: BitmapTypedValue?) -> Bool {
        try! _default.InsertImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertyset.remove)
    public func remove(_ key: String) {
        try! _default.RemoveImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertyset.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertyset.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_BitmapTypedValue! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmappropertyset.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, BitmapTypedValue?>?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaptransform)
public final class BitmapTransform : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapTransform
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform>?) -> BitmapTransform? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Graphics.Imaging.BitmapTransform")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaptransform.bounds)
    public var bounds : BitmapBounds {
        get { try! _default.get_BoundsImpl() }
        set { try! _default.put_BoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaptransform.flip)
    public var flip : BitmapFlip {
        get { try! _default.get_FlipImpl() }
        set { try! _default.put_FlipImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaptransform.interpolationmode)
    public var interpolationMode : BitmapInterpolationMode {
        get { try! _default.get_InterpolationModeImpl() }
        set { try! _default.put_InterpolationModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaptransform.rotation)
    public var rotation : BitmapRotation {
        get { try! _default.get_RotationImpl() }
        set { try! _default.put_RotationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaptransform.scaledheight)
    public var scaledHeight : UInt32 {
        get { try! _default.get_ScaledHeightImpl() }
        set { try! _default.put_ScaledHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaptransform.scaledwidth)
    public var scaledWidth : UInt32 {
        get { try! _default.get_ScaledWidthImpl() }
        set { try! _default.put_ScaledWidthImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaptypedvalue)
public final class BitmapTypedValue : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapTypedValue
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue>?) -> BitmapTypedValue? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IBitmapTypedValueFactory: __ABI_Windows_Graphics_Imaging.IBitmapTypedValueFactory = try! RoGetActivationFactory(HString("Windows.Graphics.Imaging.BitmapTypedValue"))
    public init(_ value: Any!, _ type: WindowsFoundation.PropertyType) {
        super.init(try! Self._IBitmapTypedValueFactory.CreateImpl(value, type))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaptypedvalue.type)
    public var type : WindowsFoundation.PropertyType {
        get { try! _default.get_TypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmaptypedvalue.value)
    public var value : Any! {
        get { try! _default.get_ValueImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream)
public final class ImageStream : WinRTClass, WindowsFoundation.IClosable, UWP.IInputStream, UWP.IOutputStream, UWP.IRandomAccessStream, UWP.IContentTypeProvider, UWP.IRandomAccessStreamWithContentType {
    private typealias SwiftABI = __ABI_Windows_Storage_Streams.IRandomAccessStreamWithContentType
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType>?) -> ImageStream? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IInputStream: __ABI_Windows_Storage_Streams.IInputStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.readasync)
    public func readAsync(_ buffer: UWP.AnyIBuffer!, _ count: UInt32, _ options: UWP.InputStreamOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, UInt32>! {
        try _IInputStream.ReadAsyncImpl(buffer, count, options)
    }

    private lazy var _IOutputStream: __ABI_Windows_Storage_Streams.IOutputStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.writeasync)
    public func writeAsync(_ buffer: UWP.AnyIBuffer!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>! {
        try _IOutputStream.WriteAsyncImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.flushasync)
    public func flushAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _IOutputStream.FlushAsyncImpl()
    }

    private lazy var _IRandomAccessStream: __ABI_Windows_Storage_Streams.IRandomAccessStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.getinputstreamat)
    public func getInputStreamAt(_ position: UInt64) throws -> UWP.AnyIInputStream! {
        try _IRandomAccessStream.GetInputStreamAtImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.getoutputstreamat)
    public func getOutputStreamAt(_ position: UInt64) throws -> UWP.AnyIOutputStream! {
        try _IRandomAccessStream.GetOutputStreamAtImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.seek)
    public func seek(_ position: UInt64) throws {
        try _IRandomAccessStream.SeekImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.clonestream)
    public func cloneStream() throws -> UWP.AnyIRandomAccessStream! {
        try _IRandomAccessStream.CloneStreamImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.canread)
    public var canRead : Bool {
        get { try! _IRandomAccessStream.get_CanReadImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.canwrite)
    public var canWrite : Bool {
        get { try! _IRandomAccessStream.get_CanWriteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.position)
    public var position : UInt64 {
        get { try! _IRandomAccessStream.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.size)
    public var size : UInt64 {
        get { try! _IRandomAccessStream.get_SizeImpl() }
        set { try! _IRandomAccessStream.put_SizeImpl(newValue) }
    }

    private lazy var _IContentTypeProvider: __ABI_Windows_Storage_Streams.IContentTypeProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.imagestream.contenttype)
    public var contentType : String {
        get { try! _IContentTypeProvider.get_ContentTypeImpl() }
    }

    deinit {
        _IClosable = nil
        _IInputStream = nil
        _IOutputStream = nil
        _IRandomAccessStream = nil
        _IContentTypeProvider = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.pixeldataprovider)
public final class PixelDataProvider : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IPixelDataProvider
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider>?) -> PixelDataProvider? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap)
public final class SoftwareBitmap : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Windows_Graphics_Imaging.ISoftwareBitmap
    private typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap>?) -> SoftwareBitmap? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ISoftwareBitmapFactory: __ABI_Windows_Graphics_Imaging.ISoftwareBitmapFactory = try! RoGetActivationFactory(HString("Windows.Graphics.Imaging.SoftwareBitmap"))
    public init(_ format: BitmapPixelFormat, _ width: Int32, _ height: Int32) {
        super.init(try! Self._ISoftwareBitmapFactory.CreateImpl(format, width, height))
    }

    public init(_ format: BitmapPixelFormat, _ width: Int32, _ height: Int32, _ alpha: BitmapAlphaMode) {
        super.init(try! Self._ISoftwareBitmapFactory.CreateWithAlphaImpl(format, width, height, alpha))
    }

    private static let _ISoftwareBitmapStatics: __ABI_Windows_Graphics_Imaging.ISoftwareBitmapStatics = try! RoGetActivationFactory(HString("Windows.Graphics.Imaging.SoftwareBitmap"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.copy)
    public static func copy(_ source: SoftwareBitmap!) -> SoftwareBitmap! {
        return try! _ISoftwareBitmapStatics.CopyImpl(source)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.convert)
    public static func convert(_ source: SoftwareBitmap!, _ format: BitmapPixelFormat) -> SoftwareBitmap! {
        return try! _ISoftwareBitmapStatics.ConvertImpl(source, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.convert)
    public static func convert(_ source: SoftwareBitmap!, _ format: BitmapPixelFormat, _ alpha: BitmapAlphaMode) -> SoftwareBitmap! {
        return try! _ISoftwareBitmapStatics.ConvertWithAlphaImpl(source, format, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.createcopyfrombuffer)
    public static func createCopyFromBuffer(_ source: UWP.AnyIBuffer!, _ format: BitmapPixelFormat, _ width: Int32, _ height: Int32) -> SoftwareBitmap! {
        return try! _ISoftwareBitmapStatics.CreateCopyFromBufferImpl(source, format, width, height)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.createcopyfrombuffer)
    public static func createCopyFromBuffer(_ source: UWP.AnyIBuffer!, _ format: BitmapPixelFormat, _ width: Int32, _ height: Int32, _ alpha: BitmapAlphaMode) -> SoftwareBitmap! {
        return try! _ISoftwareBitmapStatics.CreateCopyWithAlphaFromBufferImpl(source, format, width, height, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.createcopyfromsurfaceasync)
    public static func createCopyFromSurfaceAsync(_ surface: UWP.AnyIDirect3DSurface!) -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
        return try! _ISoftwareBitmapStatics.CreateCopyFromSurfaceAsyncImpl(surface)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.createcopyfromsurfaceasync)
    public static func createCopyFromSurfaceAsync(_ surface: UWP.AnyIDirect3DSurface!, _ alpha: BitmapAlphaMode) -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
        return try! _ISoftwareBitmapStatics.CreateCopyWithAlphaFromSurfaceAsyncImpl(surface, alpha)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.lockbuffer)
    public func lockBuffer(_ mode: BitmapBufferAccessMode) throws -> BitmapBuffer! {
        try _default.LockBufferImpl(mode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.copyto)
    public func copyTo(_ bitmap: SoftwareBitmap!) throws {
        try _default.CopyToImpl(bitmap)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.copyfrombuffer)
    public func copyFromBuffer(_ buffer: UWP.AnyIBuffer!) throws {
        try _default.CopyFromBufferImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.copytobuffer)
    public func copyToBuffer(_ buffer: UWP.AnyIBuffer!) throws {
        try _default.CopyToBufferImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.getreadonlyview)
    public func getReadOnlyView() throws -> SoftwareBitmap! {
        try _default.GetReadOnlyViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.bitmapalphamode)
    public var bitmapAlphaMode : BitmapAlphaMode {
        get { try! _default.get_BitmapAlphaModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.bitmappixelformat)
    public var bitmapPixelFormat : BitmapPixelFormat {
        get { try! _default.get_BitmapPixelFormatImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.dpix)
    public var dpiX : Double {
        get { try! _default.get_DpiXImpl() }
        set { try! _default.put_DpiXImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.dpiy)
    public var dpiY : Double {
        get { try! _default.get_DpiYImpl() }
        set { try! _default.put_DpiYImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.isreadonly)
    public var isReadOnly : Bool {
        get { try! _default.get_IsReadOnlyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.pixelheight)
    public var pixelHeight : Int32 {
        get { try! _default.get_PixelHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.softwarebitmap.pixelwidth)
    public var pixelWidth : Int32 {
        get { try! _default.get_PixelWidthImpl() }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbounds)
public struct BitmapBounds: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbounds.x)
    public var x: UInt32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbounds.y)
    public var y: UInt32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbounds.width)
    public var width: UInt32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapbounds.height)
    public var height: UInt32 = 0
    public init() {}
    public init(x: UInt32, y: UInt32, width: UInt32, height: UInt32) {
        self.x = x
        self.y = y
        self.width = width
        self.height = height
    }
    public static func from(abi: __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds) -> BitmapBounds {
        .init(x: abi.X, y: abi.Y, width: abi.Width, height: abi.Height)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapplanedescription)
public struct BitmapPlaneDescription: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapplanedescription.startindex)
    public var startIndex: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapplanedescription.width)
    public var width: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapplanedescription.height)
    public var height: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapplanedescription.stride)
    public var stride: Int32 = 0
    public init() {}
    public init(startIndex: Int32, width: Int32, height: Int32, stride: Int32) {
        self.startIndex = startIndex
        self.width = width
        self.height = height
        self.stride = stride
    }
    public static func from(abi: __x_ABI_CWindows_CGraphics_CImaging_CBitmapPlaneDescription) -> BitmapPlaneDescription {
        .init(startIndex: abi.StartIndex, width: abi.Width, height: abi.Height, stride: abi.Stride)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapsize)
public struct BitmapSize: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapsize.width)
    public var width: UInt32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.bitmapsize.height)
    public var height: UInt32 = 0
    public init() {}
    public init(width: UInt32, height: UInt32) {
        self.width = width
        self.height = height
    }
    public static func from(abi: __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize) -> BitmapSize {
        .init(width: abi.Width, height: abi.Height)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe)
public protocol IBitmapFrame : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.getthumbnailasync)
    func getThumbnailAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.ImageStream?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.getpixeldataasync)
    func getPixelDataAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.PixelDataProvider?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.getpixeldataasync)
    func getPixelDataAsync(_ pixelFormat: UWP.BitmapPixelFormat, _ alphaMode: UWP.BitmapAlphaMode, _ transform: UWP.BitmapTransform!, _ exifOrientationMode: UWP.ExifOrientationMode, _ colorManagementMode: UWP.ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.PixelDataProvider?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.bitmapalphamode)
    var bitmapAlphaMode: UWP.BitmapAlphaMode { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.bitmappixelformat)
    var bitmapPixelFormat: UWP.BitmapPixelFormat { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.bitmapproperties)
    var bitmapProperties: UWP.BitmapPropertiesView! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.dpix)
    var dpiX: Double { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.dpiy)
    var dpiY: Double { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.orientedpixelheight)
    var orientedPixelHeight: UInt32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.orientedpixelwidth)
    var orientedPixelWidth: UInt32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.pixelheight)
    var pixelHeight: UInt32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.pixelwidth)
    var pixelWidth: UInt32 { get }
}

extension IBitmapFrame {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Graphics_Imaging.IBitmapFrameWrapper.IID:
                let wrapper = __ABI_Windows_Graphics_Imaging.IBitmapFrameWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIBitmapFrame = any IBitmapFrame

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap)
public protocol IBitmapFrameWithSoftwareBitmap : IBitmapFrame {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.getsoftwarebitmapasync)
    func getSoftwareBitmapAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.getsoftwarebitmapasync)
    func getSoftwareBitmapAsync(_ pixelFormat: UWP.BitmapPixelFormat, _ alphaMode: UWP.BitmapAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.getsoftwarebitmapasync)
    func getSoftwareBitmapAsync(_ pixelFormat: UWP.BitmapPixelFormat, _ alphaMode: UWP.BitmapAlphaMode, _ transform: UWP.BitmapTransform!, _ exifOrientationMode: UWP.ExifOrientationMode, _ colorManagementMode: UWP.ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>!
}

extension IBitmapFrameWithSoftwareBitmap {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmapWrapper.IID:
                let wrapper = __ABI_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmapWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Graphics_Imaging.IBitmapFrameWrapper.IID:
                let wrapper = __ABI_Windows_Graphics_Imaging.IBitmapFrameWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIBitmapFrameWithSoftwareBitmap = any IBitmapFrameWithSoftwareBitmap

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmappropertiesview)
public protocol IBitmapPropertiesView : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmappropertiesview.getpropertiesasync)
    func getPropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.BitmapPropertySet?>!
}

extension IBitmapPropertiesView {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Graphics_Imaging.IBitmapPropertiesViewWrapper.IID:
                let wrapper = __ABI_Windows_Graphics_Imaging.IBitmapPropertiesViewWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIBitmapPropertiesView = any IBitmapPropertiesView

extension UWP.BitmapAlphaMode {
    public static var premultiplied : UWP.BitmapAlphaMode {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode_Premultiplied
    }
    public static var straight : UWP.BitmapAlphaMode {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode_Straight
    }
    public static var ignore : UWP.BitmapAlphaMode {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode_Ignore
    }
}
extension UWP.BitmapAlphaMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.BitmapBufferAccessMode {
    public static var read : UWP.BitmapBufferAccessMode {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode_Read
    }
    public static var readWrite : UWP.BitmapBufferAccessMode {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode_ReadWrite
    }
    public static var write : UWP.BitmapBufferAccessMode {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapBufferAccessMode_Write
    }
}
extension UWP.BitmapBufferAccessMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.BitmapFlip {
    public static var none : UWP.BitmapFlip {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip_None
    }
    public static var horizontal : UWP.BitmapFlip {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip_Horizontal
    }
    public static var vertical : UWP.BitmapFlip {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip_Vertical
    }
}
extension UWP.BitmapFlip: @retroactive Hashable, @retroactive Codable {}

extension UWP.BitmapInterpolationMode {
    public static var nearestNeighbor : UWP.BitmapInterpolationMode {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode_NearestNeighbor
    }
    public static var linear : UWP.BitmapInterpolationMode {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode_Linear
    }
    public static var cubic : UWP.BitmapInterpolationMode {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode_Cubic
    }
    public static var fant : UWP.BitmapInterpolationMode {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode_Fant
    }
}
extension UWP.BitmapInterpolationMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.BitmapPixelFormat {
    public static var unknown : UWP.BitmapPixelFormat {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Unknown
    }
    public static var rgba16 : UWP.BitmapPixelFormat {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Rgba16
    }
    public static var rgba8 : UWP.BitmapPixelFormat {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Rgba8
    }
    public static var gray16 : UWP.BitmapPixelFormat {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Gray16
    }
    public static var gray8 : UWP.BitmapPixelFormat {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Gray8
    }
    public static var bgra8 : UWP.BitmapPixelFormat {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Bgra8
    }
    public static var nv12 : UWP.BitmapPixelFormat {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Nv12
    }
    public static var p010 : UWP.BitmapPixelFormat {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_P010
    }
    public static var yuy2 : UWP.BitmapPixelFormat {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Yuy2
    }
}
extension UWP.BitmapPixelFormat: @retroactive Hashable, @retroactive Codable {}

extension UWP.BitmapRotation {
    public static var none : UWP.BitmapRotation {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation_None
    }
    public static var clockwise90Degrees : UWP.BitmapRotation {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation_Clockwise90Degrees
    }
    public static var clockwise180Degrees : UWP.BitmapRotation {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation_Clockwise180Degrees
    }
    public static var clockwise270Degrees : UWP.BitmapRotation {
        __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation_Clockwise270Degrees
    }
}
extension UWP.BitmapRotation: @retroactive Hashable, @retroactive Codable {}

extension UWP.ColorManagementMode {
    public static var doNotColorManage : UWP.ColorManagementMode {
        __x_ABI_CWindows_CGraphics_CImaging_CColorManagementMode_DoNotColorManage
    }
    public static var colorManageToSRgb : UWP.ColorManagementMode {
        __x_ABI_CWindows_CGraphics_CImaging_CColorManagementMode_ColorManageToSRgb
    }
}
extension UWP.ColorManagementMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.ExifOrientationMode {
    public static var ignoreExifOrientation : UWP.ExifOrientationMode {
        __x_ABI_CWindows_CGraphics_CImaging_CExifOrientationMode_IgnoreExifOrientation
    }
    public static var respectExifOrientation : UWP.ExifOrientationMode {
        __x_ABI_CWindows_CGraphics_CImaging_CExifOrientationMode_RespectExifOrientation
    }
}
extension UWP.ExifOrientationMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.JpegSubsamplingMode {
    public static var `default` : UWP.JpegSubsamplingMode {
        __x_ABI_CWindows_CGraphics_CImaging_CJpegSubsamplingMode_Default
    }
    public static var y4Cb2Cr0 : UWP.JpegSubsamplingMode {
        __x_ABI_CWindows_CGraphics_CImaging_CJpegSubsamplingMode_Y4Cb2Cr0
    }
    public static var y4Cb2Cr2 : UWP.JpegSubsamplingMode {
        __x_ABI_CWindows_CGraphics_CImaging_CJpegSubsamplingMode_Y4Cb2Cr2
    }
    public static var y4Cb4Cr4 : UWP.JpegSubsamplingMode {
        __x_ABI_CWindows_CGraphics_CImaging_CJpegSubsamplingMode_Y4Cb4Cr4
    }
}
extension UWP.JpegSubsamplingMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.PngFilterMode {
    public static var automatic : UWP.PngFilterMode {
        __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Automatic
    }
    public static var none : UWP.PngFilterMode {
        __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_None
    }
    public static var sub : UWP.PngFilterMode {
        __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Sub
    }
    public static var up : UWP.PngFilterMode {
        __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Up
    }
    public static var average : UWP.PngFilterMode {
        __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Average
    }
    public static var paeth : UWP.PngFilterMode {
        __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Paeth
    }
    public static var adaptive : UWP.PngFilterMode {
        __x_ABI_CWindows_CGraphics_CImaging_CPngFilterMode_Adaptive
    }
}
extension UWP.PngFilterMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.TiffCompressionMode {
    public static var automatic : UWP.TiffCompressionMode {
        __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Automatic
    }
    public static var none : UWP.TiffCompressionMode {
        __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_None
    }
    public static var ccitt3 : UWP.TiffCompressionMode {
        __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Ccitt3
    }
    public static var ccitt4 : UWP.TiffCompressionMode {
        __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Ccitt4
    }
    public static var lzw : UWP.TiffCompressionMode {
        __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Lzw
    }
    public static var rle : UWP.TiffCompressionMode {
        __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Rle
    }
    public static var zip : UWP.TiffCompressionMode {
        __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_Zip
    }
    public static var lzwhDifferencing : UWP.TiffCompressionMode {
        __x_ABI_CWindows_CGraphics_CImaging_CTiffCompressionMode_LzwhDifferencing
    }
}
extension UWP.TiffCompressionMode: @retroactive Hashable, @retroactive Codable {}


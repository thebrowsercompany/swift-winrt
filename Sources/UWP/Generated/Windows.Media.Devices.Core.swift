// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameflashmode)
public typealias FrameFlashMode = __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics)
public final class CameraIntrinsics : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.ICameraIntrinsics
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CICameraIntrinsics>?) -> CameraIntrinsics? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICameraIntrinsicsFactory: __ABI_Windows_Media_Devices_Core.ICameraIntrinsicsFactory = try! RoGetActivationFactory(HString("Windows.Media.Devices.Core.CameraIntrinsics"))
    public init(_ focalLength: WindowsFoundation.Vector2, _ principalPoint: WindowsFoundation.Vector2, _ radialDistortion: WindowsFoundation.Vector3, _ tangentialDistortion: WindowsFoundation.Vector2, _ imageWidth: UInt32, _ imageHeight: UInt32) {
        super.init(try! Self._ICameraIntrinsicsFactory.CreateImpl(focalLength, principalPoint, radialDistortion, tangentialDistortion, imageWidth, imageHeight))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.projectontoframe)
    public func projectOntoFrame(_ coordinate: WindowsFoundation.Vector3) throws -> WindowsFoundation.Point {
        try _default.ProjectOntoFrameImpl(coordinate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.unprojectatunitdepth)
    public func unprojectAtUnitDepth(_ pixelCoordinate: WindowsFoundation.Point) throws -> WindowsFoundation.Vector2 {
        try _default.UnprojectAtUnitDepthImpl(pixelCoordinate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.focallength)
    public var focalLength : WindowsFoundation.Vector2 {
        get { try! _default.get_FocalLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.imageheight)
    public var imageHeight : UInt32 {
        get { try! _default.get_ImageHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.imagewidth)
    public var imageWidth : UInt32 {
        get { try! _default.get_ImageWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.principalpoint)
    public var principalPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_PrincipalPointImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.radialdistortion)
    public var radialDistortion : WindowsFoundation.Vector3 {
        get { try! _default.get_RadialDistortionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.tangentialdistortion)
    public var tangentialDistortion : WindowsFoundation.Vector2 {
        get { try! _default.get_TangentialDistortionImpl() }
    }

    private lazy var _ICameraIntrinsics2: __ABI_Windows_Media_Devices_Core.ICameraIntrinsics2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.distortpoint)
    public func distortPoint(_ input: WindowsFoundation.Point) throws -> WindowsFoundation.Point {
        try _ICameraIntrinsics2.DistortPointImpl(input)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.undistortpoint)
    public func undistortPoint(_ input: WindowsFoundation.Point) throws -> WindowsFoundation.Point {
        try _ICameraIntrinsics2.UndistortPointImpl(input)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.cameraintrinsics.undistortedprojectiontransform)
    public var undistortedProjectionTransform : WindowsFoundation.Matrix4x4 {
        get { try! _ICameraIntrinsics2.get_UndistortedProjectionTransformImpl() }
    }

    deinit {
        _default = nil
        _ICameraIntrinsics2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontrolcapabilities)
public final class FrameControlCapabilities : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameControlCapabilities
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameControlCapabilities>?) -> FrameControlCapabilities? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontrolcapabilities.exposure)
    public var exposure : FrameExposureCapabilities! {
        get { try! _default.get_ExposureImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontrolcapabilities.exposurecompensation)
    public var exposureCompensation : FrameExposureCompensationCapabilities! {
        get { try! _default.get_ExposureCompensationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontrolcapabilities.focus)
    public var focus : FrameFocusCapabilities! {
        get { try! _default.get_FocusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontrolcapabilities.isospeed)
    public var isoSpeed : FrameIsoSpeedCapabilities! {
        get { try! _default.get_IsoSpeedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontrolcapabilities.photoconfirmationsupported)
    public var photoConfirmationSupported : Bool {
        get { try! _default.get_PhotoConfirmationSupportedImpl() }
    }

    private lazy var _IFrameControlCapabilities2: __ABI_Windows_Media_Devices_Core.IFrameControlCapabilities2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontrolcapabilities.flash)
    public var flash : FrameFlashCapabilities! {
        get { try! _IFrameControlCapabilities2.get_FlashImpl() }
    }

    deinit {
        _default = nil
        _IFrameControlCapabilities2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontroller)
public final class FrameController : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameController
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController>?) -> FrameController? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Media.Devices.Core.FrameController")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontroller.exposurecompensationcontrol)
    public var exposureCompensationControl : FrameExposureCompensationControl! {
        get { try! _default.get_ExposureCompensationControlImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontroller.exposurecontrol)
    public var exposureControl : FrameExposureControl! {
        get { try! _default.get_ExposureControlImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontroller.focuscontrol)
    public var focusControl : FrameFocusControl! {
        get { try! _default.get_FocusControlImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontroller.isospeedcontrol)
    public var isoSpeedControl : FrameIsoSpeedControl! {
        get { try! _default.get_IsoSpeedControlImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontroller.photoconfirmationenabled)
    public var photoConfirmationEnabled : Bool? {
        get { try! _default.get_PhotoConfirmationEnabledImpl() }
        set { try! _default.put_PhotoConfirmationEnabledImpl(newValue) }
    }

    private lazy var _IFrameController2: __ABI_Windows_Media_Devices_Core.IFrameController2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framecontroller.flashcontrol)
    public var flashControl : FrameFlashControl! {
        get { try! _IFrameController2.get_FlashControlImpl() }
    }

    deinit {
        _default = nil
        _IFrameController2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecapabilities)
public final class FrameExposureCapabilities : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameExposureCapabilities
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCapabilities>?) -> FrameExposureCapabilities? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecapabilities.max)
    public var max : WindowsFoundation.TimeSpan {
        get { try! _default.get_MaxImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecapabilities.min)
    public var min : WindowsFoundation.TimeSpan {
        get { try! _default.get_MinImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecapabilities.step)
    public var step : WindowsFoundation.TimeSpan {
        get { try! _default.get_StepImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecapabilities.supported)
    public var supported : Bool {
        get { try! _default.get_SupportedImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecompensationcapabilities)
public final class FrameExposureCompensationCapabilities : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameExposureCompensationCapabilities
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationCapabilities>?) -> FrameExposureCompensationCapabilities? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecompensationcapabilities.max)
    public var max : Float {
        get { try! _default.get_MaxImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecompensationcapabilities.min)
    public var min : Float {
        get { try! _default.get_MinImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecompensationcapabilities.step)
    public var step : Float {
        get { try! _default.get_StepImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecompensationcapabilities.supported)
    public var supported : Bool {
        get { try! _default.get_SupportedImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecompensationcontrol)
public final class FrameExposureCompensationControl : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameExposureCompensationControl
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureCompensationControl>?) -> FrameExposureCompensationControl? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecompensationcontrol.value)
    public var value : Float? {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecontrol)
public final class FrameExposureControl : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameExposureControl
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameExposureControl>?) -> FrameExposureControl? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecontrol.auto)
    public var auto : Bool {
        get { try! _default.get_AutoImpl() }
        set { try! _default.put_AutoImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameexposurecontrol.value)
    public var value : WindowsFoundation.TimeSpan? {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameflashcapabilities)
public final class FrameFlashCapabilities : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameFlashCapabilities
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashCapabilities>?) -> FrameFlashCapabilities? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameflashcapabilities.powersupported)
    public var powerSupported : Bool {
        get { try! _default.get_PowerSupportedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameflashcapabilities.redeyereductionsupported)
    public var redEyeReductionSupported : Bool {
        get { try! _default.get_RedEyeReductionSupportedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameflashcapabilities.supported)
    public var supported : Bool {
        get { try! _default.get_SupportedImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameflashcontrol)
public final class FrameFlashControl : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameFlashControl
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFlashControl>?) -> FrameFlashControl? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameflashcontrol.auto)
    public var auto : Bool {
        get { try! _default.get_AutoImpl() }
        set { try! _default.put_AutoImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameflashcontrol.mode)
    public var mode : FrameFlashMode {
        get { try! _default.get_ModeImpl() }
        set { try! _default.put_ModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameflashcontrol.powerpercent)
    public var powerPercent : Float {
        get { try! _default.get_PowerPercentImpl() }
        set { try! _default.put_PowerPercentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameflashcontrol.redeyereduction)
    public var redEyeReduction : Bool {
        get { try! _default.get_RedEyeReductionImpl() }
        set { try! _default.put_RedEyeReductionImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framefocuscapabilities)
public final class FrameFocusCapabilities : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameFocusCapabilities
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusCapabilities>?) -> FrameFocusCapabilities? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framefocuscapabilities.max)
    public var max : UInt32 {
        get { try! _default.get_MaxImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framefocuscapabilities.min)
    public var min : UInt32 {
        get { try! _default.get_MinImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framefocuscapabilities.step)
    public var step : UInt32 {
        get { try! _default.get_StepImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framefocuscapabilities.supported)
    public var supported : Bool {
        get { try! _default.get_SupportedImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framefocuscontrol)
public final class FrameFocusControl : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameFocusControl
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameFocusControl>?) -> FrameFocusControl? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.framefocuscontrol.value)
    public var value : UInt32? {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameisospeedcapabilities)
public final class FrameIsoSpeedCapabilities : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameIsoSpeedCapabilities
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedCapabilities>?) -> FrameIsoSpeedCapabilities? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameisospeedcapabilities.max)
    public var max : UInt32 {
        get { try! _default.get_MaxImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameisospeedcapabilities.min)
    public var min : UInt32 {
        get { try! _default.get_MinImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameisospeedcapabilities.step)
    public var step : UInt32 {
        get { try! _default.get_StepImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameisospeedcapabilities.supported)
    public var supported : Bool {
        get { try! _default.get_SupportedImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameisospeedcontrol)
public final class FrameIsoSpeedControl : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IFrameIsoSpeedControl
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameIsoSpeedControl>?) -> FrameIsoSpeedControl? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameisospeedcontrol.auto)
    public var auto : Bool {
        get { try! _default.get_AutoImpl() }
        set { try! _default.put_AutoImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.frameisospeedcontrol.value)
    public var value : UInt32? {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.variablephotosequencecontroller)
public final class VariablePhotoSequenceController : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Devices_Core.IVariablePhotoSequenceController
    private typealias CABI = __x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CDevices_CCore_CIVariablePhotoSequenceController>?) -> VariablePhotoSequenceController? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.variablephotosequencecontroller.gethighestconcurrentframerate)
    public func getHighestConcurrentFrameRate(_ captureProperties: UWP.AnyIMediaEncodingProperties!) throws -> UWP.MediaRatio! {
        try _default.GetHighestConcurrentFrameRateImpl(captureProperties)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.variablephotosequencecontroller.getcurrentframerate)
    public func getCurrentFrameRate() throws -> UWP.MediaRatio! {
        try _default.GetCurrentFrameRateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.variablephotosequencecontroller.desiredframecontrollers)
    public var desiredFrameControllers : WindowsFoundation.AnyIVector<FrameController?>! {
        get { try! _default.get_DesiredFrameControllersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.variablephotosequencecontroller.framecapabilities)
    public var frameCapabilities : FrameControlCapabilities! {
        get { try! _default.get_FrameCapabilitiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.variablephotosequencecontroller.maxphotospersecond)
    public var maxPhotosPerSecond : Float {
        get { try! _default.get_MaxPhotosPerSecondImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.variablephotosequencecontroller.photospersecondlimit)
    public var photosPerSecondLimit : Float {
        get { try! _default.get_PhotosPerSecondLimitImpl() }
        set { try! _default.put_PhotosPerSecondLimitImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.devices.core.variablephotosequencecontroller.supported)
    public var supported : Bool {
        get { try! _default.get_SupportedImpl() }
    }

    deinit {
        _default = nil
    }
}

extension UWP.FrameFlashMode {
    public static var disable : UWP.FrameFlashMode {
        __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode_Disable
    }
    public static var enable : UWP.FrameFlashMode {
        __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode_Enable
    }
    public static var global : UWP.FrameFlashMode {
        __x_ABI_CWindows_CMedia_CDevices_CCore_CFrameFlashMode_Global
    }
}
extension UWP.FrameFlashMode: @retroactive Hashable, @retroactive Codable {}


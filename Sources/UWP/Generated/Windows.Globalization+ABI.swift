// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CGlobalization_CILanguage: WindowsFoundation.IID {
    .init(Data1: 0xEA79A752, Data2: 0xF7C2, Data3: 0x4265, Data4: ( 0xB1,0xBD,0xC4,0xDE,0xC4,0xE4,0xF0,0x80 ))// EA79A752-F7C2-4265-B1BD-C4DEC4E4F080
}

private var IID___x_ABI_CWindows_CGlobalization_CILanguage2: WindowsFoundation.IID {
    .init(Data1: 0x6A47E5B5, Data2: 0xD94D, Data3: 0x4886, Data4: ( 0xA4,0x04,0xA5,0xA5,0xB9,0xD5,0xB4,0x94 ))// 6A47E5B5-D94D-4886-A404-A5A5B9D5B494
}

private var IID___x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags: WindowsFoundation.IID {
    .init(Data1: 0x7D7DAF45, Data2: 0x368D, Data3: 0x4364, Data4: ( 0x85,0x2B,0xDE,0xC9,0x27,0x03,0x7B,0x85 ))// 7D7DAF45-368D-4364-852B-DEC927037B85
}

private var IID___x_ABI_CWindows_CGlobalization_CILanguageFactory: WindowsFoundation.IID {
    .init(Data1: 0x9B0252AC, Data2: 0x0C27, Data3: 0x44F8, Data4: ( 0xB7,0x92,0x97,0x93,0xFB,0x66,0xC6,0x3E ))// 9B0252AC-0C27-44F8-B792-9793FB66C63E
}

private var IID___x_ABI_CWindows_CGlobalization_CILanguageStatics: WindowsFoundation.IID {
    .init(Data1: 0xB23CD557, Data2: 0x0865, Data3: 0x46D4, Data4: ( 0x89,0xB8,0xD5,0x9B,0xE8,0x99,0x0F,0x0D ))// B23CD557-0865-46D4-89B8-D59BE8990F0D
}

private var IID___x_ABI_CWindows_CGlobalization_CILanguageStatics2: WindowsFoundation.IID {
    .init(Data1: 0x30199F6E, Data2: 0x914B, Data3: 0x4B2A, Data4: ( 0x9D,0x6E,0xE3,0xB0,0xE2,0x7D,0xBE,0x4F ))// 30199F6E-914B-4B2A-9D6E-E3B0E27DBE4F
}

public enum __ABI_Windows_Globalization {
    public class ILanguage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGlobalization_CILanguage }

        internal func get_LanguageTagImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CILanguage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LanguageTag(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DisplayNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CILanguage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_NativeNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CILanguage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NativeName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ScriptImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CILanguage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Script(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ILanguage2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGlobalization_CILanguage2 }

        internal func get_LayoutDirectionImpl() throws -> UWP.LanguageLayoutDirection {
            var value: __x_ABI_CWindows_CGlobalization_CLanguageLayoutDirection = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CILanguage2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutDirection(pThis, &value))
            }
            return value
        }

    }

    public class ILanguageExtensionSubtags: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags }

        internal func GetExtensionSubtagsImpl(_ singleton: String) throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _singleton = try! HString(singleton)
                _ = try perform(as: __x_ABI_CWindows_CGlobalization_CILanguageExtensionSubtags.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetExtensionSubtags(pThis, _singleton.get(), &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

    }

    public class ILanguageFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGlobalization_CILanguageFactory }

        internal func CreateLanguageImpl(_ languageTag: String) throws -> ILanguage {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _languageTag = try! HString(languageTag)
                _ = try perform(as: __x_ABI_CWindows_CGlobalization_CILanguageFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLanguage(pThis, _languageTag.get(), &resultAbi))
                }
            }
            return ILanguage(result!)
        }

    }

    public class ILanguageStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGlobalization_CILanguageStatics }

        internal func IsWellFormedImpl(_ languageTag: String) throws -> Bool {
            var result: boolean = 0
            let _languageTag = try! HString(languageTag)
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CILanguageStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsWellFormed(pThis, _languageTag.get(), &result))
            }
            return .init(from: result)
        }

        internal func get_CurrentInputMethodLanguageTagImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CILanguageStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentInputMethodLanguageTag(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ILanguageStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGlobalization_CILanguageStatics2 }

        internal func TrySetInputMethodLanguageTagImpl(_ languageTag: String) throws -> Bool {
            var result: boolean = 0
            let _languageTag = try! HString(languageTag)
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CILanguageStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TrySetInputMethodLanguageTag(pThis, _languageTag.get(), &result))
            }
            return .init(from: result)
        }

    }

}

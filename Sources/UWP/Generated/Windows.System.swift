// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueuepriority)
public typealias DispatcherQueuePriority = __x_ABI_CWindows_CSystem_CDispatcherQueuePriority
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launchquerysupportstatus)
public typealias LaunchQuerySupportStatus = __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launchquerysupporttype)
public typealias LaunchQuerySupportType = __x_ABI_CWindows_CSystem_CLaunchQuerySupportType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launchuristatus)
public typealias LaunchUriStatus = __x_ABI_CWindows_CSystem_CLaunchUriStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.processorarchitecture)
public typealias ProcessorArchitecture = __x_ABI_CWindows_CSystem_CProcessorArchitecture
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatus)
public typealias UserAuthenticationStatus = __x_ABI_CWindows_CSystem_CUserAuthenticationStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userpicturesize)
public typealias UserPictureSize = __x_ABI_CWindows_CSystem_CUserPictureSize
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.usertype)
public typealias UserType = __x_ABI_CWindows_CSystem_CUserType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcherstatus)
public typealias UserWatcherStatus = __x_ABI_CWindows_CSystem_CUserWatcherStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.virtualkey)
public typealias VirtualKey = __x_ABI_CWindows_CSystem_CVirtualKey
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.virtualkeymodifiers)
public typealias VirtualKeyModifiers = __x_ABI_CWindows_CSystem_CVirtualKeyModifiers
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueue)
public final class DispatcherQueue : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IDispatcherQueue
    private typealias CABI = __x_ABI_CWindows_CSystem_CIDispatcherQueue
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIDispatcherQueue>?) -> DispatcherQueue? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IDispatcherQueueStatics: __ABI_Windows_System.IDispatcherQueueStatics = try! RoGetActivationFactory(HString("Windows.System.DispatcherQueue"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueue.getforcurrentthread)
    public static func getForCurrentThread() -> DispatcherQueue! {
        return try! _IDispatcherQueueStatics.GetForCurrentThreadImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueue.createtimer)
    public func createTimer() throws -> DispatcherQueueTimer! {
        try _default.CreateTimerImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueue.tryenqueue)
    public func tryEnqueue(_ callback: DispatcherQueueHandler!) throws -> Bool {
        try _default.TryEnqueueImpl(callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueue.tryenqueue)
    public func tryEnqueue(_ priority: DispatcherQueuePriority, _ callback: DispatcherQueueHandler!) throws -> Bool {
        try _default.TryEnqueueWithPriorityImpl(priority, callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueue.shutdowncompleted)
    public lazy var shutdownCompleted : Event<TypedEventHandler<DispatcherQueue?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ShutdownCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ShutdownCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueue.shutdownstarting)
    public lazy var shutdownStarting : Event<TypedEventHandler<DispatcherQueue?, DispatcherQueueShutdownStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ShutdownStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ShutdownStartingImpl($0)
       }
      )
    }()

    private lazy var _IDispatcherQueue2: __ABI_Windows_System.IDispatcherQueue2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueue.hasthreadaccess)
    public var hasThreadAccess : Bool {
        get { try! _IDispatcherQueue2.get_HasThreadAccessImpl() }
    }

    deinit {
        _default = nil
        _IDispatcherQueue2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueueshutdownstartingeventargs)
public final class DispatcherQueueShutdownStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IDispatcherQueueShutdownStartingEventArgs
    private typealias CABI = __x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIDispatcherQueueShutdownStartingEventArgs>?) -> DispatcherQueueShutdownStartingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueueshutdownstartingeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueuetimer)
public final class DispatcherQueueTimer : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IDispatcherQueueTimer
    private typealias CABI = __x_ABI_CWindows_CSystem_CIDispatcherQueueTimer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIDispatcherQueueTimer>?) -> DispatcherQueueTimer? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueuetimer.start)
    public func start() throws {
        try _default.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueuetimer.stop)
    public func stop() throws {
        try _default.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueuetimer.interval)
    public var interval : WindowsFoundation.TimeSpan {
        get { try! _default.get_IntervalImpl() }
        set { try! _default.put_IntervalImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueuetimer.isrepeating)
    public var isRepeating : Bool {
        get { try! _default.get_IsRepeatingImpl() }
        set { try! _default.put_IsRepeatingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueuetimer.isrunning)
    public var isRunning : Bool {
        get { try! _default.get_IsRunningImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.dispatcherqueuetimer.tick)
    public lazy var tick : Event<TypedEventHandler<DispatcherQueueTimer?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TickImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.folderlauncheroptions)
public final class FolderLauncherOptions : WinRTClass, ILauncherViewOptions {
    private typealias SwiftABI = __ABI_Windows_System.IFolderLauncherOptions
    private typealias CABI = __x_ABI_CWindows_CSystem_CIFolderLauncherOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIFolderLauncherOptions>?) -> FolderLauncherOptions? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.System.FolderLauncherOptions")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.folderlauncheroptions.itemstoselect)
    public var itemsToSelect : WindowsFoundation.AnyIVector<UWP.AnyIStorageItem?>! {
        get { try! _default.get_ItemsToSelectImpl() }
    }

    private lazy var _ILauncherViewOptions: __ABI_Windows_System.ILauncherViewOptions! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.folderlauncheroptions.desiredremainingview)
    public var desiredRemainingView : UWP.ViewSizePreference {
        get { try! _ILauncherViewOptions.get_DesiredRemainingViewImpl() }
        set { try! _ILauncherViewOptions.put_DesiredRemainingViewImpl(newValue) }
    }

    deinit {
        _default = nil
        _ILauncherViewOptions = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launchuriresult)
public final class LaunchUriResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.ILaunchUriResult
    private typealias CABI = __x_ABI_CWindows_CSystem_CILaunchUriResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CILaunchUriResult>?) -> LaunchUriResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launchuriresult.result)
    public var result : WindowsFoundation.ValueSet! {
        get { try! _default.get_ResultImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launchuriresult.status)
    public var status : LaunchUriStatus {
        get { try! _default.get_StatusImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher)
public final class Launcher {
    private static let _ILauncherStatics: __ABI_Windows_System.ILauncherStatics = try! RoGetActivationFactory(HString("Windows.System.Launcher"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchfileasync)
    public static func launchFileAsync(_ file: UWP.AnyIStorageFile!) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics.LaunchFileAsyncImpl(file)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchfileasync)
    public static func launchFileAsync(_ file: UWP.AnyIStorageFile!, _ options: LauncherOptions!) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics.LaunchFileWithOptionsAsyncImpl(file, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchuriasync)
    public static func launchUriAsync(_ uri: WindowsFoundation.Uri!) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics.LaunchUriAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchuriasync)
    public static func launchUriAsync(_ uri: WindowsFoundation.Uri!, _ options: LauncherOptions!) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics.LaunchUriWithOptionsAsyncImpl(uri, options)
    }

    private static let _ILauncherStatics2: __ABI_Windows_System.ILauncherStatics2 = try! RoGetActivationFactory(HString("Windows.System.Launcher"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchuriforresultsasync)
    public static func launchUriForResultsAsync(_ uri: WindowsFoundation.Uri!, _ options: LauncherOptions!) -> WindowsFoundation.AnyIAsyncOperation<LaunchUriResult?>! {
        return try! _ILauncherStatics2.LaunchUriForResultsAsyncImpl(uri, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchuriforresultsasync)
    public static func launchUriForResultsAsync(_ uri: WindowsFoundation.Uri!, _ options: LauncherOptions!, _ inputData: WindowsFoundation.ValueSet!) -> WindowsFoundation.AnyIAsyncOperation<LaunchUriResult?>! {
        return try! _ILauncherStatics2.LaunchUriForResultsWithDataAsyncImpl(uri, options, inputData)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchuriasync)
    public static func launchUriAsync(_ uri: WindowsFoundation.Uri!, _ options: LauncherOptions!, _ inputData: WindowsFoundation.ValueSet!) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics2.LaunchUriWithDataAsyncImpl(uri, options, inputData)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.queryurisupportasync)
    public static func queryUriSupportAsync(_ uri: WindowsFoundation.Uri!, _ launchQuerySupportType: LaunchQuerySupportType) -> WindowsFoundation.AnyIAsyncOperation<LaunchQuerySupportStatus>! {
        return try! _ILauncherStatics2.QueryUriSupportAsyncImpl(uri, launchQuerySupportType)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.queryurisupportasync)
    public static func queryUriSupportAsync(_ uri: WindowsFoundation.Uri!, _ launchQuerySupportType: LaunchQuerySupportType, _ packageFamilyName: String) -> WindowsFoundation.AnyIAsyncOperation<LaunchQuerySupportStatus>! {
        return try! _ILauncherStatics2.QueryUriSupportWithPackageFamilyNameAsyncImpl(uri, launchQuerySupportType, packageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.queryfilesupportasync)
    public static func queryFileSupportAsync(_ file: UWP.StorageFile!) -> WindowsFoundation.AnyIAsyncOperation<LaunchQuerySupportStatus>! {
        return try! _ILauncherStatics2.QueryFileSupportAsyncImpl(file)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.queryfilesupportasync)
    public static func queryFileSupportAsync(_ file: UWP.StorageFile!, _ packageFamilyName: String) -> WindowsFoundation.AnyIAsyncOperation<LaunchQuerySupportStatus>! {
        return try! _ILauncherStatics2.QueryFileSupportWithPackageFamilyNameAsyncImpl(file, packageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.findurischemehandlersasync)
    public static func findUriSchemeHandlersAsync(_ scheme: String) -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>! {
        return try! _ILauncherStatics2.FindUriSchemeHandlersAsyncImpl(scheme)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.findurischemehandlersasync)
    public static func findUriSchemeHandlersAsync(_ scheme: String, _ launchQuerySupportType: LaunchQuerySupportType) -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>! {
        return try! _ILauncherStatics2.FindUriSchemeHandlersWithLaunchUriTypeAsyncImpl(scheme, launchQuerySupportType)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.findfilehandlersasync)
    public static func findFileHandlersAsync(_ `extension`: String) -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>! {
        return try! _ILauncherStatics2.FindFileHandlersAsyncImpl(`extension`)
    }

    private static let _ILauncherStatics3: __ABI_Windows_System.ILauncherStatics3 = try! RoGetActivationFactory(HString("Windows.System.Launcher"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchfolderasync)
    public static func launchFolderAsync(_ folder: UWP.AnyIStorageFolder!) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics3.LaunchFolderAsyncImpl(folder)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchfolderasync)
    public static func launchFolderAsync(_ folder: UWP.AnyIStorageFolder!, _ options: FolderLauncherOptions!) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics3.LaunchFolderWithOptionsAsyncImpl(folder, options)
    }

    private static let _ILauncherStatics4: __ABI_Windows_System.ILauncherStatics4 = try! RoGetActivationFactory(HString("Windows.System.Launcher"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.queryappurisupportasync)
    public static func queryAppUriSupportAsync(_ uri: WindowsFoundation.Uri!) -> WindowsFoundation.AnyIAsyncOperation<LaunchQuerySupportStatus>! {
        return try! _ILauncherStatics4.QueryAppUriSupportAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.queryappurisupportasync)
    public static func queryAppUriSupportAsync(_ uri: WindowsFoundation.Uri!, _ packageFamilyName: String) -> WindowsFoundation.AnyIAsyncOperation<LaunchQuerySupportStatus>! {
        return try! _ILauncherStatics4.QueryAppUriSupportWithPackageFamilyNameAsyncImpl(uri, packageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.findappurihandlersasync)
    public static func findAppUriHandlersAsync(_ uri: WindowsFoundation.Uri!) -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>! {
        return try! _ILauncherStatics4.FindAppUriHandlersAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchuriforuserasync)
    public static func launchUriForUserAsync(_ user: User!, _ uri: WindowsFoundation.Uri!) -> WindowsFoundation.AnyIAsyncOperation<LaunchUriStatus>! {
        return try! _ILauncherStatics4.LaunchUriForUserAsyncImpl(user, uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchuriforuserasync)
    public static func launchUriForUserAsync(_ user: User!, _ uri: WindowsFoundation.Uri!, _ options: LauncherOptions!) -> WindowsFoundation.AnyIAsyncOperation<LaunchUriStatus>! {
        return try! _ILauncherStatics4.LaunchUriWithOptionsForUserAsyncImpl(user, uri, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchuriforuserasync)
    public static func launchUriForUserAsync(_ user: User!, _ uri: WindowsFoundation.Uri!, _ options: LauncherOptions!, _ inputData: WindowsFoundation.ValueSet!) -> WindowsFoundation.AnyIAsyncOperation<LaunchUriStatus>! {
        return try! _ILauncherStatics4.LaunchUriWithDataForUserAsyncImpl(user, uri, options, inputData)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchuriforresultsforuserasync)
    public static func launchUriForResultsForUserAsync(_ user: User!, _ uri: WindowsFoundation.Uri!, _ options: LauncherOptions!) -> WindowsFoundation.AnyIAsyncOperation<LaunchUriResult?>! {
        return try! _ILauncherStatics4.LaunchUriForResultsForUserAsyncImpl(user, uri, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchuriforresultsforuserasync)
    public static func launchUriForResultsForUserAsync(_ user: User!, _ uri: WindowsFoundation.Uri!, _ options: LauncherOptions!, _ inputData: WindowsFoundation.ValueSet!) -> WindowsFoundation.AnyIAsyncOperation<LaunchUriResult?>! {
        return try! _ILauncherStatics4.LaunchUriForResultsWithDataForUserAsyncImpl(user, uri, options, inputData)
    }

    private static let _ILauncherStatics5: __ABI_Windows_System.ILauncherStatics5 = try! RoGetActivationFactory(HString("Windows.System.Launcher"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchfolderpathasync)
    public static func launchFolderPathAsync(_ path: String) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics5.LaunchFolderPathAsyncImpl(path)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchfolderpathasync)
    public static func launchFolderPathAsync(_ path: String, _ options: FolderLauncherOptions!) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics5.LaunchFolderPathWithOptionsAsyncImpl(path, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchfolderpathforuserasync)
    public static func launchFolderPathForUserAsync(_ user: User!, _ path: String) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics5.LaunchFolderPathForUserAsyncImpl(user, path)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcher.launchfolderpathforuserasync)
    public static func launchFolderPathForUserAsync(_ user: User!, _ path: String, _ options: FolderLauncherOptions!) -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        return try! _ILauncherStatics5.LaunchFolderPathWithOptionsForUserAsyncImpl(user, path, options)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions)
public final class LauncherOptions : WinRTClass, ILauncherViewOptions {
    private typealias SwiftABI = __ABI_Windows_System.ILauncherOptions
    private typealias CABI = __x_ABI_CWindows_CSystem_CILauncherOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CILauncherOptions>?) -> LauncherOptions? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.System.LauncherOptions")))
    }

    private lazy var _ILauncherOptions2: __ABI_Windows_System.ILauncherOptions2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.neighboringfilesquery)
    public var neighboringFilesQuery : UWP.StorageFileQueryResult! {
        get { try! _ILauncherOptions2.get_NeighboringFilesQueryImpl() }
        set { try! _ILauncherOptions2.put_NeighboringFilesQueryImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.targetapplicationpackagefamilyname)
    public var targetApplicationPackageFamilyName : String {
        get { try! _ILauncherOptions2.get_TargetApplicationPackageFamilyNameImpl() }
        set { try! _ILauncherOptions2.put_TargetApplicationPackageFamilyNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.contenttype)
    public var contentType : String {
        get { try! _default.get_ContentTypeImpl() }
        set { try! _default.put_ContentTypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.displayapplicationpicker)
    public var displayApplicationPicker : Bool {
        get { try! _default.get_DisplayApplicationPickerImpl() }
        set { try! _default.put_DisplayApplicationPickerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.fallbackuri)
    public var fallbackUri : WindowsFoundation.Uri! {
        get { try! _default.get_FallbackUriImpl() }
        set { try! _default.put_FallbackUriImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.preferredapplicationdisplayname)
    public var preferredApplicationDisplayName : String {
        get { try! _default.get_PreferredApplicationDisplayNameImpl() }
        set { try! _default.put_PreferredApplicationDisplayNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.preferredapplicationpackagefamilyname)
    public var preferredApplicationPackageFamilyName : String {
        get { try! _default.get_PreferredApplicationPackageFamilyNameImpl() }
        set { try! _default.put_PreferredApplicationPackageFamilyNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.treatasuntrusted)
    public var treatAsUntrusted : Bool {
        get { try! _default.get_TreatAsUntrustedImpl() }
        set { try! _default.put_TreatAsUntrustedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.ui)
    public var ui : LauncherUIOptions! {
        get { try! _default.get_UIImpl() }
    }

    private lazy var _ILauncherOptions3: __ABI_Windows_System.ILauncherOptions3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.ignoreappurihandlers)
    public var ignoreAppUriHandlers : Bool {
        get { try! _ILauncherOptions3.get_IgnoreAppUriHandlersImpl() }
        set { try! _ILauncherOptions3.put_IgnoreAppUriHandlersImpl(newValue) }
    }

    private lazy var _ILauncherOptions4: __ABI_Windows_System.ILauncherOptions4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.limitpickertocurrentappandappurihandlers)
    public var limitPickerToCurrentAppAndAppUriHandlers : Bool {
        get { try! _ILauncherOptions4.get_LimitPickerToCurrentAppAndAppUriHandlersImpl() }
        set { try! _ILauncherOptions4.put_LimitPickerToCurrentAppAndAppUriHandlersImpl(newValue) }
    }

    private lazy var _ILauncherViewOptions: __ABI_Windows_System.ILauncherViewOptions! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheroptions.desiredremainingview)
    public var desiredRemainingView : UWP.ViewSizePreference {
        get { try! _ILauncherViewOptions.get_DesiredRemainingViewImpl() }
        set { try! _ILauncherViewOptions.put_DesiredRemainingViewImpl(newValue) }
    }

    deinit {
        _ILauncherOptions2 = nil
        _default = nil
        _ILauncherOptions3 = nil
        _ILauncherOptions4 = nil
        _ILauncherViewOptions = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheruioptions)
public final class LauncherUIOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.ILauncherUIOptions
    private typealias CABI = __x_ABI_CWindows_CSystem_CILauncherUIOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CILauncherUIOptions>?) -> LauncherUIOptions? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheruioptions.invocationpoint)
    public var invocationPoint : WindowsFoundation.Point? {
        get { try! _default.get_InvocationPointImpl() }
        set { try! _default.put_InvocationPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheruioptions.preferredplacement)
    public var preferredPlacement : UWP.Placement {
        get { try! _default.get_PreferredPlacementImpl() }
        set { try! _default.put_PreferredPlacementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.launcheruioptions.selectionrect)
    public var selectionRect : WindowsFoundation.Rect? {
        get { try! _default.get_SelectionRectImpl() }
        set { try! _default.put_SelectionRectImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user)
public final class User : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUser
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUser
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUser>?) -> User? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IUserStatics: __ABI_Windows_System.IUserStatics = try! RoGetActivationFactory(HString("Windows.System.User"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.createwatcher)
    public static func createWatcher() -> UserWatcher! {
        return try! _IUserStatics.CreateWatcherImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.findallasync)
    public static func findAllAsync() -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<User?>?>! {
        return try! _IUserStatics.FindAllAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.findallasync)
    public static func findAllAsync(_ type: UserType) -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<User?>?>! {
        return try! _IUserStatics.FindAllAsyncByTypeImpl(type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.findallasync)
    public static func findAllAsync(_ type: UserType, _ status: UserAuthenticationStatus) -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<User?>?>! {
        return try! _IUserStatics.FindAllAsyncByTypeAndStatusImpl(type, status)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getfromid)
    public static func getFromId(_ nonRoamableId: String) -> User! {
        return try! _IUserStatics.GetFromIdImpl(nonRoamableId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getpropertyasync)
    public func getPropertyAsync(_ value: String) throws -> WindowsFoundation.AnyIAsyncOperation<Any?>! {
        try _default.GetPropertyAsyncImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getpropertiesasync)
    public func getPropertiesAsync(_ values: WindowsFoundation.AnyIVectorView<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIPropertySet?>! {
        try _default.GetPropertiesAsyncImpl(values)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.getpictureasync)
    public func getPictureAsync(_ desiredSize: UserPictureSize) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStreamReference?>! {
        try _default.GetPictureAsyncImpl(desiredSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.authenticationstatus)
    public var authenticationStatus : UserAuthenticationStatus {
        get { try! _default.get_AuthenticationStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.nonroamableid)
    public var nonRoamableId : String {
        get { try! _default.get_NonRoamableIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.user.type)
    public var type : UserType {
        get { try! _default.get_TypeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangedeferral)
public final class UserAuthenticationStatusChangeDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUserAuthenticationStatusChangeDeferral
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangeDeferral>?) -> UserAuthenticationStatusChangeDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangedeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangingeventargs)
public final class UserAuthenticationStatusChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUserAuthenticationStatusChangingEventArgs
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUserAuthenticationStatusChangingEventArgs>?) -> UserAuthenticationStatusChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangingeventargs.getdeferral)
    public func getDeferral() throws -> UserAuthenticationStatusChangeDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangingeventargs.currentstatus)
    public var currentStatus : UserAuthenticationStatus {
        get { try! _default.get_CurrentStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangingeventargs.newstatus)
    public var newStatus : UserAuthenticationStatus {
        get { try! _default.get_NewStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userauthenticationstatuschangingeventargs.user)
    public var user : User! {
        get { try! _default.get_UserImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userchangedeventargs)
public final class UserChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUserChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUserChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUserChangedEventArgs>?) -> UserChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userchangedeventargs.user)
    public var user : User! {
        get { try! _default.get_UserImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher)
public final class UserWatcher : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System.IUserWatcher
    private typealias CABI = __x_ABI_CWindows_CSystem_CIUserWatcher
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CIUserWatcher>?) -> UserWatcher? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.start)
    public func start() throws {
        try _default.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.stop)
    public func stop() throws {
        try _default.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.status)
    public var status : UserWatcherStatus {
        get { try! _default.get_StatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.added)
    public lazy var added : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AddedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AddedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.authenticationstatuschanged)
    public lazy var authenticationStatusChanged : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AuthenticationStatusChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AuthenticationStatusChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.authenticationstatuschanging)
    public lazy var authenticationStatusChanging : Event<TypedEventHandler<UserWatcher?, UserAuthenticationStatusChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AuthenticationStatusChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AuthenticationStatusChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.enumerationcompleted)
    public lazy var enumerationCompleted : Event<TypedEventHandler<UserWatcher?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_EnumerationCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_EnumerationCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.removed)
    public lazy var removed : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RemovedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RemovedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.stopped)
    public lazy var stopped : Event<TypedEventHandler<UserWatcher?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_StoppedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_StoppedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.userwatcher.updated)
    public lazy var updated : Event<TypedEventHandler<UserWatcher?, UserChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_UpdatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_UpdatedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

public typealias DispatcherQueueHandler = () -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.ilauncherviewoptions)
public protocol ILauncherViewOptions : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.ilauncherviewoptions.desiredremainingview)
    var desiredRemainingView: UWP.ViewSizePreference { get set }
}

extension ILauncherViewOptions {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_System.ILauncherViewOptionsWrapper.IID:
                let wrapper = __ABI_Windows_System.ILauncherViewOptionsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyILauncherViewOptions = any ILauncherViewOptions

extension UWP.DispatcherQueuePriority {
    public static var low : UWP.DispatcherQueuePriority {
        __x_ABI_CWindows_CSystem_CDispatcherQueuePriority_Low
    }
    public static var normal : UWP.DispatcherQueuePriority {
        __x_ABI_CWindows_CSystem_CDispatcherQueuePriority_Normal
    }
    public static var high : UWP.DispatcherQueuePriority {
        __x_ABI_CWindows_CSystem_CDispatcherQueuePriority_High
    }
}
extension UWP.DispatcherQueuePriority: @retroactive Hashable, @retroactive Codable {}

extension UWP.LaunchQuerySupportStatus {
    public static var available : UWP.LaunchQuerySupportStatus {
        __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus_Available
    }
    public static var appNotInstalled : UWP.LaunchQuerySupportStatus {
        __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus_AppNotInstalled
    }
    public static var appUnavailable : UWP.LaunchQuerySupportStatus {
        __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus_AppUnavailable
    }
    public static var notSupported : UWP.LaunchQuerySupportStatus {
        __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus_NotSupported
    }
    public static var unknown : UWP.LaunchQuerySupportStatus {
        __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus_Unknown
    }
}
extension UWP.LaunchQuerySupportStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.LaunchQuerySupportType {
    public static var uri : UWP.LaunchQuerySupportType {
        __x_ABI_CWindows_CSystem_CLaunchQuerySupportType_Uri
    }
    public static var uriForResults : UWP.LaunchQuerySupportType {
        __x_ABI_CWindows_CSystem_CLaunchQuerySupportType_UriForResults
    }
}
extension UWP.LaunchQuerySupportType: @retroactive Hashable, @retroactive Codable {}

extension UWP.LaunchUriStatus {
    public static var success : UWP.LaunchUriStatus {
        __x_ABI_CWindows_CSystem_CLaunchUriStatus_Success
    }
    public static var appUnavailable : UWP.LaunchUriStatus {
        __x_ABI_CWindows_CSystem_CLaunchUriStatus_AppUnavailable
    }
    public static var protocolUnavailable : UWP.LaunchUriStatus {
        __x_ABI_CWindows_CSystem_CLaunchUriStatus_ProtocolUnavailable
    }
    public static var unknown : UWP.LaunchUriStatus {
        __x_ABI_CWindows_CSystem_CLaunchUriStatus_Unknown
    }
}
extension UWP.LaunchUriStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.ProcessorArchitecture {
    public static var x86 : UWP.ProcessorArchitecture {
        __x_ABI_CWindows_CSystem_CProcessorArchitecture_X86
    }
    public static var arm : UWP.ProcessorArchitecture {
        __x_ABI_CWindows_CSystem_CProcessorArchitecture_Arm
    }
    public static var x64 : UWP.ProcessorArchitecture {
        __x_ABI_CWindows_CSystem_CProcessorArchitecture_X64
    }
    public static var neutral : UWP.ProcessorArchitecture {
        __x_ABI_CWindows_CSystem_CProcessorArchitecture_Neutral
    }
    public static var arm64 : UWP.ProcessorArchitecture {
        __x_ABI_CWindows_CSystem_CProcessorArchitecture_Arm64
    }
    public static var x86OnArm64 : UWP.ProcessorArchitecture {
        __x_ABI_CWindows_CSystem_CProcessorArchitecture_X86OnArm64
    }
    public static var unknown : UWP.ProcessorArchitecture {
        __x_ABI_CWindows_CSystem_CProcessorArchitecture_Unknown
    }
}
extension UWP.ProcessorArchitecture: @retroactive Hashable, @retroactive Codable {}

extension UWP.UserAuthenticationStatus {
    public static var unauthenticated : UWP.UserAuthenticationStatus {
        __x_ABI_CWindows_CSystem_CUserAuthenticationStatus_Unauthenticated
    }
    public static var locallyAuthenticated : UWP.UserAuthenticationStatus {
        __x_ABI_CWindows_CSystem_CUserAuthenticationStatus_LocallyAuthenticated
    }
    public static var remotelyAuthenticated : UWP.UserAuthenticationStatus {
        __x_ABI_CWindows_CSystem_CUserAuthenticationStatus_RemotelyAuthenticated
    }
}
extension UWP.UserAuthenticationStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.UserPictureSize {
    public static var size64x64 : UWP.UserPictureSize {
        __x_ABI_CWindows_CSystem_CUserPictureSize_Size64x64
    }
    public static var size208x208 : UWP.UserPictureSize {
        __x_ABI_CWindows_CSystem_CUserPictureSize_Size208x208
    }
    public static var size424x424 : UWP.UserPictureSize {
        __x_ABI_CWindows_CSystem_CUserPictureSize_Size424x424
    }
    public static var size1080x1080 : UWP.UserPictureSize {
        __x_ABI_CWindows_CSystem_CUserPictureSize_Size1080x1080
    }
}
extension UWP.UserPictureSize: @retroactive Hashable, @retroactive Codable {}

extension UWP.UserType {
    public static var localUser : UWP.UserType {
        __x_ABI_CWindows_CSystem_CUserType_LocalUser
    }
    public static var remoteUser : UWP.UserType {
        __x_ABI_CWindows_CSystem_CUserType_RemoteUser
    }
    public static var localGuest : UWP.UserType {
        __x_ABI_CWindows_CSystem_CUserType_LocalGuest
    }
    public static var remoteGuest : UWP.UserType {
        __x_ABI_CWindows_CSystem_CUserType_RemoteGuest
    }
}
extension UWP.UserType: @retroactive Hashable, @retroactive Codable {}

extension UWP.UserWatcherStatus {
    public static var created : UWP.UserWatcherStatus {
        __x_ABI_CWindows_CSystem_CUserWatcherStatus_Created
    }
    public static var started : UWP.UserWatcherStatus {
        __x_ABI_CWindows_CSystem_CUserWatcherStatus_Started
    }
    public static var enumerationCompleted : UWP.UserWatcherStatus {
        __x_ABI_CWindows_CSystem_CUserWatcherStatus_EnumerationCompleted
    }
    public static var stopping : UWP.UserWatcherStatus {
        __x_ABI_CWindows_CSystem_CUserWatcherStatus_Stopping
    }
    public static var stopped : UWP.UserWatcherStatus {
        __x_ABI_CWindows_CSystem_CUserWatcherStatus_Stopped
    }
    public static var aborted : UWP.UserWatcherStatus {
        __x_ABI_CWindows_CSystem_CUserWatcherStatus_Aborted
    }
}
extension UWP.UserWatcherStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.VirtualKey {
    public static var none : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_None
    }
    public static var leftButton : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_LeftButton
    }
    public static var rightButton : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_RightButton
    }
    public static var cancel : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Cancel
    }
    public static var middleButton : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_MiddleButton
    }
    public static var xbutton1 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_XButton1
    }
    public static var xbutton2 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_XButton2
    }
    public static var back : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Back
    }
    public static var tab : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Tab
    }
    public static var clear : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Clear
    }
    public static var enter : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Enter
    }
    public static var shift : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Shift
    }
    public static var control : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Control
    }
    public static var menu : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Menu
    }
    public static var pause : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Pause
    }
    public static var capitalLock : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_CapitalLock
    }
    public static var kana : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Kana
    }
    public static var hangul : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Hangul
    }
    public static var junja : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Junja
    }
    public static var final : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Final
    }
    public static var hanja : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Hanja
    }
    public static var kanji : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Kanji
    }
    public static var escape : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Escape
    }
    public static var convert : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Convert
    }
    public static var nonConvert : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NonConvert
    }
    public static var accept : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Accept
    }
    public static var modeChange : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_ModeChange
    }
    public static var space : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Space
    }
    public static var pageUp : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_PageUp
    }
    public static var pageDown : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_PageDown
    }
    public static var end : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_End
    }
    public static var home : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Home
    }
    public static var left : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Left
    }
    public static var up : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Up
    }
    public static var right : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Right
    }
    public static var down : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Down
    }
    public static var select : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Select
    }
    public static var print : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Print
    }
    public static var execute : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Execute
    }
    public static var snapshot : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Snapshot
    }
    public static var insert : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Insert
    }
    public static var delete : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Delete
    }
    public static var help : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Help
    }
    public static var number0 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Number0
    }
    public static var number1 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Number1
    }
    public static var number2 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Number2
    }
    public static var number3 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Number3
    }
    public static var number4 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Number4
    }
    public static var number5 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Number5
    }
    public static var number6 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Number6
    }
    public static var number7 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Number7
    }
    public static var number8 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Number8
    }
    public static var number9 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Number9
    }
    public static var a : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_A
    }
    public static var b : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_B
    }
    public static var c : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_C
    }
    public static var d : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_D
    }
    public static var e : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_E
    }
    public static var f : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F
    }
    public static var g : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_G
    }
    public static var h : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_H
    }
    public static var i : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_I
    }
    public static var j : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_J
    }
    public static var k : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_K
    }
    public static var l : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_L
    }
    public static var m : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_M
    }
    public static var n : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_N
    }
    public static var o : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_O
    }
    public static var p : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_P
    }
    public static var q : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Q
    }
    public static var r : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_R
    }
    public static var s : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_S
    }
    public static var t : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_T
    }
    public static var u : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_U
    }
    public static var v : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_V
    }
    public static var w : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_W
    }
    public static var x : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_X
    }
    public static var y : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Y
    }
    public static var z : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Z
    }
    public static var leftWindows : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_LeftWindows
    }
    public static var rightWindows : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_RightWindows
    }
    public static var application : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Application
    }
    public static var sleep : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Sleep
    }
    public static var numberPad0 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad0
    }
    public static var numberPad1 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad1
    }
    public static var numberPad2 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad2
    }
    public static var numberPad3 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad3
    }
    public static var numberPad4 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad4
    }
    public static var numberPad5 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad5
    }
    public static var numberPad6 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad6
    }
    public static var numberPad7 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad7
    }
    public static var numberPad8 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad8
    }
    public static var numberPad9 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberPad9
    }
    public static var multiply : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Multiply
    }
    public static var add : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Add
    }
    public static var separator : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Separator
    }
    public static var subtract : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Subtract
    }
    public static var decimal : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Decimal
    }
    public static var divide : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Divide
    }
    public static var f1 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F1
    }
    public static var f2 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F2
    }
    public static var f3 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F3
    }
    public static var f4 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F4
    }
    public static var f5 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F5
    }
    public static var f6 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F6
    }
    public static var f7 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F7
    }
    public static var f8 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F8
    }
    public static var f9 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F9
    }
    public static var f10 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F10
    }
    public static var f11 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F11
    }
    public static var f12 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F12
    }
    public static var f13 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F13
    }
    public static var f14 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F14
    }
    public static var f15 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F15
    }
    public static var f16 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F16
    }
    public static var f17 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F17
    }
    public static var f18 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F18
    }
    public static var f19 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F19
    }
    public static var f20 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F20
    }
    public static var f21 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F21
    }
    public static var f22 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F22
    }
    public static var f23 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F23
    }
    public static var f24 : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_F24
    }
    public static var navigationView : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NavigationView
    }
    public static var navigationMenu : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NavigationMenu
    }
    public static var navigationUp : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NavigationUp
    }
    public static var navigationDown : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NavigationDown
    }
    public static var navigationLeft : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NavigationLeft
    }
    public static var navigationRight : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NavigationRight
    }
    public static var navigationAccept : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NavigationAccept
    }
    public static var navigationCancel : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NavigationCancel
    }
    public static var numberKeyLock : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_NumberKeyLock
    }
    public static var scroll : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Scroll
    }
    public static var leftShift : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_LeftShift
    }
    public static var rightShift : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_RightShift
    }
    public static var leftControl : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_LeftControl
    }
    public static var rightControl : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_RightControl
    }
    public static var leftMenu : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_LeftMenu
    }
    public static var rightMenu : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_RightMenu
    }
    public static var goBack : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GoBack
    }
    public static var goForward : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GoForward
    }
    public static var refresh : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Refresh
    }
    public static var stop : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Stop
    }
    public static var search : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Search
    }
    public static var favorites : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_Favorites
    }
    public static var goHome : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GoHome
    }
    public static var gamepadA : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadA
    }
    public static var gamepadB : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadB
    }
    public static var gamepadX : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadX
    }
    public static var gamepadY : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadY
    }
    public static var gamepadRightShoulder : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightShoulder
    }
    public static var gamepadLeftShoulder : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftShoulder
    }
    public static var gamepadLeftTrigger : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftTrigger
    }
    public static var gamepadRightTrigger : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightTrigger
    }
    public static var gamepadDPadUp : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadDPadUp
    }
    public static var gamepadDPadDown : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadDPadDown
    }
    public static var gamepadDPadLeft : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadDPadLeft
    }
    public static var gamepadDPadRight : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadDPadRight
    }
    public static var gamepadMenu : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadMenu
    }
    public static var gamepadView : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadView
    }
    public static var gamepadLeftThumbstickButton : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickButton
    }
    public static var gamepadRightThumbstickButton : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickButton
    }
    public static var gamepadLeftThumbstickUp : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickUp
    }
    public static var gamepadLeftThumbstickDown : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickDown
    }
    public static var gamepadLeftThumbstickRight : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickRight
    }
    public static var gamepadLeftThumbstickLeft : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickLeft
    }
    public static var gamepadRightThumbstickUp : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickUp
    }
    public static var gamepadRightThumbstickDown : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickDown
    }
    public static var gamepadRightThumbstickRight : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickRight
    }
    public static var gamepadRightThumbstickLeft : UWP.VirtualKey {
        __x_ABI_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickLeft
    }
}
extension UWP.VirtualKey: @retroactive Hashable, @retroactive Codable {}

extension UWP.VirtualKeyModifiers {
    public static var none : UWP.VirtualKeyModifiers {
        __x_ABI_CWindows_CSystem_CVirtualKeyModifiers_None
    }
    public static var control : UWP.VirtualKeyModifiers {
        __x_ABI_CWindows_CSystem_CVirtualKeyModifiers_Control
    }
    public static var menu : UWP.VirtualKeyModifiers {
        __x_ABI_CWindows_CSystem_CVirtualKeyModifiers_Menu
    }
    public static var shift : UWP.VirtualKeyModifiers {
        __x_ABI_CWindows_CSystem_CVirtualKeyModifiers_Shift
    }
    public static var windows : UWP.VirtualKeyModifiers {
        __x_ABI_CWindows_CSystem_CVirtualKeyModifiers_Windows
    }
}
extension UWP.VirtualKeyModifiers: @retroactive Hashable, @retroactive Codable {}


// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.apprestartfailurereason)
public typealias AppRestartFailureReason = __x_ABI_CWindows_CApplicationModel_CCore_CAppRestartFailureReason
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.applistentry)
public final class AppListEntry : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Core.IAppListEntry
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry>?) -> AppListEntry? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.applistentry.launchasync)
    public func launchAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _default.LaunchAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.applistentry.displayinfo)
    public var displayInfo : UWP.AppDisplayInfo! {
        get { try! _default.get_DisplayInfoImpl() }
    }

    private lazy var _IAppListEntry2: __ABI_Windows_ApplicationModel_Core.IAppListEntry2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.applistentry.appusermodelid)
    public var appUserModelId : String {
        get { try! _IAppListEntry2.get_AppUserModelIdImpl() }
    }

    private lazy var _IAppListEntry3: __ABI_Windows_ApplicationModel_Core.IAppListEntry3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.applistentry.launchforuserasync)
    public func launchForUserAsync(_ user: UWP.User!) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _IAppListEntry3.LaunchForUserAsyncImpl(user)
    }

    deinit {
        _default = nil
        _IAppListEntry2 = nil
        _IAppListEntry3 = nil
    }
}

extension UWP.AppRestartFailureReason {
    public static var restartPending : UWP.AppRestartFailureReason {
        __x_ABI_CWindows_CApplicationModel_CCore_CAppRestartFailureReason_RestartPending
    }
    public static var notInForeground : UWP.AppRestartFailureReason {
        __x_ABI_CWindows_CApplicationModel_CCore_CAppRestartFailureReason_NotInForeground
    }
    public static var invalidUser : UWP.AppRestartFailureReason {
        __x_ABI_CWindows_CApplicationModel_CCore_CAppRestartFailureReason_InvalidUser
    }
    public static var other : UWP.AppRestartFailureReason {
        __x_ABI_CWindows_CApplicationModel_CCore_CAppRestartFailureReason_Other
    }
}
extension UWP.AppRestartFailureReason: @retroactive Hashable, @retroactive Codable {}


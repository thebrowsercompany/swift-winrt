// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker: WindowsFoundation.IID {
    .init(Data1: 0x2CA8278A, Data2: 0x12C5, Data3: 0x4C5F, Data4: ( 0x89,0x77,0x94,0x54,0x77,0x93,0xC2,0x41 ))// 2CA8278A-12C5-4C5F-8977-94547793C241
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker2: WindowsFoundation.IID {
    .init(Data1: 0x8CEB6CD2, Data2: 0xB446, Data3: 0x46F7, Data4: ( 0xB2,0x65,0x90,0xF8,0xE5,0x5A,0xD6,0x50 ))// 8CEB6CD2-B446-46F7-B265-90F8E55AD650
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker3: WindowsFoundation.IID {
    .init(Data1: 0xD9A5C5B3, Data2: 0xC5DC, Data3: 0x5B98, Data4: ( 0xBD,0x80,0xA8,0xD0,0xCA,0x05,0x84,0xD8 ))// D9A5C5B3-C5DC-5B98-BD80-A8D0CA0584D8
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPickerStatics: WindowsFoundation.IID {
    .init(Data1: 0x6821573B, Data2: 0x2F02, Data3: 0x4833, Data4: ( 0x96,0xD4,0xAB,0xBF,0xAD,0x72,0xB6,0x7B ))// 6821573B-2F02-4833-96D4-ABBFAD72B67B
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPickerStatics2: WindowsFoundation.IID {
    .init(Data1: 0xE8917415, Data2: 0xEDDD, Data3: 0x5C98, Data4: ( 0xB6,0xF3,0x36,0x6F,0xDF,0xCA,0xD3,0x92 ))// E8917415-EDDD-5C98-B6F3-366FDFCAD392
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPickerWithOperationId: WindowsFoundation.IID {
    .init(Data1: 0x3F57B569, Data2: 0x2522, Data3: 0x4CA5, Data4: ( 0xAA,0x73,0xA1,0x55,0x09,0xF1,0xFC,0xBF ))// 3F57B569-2522-4CA5-AA73-A15509F1FCBF
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker: WindowsFoundation.IID {
    .init(Data1: 0x3286FFCB, Data2: 0x617F, Data3: 0x4CC5, Data4: ( 0xAF,0x6A,0xB3,0xFD,0xF2,0x9A,0xD1,0x45 ))// 3286FFCB-617F-4CC5-AF6A-B3FDF29AD145
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker2: WindowsFoundation.IID {
    .init(Data1: 0x0EC313A2, Data2: 0xD24B, Data3: 0x449A, Data4: ( 0x81,0x97,0xE8,0x91,0x04,0xFD,0x42,0xCC ))// 0EC313A2-D24B-449A-8197-E89104FD42CC
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker3: WindowsFoundation.IID {
    .init(Data1: 0x698AEC69, Data2: 0xBA3C, Data3: 0x4E51, Data4: ( 0xBD,0x90,0x4A,0xBC,0xBB,0xF4,0xCF,0xAF ))// 698AEC69-BA3C-4E51-BD90-4ABCBBF4CFAF
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker4: WindowsFoundation.IID {
    .init(Data1: 0xE7D83A5A, Data2: 0xDDFA, Data3: 0x5DE0, Data4: ( 0x8B,0x70,0xC8,0x42,0xC2,0x19,0x88,0xEC ))// E7D83A5A-DDFA-5DE0-8B70-C842C21988EC
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFileSavePickerStatics: WindowsFoundation.IID {
    .init(Data1: 0x28E3CF9E, Data2: 0x961C, Data3: 0x5E2C, Data4: ( 0xAE,0xD7,0xE6,0x47,0x37,0xF4,0xCE,0x37 ))// 28E3CF9E-961C-5E2C-AED7-E64737F4CE37
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFolderPicker: WindowsFoundation.IID {
    .init(Data1: 0x084F7799, Data2: 0xF3FB, Data3: 0x400A, Data4: ( 0x99,0xB1,0x7B,0x4A,0x77,0x2F,0xD6,0x0D ))// 084F7799-F3FB-400A-99B1-7B4A772FD60D
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFolderPicker2: WindowsFoundation.IID {
    .init(Data1: 0x8EB3BA97, Data2: 0xDC85, Data3: 0x4616, Data4: ( 0xBE,0x94,0x96,0x60,0x88,0x1F,0x2F,0x5D ))// 8EB3BA97-DC85-4616-BE94-9660881F2F5D
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFolderPicker3: WindowsFoundation.IID {
    .init(Data1: 0x673B1E29, Data2: 0xD326, Data3: 0x53C0, Data4: ( 0xBD,0x24,0xA2,0x5C,0x71,0x4C,0xEE,0x36 ))// 673B1E29-D326-53C0-BD24-A25C714CEE36
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CIFolderPickerStatics: WindowsFoundation.IID {
    .init(Data1: 0x9BE34740, Data2: 0x7CA1, Data3: 0x5942, Data4: ( 0xA3,0xC8,0x46,0xF2,0x55,0x1E,0xCF,0xF3 ))// 9BE34740-7CA1-5942-A3C8-46F2551ECFF3
}

public enum __ABI_Windows_Storage_Pickers {
    public class IFileOpenPicker: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker }

        internal func get_ViewModeImpl() throws -> UWP.PickerViewMode {
            var value: __x_ABI_CWindows_CStorage_CPickers_CPickerViewMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewMode(pThis, &value))
            }
            return value
        }

        internal func put_ViewModeImpl(_ value: UWP.PickerViewMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ViewMode(pThis, value))
            }
        }

        internal func get_SettingsIdentifierImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsIdentifier(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SettingsIdentifierImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SettingsIdentifier(pThis, _value.get()))
            }
        }

        internal func get_SuggestedStartLocationImpl() throws -> UWP.PickerLocationId {
            var value: __x_ABI_CWindows_CStorage_CPickers_CPickerLocationId = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuggestedStartLocation(pThis, &value))
            }
            return value
        }

        internal func put_SuggestedStartLocationImpl(_ value: UWP.PickerLocationId) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuggestedStartLocation(pThis, value))
            }
        }

        internal func get_CommitButtonTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommitButtonText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CommitButtonTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommitButtonText(pThis, _value.get()))
            }
        }

        internal func get_FileTypeFilterImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileTypeFilter(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func PickSingleFileAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PickSingleFileAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

        internal func PickMultipleFilesAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageFile?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PickMultipleFilesAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IFileOpenPicker2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker2 }

        internal func get_ContinuationDataImpl() throws -> WindowsFoundation.ValueSet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContinuationData(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func PickSingleFileAndContinueImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PickSingleFileAndContinue(pThis))
            }
        }

        internal func PickMultipleFilesAndContinueImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PickMultipleFilesAndContinue(pThis))
            }
        }

    }

    public class IFileOpenPicker3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker3 }

        internal func get_UserImpl() throws -> UWP.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFileOpenPickerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPickerStatics }

        internal func ResumePickSingleFileAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPickerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ResumePickSingleFileAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IFileOpenPickerStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPickerStatics2 }

        internal func CreateForUserImpl(_ user: UWP.User?) throws -> UWP.FileOpenPicker? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPickerStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForUser(pThis, RawPointer(user), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IFileOpenPickerWithOperationId: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileOpenPickerWithOperationId }

        internal func PickSingleFileAsyncImpl(_ pickerOperationId: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _pickerOperationId = try! HString(pickerOperationId)
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPickerWithOperationId.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PickSingleFileAsync(pThis, _pickerOperationId.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IFileSavePicker: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker }

        internal func get_SettingsIdentifierImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsIdentifier(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SettingsIdentifierImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SettingsIdentifier(pThis, _value.get()))
            }
        }

        internal func get_SuggestedStartLocationImpl() throws -> UWP.PickerLocationId {
            var value: __x_ABI_CWindows_CStorage_CPickers_CPickerLocationId = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuggestedStartLocation(pThis, &value))
            }
            return value
        }

        internal func put_SuggestedStartLocationImpl(_ value: UWP.PickerLocationId) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuggestedStartLocation(pThis, value))
            }
        }

        internal func get_CommitButtonTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommitButtonText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CommitButtonTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommitButtonText(pThis, _value.get()))
            }
        }

        internal func get_FileTypeChoicesImpl() throws -> WindowsFoundation.AnyIMap<String, WindowsFoundation.AnyIVector<String>?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileTypeChoices(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func get_DefaultFileExtensionImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFileExtension(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_DefaultFileExtensionImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultFileExtension(pThis, _value.get()))
            }
        }

        internal func get_SuggestedSaveFileImpl() throws -> UWP.StorageFile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuggestedSaveFile(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SuggestedSaveFileImpl(_ value: UWP.StorageFile?) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuggestedSaveFile(pThis, RawPointer(value)))
            }
        }

        internal func get_SuggestedFileNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuggestedFileName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SuggestedFileNameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuggestedFileName(pThis, _value.get()))
            }
        }

        internal func PickSaveFileAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PickSaveFileAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IFileSavePicker2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker2 }

        internal func get_ContinuationDataImpl() throws -> WindowsFoundation.ValueSet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContinuationData(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func PickSaveFileAndContinueImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PickSaveFileAndContinue(pThis))
            }
        }

    }

    public class IFileSavePicker3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker3 }

        internal func get_EnterpriseIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnterpriseId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_EnterpriseIdImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnterpriseId(pThis, _value.get()))
            }
        }

    }

    public class IFileSavePicker4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker4 }

        internal func get_UserImpl() throws -> UWP.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFileSavePickerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFileSavePickerStatics }

        internal func CreateForUserImpl(_ user: UWP.User?) throws -> UWP.FileSavePicker? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFileSavePickerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForUser(pThis, RawPointer(user), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IFolderPicker: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFolderPicker }

        internal func get_ViewModeImpl() throws -> UWP.PickerViewMode {
            var value: __x_ABI_CWindows_CStorage_CPickers_CPickerViewMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewMode(pThis, &value))
            }
            return value
        }

        internal func put_ViewModeImpl(_ value: UWP.PickerViewMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ViewMode(pThis, value))
            }
        }

        internal func get_SettingsIdentifierImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsIdentifier(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SettingsIdentifierImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SettingsIdentifier(pThis, _value.get()))
            }
        }

        internal func get_SuggestedStartLocationImpl() throws -> UWP.PickerLocationId {
            var value: __x_ABI_CWindows_CStorage_CPickers_CPickerLocationId = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuggestedStartLocation(pThis, &value))
            }
            return value
        }

        internal func put_SuggestedStartLocationImpl(_ value: UWP.PickerLocationId) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuggestedStartLocation(pThis, value))
            }
        }

        internal func get_CommitButtonTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommitButtonText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CommitButtonTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommitButtonText(pThis, _value.get()))
            }
        }

        internal func get_FileTypeFilterImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileTypeFilter(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func PickSingleFolderAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageFolder?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PickSingleFolderAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IFolderPicker2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFolderPicker2 }

        internal func get_ContinuationDataImpl() throws -> WindowsFoundation.ValueSet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContinuationData(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func PickFolderAndContinueImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PickFolderAndContinue(pThis))
            }
        }

    }

    public class IFolderPicker3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFolderPicker3 }

        internal func get_UserImpl() throws -> UWP.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFolderPickerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CIFolderPickerStatics }

        internal func CreateForUserImpl(_ user: UWP.User?) throws -> UWP.FolderPicker? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CIFolderPickerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForUser(pThis, RawPointer(user), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

}

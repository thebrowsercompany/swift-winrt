// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CMedia_CPlayback_CICurrentMediaPlaybackItemChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1743A892, Data2: 0x5C43, Data3: 0x4A15, Data4: ( 0x96,0x7A,0x57,0x2D,0x2D,0x0F,0x26,0xC6 ))// 1743A892-5C43-4A15-967A-572D2D0F26C6
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CICurrentMediaPlaybackItemChangedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0x1D80A51E, Data2: 0x996E, Data3: 0x40A9, Data4: ( 0xBE,0x48,0xE6,0x6E,0xC9,0x0B,0x2B,0x7D ))// 1D80A51E-996E-40A9-BE48-E66EC90B2B7D
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreak: WindowsFoundation.IID {
    .init(Data1: 0x714BE270, Data2: 0x0DEF, Data3: 0x4EBC, Data4: ( 0xA4,0x89,0x6B,0x34,0x93,0x0E,0x15,0x58 ))// 714BE270-0DEF-4EBC-A489-6B34930E1558
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakEndedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x32B93276, Data2: 0x1C5D, Data3: 0x4FEE, Data4: ( 0x87,0x32,0x23,0x6D,0xC3,0xA8,0x85,0x80 ))// 32B93276-1C5D-4FEE-8732-236DC3A88580
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakFactory: WindowsFoundation.IID {
    .init(Data1: 0x4516E002, Data2: 0x18E0, Data3: 0x4079, Data4: ( 0x8B,0x5F,0xD3,0x34,0x95,0xC1,0x5D,0x2E ))// 4516E002-18E0-4079-8B5F-D33495C15D2E
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager: WindowsFoundation.IID {
    .init(Data1: 0xA854DDB1, Data2: 0xFEB4, Data3: 0x4D9B, Data4: ( 0x9D,0x97,0x0F,0xDB,0xE5,0x8E,0x5E,0x39 ))// A854DDB1-FEB4-4D9B-9D97-0FDBE58E5E39
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule: WindowsFoundation.IID {
    .init(Data1: 0xA19A5813, Data2: 0x98B6, Data3: 0x41D8, Data4: ( 0x83,0xDA,0xF9,0x71,0xD2,0x2B,0x7B,0xBA ))// A19A5813-98B6-41D8-83DA-F971D22B7BBA
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSeekedOverEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xE5AA6746, Data2: 0x0606, Data3: 0x4492, Data4: ( 0xB9,0xD3,0xC3,0xC8,0xFD,0xE0,0xA4,0xEA ))// E5AA6746-0606-4492-B9D3-C3C8FDE0A4EA
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSkippedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6EE94C05, Data2: 0x2F54, Data3: 0x4A3E, Data4: ( 0xA3,0xAB,0x24,0xC3,0xB2,0x70,0xB4,0xA3 ))// 6EE94C05-2F54-4A3E-A3AB-24C3B270B4A3
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakStartedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA87EFE71, Data2: 0xDFD4, Data3: 0x454A, Data4: ( 0x95,0x6E,0x0A,0x4A,0x64,0x83,0x95,0xF8 ))// A87EFE71-DFD4-454A-956E-0A4A648395F8
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaItemDisplayProperties: WindowsFoundation.IID {
    .init(Data1: 0x1E3C1B48, Data2: 0x7097, Data3: 0x4384, Data4: ( 0xA2,0x17,0xC1,0x29,0x1D,0xFA,0x8C,0x16 ))// 1E3C1B48-7097-4384-A217-C1291DFA8C16
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager: WindowsFoundation.IID {
    .init(Data1: 0x5ACEE5A6, Data2: 0x5CB6, Data3: 0x4A5A, Data4: ( 0x85,0x21,0xCC,0x86,0xB1,0xC1,0xED,0x37 ))// 5ACEE5A6-5CB6-4A5A-8521-CC86B1C1ED37
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x3D6F4F23, Data2: 0x5230, Data3: 0x4411, Data4: ( 0xA0,0xE9,0xBA,0xD9,0x4C,0x2A,0x04,0x5C ))// 3D6F4F23-5230-4411-A0E9-BAD94C2A045C
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerCommandBehavior: WindowsFoundation.IID {
    .init(Data1: 0x786C1E78, Data2: 0xCE78, Data3: 0x4A10, Data4: ( 0xAF,0xD6,0x84,0x3F,0xCB,0xB9,0x0C,0x2E ))// 786C1E78-CE78-4A10-AFD6-843FCBB90C2E
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerFastForwardReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x30F064D9, Data2: 0xB491, Data3: 0x4D0A, Data4: ( 0xBC,0x21,0x30,0x98,0xBD,0x13,0x32,0xE9 ))// 30F064D9-B491-4D0A-BC21-3098BD1332E9
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerNextReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xE1504433, Data2: 0xA2B0, Data3: 0x45D4, Data4: ( 0xB9,0xDE,0x5F,0x42,0xAC,0x14,0xA8,0x39 ))// E1504433-A2B0-45D4-B9DE-5F42AC14A839
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPauseReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x5CECCD1C, Data2: 0xC25C, Data3: 0x4221, Data4: ( 0xB1,0x6C,0xC3,0xC9,0x8C,0xE0,0x12,0xD6 ))// 5CECCD1C-C25C-4221-B16C-C3C98CE012D6
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPlayReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9AF0004E, Data2: 0x578B, Data3: 0x4C56, Data4: ( 0xA0,0x06,0x16,0x15,0x9D,0x88,0x8A,0x48 ))// 9AF0004E-578B-4C56-A006-16159D888A48
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPositionReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x5591A754, Data2: 0xD627, Data3: 0x4BDD, Data4: ( 0xA9,0x0D,0x86,0xA0,0x15,0xB2,0x49,0x02 ))// 5591A754-D627-4BDD-A90D-86A015B24902
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPreviousReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x525E3081, Data2: 0x4632, Data3: 0x4F76, Data4: ( 0x99,0xB1,0xD7,0x71,0x62,0x3F,0x62,0x87 ))// 525E3081-4632-4F76-99B1-D771623F6287
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRateReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x18EA3939, Data2: 0x4A16, Data3: 0x4169, Data4: ( 0x8B,0x05,0x3E,0xB9,0xF5,0xFF,0x78,0xEB ))// 18EA3939-4A16-4169-8B05-3EB9F5FF78EB
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRewindReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9F085947, Data2: 0xA3C0, Data3: 0x425D, Data4: ( 0xAA,0xEF,0x97,0xBA,0x78,0x98,0xB1,0x41 ))// 9F085947-A3C0-425D-AAEF-97BA7898B141
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerShuffleReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x50A05CEF, Data2: 0x63EE, Data3: 0x4A96, Data4: ( 0xB7,0xB5,0xFE,0xE0,0x8B,0x9F,0xF9,0x0C ))// 50A05CEF-63EE-4A96-B7B5-FEE08B9FF90C
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem: WindowsFoundation.IID {
    .init(Data1: 0x047097D2, Data2: 0xE4AF, Data3: 0x48AB, Data4: ( 0xB2,0x83,0x69,0x29,0xE6,0x74,0xEC,0xE2 ))// 047097D2-E4AF-48AB-B283-6929E674ECE2
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem2: WindowsFoundation.IID {
    .init(Data1: 0xD859D171, Data2: 0xD7EF, Data3: 0x4B81, Data4: ( 0xAC,0x1F,0xF4,0x04,0x93,0xCB,0xB0,0x91 ))// D859D171-D7EF-4B81-AC1F-F40493CBB091
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem3: WindowsFoundation.IID {
    .init(Data1: 0x0D328220, Data2: 0xB80A, Data3: 0x4D09, Data4: ( 0x9F,0xF8,0xF8,0x70,0x94,0xA1,0xC8,0x31 ))// 0D328220-B80A-4D09-9FF8-F87094A1C831
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemError: WindowsFoundation.IID {
    .init(Data1: 0x69FBEF2B, Data2: 0xDCD6, Data3: 0x4DF9, Data4: ( 0xA4,0x50,0xDB,0xF4,0xC6,0xF1,0xC2,0xC2 ))// 69FBEF2B-DCD6-4DF9-A450-DBF4C6F1C2C2
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x7133FCE1, Data2: 0x1769, Data3: 0x4FF9, Data4: ( 0xA7,0xC1,0x38,0xD2,0xC4,0xD4,0x23,0x60 ))// 7133FCE1-1769-4FF9-A7C1-38D2C4D42360
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFactory2: WindowsFoundation.IID {
    .init(Data1: 0xD77CDF3A, Data2: 0xB947, Data3: 0x4972, Data4: ( 0xB3,0x5D,0xAD,0xFB,0x93,0x1A,0x71,0xE6 ))// D77CDF3A-B947-4972-B35D-ADFB931A71E6
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFailedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x7703134A, Data2: 0xE9A7, Data3: 0x47C3, Data4: ( 0x86,0x2C,0xC6,0x56,0xD3,0x06,0x83,0xD4 ))// 7703134A-E9A7-47C3-862C-C656D30683D4
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemOpenedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xCBD9BD82, Data2: 0x3037, Data3: 0x4FBE, Data4: ( 0xAE,0x8F,0x39,0xFC,0x39,0xED,0xF4,0xEF ))// CBD9BD82-3037-4FBE-AE8F-39FC39EDF4EF
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemStatics: WindowsFoundation.IID {
    .init(Data1: 0x4B1BE7F4, Data2: 0x4345, Data3: 0x403C, Data4: ( 0x8A,0x67,0xF5,0xDE,0x91,0xDF,0x4C,0x86 ))// 4B1BE7F4-4345-403C-8A67-F5DE91DF4C86
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList: WindowsFoundation.IID {
    .init(Data1: 0x7F77EE9C, Data2: 0xDC42, Data3: 0x4E26, Data4: ( 0xA9,0x8D,0x78,0x50,0xDF,0x8E,0xC9,0x25 ))// 7F77EE9C-DC42-4E26-A98D-7850DF8EC925
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList2: WindowsFoundation.IID {
    .init(Data1: 0x0E09B478, Data2: 0x600A, Data3: 0x4274, Data4: ( 0xA1,0x4B,0x0B,0x67,0x23,0xD0,0xF4,0x8B ))// 0E09B478-600A-4274-A14B-0B6723D0F48B
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList3: WindowsFoundation.IID {
    .init(Data1: 0xDD24BBA9, Data2: 0xBC47, Data3: 0x4463, Data4: ( 0xAA,0x90,0xC1,0x8B,0x7E,0x5F,0xFD,0xE1 ))// DD24BBA9-BC47-4463-AA90-C18B7E5FFDE1
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession: WindowsFoundation.IID {
    .init(Data1: 0xC32B683D, Data2: 0x0407, Data3: 0x41BA, Data4: ( 0x89,0x46,0x8B,0x34,0x5A,0x5A,0x54,0x35 ))// C32B683D-0407-41BA-8946-8B345A5A5435
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2: WindowsFoundation.IID {
    .init(Data1: 0xF8BA7C79, Data2: 0x1FC8, Data3: 0x4097, Data4: ( 0xAD,0x70,0xC0,0xFA,0x18,0xCC,0x00,0x50 ))// F8BA7C79-1FC8-4097-AD70-C0FA18CC0050
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession3: WindowsFoundation.IID {
    .init(Data1: 0x7BA2B41A, Data2: 0xA3E2, Data3: 0x405F, Data4: ( 0xB7,0x7B,0xA4,0x81,0x2C,0x23,0x8B,0x66 ))// 7BA2B41A-A3E2-405F-B77B-A4812C238B66
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSessionOutputDegradationPolicyState: WindowsFoundation.IID {
    .init(Data1: 0x558E727D, Data2: 0xF633, Data3: 0x49F9, Data4: ( 0x96,0x5A,0xAB,0xAA,0x1D,0xB7,0x09,0xBE ))// 558E727D-F633-49F9-965A-ABAA1DB709BE
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource: WindowsFoundation.IID {
    .init(Data1: 0xEF9DC2BC, Data2: 0x9317, Data3: 0x4696, Data4: ( 0xB0,0x51,0x2B,0xAD,0x64,0x31,0x77,0xB5 ))// EF9DC2BC-9317-4696-B051-2BAD643177B5
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection: WindowsFoundation.IID {
    .init(Data1: 0xD405B37C, Data2: 0x6F0E, Data3: 0x4661, Data4: ( 0xB8,0xEE,0xD4,0x87,0xBA,0x97,0x52,0xD5 ))// D405B37C-6F0E-4661-B8EE-D487BA9752D5
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackTimedMetadataTrackList: WindowsFoundation.IID {
    .init(Data1: 0x72B41319, Data2: 0xBBFB, Data3: 0x46A3, Data4: ( 0x93,0x72,0x9C,0x9C,0x74,0x4B,0x94,0x38 ))// 72B41319-BBFB-46A3-9372-9C9C744B9438
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer: WindowsFoundation.IID {
    .init(Data1: 0x381A83CB, Data2: 0x6FFF, Data3: 0x499B, Data4: ( 0x8D,0x64,0x28,0x85,0xDF,0xC1,0x24,0x9E ))// 381A83CB-6FFF-499B-8D64-2885DFC1249E
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer2: WindowsFoundation.IID {
    .init(Data1: 0x3C841218, Data2: 0x2123, Data3: 0x4FC5, Data4: ( 0x90,0x82,0x2F,0x88,0x3F,0x77,0xBD,0xF5 ))// 3C841218-2123-4FC5-9082-2F883F77BDF5
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3: WindowsFoundation.IID {
    .init(Data1: 0xEE0660DA, Data2: 0x031B, Data3: 0x4FEB, Data4: ( 0xBD,0x9B,0x92,0xE0,0xA0,0xA8,0xD2,0x99 ))// EE0660DA-031B-4FEB-BD9B-92E0A0A8D299
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer4: WindowsFoundation.IID {
    .init(Data1: 0x80035DB0, Data2: 0x7448, Data3: 0x4770, Data4: ( 0xAF,0xCF,0x2A,0x57,0x45,0x09,0x14,0xC5 ))// 80035DB0-7448-4770-AFCF-2A57450914C5
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer5: WindowsFoundation.IID {
    .init(Data1: 0xCFE537FD, Data2: 0xF86A, Data3: 0x4446, Data4: ( 0xBF,0x4D,0xC8,0xE7,0x92,0xB7,0xB4,0xB3 ))// CFE537FD-F86A-4446-BF4D-C8E792B7B4B3
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer6: WindowsFoundation.IID {
    .init(Data1: 0xE0CAA086, Data2: 0xAE65, Data3: 0x414C, Data4: ( 0xB0,0x10,0x8B,0xC5,0x5F,0x00,0xE6,0x92 ))// E0CAA086-AE65-414C-B010-8BC55F00E692
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer7: WindowsFoundation.IID {
    .init(Data1: 0x5D1DC478, Data2: 0x4500, Data3: 0x4531, Data4: ( 0xB3,0xF4,0x77,0x7A,0x71,0x49,0x1F,0x7F ))// 5D1DC478-4500-4531-B3F4-777A71491F7F
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerEffects: WindowsFoundation.IID {
    .init(Data1: 0x85A1DEDA, Data2: 0xCAB6, Data3: 0x4CC0, Data4: ( 0x8B,0xE3,0x60,0x35,0xF4,0xDE,0x25,0x91 ))// 85A1DEDA-CAB6-4CC0-8BE3-6035F4DE2591
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerEffects2: WindowsFoundation.IID {
    .init(Data1: 0xFA419A79, Data2: 0x1BBE, Data3: 0x46C5, Data4: ( 0xAE,0x1F,0x8E,0xE6,0x9F,0xB3,0xC2,0xC7 ))// FA419A79-1BBE-46C5-AE1F-8EE69FB3C2C7
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerFailedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x2744E9B9, Data2: 0xA7E3, Data3: 0x4F16, Data4: ( 0xBA,0xC4,0x79,0x14,0xEB,0xC0,0x83,0x01 ))// 2744E9B9-A7E3-4F16-BAC4-7914EBC08301
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerRateChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x40600D58, Data2: 0x3B61, Data3: 0x4BB2, Data4: ( 0x98,0x9F,0xFC,0x65,0x60,0x8B,0x6C,0xAB ))// 40600D58-3B61-4BB2-989F-FC65608B6CAB
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource: WindowsFoundation.IID {
    .init(Data1: 0xBD4F8897, Data2: 0x1423, Data3: 0x4C3E, Data4: ( 0x82,0xC5,0x0F,0xB1,0xAF,0x94,0xF7,0x15 ))// BD4F8897-1423-4C3E-82C5-0FB1AF94F715
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource2: WindowsFoundation.IID {
    .init(Data1: 0x82449B9F, Data2: 0x7322, Data3: 0x4C0B, Data4: ( 0xB0,0x3B,0x3E,0x69,0xA4,0x82,0x60,0xC5 ))// 82449B9F-7322-4C0B-B03B-3E69A48260C5
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSurface: WindowsFoundation.IID {
    .init(Data1: 0x0ED653BC, Data2: 0xB736, Data3: 0x49C3, Data4: ( 0x83,0x0B,0x76,0x4A,0x38,0x45,0x31,0x3A ))// 0ED653BC-B736-49C3-830B-764A3845313A
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarker: WindowsFoundation.IID {
    .init(Data1: 0xC4D22F5C, Data2: 0x3C1C, Data3: 0x4444, Data4: ( 0xB6,0xB9,0x77,0x8B,0x04,0x22,0xD4,0x1A ))// C4D22F5C-3C1C-4444-B6B9-778B0422D41A
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerFactory: WindowsFoundation.IID {
    .init(Data1: 0x8C530A78, Data2: 0xE0AE, Data3: 0x4E1A, Data4: ( 0xA8,0xC8,0xE2,0x3F,0x98,0x2A,0x93,0x7B ))// 8C530A78-E0AE-4E1A-A8C8-E23F982A937B
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerReachedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x578CD1B9, Data2: 0x90E2, Data3: 0x4E60, Data4: ( 0xAB,0xC4,0x87,0x40,0xB0,0x1F,0x61,0x96 ))// 578CD1B9-90E2-4E60-ABC4-8740B01F6196
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerSequence: WindowsFoundation.IID {
    .init(Data1: 0xF2810CEE, Data2: 0x638B, Data3: 0x46CF, Data4: ( 0x88,0x17,0x1D,0x11,0x1F,0xE9,0xD8,0xC4 ))// F2810CEE-638B-46CF-8817-1D111FE9D8C4
}

private var IID___x_ABI_CWindows_CMedia_CPlayback_CITimedMetadataPresentationModeChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xD1636099, Data2: 0x65DF, Data3: 0x45AE, Data4: ( 0x8C,0xEF,0xDC,0x0B,0x53,0xFD,0xC2,0xBB ))// D1636099-65DF-45AE-8CEF-DC0B53FDC2BB
}

public enum __ABI_Windows_Media_Playback {
    public class ICurrentMediaPlaybackItemChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CICurrentMediaPlaybackItemChangedEventArgs }

        internal func get_NewItemImpl() throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CICurrentMediaPlaybackItemChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OldItemImpl() throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CICurrentMediaPlaybackItemChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICurrentMediaPlaybackItemChangedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CICurrentMediaPlaybackItemChangedEventArgs2 }

        internal func get_ReasonImpl() throws -> UWP.MediaPlaybackItemChangedReason {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CMediaPlaybackItemChangedReason = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CICurrentMediaPlaybackItemChangedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

    }

    public class IMediaBreak: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreak }

        internal func get_PlaybackListImpl() throws -> UWP.MediaPlaybackList? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreak.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackList(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PresentationPositionImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreak.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PresentationPosition(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func get_InsertionMethodImpl() throws -> UWP.MediaBreakInsertionMethod {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CMediaBreakInsertionMethod = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreak.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InsertionMethod(pThis, &value))
            }
            return value
        }

        internal func get_CustomPropertiesImpl() throws -> WindowsFoundation.ValueSet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreak.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CanStartImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreak.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanStart(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CanStartImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreak.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanStart(pThis, .init(from: value)))
            }
        }

    }

    public class IMediaBreakEndedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakEndedEventArgs }

        internal func get_MediaBreakImpl() throws -> UWP.MediaBreak? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakEndedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaBreak(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaBreakFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakFactory }

        internal func CreateImpl(_ insertionMethod: UWP.MediaBreakInsertionMethod) throws -> IMediaBreak {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, insertionMethod, &resultAbi))
                }
            }
            return IMediaBreak(result!)
        }

        internal func CreateWithPresentationPositionImpl(_ insertionMethod: UWP.MediaBreakInsertionMethod, _ presentationPosition: WindowsFoundation.TimeSpan) throws -> IMediaBreak {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithPresentationPosition(pThis, insertionMethod, .from(swift: presentationPosition), &resultAbi))
                }
            }
            return IMediaBreak(result!)
        }

    }

    public class IMediaBreakManager: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager }

        internal func add_BreaksSeekedOverImpl(_ handler: TypedEventHandler<UWP.MediaBreakManager?, UWP.MediaBreakSeekedOverEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakManager___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakSeekedOverEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BreaksSeekedOver(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BreaksSeekedOverImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BreaksSeekedOver(pThis, token))
            }
        }

        internal func add_BreakStartedImpl(_ handler: TypedEventHandler<UWP.MediaBreakManager?, UWP.MediaBreakStartedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakManager___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakStartedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BreakStarted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BreakStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BreakStarted(pThis, token))
            }
        }

        internal func add_BreakEndedImpl(_ handler: TypedEventHandler<UWP.MediaBreakManager?, UWP.MediaBreakEndedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakManager___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakEndedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BreakEnded(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BreakEndedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BreakEnded(pThis, token))
            }
        }

        internal func add_BreakSkippedImpl(_ handler: TypedEventHandler<UWP.MediaBreakManager?, UWP.MediaBreakSkippedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakManager___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakSkippedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BreakSkipped(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BreakSkippedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BreakSkipped(pThis, token))
            }
        }

        internal func get_CurrentBreakImpl() throws -> UWP.MediaBreak? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentBreak(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlaybackSessionImpl() throws -> UWP.MediaPlaybackSession? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackSession(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func PlayBreakImpl(_ value: UWP.MediaBreak?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PlayBreak(pThis, RawPointer(value)))
            }
        }

        internal func SkipCurrentBreakImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SkipCurrentBreak(pThis))
            }
        }

    }

    public class IMediaBreakSchedule: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule }

        internal func add_ScheduleChangedImpl(_ handler: TypedEventHandler<UWP.MediaBreakSchedule?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakSchedule_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScheduleChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ScheduleChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScheduleChanged(pThis, token))
            }
        }

        internal func InsertMidrollBreakImpl(_ mediaBreak: UWP.MediaBreak?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InsertMidrollBreak(pThis, RawPointer(mediaBreak)))
            }
        }

        internal func RemoveMidrollBreakImpl(_ mediaBreak: UWP.MediaBreak?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveMidrollBreak(pThis, RawPointer(mediaBreak)))
            }
        }

        internal func get_MidrollBreaksImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.MediaBreak?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MidrollBreaks(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakWrapper.unwrapFrom(abi: value)
        }

        internal func put_PrerollBreakImpl(_ value: UWP.MediaBreak?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrerollBreak(pThis, RawPointer(value)))
            }
        }

        internal func get_PrerollBreakImpl() throws -> UWP.MediaBreak? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrerollBreak(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PostrollBreakImpl(_ value: UWP.MediaBreak?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PostrollBreak(pThis, RawPointer(value)))
            }
        }

        internal func get_PostrollBreakImpl() throws -> UWP.MediaBreak? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PostrollBreak(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlaybackItemImpl() throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSchedule.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaBreakSeekedOverEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSeekedOverEventArgs }

        internal func get_SeekedOverBreaksImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.MediaBreak?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSeekedOverEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SeekedOverBreaks(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CPlayback__CMediaBreakWrapper.unwrapFrom(abi: value)
        }

        internal func get_OldPositionImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSeekedOverEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_NewPositionImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSeekedOverEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewPosition(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IMediaBreakSkippedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSkippedEventArgs }

        internal func get_MediaBreakImpl() throws -> UWP.MediaBreak? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakSkippedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaBreak(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaBreakStartedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakStartedEventArgs }

        internal func get_MediaBreakImpl() throws -> UWP.MediaBreak? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaBreakStartedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaBreak(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaItemDisplayProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaItemDisplayProperties }

        internal func get_TypeImpl() throws -> UWP.MediaPlaybackType {
            var value: __x_ABI_CWindows_CMedia_CMediaPlaybackType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaItemDisplayProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        internal func put_TypeImpl(_ value: UWP.MediaPlaybackType) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaItemDisplayProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Type(pThis, value))
            }
        }

        internal func get_MusicPropertiesImpl() throws -> UWP.MusicDisplayProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaItemDisplayProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MusicProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VideoPropertiesImpl() throws -> UWP.VideoDisplayProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaItemDisplayProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ThumbnailImpl() throws -> UWP.RandomAccessStreamReference? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaItemDisplayProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Thumbnail(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ThumbnailImpl(_ value: UWP.RandomAccessStreamReference?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaItemDisplayProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Thumbnail(pThis, RawPointer(value)))
            }
        }

        internal func ClearAllImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaItemDisplayProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearAll(pThis))
            }
        }

    }

    public class IMediaPlaybackCommandManager: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager }

        internal func get_IsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_MediaPlayerImpl() throws -> UWP.MediaPlayer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaPlayer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlayBehaviorImpl() throws -> UWP.MediaPlaybackCommandManagerCommandBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlayBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PauseBehaviorImpl() throws -> UWP.MediaPlaybackCommandManagerCommandBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PauseBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NextBehaviorImpl() throws -> UWP.MediaPlaybackCommandManagerCommandBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PreviousBehaviorImpl() throws -> UWP.MediaPlaybackCommandManagerCommandBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviousBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FastForwardBehaviorImpl() throws -> UWP.MediaPlaybackCommandManagerCommandBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FastForwardBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_RewindBehaviorImpl() throws -> UWP.MediaPlaybackCommandManagerCommandBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RewindBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ShuffleBehaviorImpl() throws -> UWP.MediaPlaybackCommandManagerCommandBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShuffleBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AutoRepeatModeBehaviorImpl() throws -> UWP.MediaPlaybackCommandManagerCommandBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoRepeatModeBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PositionBehaviorImpl() throws -> UWP.MediaPlaybackCommandManagerCommandBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PositionBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_RateBehaviorImpl() throws -> UWP.MediaPlaybackCommandManagerCommandBehavior? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RateBehavior(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_PlayReceivedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManager?, UWP.MediaPlaybackCommandManagerPlayReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManager___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerPlayReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PlayReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PlayReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PlayReceived(pThis, token))
            }
        }

        internal func add_PauseReceivedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManager?, UWP.MediaPlaybackCommandManagerPauseReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManager___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerPauseReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PauseReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PauseReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PauseReceived(pThis, token))
            }
        }

        internal func add_NextReceivedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManager?, UWP.MediaPlaybackCommandManagerNextReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManager___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerNextReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NextReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NextReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NextReceived(pThis, token))
            }
        }

        internal func add_PreviousReceivedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManager?, UWP.MediaPlaybackCommandManagerPreviousReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManager___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerPreviousReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PreviousReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PreviousReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PreviousReceived(pThis, token))
            }
        }

        internal func add_FastForwardReceivedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManager?, UWP.MediaPlaybackCommandManagerFastForwardReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManager___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerFastForwardReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FastForwardReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FastForwardReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FastForwardReceived(pThis, token))
            }
        }

        internal func add_RewindReceivedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManager?, UWP.MediaPlaybackCommandManagerRewindReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManager___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerRewindReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_RewindReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_RewindReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RewindReceived(pThis, token))
            }
        }

        internal func add_ShuffleReceivedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManager?, UWP.MediaPlaybackCommandManagerShuffleReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManager___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerShuffleReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ShuffleReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ShuffleReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ShuffleReceived(pThis, token))
            }
        }

        internal func add_AutoRepeatModeReceivedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManager?, UWP.MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManager___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AutoRepeatModeReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AutoRepeatModeReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AutoRepeatModeReceived(pThis, token))
            }
        }

        internal func add_PositionReceivedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManager?, UWP.MediaPlaybackCommandManagerPositionReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManager___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerPositionReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PositionReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PositionReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PositionReceived(pThis, token))
            }
        }

        internal func add_RateReceivedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManager?, UWP.MediaPlaybackCommandManagerRateReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManager___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerRateReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_RateReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_RateReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RateReceived(pThis, token))
            }
        }

    }

    public class IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_AutoRepeatModeImpl() throws -> UWP.MediaPlaybackAutoRepeatMode {
            var value: __x_ABI_CWindows_CMedia_CMediaPlaybackAutoRepeatMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoRepeatMode(pThis, &value))
            }
            return value
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackCommandManagerCommandBehavior: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerCommandBehavior }

        internal func get_CommandManagerImpl() throws -> UWP.MediaPlaybackCommandManager? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerCommandBehavior.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandManager(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerCommandBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_EnablingRuleImpl() throws -> UWP.MediaCommandEnablingRule {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CMediaCommandEnablingRule = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerCommandBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnablingRule(pThis, &value))
            }
            return value
        }

        internal func put_EnablingRuleImpl(_ value: UWP.MediaCommandEnablingRule) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerCommandBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnablingRule(pThis, value))
            }
        }

        internal func add_IsEnabledChangedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackCommandManagerCommandBehavior?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackCommandManagerCommandBehavior_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerCommandBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsEnabledChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_IsEnabledChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerCommandBehavior.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsEnabledChanged(pThis, token))
            }
        }

    }

    public class IMediaPlaybackCommandManagerFastForwardReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerFastForwardReceivedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerFastForwardReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerFastForwardReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerFastForwardReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackCommandManagerNextReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerNextReceivedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerNextReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerNextReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerNextReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackCommandManagerPauseReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPauseReceivedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPauseReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPauseReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPauseReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackCommandManagerPlayReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPlayReceivedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPlayReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPlayReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPlayReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackCommandManagerPositionReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPositionReceivedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPositionReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPositionReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_PositionImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPositionReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPositionReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackCommandManagerPreviousReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPreviousReceivedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPreviousReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPreviousReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerPreviousReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackCommandManagerRateReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRateReceivedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRateReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRateReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_PlaybackRateImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRateReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackRate(pThis, &value))
            }
            return value
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRateReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackCommandManagerRewindReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRewindReceivedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRewindReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRewindReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerRewindReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackCommandManagerShuffleReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerShuffleReceivedEventArgs }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerShuffleReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerShuffleReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_IsShuffleRequestedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerShuffleReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsShuffleRequested(pThis, &value))
            }
            return .init(from: value)
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackCommandManagerShuffleReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem }

        internal func add_AudioTracksChangedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackItem?, WindowsFoundation.AnyIVectorChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackItem___x_ABI_C__F__CIVectorChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AudioTracksChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AudioTracksChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AudioTracksChanged(pThis, token))
            }
        }

        internal func add_VideoTracksChangedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackItem?, WindowsFoundation.AnyIVectorChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackItem___x_ABI_C__F__CIVectorChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_VideoTracksChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_VideoTracksChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_VideoTracksChanged(pThis, token))
            }
        }

        internal func add_TimedMetadataTracksChangedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackItem?, WindowsFoundation.AnyIVectorChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackItem___x_ABI_C__F__CIVectorChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TimedMetadataTracksChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TimedMetadataTracksChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TimedMetadataTracksChanged(pThis, token))
            }
        }

        internal func get_SourceImpl() throws -> UWP.MediaSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AudioTracksImpl() throws -> UWP.MediaPlaybackAudioTrackList? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioTracks(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VideoTracksImpl() throws -> UWP.MediaPlaybackVideoTrackList? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoTracks(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TimedMetadataTracksImpl() throws -> UWP.MediaPlaybackTimedMetadataTrackList? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimedMetadataTracks(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackItem2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem2 }

        internal func get_BreakScheduleImpl() throws -> UWP.MediaBreakSchedule? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BreakSchedule(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_StartTimeImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartTime(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_DurationLimitImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DurationLimit(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func get_CanSkipImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanSkip(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CanSkipImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanSkip(pThis, .init(from: value)))
            }
        }

        internal func GetDisplayPropertiesImpl() throws -> UWP.MediaItemDisplayProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDisplayProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func ApplyDisplayPropertiesImpl(_ value: UWP.MediaItemDisplayProperties?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyDisplayProperties(pThis, RawPointer(value)))
            }
        }

    }

    public class IMediaPlaybackItem3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem3 }

        internal func get_IsDisabledInPlaybackListImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDisabledInPlaybackList(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsDisabledInPlaybackListImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDisabledInPlaybackList(pThis, .init(from: value)))
            }
        }

        internal func get_TotalDownloadProgressImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TotalDownloadProgress(pThis, &value))
            }
            return value
        }

        internal func get_AutoLoadedDisplayPropertiesImpl() throws -> UWP.AutoLoadedDisplayPropertyKind {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CAutoLoadedDisplayPropertyKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoLoadedDisplayProperties(pThis, &value))
            }
            return value
        }

        internal func put_AutoLoadedDisplayPropertiesImpl(_ value: UWP.AutoLoadedDisplayPropertyKind) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoLoadedDisplayProperties(pThis, value))
            }
        }

    }

    public class IMediaPlaybackItemError: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemError }

        internal func get_ErrorCodeImpl() throws -> UWP.MediaPlaybackItemErrorCode {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CMediaPlaybackItemErrorCode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemError.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorCode(pThis, &value))
            }
            return value
        }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemError.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class IMediaPlaybackItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFactory }

        internal func CreateImpl(_ source: UWP.MediaSource?) throws -> IMediaPlaybackItem {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(source), &valueAbi))
                }
            }
            return IMediaPlaybackItem(value!)
        }

    }

    public class IMediaPlaybackItemFactory2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFactory2 }

        internal func CreateWithStartTimeImpl(_ source: UWP.MediaSource?, _ startTime: WindowsFoundation.TimeSpan) throws -> IMediaPlaybackItem {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFactory2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithStartTime(pThis, RawPointer(source), .from(swift: startTime), &resultAbi))
                }
            }
            return IMediaPlaybackItem(result!)
        }

        internal func CreateWithStartTimeAndDurationLimitImpl(_ source: UWP.MediaSource?, _ startTime: WindowsFoundation.TimeSpan, _ durationLimit: WindowsFoundation.TimeSpan) throws -> IMediaPlaybackItem {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFactory2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithStartTimeAndDurationLimit(pThis, RawPointer(source), .from(swift: startTime), .from(swift: durationLimit), &resultAbi))
                }
            }
            return IMediaPlaybackItem(result!)
        }

    }

    public class IMediaPlaybackItemFailedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFailedEventArgs }

        internal func get_ItemImpl() throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFailedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Item(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ErrorImpl() throws -> UWP.MediaPlaybackItemError? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemFailedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Error(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackItemOpenedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemOpenedEventArgs }

        internal func get_ItemImpl() throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemOpenedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Item(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemStatics }

        internal func FindFromMediaSourceImpl(_ source: UWP.MediaSource?) throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItemStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindFromMediaSource(pThis, RawPointer(source), &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackList: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList }

        internal func add_ItemFailedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackList?, UWP.MediaPlaybackItemFailedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackList___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackItemFailedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ItemFailed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ItemFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ItemFailed(pThis, token))
            }
        }

        internal func add_CurrentItemChangedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackList?, UWP.CurrentMediaPlaybackItemChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackList___x_ABI_CWindows__CMedia__CPlayback__CCurrentMediaPlaybackItemChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CurrentItemChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CurrentItemChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CurrentItemChanged(pThis, token))
            }
        }

        internal func add_ItemOpenedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackList?, UWP.MediaPlaybackItemOpenedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackList___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackItemOpenedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ItemOpened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ItemOpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ItemOpened(pThis, token))
            }
        }

        internal func get_ItemsImpl() throws -> WindowsFoundation.AnyIObservableVector<UWP.MediaPlaybackItem?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackItemWrapper.unwrapFrom(abi: value)
        }

        internal func get_AutoRepeatEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoRepeatEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AutoRepeatEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoRepeatEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_ShuffleEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShuffleEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShuffleEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShuffleEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_CurrentItemImpl() throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CurrentItemIndexImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentItemIndex(pThis, &value))
            }
            return value
        }

        internal func MoveNextImpl() throws -> UWP.MediaPlaybackItem? {
            let (item) = try ComPtrs.initialize { itemAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &itemAbi))
                }
            }
            return .from(abi: item)
        }

        internal func MovePreviousImpl() throws -> UWP.MediaPlaybackItem? {
            let (item) = try ComPtrs.initialize { itemAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.MovePrevious(pThis, &itemAbi))
                }
            }
            return .from(abi: item)
        }

        internal func MoveToImpl(_ itemIndex: UInt32) throws -> UWP.MediaPlaybackItem? {
            let (item) = try ComPtrs.initialize { itemAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.MoveTo(pThis, itemIndex, &itemAbi))
                }
            }
            return .from(abi: item)
        }

    }

    public class IMediaPlaybackList2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList2 }

        internal func get_MaxPrefetchTimeImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxPrefetchTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func put_MaxPrefetchTimeImpl(_ value: WindowsFoundation.TimeSpan?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxPrefetchTime(pThis, _value))
            }
        }

        internal func get_StartingItemImpl() throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartingItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_StartingItemImpl(_ value: UWP.MediaPlaybackItem?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartingItem(pThis, RawPointer(value)))
            }
        }

        internal func get_ShuffledItemsImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.MediaPlaybackItem?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShuffledItems(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackItemWrapper.unwrapFrom(abi: value)
        }

        internal func SetShuffledItemsImpl(_ value: WindowsFoundation.AnyIIterable<UWP.MediaPlaybackItem?>?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackItemWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetShuffledItems(pThis, _value))
            }
        }

    }

    public class IMediaPlaybackList3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList3 }

        internal func get_MaxPlayedItemsToKeepOpenImpl() throws -> UInt32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxPlayedItemsToKeepOpen(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_UINT32Wrapper.unwrapFrom(abi: value)
        }

        internal func put_MaxPlayedItemsToKeepOpenImpl(_ value: UInt32?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1_UINT32Wrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackList3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxPlayedItemsToKeepOpen(pThis, _value))
            }
        }

    }

    public class IMediaPlaybackSession: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession }

        internal func add_PlaybackStateChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PlaybackStateChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_PlaybackStateChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PlaybackStateChanged(pThis, token))
            }
        }

        internal func add_PlaybackRateChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PlaybackRateChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_PlaybackRateChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PlaybackRateChanged(pThis, token))
            }
        }

        internal func add_SeekCompletedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SeekCompleted(pThis, _value, &token))
            }
            return token
        }

        internal func remove_SeekCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SeekCompleted(pThis, token))
            }
        }

        internal func add_BufferingStartedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BufferingStarted(pThis, _value, &token))
            }
            return token
        }

        internal func remove_BufferingStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BufferingStarted(pThis, token))
            }
        }

        internal func add_BufferingEndedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BufferingEnded(pThis, _value, &token))
            }
            return token
        }

        internal func remove_BufferingEndedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BufferingEnded(pThis, token))
            }
        }

        internal func add_BufferingProgressChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BufferingProgressChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_BufferingProgressChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BufferingProgressChanged(pThis, token))
            }
        }

        internal func add_DownloadProgressChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DownloadProgressChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_DownloadProgressChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DownloadProgressChanged(pThis, token))
            }
        }

        internal func add_NaturalDurationChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NaturalDurationChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_NaturalDurationChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NaturalDurationChanged(pThis, token))
            }
        }

        internal func add_PositionChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PositionChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_PositionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PositionChanged(pThis, token))
            }
        }

        internal func add_NaturalVideoSizeChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NaturalVideoSizeChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_NaturalVideoSizeChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NaturalVideoSizeChanged(pThis, token))
            }
        }

        internal func get_MediaPlayerImpl() throws -> UWP.MediaPlayer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaPlayer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NaturalDurationImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NaturalDuration(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_PositionImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PositionImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Position(pThis, .from(swift: value)))
            }
        }

        internal func get_PlaybackStateImpl() throws -> UWP.MediaPlaybackState {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CMediaPlaybackState = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackState(pThis, &value))
            }
            return value
        }

        internal func get_CanSeekImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanSeek(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CanPauseImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPause(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsProtectedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsProtected(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_PlaybackRateImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackRate(pThis, &value))
            }
            return value
        }

        internal func put_PlaybackRateImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaybackRate(pThis, value))
            }
        }

        internal func get_BufferingProgressImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BufferingProgress(pThis, &value))
            }
            return value
        }

        internal func get_DownloadProgressImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DownloadProgress(pThis, &value))
            }
            return value
        }

        internal func get_NaturalVideoHeightImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NaturalVideoHeight(pThis, &value))
            }
            return value
        }

        internal func get_NaturalVideoWidthImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NaturalVideoWidth(pThis, &value))
            }
            return value
        }

        internal func get_NormalizedSourceRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NormalizedSourceRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_NormalizedSourceRectImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NormalizedSourceRect(pThis, .from(swift: value)))
            }
        }

        internal func get_StereoscopicVideoPackingModeImpl() throws -> UWP.StereoscopicVideoPackingMode {
            var value: __x_ABI_CWindows_CMedia_CMediaProperties_CStereoscopicVideoPackingMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StereoscopicVideoPackingMode(pThis, &value))
            }
            return value
        }

        internal func put_StereoscopicVideoPackingModeImpl(_ value: UWP.StereoscopicVideoPackingMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StereoscopicVideoPackingMode(pThis, value))
            }
        }

    }

    public class IMediaPlaybackSession2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2 }

        internal func add_BufferedRangesChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BufferedRangesChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_BufferedRangesChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BufferedRangesChanged(pThis, token))
            }
        }

        internal func add_PlayedRangesChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PlayedRangesChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_PlayedRangesChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PlayedRangesChanged(pThis, token))
            }
        }

        internal func add_SeekableRangesChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SeekableRangesChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_SeekableRangesChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SeekableRangesChanged(pThis, token))
            }
        }

        internal func add_SupportedPlaybackRatesChangedImpl(_ value: TypedEventHandler<UWP.MediaPlaybackSession?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackSession_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SupportedPlaybackRatesChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_SupportedPlaybackRatesChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SupportedPlaybackRatesChanged(pThis, token))
            }
        }

        internal func get_SphericalVideoProjectionImpl() throws -> UWP.MediaPlaybackSphericalVideoProjection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SphericalVideoProjection(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsMirroringImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMirroring(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsMirroringImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsMirroring(pThis, .init(from: value)))
            }
        }

        internal func GetBufferedRangesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.MediaTimeRange>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetBufferedRanges(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CMediaTimeRangeWrapper.unwrapFrom(abi: value)
        }

        internal func GetPlayedRangesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.MediaTimeRange>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPlayedRanges(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CMediaTimeRangeWrapper.unwrapFrom(abi: value)
        }

        internal func GetSeekableRangesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.MediaTimeRange>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetSeekableRanges(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CMediaTimeRangeWrapper.unwrapFrom(abi: value)
        }

        internal func IsSupportedPlaybackRateRangeImpl(_ rate1: Double, _ rate2: Double) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupportedPlaybackRateRange(pThis, rate1, rate2, &value))
            }
            return .init(from: value)
        }

    }

    public class IMediaPlaybackSession3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession3 }

        internal func get_PlaybackRotationImpl() throws -> UWP.MediaRotation {
            var value: __x_ABI_CWindows_CMedia_CMediaProperties_CMediaRotation = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackRotation(pThis, &value))
            }
            return value
        }

        internal func put_PlaybackRotationImpl(_ value: UWP.MediaRotation) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaybackRotation(pThis, value))
            }
        }

        internal func GetOutputDegradationPolicyStateImpl() throws -> UWP.MediaPlaybackSessionOutputDegradationPolicyState? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSession3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetOutputDegradationPolicyState(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlaybackSessionOutputDegradationPolicyState: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSessionOutputDegradationPolicyState }

        internal func get_VideoConstrictionReasonImpl() throws -> UWP.MediaPlaybackSessionVideoConstrictionReason {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CMediaPlaybackSessionVideoConstrictionReason = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSessionOutputDegradationPolicyState.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoConstrictionReason(pThis, &value))
            }
            return value
        }

    }

    public class IMediaPlaybackSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource }

    }

    internal static var IMediaPlaybackSourceVTable: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSourceVtbl = .init(
        QueryInterface: { IMediaPlaybackSourceWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMediaPlaybackSourceWrapper.addRef($0) },
        Release: { IMediaPlaybackSourceWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Playback.IMediaPlaybackSourceWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Playback.IMediaPlaybackSource").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        }
    )

    public typealias IMediaPlaybackSourceWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Playback.IMediaPlaybackSourceBridge>
    public class IMediaPlaybackSphericalVideoProjection: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection }

        internal func get_IsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_FrameFormatImpl() throws -> UWP.SphericalVideoFrameFormat {
            var value: __x_ABI_CWindows_CMedia_CMediaProperties_CSphericalVideoFrameFormat = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameFormat(pThis, &value))
            }
            return value
        }

        internal func put_FrameFormatImpl(_ value: UWP.SphericalVideoFrameFormat) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FrameFormat(pThis, value))
            }
        }

        internal func get_HorizontalFieldOfViewInDegreesImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalFieldOfViewInDegrees(pThis, &value))
            }
            return value
        }

        internal func put_HorizontalFieldOfViewInDegreesImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalFieldOfViewInDegrees(pThis, value))
            }
        }

        internal func get_ViewOrientationImpl() throws -> WindowsFoundation.Quaternion {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CQuaternion = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewOrientation(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_ViewOrientationImpl(_ value: WindowsFoundation.Quaternion) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ViewOrientation(pThis, .from(swift: value)))
            }
        }

        internal func get_ProjectionModeImpl() throws -> UWP.SphericalVideoProjectionMode {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CSphericalVideoProjectionMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProjectionMode(pThis, &value))
            }
            return value
        }

        internal func put_ProjectionModeImpl(_ value: UWP.SphericalVideoProjectionMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSphericalVideoProjection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProjectionMode(pThis, value))
            }
        }

    }

    public class IMediaPlaybackTimedMetadataTrackList: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackTimedMetadataTrackList }

        internal func add_PresentationModeChangedImpl(_ handler: TypedEventHandler<UWP.MediaPlaybackTimedMetadataTrackList?, UWP.TimedMetadataPresentationModeChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlaybackTimedMetadataTrackList___x_ABI_CWindows__CMedia__CPlayback__CTimedMetadataPresentationModeChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackTimedMetadataTrackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PresentationModeChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PresentationModeChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackTimedMetadataTrackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PresentationModeChanged(pThis, token))
            }
        }

        internal func GetPresentationModeImpl(_ index: UInt32) throws -> UWP.TimedMetadataTrackPresentationMode {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CTimedMetadataTrackPresentationMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackTimedMetadataTrackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPresentationMode(pThis, index, &value))
            }
            return value
        }

        internal func SetPresentationModeImpl(_ index: UInt32, _ value: UWP.TimedMetadataTrackPresentationMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackTimedMetadataTrackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPresentationMode(pThis, index, value))
            }
        }

    }

    public class IMediaPlayer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer }

        internal func get_AutoPlayImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoPlay(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AutoPlayImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoPlay(pThis, .init(from: value)))
            }
        }

        internal func get_NaturalDurationImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NaturalDuration(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_PositionImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PositionImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Position(pThis, .from(swift: value)))
            }
        }

        internal func get_BufferingProgressImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BufferingProgress(pThis, &value))
            }
            return value
        }

        internal func get_CurrentStateImpl() throws -> UWP.MediaPlayerState {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CMediaPlayerState = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentState(pThis, &value))
            }
            return value
        }

        internal func get_CanSeekImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanSeek(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CanPauseImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPause(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsLoopingEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsLoopingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsLoopingEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsLoopingEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsProtectedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsProtected(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsMutedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMuted(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsMutedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsMuted(pThis, .init(from: value)))
            }
        }

        internal func get_PlaybackRateImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackRate(pThis, &value))
            }
            return value
        }

        internal func put_PlaybackRateImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaybackRate(pThis, value))
            }
        }

        internal func get_VolumeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Volume(pThis, &value))
            }
            return value
        }

        internal func put_VolumeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Volume(pThis, value))
            }
        }

        internal func get_PlaybackMediaMarkersImpl() throws -> UWP.PlaybackMediaMarkerSequence? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackMediaMarkers(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_MediaOpenedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_MediaOpened(pThis, _value, &token))
            }
            return token
        }

        internal func remove_MediaOpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MediaOpened(pThis, token))
            }
        }

        internal func add_MediaEndedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_MediaEnded(pThis, _value, &token))
            }
            return token
        }

        internal func remove_MediaEndedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MediaEnded(pThis, token))
            }
        }

        internal func add_MediaFailedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, UWP.MediaPlayerFailedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayerFailedEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_MediaFailed(pThis, _value, &token))
            }
            return token
        }

        internal func remove_MediaFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MediaFailed(pThis, token))
            }
        }

        internal func add_CurrentStateChangedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CurrentStateChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_CurrentStateChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CurrentStateChanged(pThis, token))
            }
        }

        internal func add_PlaybackMediaMarkerReachedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, UWP.PlaybackMediaMarkerReachedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer___x_ABI_CWindows__CMedia__CPlayback__CPlaybackMediaMarkerReachedEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PlaybackMediaMarkerReached(pThis, _value, &token))
            }
            return token
        }

        internal func remove_PlaybackMediaMarkerReachedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PlaybackMediaMarkerReached(pThis, token))
            }
        }

        internal func add_MediaPlayerRateChangedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, UWP.MediaPlayerRateChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayerRateChangedEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_MediaPlayerRateChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_MediaPlayerRateChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MediaPlayerRateChanged(pThis, token))
            }
        }

        internal func add_VolumeChangedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_VolumeChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_VolumeChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_VolumeChanged(pThis, token))
            }
        }

        internal func add_SeekCompletedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SeekCompleted(pThis, _value, &token))
            }
            return token
        }

        internal func remove_SeekCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SeekCompleted(pThis, token))
            }
        }

        internal func add_BufferingStartedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BufferingStarted(pThis, _value, &token))
            }
            return token
        }

        internal func remove_BufferingStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BufferingStarted(pThis, token))
            }
        }

        internal func add_BufferingEndedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BufferingEnded(pThis, _value, &token))
            }
            return token
        }

        internal func remove_BufferingEndedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BufferingEnded(pThis, token))
            }
        }

        internal func PlayImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Play(pThis))
            }
        }

        internal func PauseImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Pause(pThis))
            }
        }

        internal func SetUriSourceImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetUriSource(pThis, RawPointer(value)))
            }
        }

    }

    public class IMediaPlayer2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer2 }

        internal func get_SystemMediaTransportControlsImpl() throws -> UWP.SystemMediaTransportControls? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemMediaTransportControls(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AudioCategoryImpl() throws -> UWP.MediaPlayerAudioCategory {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CMediaPlayerAudioCategory = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioCategory(pThis, &value))
            }
            return value
        }

        internal func put_AudioCategoryImpl(_ value: UWP.MediaPlayerAudioCategory) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AudioCategory(pThis, value))
            }
        }

        internal func get_AudioDeviceTypeImpl() throws -> UWP.MediaPlayerAudioDeviceType {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CMediaPlayerAudioDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioDeviceType(pThis, &value))
            }
            return value
        }

        internal func put_AudioDeviceTypeImpl(_ value: UWP.MediaPlayerAudioDeviceType) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AudioDeviceType(pThis, value))
            }
        }

    }

    public class IMediaPlayer3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3 }

        internal func add_IsMutedChangedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsMutedChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_IsMutedChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsMutedChanged(pThis, token))
            }
        }

        internal func add_SourceChangedImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SourceChanged(pThis, _value, &token))
            }
            return token
        }

        internal func remove_SourceChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SourceChanged(pThis, token))
            }
        }

        internal func get_AudioBalanceImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioBalance(pThis, &value))
            }
            return value
        }

        internal func put_AudioBalanceImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AudioBalance(pThis, value))
            }
        }

        internal func get_RealTimePlaybackImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RealTimePlayback(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_RealTimePlaybackImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RealTimePlayback(pThis, .init(from: value)))
            }
        }

        internal func get_StereoscopicVideoRenderModeImpl() throws -> UWP.StereoscopicVideoRenderMode {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CStereoscopicVideoRenderMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StereoscopicVideoRenderMode(pThis, &value))
            }
            return value
        }

        internal func put_StereoscopicVideoRenderModeImpl(_ value: UWP.StereoscopicVideoRenderMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StereoscopicVideoRenderMode(pThis, value))
            }
        }

        internal func get_BreakManagerImpl() throws -> UWP.MediaBreakManager? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BreakManager(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CommandManagerImpl() throws -> UWP.MediaPlaybackCommandManager? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandManager(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AudioDeviceImpl() throws -> UWP.DeviceInformation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioDevice(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_AudioDeviceImpl(_ value: UWP.DeviceInformation?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AudioDevice(pThis, RawPointer(value)))
            }
        }

        internal func get_TimelineControllerImpl() throws -> UWP.MediaTimelineController? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimelineController(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_TimelineControllerImpl(_ value: UWP.MediaTimelineController?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TimelineController(pThis, RawPointer(value)))
            }
        }

        internal func get_TimelineControllerPositionOffsetImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimelineControllerPositionOffset(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_TimelineControllerPositionOffsetImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TimelineControllerPositionOffset(pThis, .from(swift: value)))
            }
        }

        internal func get_PlaybackSessionImpl() throws -> UWP.MediaPlaybackSession? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackSession(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func StepForwardOneFrameImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StepForwardOneFrame(pThis))
            }
        }

        internal func StepBackwardOneFrameImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StepBackwardOneFrame(pThis))
            }
        }

        internal func GetAsCastingSourceImpl() throws -> UWP.CastingSource? {
            let (returnValue) = try ComPtrs.initialize { returnValueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAsCastingSource(pThis, &returnValueAbi))
                }
            }
            return .from(abi: returnValue)
        }

    }

    public class IMediaPlayer4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer4 }

        internal func SetSurfaceSizeImpl(_ size: WindowsFoundation.Size) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetSurfaceSize(pThis, .from(swift: size)))
            }
        }

        internal func GetSurfaceImpl(_ compositor: UWP.Compositor?) throws -> UWP.MediaPlayerSurface? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetSurface(pThis, RawPointer(compositor), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IMediaPlayer5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer5 }

        internal func add_VideoFrameAvailableImpl(_ value: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_VideoFrameAvailable(pThis, _value, &token))
            }
            return token
        }

        internal func remove_VideoFrameAvailableImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_VideoFrameAvailable(pThis, token))
            }
        }

        internal func get_IsVideoFrameServerEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVideoFrameServerEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsVideoFrameServerEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsVideoFrameServerEnabled(pThis, .init(from: value)))
            }
        }

        internal func CopyFrameToVideoSurfaceImpl(_ destination: UWP.AnyIDirect3DSurface?) throws {
            let destinationWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(destination)
            let _destination = try! destinationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopyFrameToVideoSurface(pThis, _destination))
            }
        }

        internal func CopyFrameToVideoSurfaceWithTargetRectangleImpl(_ destination: UWP.AnyIDirect3DSurface?, _ targetRectangle: WindowsFoundation.Rect) throws {
            let destinationWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(destination)
            let _destination = try! destinationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopyFrameToVideoSurfaceWithTargetRectangle(pThis, _destination, .from(swift: targetRectangle)))
            }
        }

        internal func CopyFrameToStereoscopicVideoSurfacesImpl(_ destinationLeftEye: UWP.AnyIDirect3DSurface?, _ destinationRightEye: UWP.AnyIDirect3DSurface?) throws {
            let destinationLeftEyeWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(destinationLeftEye)
            let _destinationLeftEye = try! destinationLeftEyeWrapper?.toABI { $0 }
            let destinationRightEyeWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(destinationRightEye)
            let _destinationRightEye = try! destinationRightEyeWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopyFrameToStereoscopicVideoSurfaces(pThis, _destinationLeftEye, _destinationRightEye))
            }
        }

    }

    public class IMediaPlayer6: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer6 }

        internal func add_SubtitleFrameChangedImpl(_ handler: TypedEventHandler<UWP.MediaPlayer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CPlayback__CMediaPlayer_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SubtitleFrameChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SubtitleFrameChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SubtitleFrameChanged(pThis, token))
            }
        }

        internal func RenderSubtitlesToSurfaceImpl(_ destination: UWP.AnyIDirect3DSurface?) throws -> Bool {
            var result: boolean = 0
            let destinationWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(destination)
            let _destination = try! destinationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RenderSubtitlesToSurface(pThis, _destination, &result))
            }
            return .init(from: result)
        }

        internal func RenderSubtitlesToSurfaceWithTargetRectangleImpl(_ destination: UWP.AnyIDirect3DSurface?, _ targetRectangle: WindowsFoundation.Rect) throws -> Bool {
            var result: boolean = 0
            let destinationWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(destination)
            let _destination = try! destinationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RenderSubtitlesToSurfaceWithTargetRectangle(pThis, _destination, .from(swift: targetRectangle), &result))
            }
            return .init(from: result)
        }

    }

    public class IMediaPlayer7: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer7 }

        internal func get_AudioStateMonitorImpl() throws -> UWP.AudioStateMonitor? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayer7.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioStateMonitor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaPlayerEffects: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerEffects }

        internal func AddAudioEffectImpl(_ activatableClassId: String, _ effectOptional: Bool, _ configuration: WindowsFoundation.AnyIPropertySet?) throws {
            let _activatableClassId = try! HString(activatableClassId)
            let configurationWrapper = __ABI_Windows_Foundation_Collections.IPropertySetWrapper(configuration)
            let _configuration = try! configurationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerEffects.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddAudioEffect(pThis, _activatableClassId.get(), .init(from: effectOptional), _configuration))
            }
        }

        internal func RemoveAllEffectsImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerEffects.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAllEffects(pThis))
            }
        }

    }

    public class IMediaPlayerEffects2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerEffects2 }

        internal func AddVideoEffectImpl(_ activatableClassId: String, _ effectOptional: Bool, _ effectConfiguration: WindowsFoundation.AnyIPropertySet?) throws {
            let _activatableClassId = try! HString(activatableClassId)
            let effectConfigurationWrapper = __ABI_Windows_Foundation_Collections.IPropertySetWrapper(effectConfiguration)
            let _effectConfiguration = try! effectConfigurationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerEffects2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddVideoEffect(pThis, _activatableClassId.get(), .init(from: effectOptional), _effectConfiguration))
            }
        }

    }

    public class IMediaPlayerFailedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerFailedEventArgs }

        internal func get_ErrorImpl() throws -> UWP.MediaPlayerError {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CMediaPlayerError = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerFailedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Error(pThis, &value))
            }
            return value
        }

        internal func get_ExtendedErrorCodeImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerFailedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedErrorCode(pThis, &value))
            }
            return value
        }

        internal func get_ErrorMessageImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerFailedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorMessage(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IMediaPlayerRateChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerRateChangedEventArgs }

        internal func get_NewRateImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerRateChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewRate(pThis, &value))
            }
            return value
        }

    }

    public class IMediaPlayerSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource }

        internal func get_ProtectionManagerImpl() throws -> UWP.MediaProtectionManager? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProtectionManager(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ProtectionManagerImpl(_ value: UWP.MediaProtectionManager?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProtectionManager(pThis, RawPointer(value)))
            }
        }

        internal func SetFileSourceImpl(_ file: UWP.AnyIStorageFile?) throws {
            let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
            let _file = try! fileWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFileSource(pThis, _file))
            }
        }

        internal func SetStreamSourceImpl(_ stream: UWP.AnyIRandomAccessStream?) throws {
            let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
            let _stream = try! streamWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetStreamSource(pThis, _stream))
            }
        }

        internal func SetMediaSourceImpl(_ source: UWP.AnyIMediaSource?) throws {
            let sourceWrapper = __ABI_Windows_Media_Core.IMediaSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetMediaSource(pThis, _source))
            }
        }

    }

    public class IMediaPlayerSource2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource2 }

        internal func get_SourceImpl() throws -> UWP.AnyIMediaPlaybackSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Media_Playback.IMediaPlaybackSourceWrapper.unwrapFrom(abi: value)
        }

        internal func put_SourceImpl(_ value: UWP.AnyIMediaPlaybackSource?) throws {
            let valueWrapper = __ABI_Windows_Media_Playback.IMediaPlaybackSourceWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSource2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _value))
            }
        }

    }

    public class IMediaPlayerSurface: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSurface }

        internal func get_CompositionSurfaceImpl() throws -> UWP.AnyICompositionSurface? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSurface.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompositionSurface(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_UI_Composition.ICompositionSurfaceWrapper.unwrapFrom(abi: value)
        }

        internal func get_CompositorImpl() throws -> UWP.Compositor? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSurface.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Compositor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MediaPlayerImpl() throws -> UWP.MediaPlayer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlayerSurface.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaPlayer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPlaybackMediaMarker: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarker }

        internal func get_TimeImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Time(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_MediaMarkerTypeImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaMarkerType(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarker.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IPlaybackMediaMarkerFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerFactory }

        internal func CreateFromTimeImpl(_ value: WindowsFoundation.TimeSpan) throws -> IPlaybackMediaMarker {
            let (marker) = try ComPtrs.initialize { markerAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromTime(pThis, .from(swift: value), &markerAbi))
                }
            }
            return IPlaybackMediaMarker(marker!)
        }

        internal func CreateImpl(_ value: WindowsFoundation.TimeSpan, _ mediaMarketType: String, _ text: String) throws -> IPlaybackMediaMarker {
            let (marker) = try ComPtrs.initialize { markerAbi in
                let _mediaMarketType = try! HString(mediaMarketType)
                let _text = try! HString(text)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, .from(swift: value), _mediaMarketType.get(), _text.get(), &markerAbi))
                }
            }
            return IPlaybackMediaMarker(marker!)
        }

    }

    public class IPlaybackMediaMarkerReachedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerReachedEventArgs }

        internal func get_PlaybackMediaMarkerImpl() throws -> UWP.PlaybackMediaMarker? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerReachedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackMediaMarker(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPlaybackMediaMarkerSequence: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerSequence }

        internal func get_SizeImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerSequence.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return value
        }

        internal func InsertImpl(_ value: UWP.PlaybackMediaMarker?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerSequence.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, RawPointer(value)))
            }
        }

        internal func ClearImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CIPlaybackMediaMarkerSequence.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
            }
        }

    }

    public class ITimedMetadataPresentationModeChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CPlayback_CITimedMetadataPresentationModeChangedEventArgs }

        internal func get_TrackImpl() throws -> UWP.TimedMetadataTrack? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CITimedMetadataPresentationModeChangedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Track(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_OldPresentationModeImpl() throws -> UWP.TimedMetadataTrackPresentationMode {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CTimedMetadataTrackPresentationMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CITimedMetadataPresentationModeChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldPresentationMode(pThis, &value))
            }
            return value
        }

        internal func get_NewPresentationModeImpl() throws -> UWP.TimedMetadataTrackPresentationMode {
            var value: __x_ABI_CWindows_CMedia_CPlayback_CTimedMetadataTrackPresentationMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CPlayback_CITimedMetadataPresentationModeChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewPresentationMode(pThis, &value))
            }
            return value
        }

    }

}

// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Microsoft_Web_WebView2_Core {
    public enum ICoreWebView2DispatchAdapterBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DispatchAdapter
        public typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapter
        public typealias SwiftProjection = AnyICoreWebView2DispatchAdapter
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ICoreWebView2DispatchAdapterImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ICoreWebView2DispatchAdapterImpl: ICoreWebView2DispatchAdapter, WinRTAbiImpl {
        fileprivate typealias Bridge = ICoreWebView2DispatchAdapterBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        fileprivate func wrapNamedObject(_ name: String, _ adapter: AnyICoreWebView2DispatchAdapter!) throws -> Any! {
            try _default.WrapNamedObjectImpl(name, adapter)
        }

        fileprivate func wrapObject(_ unwrapped: Any!, _ adapter: AnyICoreWebView2DispatchAdapter!) throws -> Any! {
            try _default.WrapObjectImpl(unwrapped, adapter)
        }

        fileprivate func unwrapObject(_ wrapped: Any!) throws -> Any! {
            try _default.UnwrapObjectImpl(wrapped)
        }

        fileprivate func clean() throws {
            try _default.CleanImpl()
        }

    }

}

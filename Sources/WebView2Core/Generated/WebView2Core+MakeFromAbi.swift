// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

fileprivate func makeICoreWebView2DispatchAdapterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapter = try! abi.QueryInterface()
    return __IMPL_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeCoreWebView2From(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2(fromAbi: abi)
}

fileprivate func makeCoreWebView2AcceleratorKeyPressedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2AcceleratorKeyPressedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2BasicAuthenticationRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2BasicAuthenticationRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2BasicAuthenticationResponseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2BasicAuthenticationResponse(fromAbi: abi)
}

fileprivate func makeCoreWebView2BrowserExtensionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2BrowserExtension(fromAbi: abi)
}

fileprivate func makeCoreWebView2BrowserProcessExitedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2BrowserProcessExitedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2CertificateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2Certificate(fromAbi: abi)
}

fileprivate func makeCoreWebView2ClientCertificateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ClientCertificate(fromAbi: abi)
}

fileprivate func makeCoreWebView2ClientCertificateRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ClientCertificateRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2CompositionControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2CompositionController(fromAbi: abi)
}

fileprivate func makeCoreWebView2ContentLoadingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ContentLoadingEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2ContextMenuItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ContextMenuItem(fromAbi: abi)
}

fileprivate func makeCoreWebView2ContextMenuRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ContextMenuRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2ContextMenuTargetFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ContextMenuTarget(fromAbi: abi)
}

fileprivate func makeCoreWebView2ControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2Controller(fromAbi: abi)
}

fileprivate func makeCoreWebView2ControllerOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ControllerOptions(fromAbi: abi)
}

fileprivate func makeCoreWebView2ControllerWindowReferenceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ControllerWindowReference(fromAbi: abi)
}

fileprivate func makeCoreWebView2CookieFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2Cookie(fromAbi: abi)
}

fileprivate func makeCoreWebView2CookieManagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2CookieManager(fromAbi: abi)
}

fileprivate func makeCoreWebView2CustomSchemeRegistrationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2CustomSchemeRegistration(fromAbi: abi)
}

fileprivate func makeCoreWebView2DOMContentLoadedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2DOMContentLoadedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2DevToolsProtocolEventReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2DevToolsProtocolEventReceivedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2DevToolsProtocolEventReceiverFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2DevToolsProtocolEventReceiver(fromAbi: abi)
}

fileprivate func makeCoreWebView2DownloadOperationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2DownloadOperation(fromAbi: abi)
}

fileprivate func makeCoreWebView2DownloadStartingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2DownloadStartingEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2EnvironmentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2Environment(fromAbi: abi)
}

fileprivate func makeCoreWebView2EnvironmentOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2EnvironmentOptions(fromAbi: abi)
}

fileprivate func makeCoreWebView2FileFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2File(fromAbi: abi)
}

fileprivate func makeCoreWebView2FrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2Frame(fromAbi: abi)
}

fileprivate func makeCoreWebView2FrameCreatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2FrameCreatedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2FrameInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2FrameInfo(fromAbi: abi)
}

fileprivate func makeCoreWebView2HttpHeadersCollectionIteratorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2HttpHeadersCollectionIterator(fromAbi: abi)
}

fileprivate func makeCoreWebView2HttpRequestHeadersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2HttpRequestHeaders(fromAbi: abi)
}

fileprivate func makeCoreWebView2HttpResponseHeadersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2HttpResponseHeaders(fromAbi: abi)
}

fileprivate func makeCoreWebView2LaunchingExternalUriSchemeEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2LaunchingExternalUriSchemeEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2MoveFocusRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2MoveFocusRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2NavigationCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2NavigationCompletedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2NavigationStartingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2NavigationStartingEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2NewWindowRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2NewWindowRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2PermissionRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2PermissionRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2PermissionSettingFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2PermissionSetting(fromAbi: abi)
}

fileprivate func makeCoreWebView2PointerInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2PointerInfo(fromAbi: abi)
}

fileprivate func makeCoreWebView2PrintSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2PrintSettings(fromAbi: abi)
}

fileprivate func makeCoreWebView2ProcessExtendedInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ProcessExtendedInfo(fromAbi: abi)
}

fileprivate func makeCoreWebView2ProcessFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ProcessFailedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2ProcessInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ProcessInfo(fromAbi: abi)
}

fileprivate func makeCoreWebView2ProfileFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2Profile(fromAbi: abi)
}

fileprivate func makeCoreWebView2ScriptDialogOpeningEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ScriptDialogOpeningEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2ServerCertificateErrorDetectedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2ServerCertificateErrorDetectedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2SettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2Settings(fromAbi: abi)
}

fileprivate func makeCoreWebView2SharedBufferFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2SharedBuffer(fromAbi: abi)
}

fileprivate func makeCoreWebView2SourceChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2SourceChangedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2WebMessageReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2WebMessageReceivedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2WebResourceRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2WebResourceRequest(fromAbi: abi)
}

fileprivate func makeCoreWebView2WebResourceRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2WebResourceRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2WebResourceResponseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2WebResourceResponse(fromAbi: abi)
}

fileprivate func makeCoreWebView2WebResourceResponseReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2WebResourceResponseReceivedEventArgs(fromAbi: abi)
}

fileprivate func makeCoreWebView2WebResourceResponseViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2WebResourceResponseView(fromAbi: abi)
}

fileprivate func makeCoreWebView2WindowFeaturesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2WindowFeatures(fromAbi: abi)
}

@_spi(__MakeFromAbi_DoNotImport)
public class __MakeFromAbi: MakeFromAbi {
    public static func from(typeName: String, abi: WindowsFoundation.IInspectable) -> Any? {
        switch typeName {
            case "ICoreWebView2DispatchAdapter": return makeICoreWebView2DispatchAdapterFrom(abi: abi)
            case "CoreWebView2": return makeCoreWebView2From(abi: abi)
            case "CoreWebView2AcceleratorKeyPressedEventArgs": return makeCoreWebView2AcceleratorKeyPressedEventArgsFrom(abi: abi)
            case "CoreWebView2BasicAuthenticationRequestedEventArgs": return makeCoreWebView2BasicAuthenticationRequestedEventArgsFrom(abi: abi)
            case "CoreWebView2BasicAuthenticationResponse": return makeCoreWebView2BasicAuthenticationResponseFrom(abi: abi)
            case "CoreWebView2BrowserExtension": return makeCoreWebView2BrowserExtensionFrom(abi: abi)
            case "CoreWebView2BrowserProcessExitedEventArgs": return makeCoreWebView2BrowserProcessExitedEventArgsFrom(abi: abi)
            case "CoreWebView2Certificate": return makeCoreWebView2CertificateFrom(abi: abi)
            case "CoreWebView2ClientCertificate": return makeCoreWebView2ClientCertificateFrom(abi: abi)
            case "CoreWebView2ClientCertificateRequestedEventArgs": return makeCoreWebView2ClientCertificateRequestedEventArgsFrom(abi: abi)
            case "CoreWebView2CompositionController": return makeCoreWebView2CompositionControllerFrom(abi: abi)
            case "CoreWebView2ContentLoadingEventArgs": return makeCoreWebView2ContentLoadingEventArgsFrom(abi: abi)
            case "CoreWebView2ContextMenuItem": return makeCoreWebView2ContextMenuItemFrom(abi: abi)
            case "CoreWebView2ContextMenuRequestedEventArgs": return makeCoreWebView2ContextMenuRequestedEventArgsFrom(abi: abi)
            case "CoreWebView2ContextMenuTarget": return makeCoreWebView2ContextMenuTargetFrom(abi: abi)
            case "CoreWebView2Controller": return makeCoreWebView2ControllerFrom(abi: abi)
            case "CoreWebView2ControllerOptions": return makeCoreWebView2ControllerOptionsFrom(abi: abi)
            case "CoreWebView2ControllerWindowReference": return makeCoreWebView2ControllerWindowReferenceFrom(abi: abi)
            case "CoreWebView2Cookie": return makeCoreWebView2CookieFrom(abi: abi)
            case "CoreWebView2CookieManager": return makeCoreWebView2CookieManagerFrom(abi: abi)
            case "CoreWebView2CustomSchemeRegistration": return makeCoreWebView2CustomSchemeRegistrationFrom(abi: abi)
            case "CoreWebView2DOMContentLoadedEventArgs": return makeCoreWebView2DOMContentLoadedEventArgsFrom(abi: abi)
            case "CoreWebView2DevToolsProtocolEventReceivedEventArgs": return makeCoreWebView2DevToolsProtocolEventReceivedEventArgsFrom(abi: abi)
            case "CoreWebView2DevToolsProtocolEventReceiver": return makeCoreWebView2DevToolsProtocolEventReceiverFrom(abi: abi)
            case "CoreWebView2DownloadOperation": return makeCoreWebView2DownloadOperationFrom(abi: abi)
            case "CoreWebView2DownloadStartingEventArgs": return makeCoreWebView2DownloadStartingEventArgsFrom(abi: abi)
            case "CoreWebView2Environment": return makeCoreWebView2EnvironmentFrom(abi: abi)
            case "CoreWebView2EnvironmentOptions": return makeCoreWebView2EnvironmentOptionsFrom(abi: abi)
            case "CoreWebView2File": return makeCoreWebView2FileFrom(abi: abi)
            case "CoreWebView2Frame": return makeCoreWebView2FrameFrom(abi: abi)
            case "CoreWebView2FrameCreatedEventArgs": return makeCoreWebView2FrameCreatedEventArgsFrom(abi: abi)
            case "CoreWebView2FrameInfo": return makeCoreWebView2FrameInfoFrom(abi: abi)
            case "CoreWebView2HttpHeadersCollectionIterator": return makeCoreWebView2HttpHeadersCollectionIteratorFrom(abi: abi)
            case "CoreWebView2HttpRequestHeaders": return makeCoreWebView2HttpRequestHeadersFrom(abi: abi)
            case "CoreWebView2HttpResponseHeaders": return makeCoreWebView2HttpResponseHeadersFrom(abi: abi)
            case "CoreWebView2LaunchingExternalUriSchemeEventArgs": return makeCoreWebView2LaunchingExternalUriSchemeEventArgsFrom(abi: abi)
            case "CoreWebView2MoveFocusRequestedEventArgs": return makeCoreWebView2MoveFocusRequestedEventArgsFrom(abi: abi)
            case "CoreWebView2NavigationCompletedEventArgs": return makeCoreWebView2NavigationCompletedEventArgsFrom(abi: abi)
            case "CoreWebView2NavigationStartingEventArgs": return makeCoreWebView2NavigationStartingEventArgsFrom(abi: abi)
            case "CoreWebView2NewWindowRequestedEventArgs": return makeCoreWebView2NewWindowRequestedEventArgsFrom(abi: abi)
            case "CoreWebView2PermissionRequestedEventArgs": return makeCoreWebView2PermissionRequestedEventArgsFrom(abi: abi)
            case "CoreWebView2PermissionSetting": return makeCoreWebView2PermissionSettingFrom(abi: abi)
            case "CoreWebView2PointerInfo": return makeCoreWebView2PointerInfoFrom(abi: abi)
            case "CoreWebView2PrintSettings": return makeCoreWebView2PrintSettingsFrom(abi: abi)
            case "CoreWebView2ProcessExtendedInfo": return makeCoreWebView2ProcessExtendedInfoFrom(abi: abi)
            case "CoreWebView2ProcessFailedEventArgs": return makeCoreWebView2ProcessFailedEventArgsFrom(abi: abi)
            case "CoreWebView2ProcessInfo": return makeCoreWebView2ProcessInfoFrom(abi: abi)
            case "CoreWebView2Profile": return makeCoreWebView2ProfileFrom(abi: abi)
            case "CoreWebView2ScriptDialogOpeningEventArgs": return makeCoreWebView2ScriptDialogOpeningEventArgsFrom(abi: abi)
            case "CoreWebView2ServerCertificateErrorDetectedEventArgs": return makeCoreWebView2ServerCertificateErrorDetectedEventArgsFrom(abi: abi)
            case "CoreWebView2Settings": return makeCoreWebView2SettingsFrom(abi: abi)
            case "CoreWebView2SharedBuffer": return makeCoreWebView2SharedBufferFrom(abi: abi)
            case "CoreWebView2SourceChangedEventArgs": return makeCoreWebView2SourceChangedEventArgsFrom(abi: abi)
            case "CoreWebView2WebMessageReceivedEventArgs": return makeCoreWebView2WebMessageReceivedEventArgsFrom(abi: abi)
            case "CoreWebView2WebResourceRequest": return makeCoreWebView2WebResourceRequestFrom(abi: abi)
            case "CoreWebView2WebResourceRequestedEventArgs": return makeCoreWebView2WebResourceRequestedEventArgsFrom(abi: abi)
            case "CoreWebView2WebResourceResponse": return makeCoreWebView2WebResourceResponseFrom(abi: abi)
            case "CoreWebView2WebResourceResponseReceivedEventArgs": return makeCoreWebView2WebResourceResponseReceivedEventArgsFrom(abi: abi)
            case "CoreWebView2WebResourceResponseView": return makeCoreWebView2WebResourceResponseViewFrom(abi: abi)
            case "CoreWebView2WindowFeatures": return makeCoreWebView2WindowFeaturesFrom(abi: abi)
            default: return nil
        }
    }
}

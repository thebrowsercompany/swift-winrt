// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public typealias CoreWebView2BoundsMode = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BoundsMode
public typealias CoreWebView2BrowserProcessExitKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowserProcessExitKind
public typealias CoreWebView2BrowsingDataKinds = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds
public typealias CoreWebView2CapturePreviewImageFormat = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2CapturePreviewImageFormat
public typealias CoreWebView2ClientCertificateKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ClientCertificateKind
public typealias CoreWebView2ContextMenuItemKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuItemKind
public typealias CoreWebView2ContextMenuTargetKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuTargetKind
public typealias CoreWebView2CookieSameSiteKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2CookieSameSiteKind
public typealias CoreWebView2DefaultDownloadDialogCornerAlignment = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DefaultDownloadDialogCornerAlignment
public typealias CoreWebView2DownloadInterruptReason = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason
public typealias CoreWebView2DownloadState = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadState
public typealias CoreWebView2FaviconImageFormat = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2FaviconImageFormat
public typealias CoreWebView2FrameKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2FrameKind
public typealias CoreWebView2HostResourceAccessKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2HostResourceAccessKind
public typealias CoreWebView2KeyEventKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2KeyEventKind
public typealias CoreWebView2MemoryUsageTargetLevel = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MemoryUsageTargetLevel
public typealias CoreWebView2MouseEventKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind
public typealias CoreWebView2MouseEventVirtualKeys = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventVirtualKeys
public typealias CoreWebView2MoveFocusReason = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MoveFocusReason
public typealias CoreWebView2NavigationKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2NavigationKind
public typealias CoreWebView2PdfToolbarItems = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems
public typealias CoreWebView2PermissionKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind
public typealias CoreWebView2PermissionState = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionState
public typealias CoreWebView2PointerEventKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PointerEventKind
public typealias CoreWebView2PreferredColorScheme = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PreferredColorScheme
public typealias CoreWebView2PrintCollation = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintCollation
public typealias CoreWebView2PrintColorMode = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintColorMode
public typealias CoreWebView2PrintDialogKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintDialogKind
public typealias CoreWebView2PrintDuplex = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintDuplex
public typealias CoreWebView2PrintMediaSize = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintMediaSize
public typealias CoreWebView2PrintOrientation = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintOrientation
public typealias CoreWebView2PrintStatus = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintStatus
public typealias CoreWebView2ProcessFailedKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind
public typealias CoreWebView2ProcessFailedReason = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedReason
public typealias CoreWebView2ProcessKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessKind
public typealias CoreWebView2ScriptDialogKind = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ScriptDialogKind
public typealias CoreWebView2ServerCertificateErrorAction = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ServerCertificateErrorAction
public typealias CoreWebView2SharedBufferAccess = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2SharedBufferAccess
public typealias CoreWebView2TrackingPreventionLevel = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2TrackingPreventionLevel
public typealias CoreWebView2WebErrorStatus = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus
public typealias CoreWebView2WebResourceContext = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext
public final class CoreWebView2 : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2>?) -> CoreWebView2? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2PrivatePartial: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2PrivatePartial! = getInterfaceForCaching()
    private lazy var _ICoreWebView2_10: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_10! = getInterfaceForCaching()
    public lazy var basicAuthenticationRequested : Event<TypedEventHandler<CoreWebView2?, CoreWebView2BasicAuthenticationRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_10 else { return .init() }
          return try! this.add_BasicAuthenticationRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_10.remove_BasicAuthenticationRequestedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2_11: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_11! = getInterfaceForCaching()
    public func callDevToolsProtocolMethodForSessionAsync(_ sessionId: String, _ methodName: String, _ parametersAsJson: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _ICoreWebView2_11.CallDevToolsProtocolMethodForSessionAsyncImpl(sessionId, methodName, parametersAsJson)
    }

    public lazy var contextMenuRequested : Event<TypedEventHandler<CoreWebView2?, CoreWebView2ContextMenuRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_11 else { return .init() }
          return try! this.add_ContextMenuRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_11.remove_ContextMenuRequestedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2_12: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_12! = getInterfaceForCaching()
    public var statusBarText : String {
        get { try! _ICoreWebView2_12.get_StatusBarTextImpl() }
    }

    public lazy var statusBarTextChanged : Event<TypedEventHandler<CoreWebView2?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_12 else { return .init() }
          return try! this.add_StatusBarTextChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_12.remove_StatusBarTextChangedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2_13: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_13! = getInterfaceForCaching()
    public var profile : CoreWebView2Profile! {
        get { try! _ICoreWebView2_13.get_ProfileImpl() }
    }

    private lazy var _ICoreWebView2_14: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_14! = getInterfaceForCaching()
    public func clearServerCertificateErrorActionsAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _ICoreWebView2_14.ClearServerCertificateErrorActionsAsyncImpl()
    }

    public lazy var serverCertificateErrorDetected : Event<TypedEventHandler<CoreWebView2?, CoreWebView2ServerCertificateErrorDetectedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_14 else { return .init() }
          return try! this.add_ServerCertificateErrorDetectedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_14.remove_ServerCertificateErrorDetectedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2_15: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_15! = getInterfaceForCaching()
    public func getFaviconAsync(_ format: CoreWebView2FaviconImageFormat) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>! {
        try _ICoreWebView2_15.GetFaviconAsyncImpl(format)
    }

    public var faviconUri : String {
        get { try! _ICoreWebView2_15.get_FaviconUriImpl() }
    }

    public lazy var faviconChanged : Event<TypedEventHandler<CoreWebView2?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_15 else { return .init() }
          return try! this.add_FaviconChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_15.remove_FaviconChangedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2_16: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_16! = getInterfaceForCaching()
    public func printAsync(_ printSettings: CoreWebView2PrintSettings!) throws -> WindowsFoundation.AnyIAsyncOperation<CoreWebView2PrintStatus>! {
        try _ICoreWebView2_16.PrintAsyncImpl(printSettings)
    }

    public func showPrintUI(_ printDialogKind: CoreWebView2PrintDialogKind) throws {
        try _ICoreWebView2_16.ShowPrintUIImpl(printDialogKind)
    }

    public func printToPdfStreamAsync(_ printSettings: CoreWebView2PrintSettings!) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>! {
        try _ICoreWebView2_16.PrintToPdfStreamAsyncImpl(printSettings)
    }

    private lazy var _ICoreWebView2_17: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_17! = getInterfaceForCaching()
    public func postSharedBufferToScript(_ sharedBuffer: CoreWebView2SharedBuffer!, _ access: CoreWebView2SharedBufferAccess, _ additionalDataAsJson: String) throws {
        try _ICoreWebView2_17.PostSharedBufferToScriptImpl(sharedBuffer, access, additionalDataAsJson)
    }

    private lazy var _ICoreWebView2_18: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_18! = getInterfaceForCaching()
    public lazy var launchingExternalUriScheme : Event<TypedEventHandler<CoreWebView2?, CoreWebView2LaunchingExternalUriSchemeEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_18 else { return .init() }
          return try! this.add_LaunchingExternalUriSchemeImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_18.remove_LaunchingExternalUriSchemeImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2_19: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_19! = getInterfaceForCaching()
    public var memoryUsageTargetLevel : CoreWebView2MemoryUsageTargetLevel {
        get { try! _ICoreWebView2_19.get_MemoryUsageTargetLevelImpl() }
        set { try! _ICoreWebView2_19.put_MemoryUsageTargetLevelImpl(newValue) }
    }

    private lazy var _ICoreWebView2_2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_2! = getInterfaceForCaching()
    public func navigateWithWebResourceRequest(_ Request: CoreWebView2WebResourceRequest!) throws {
        try _ICoreWebView2_2.NavigateWithWebResourceRequestImpl(Request)
    }

    public var cookieManager : CoreWebView2CookieManager! {
        get { try! _ICoreWebView2_2.get_CookieManagerImpl() }
    }

    public var environment : CoreWebView2Environment! {
        get { try! _ICoreWebView2_2.get_EnvironmentImpl() }
    }

    public lazy var domContentLoaded : Event<TypedEventHandler<CoreWebView2?, CoreWebView2DOMContentLoadedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_2 else { return .init() }
          return try! this.add_DOMContentLoadedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_2.remove_DOMContentLoadedImpl($0)
       }
      )
    }()

    public lazy var webResourceResponseReceived : Event<TypedEventHandler<CoreWebView2?, CoreWebView2WebResourceResponseReceivedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_2 else { return .init() }
          return try! this.add_WebResourceResponseReceivedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_2.remove_WebResourceResponseReceivedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2_20: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_20! = getInterfaceForCaching()
    public var frameId : UInt32 {
        get { try! _ICoreWebView2_20.get_FrameIdImpl() }
    }

    private lazy var _ICoreWebView2_3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_3! = getInterfaceForCaching()
    public func trySuspendAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _ICoreWebView2_3.TrySuspendAsyncImpl()
    }

    public func resume() throws {
        try _ICoreWebView2_3.ResumeImpl()
    }

    public func setVirtualHostNameToFolderMapping(_ hostName: String, _ folderPath: String, _ accessKind: CoreWebView2HostResourceAccessKind) throws {
        try _ICoreWebView2_3.SetVirtualHostNameToFolderMappingImpl(hostName, folderPath, accessKind)
    }

    public func clearVirtualHostNameToFolderMapping(_ hostName: String) throws {
        try _ICoreWebView2_3.ClearVirtualHostNameToFolderMappingImpl(hostName)
    }

    public var isSuspended : Bool {
        get { try! _ICoreWebView2_3.get_IsSuspendedImpl() }
    }

    private lazy var _ICoreWebView2_4: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_4! = getInterfaceForCaching()
    public lazy var downloadStarting : Event<TypedEventHandler<CoreWebView2?, CoreWebView2DownloadStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_4 else { return .init() }
          return try! this.add_DownloadStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_4.remove_DownloadStartingImpl($0)
       }
      )
    }()

    public lazy var frameCreated : Event<TypedEventHandler<CoreWebView2?, CoreWebView2FrameCreatedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_4 else { return .init() }
          return try! this.add_FrameCreatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_4.remove_FrameCreatedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2_5: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_5! = getInterfaceForCaching()
    public lazy var clientCertificateRequested : Event<TypedEventHandler<CoreWebView2?, CoreWebView2ClientCertificateRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_5 else { return .init() }
          return try! this.add_ClientCertificateRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_5.remove_ClientCertificateRequestedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2_6: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_6! = getInterfaceForCaching()
    public func openTaskManagerWindow() throws {
        try _ICoreWebView2_6.OpenTaskManagerWindowImpl()
    }

    private lazy var _ICoreWebView2_7: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_7! = getInterfaceForCaching()
    public func printToPdfAsync(_ ResultFilePath: String, _ printSettings: CoreWebView2PrintSettings!) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _ICoreWebView2_7.PrintToPdfAsyncImpl(ResultFilePath, printSettings)
    }

    private lazy var _ICoreWebView2_8: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_8! = getInterfaceForCaching()
    public var isDocumentPlayingAudio : Bool {
        get { try! _ICoreWebView2_8.get_IsDocumentPlayingAudioImpl() }
    }

    public var isMuted : Bool {
        get { try! _ICoreWebView2_8.get_IsMutedImpl() }
        set { try! _ICoreWebView2_8.put_IsMutedImpl(newValue) }
    }

    public lazy var isDocumentPlayingAudioChanged : Event<TypedEventHandler<CoreWebView2?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_8 else { return .init() }
          return try! this.add_IsDocumentPlayingAudioChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_8.remove_IsDocumentPlayingAudioChangedImpl($0)
       }
      )
    }()

    public lazy var isMutedChanged : Event<TypedEventHandler<CoreWebView2?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_8 else { return .init() }
          return try! this.add_IsMutedChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_8.remove_IsMutedChangedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2_9: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2_9! = getInterfaceForCaching()
    public func openDefaultDownloadDialog() throws {
        try _ICoreWebView2_9.OpenDefaultDownloadDialogImpl()
    }

    public func closeDefaultDownloadDialog() throws {
        try _ICoreWebView2_9.CloseDefaultDownloadDialogImpl()
    }

    public var defaultDownloadDialogCornerAlignment : CoreWebView2DefaultDownloadDialogCornerAlignment {
        get { try! _ICoreWebView2_9.get_DefaultDownloadDialogCornerAlignmentImpl() }
        set { try! _ICoreWebView2_9.put_DefaultDownloadDialogCornerAlignmentImpl(newValue) }
    }

    public var defaultDownloadDialogMargin : WindowsFoundation.Point {
        get { try! _ICoreWebView2_9.get_DefaultDownloadDialogMarginImpl() }
        set { try! _ICoreWebView2_9.put_DefaultDownloadDialogMarginImpl(newValue) }
    }

    public var isDefaultDownloadDialogOpen : Bool {
        get { try! _ICoreWebView2_9.get_IsDefaultDownloadDialogOpenImpl() }
    }

    public lazy var isDefaultDownloadDialogOpenChanged : Event<TypedEventHandler<CoreWebView2?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2_9 else { return .init() }
          return try! this.add_IsDefaultDownloadDialogOpenChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2_9.remove_IsDefaultDownloadDialogOpenChangedImpl($0)
       }
      )
    }()

    public func navigate(_ uri: String) throws {
        try _default.NavigateImpl(uri)
    }

    public func navigateToString(_ htmlContent: String) throws {
        try _default.NavigateToStringImpl(htmlContent)
    }

    public func addScriptToExecuteOnDocumentCreatedAsync(_ javaScript: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _default.AddScriptToExecuteOnDocumentCreatedAsyncImpl(javaScript)
    }

    public func removeScriptToExecuteOnDocumentCreated(_ id: String) throws {
        try _default.RemoveScriptToExecuteOnDocumentCreatedImpl(id)
    }

    public func executeScriptAsync(_ javaScript: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _default.ExecuteScriptAsyncImpl(javaScript)
    }

    public func capturePreviewAsync(_ imageFormat: CoreWebView2CapturePreviewImageFormat, _ imageStream: UWP.AnyIRandomAccessStream!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.CapturePreviewAsyncImpl(imageFormat, imageStream)
    }

    public func reload() throws {
        try _default.ReloadImpl()
    }

    public func postWebMessageAsJson(_ webMessageAsJson: String) throws {
        try _default.PostWebMessageAsJsonImpl(webMessageAsJson)
    }

    public func postWebMessageAsString(_ webMessageAsString: String) throws {
        try _default.PostWebMessageAsStringImpl(webMessageAsString)
    }

    public func callDevToolsProtocolMethodAsync(_ methodName: String, _ parametersAsJson: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _default.CallDevToolsProtocolMethodAsyncImpl(methodName, parametersAsJson)
    }

    public func goBack() throws {
        try _default.GoBackImpl()
    }

    public func goForward() throws {
        try _default.GoForwardImpl()
    }

    public func getDevToolsProtocolEventReceiver(_ eventName: String) throws -> CoreWebView2DevToolsProtocolEventReceiver! {
        try _default.GetDevToolsProtocolEventReceiverImpl(eventName)
    }

    public func stop() throws {
        try _default.StopImpl()
    }

    public func addHostObjectToScript(_ name: String, _ rawObject: Any!) throws {
        try _default.AddHostObjectToScriptImpl(name, rawObject)
    }

    public func removeHostObjectFromScript(_ name: String) throws {
        try _default.RemoveHostObjectFromScriptImpl(name)
    }

    public func openDevToolsWindow() throws {
        try _default.OpenDevToolsWindowImpl()
    }

    public func addWebResourceRequestedFilter(_ uri: String, _ ResourceContext: CoreWebView2WebResourceContext) throws {
        try _default.AddWebResourceRequestedFilterImpl(uri, ResourceContext)
    }

    public func removeWebResourceRequestedFilter(_ uri: String, _ ResourceContext: CoreWebView2WebResourceContext) throws {
        try _default.RemoveWebResourceRequestedFilterImpl(uri, ResourceContext)
    }

    public var browserProcessId : UInt32 {
        get { try! _default.get_BrowserProcessIdImpl() }
    }

    public var canGoBack : Bool {
        get { try! _default.get_CanGoBackImpl() }
    }

    public var canGoForward : Bool {
        get { try! _default.get_CanGoForwardImpl() }
    }

    public var containsFullScreenElement : Bool {
        get { try! _default.get_ContainsFullScreenElementImpl() }
    }

    public var documentTitle : String {
        get { try! _default.get_DocumentTitleImpl() }
    }

    public var settings : CoreWebView2Settings! {
        get { try! _default.get_SettingsImpl() }
    }

    public var source : String {
        get { try! _default.get_SourceImpl() }
    }

    public lazy var containsFullScreenElementChanged : Event<TypedEventHandler<CoreWebView2?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContainsFullScreenElementChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContainsFullScreenElementChangedImpl($0)
       }
      )
    }()

    public lazy var contentLoading : Event<TypedEventHandler<CoreWebView2?, CoreWebView2ContentLoadingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContentLoadingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContentLoadingImpl($0)
       }
      )
    }()

    public lazy var documentTitleChanged : Event<TypedEventHandler<CoreWebView2?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DocumentTitleChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DocumentTitleChangedImpl($0)
       }
      )
    }()

    public lazy var frameNavigationCompleted : Event<TypedEventHandler<CoreWebView2?, CoreWebView2NavigationCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FrameNavigationCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FrameNavigationCompletedImpl($0)
       }
      )
    }()

    public lazy var frameNavigationStarting : Event<TypedEventHandler<CoreWebView2?, CoreWebView2NavigationStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FrameNavigationStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FrameNavigationStartingImpl($0)
       }
      )
    }()

    public lazy var historyChanged : Event<TypedEventHandler<CoreWebView2?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_HistoryChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_HistoryChangedImpl($0)
       }
      )
    }()

    public lazy var navigationCompleted : Event<TypedEventHandler<CoreWebView2?, CoreWebView2NavigationCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NavigationCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NavigationCompletedImpl($0)
       }
      )
    }()

    public lazy var navigationStarting : Event<TypedEventHandler<CoreWebView2?, CoreWebView2NavigationStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NavigationStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NavigationStartingImpl($0)
       }
      )
    }()

    public lazy var newWindowRequested : Event<TypedEventHandler<CoreWebView2?, CoreWebView2NewWindowRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NewWindowRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NewWindowRequestedImpl($0)
       }
      )
    }()

    public lazy var permissionRequested : Event<TypedEventHandler<CoreWebView2?, CoreWebView2PermissionRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PermissionRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PermissionRequestedImpl($0)
       }
      )
    }()

    public lazy var processFailed : Event<TypedEventHandler<CoreWebView2?, CoreWebView2ProcessFailedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ProcessFailedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ProcessFailedImpl($0)
       }
      )
    }()

    public lazy var scriptDialogOpening : Event<TypedEventHandler<CoreWebView2?, CoreWebView2ScriptDialogOpeningEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ScriptDialogOpeningImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ScriptDialogOpeningImpl($0)
       }
      )
    }()

    public lazy var sourceChanged : Event<TypedEventHandler<CoreWebView2?, CoreWebView2SourceChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SourceChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SourceChangedImpl($0)
       }
      )
    }()

    public lazy var webMessageReceived : Event<TypedEventHandler<CoreWebView2?, CoreWebView2WebMessageReceivedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_WebMessageReceivedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_WebMessageReceivedImpl($0)
       }
      )
    }()

    public lazy var webResourceRequested : Event<TypedEventHandler<CoreWebView2?, CoreWebView2WebResourceRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_WebResourceRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_WebResourceRequestedImpl($0)
       }
      )
    }()

    public lazy var windowCloseRequested : Event<TypedEventHandler<CoreWebView2?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_WindowCloseRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_WindowCloseRequestedImpl($0)
       }
      )
    }()

    deinit {
        _ICoreWebView2PrivatePartial = nil
        _ICoreWebView2_10 = nil
        _ICoreWebView2_11 = nil
        _ICoreWebView2_12 = nil
        _ICoreWebView2_13 = nil
        _ICoreWebView2_14 = nil
        _ICoreWebView2_15 = nil
        _ICoreWebView2_16 = nil
        _ICoreWebView2_17 = nil
        _ICoreWebView2_18 = nil
        _ICoreWebView2_19 = nil
        _ICoreWebView2_2 = nil
        _ICoreWebView2_20 = nil
        _ICoreWebView2_3 = nil
        _ICoreWebView2_4 = nil
        _ICoreWebView2_5 = nil
        _ICoreWebView2_6 = nil
        _ICoreWebView2_7 = nil
        _ICoreWebView2_8 = nil
        _ICoreWebView2_9 = nil
        _default = nil
    }
}

public final class CoreWebView2AcceleratorKeyPressedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2AcceleratorKeyPressedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs>?) -> CoreWebView2AcceleratorKeyPressedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2AcceleratorKeyPressedEventArgs2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2AcceleratorKeyPressedEventArgs2! = getInterfaceForCaching()
    public var isBrowserAcceleratorKeyEnabled : Bool {
        get { try! _ICoreWebView2AcceleratorKeyPressedEventArgs2.get_IsBrowserAcceleratorKeyEnabledImpl() }
        set { try! _ICoreWebView2AcceleratorKeyPressedEventArgs2.put_IsBrowserAcceleratorKeyEnabledImpl(newValue) }
    }

    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    public var keyEventKind : CoreWebView2KeyEventKind {
        get { try! _default.get_KeyEventKindImpl() }
    }

    public var keyEventLParam : Int32 {
        get { try! _default.get_KeyEventLParamImpl() }
    }

    public var physicalKeyStatus : CoreWebView2PhysicalKeyStatus {
        get { try! _default.get_PhysicalKeyStatusImpl() }
    }

    public var virtualKey : UInt32 {
        get { try! _default.get_VirtualKeyImpl() }
    }

    deinit {
        _ICoreWebView2AcceleratorKeyPressedEventArgs2 = nil
        _default = nil
    }
}

public final class CoreWebView2BasicAuthenticationRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2BasicAuthenticationRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationRequestedEventArgs>?) -> CoreWebView2BasicAuthenticationRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    public var challenge : String {
        get { try! _default.get_ChallengeImpl() }
    }

    public var response : CoreWebView2BasicAuthenticationResponse! {
        get { try! _default.get_ResponseImpl() }
    }

    public var uri : String {
        get { try! _default.get_UriImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2BasicAuthenticationResponse : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2BasicAuthenticationResponse
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationResponse
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationResponse>?) -> CoreWebView2BasicAuthenticationResponse? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var password : String {
        get { try! _default.get_PasswordImpl() }
        set { try! _default.put_PasswordImpl(newValue) }
    }

    public var userName : String {
        get { try! _default.get_UserNameImpl() }
        set { try! _default.put_UserNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2BrowserExtension : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2BrowserExtension
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserExtension
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserExtension>?) -> CoreWebView2BrowserExtension? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func removeAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.RemoveAsyncImpl()
    }

    public func enableAsync(_ IsEnabled: Bool) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.EnableAsyncImpl(IsEnabled)
    }

    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    public var isEnabled : Bool {
        get { try! _default.get_IsEnabledImpl() }
    }

    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2BrowserProcessExitedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2BrowserProcessExitedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserProcessExitedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserProcessExitedEventArgs>?) -> CoreWebView2BrowserProcessExitedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var browserProcessExitKind : CoreWebView2BrowserProcessExitKind {
        get { try! _default.get_BrowserProcessExitKindImpl() }
    }

    public var browserProcessId : UInt32 {
        get { try! _default.get_BrowserProcessIdImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2Certificate : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Certificate
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate>?) -> CoreWebView2Certificate? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _CoreWebView2Certificate_Manual: __ABI_Microsoft_Web_WebView2_Core.CoreWebView2Certificate_Manual! = getInterfaceForCaching()
    public func toCertificate() throws -> UWP.Certificate! {
        try _CoreWebView2Certificate_Manual.ToCertificateImpl()
    }

    public func toPemEncoding() throws -> String {
        try _default.ToPemEncodingImpl()
    }

    public var derEncodedSerialNumber : String {
        get { try! _default.get_DerEncodedSerialNumberImpl() }
    }

    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
    }

    public var issuer : String {
        get { try! _default.get_IssuerImpl() }
    }

    public var pemEncodedIssuerCertificateChain : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_PemEncodedIssuerCertificateChainImpl() }
    }

    public var subject : String {
        get { try! _default.get_SubjectImpl() }
    }

    public var validFrom : Double {
        get { try! _default.get_ValidFromImpl() }
    }

    public var validTo : Double {
        get { try! _default.get_ValidToImpl() }
    }

    deinit {
        _CoreWebView2Certificate_Manual = nil
        _default = nil
    }
}

public final class CoreWebView2ClientCertificate : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ClientCertificate
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate>?) -> CoreWebView2ClientCertificate? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _CoreWebView2ClientCertificate_Manual: __ABI_Microsoft_Web_WebView2_Core.CoreWebView2ClientCertificate_Manual! = getInterfaceForCaching()
    public func toCertificate() throws -> UWP.Certificate! {
        try _CoreWebView2ClientCertificate_Manual.ToCertificateImpl()
    }

    public func toPemEncoding() throws -> String {
        try _default.ToPemEncodingImpl()
    }

    public var derEncodedSerialNumber : String {
        get { try! _default.get_DerEncodedSerialNumberImpl() }
    }

    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
    }

    public var issuer : String {
        get { try! _default.get_IssuerImpl() }
    }

    public var kind : CoreWebView2ClientCertificateKind {
        get { try! _default.get_KindImpl() }
    }

    public var pemEncodedIssuerCertificateChain : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_PemEncodedIssuerCertificateChainImpl() }
    }

    public var subject : String {
        get { try! _default.get_SubjectImpl() }
    }

    public var validFrom : Double {
        get { try! _default.get_ValidFromImpl() }
    }

    public var validTo : Double {
        get { try! _default.get_ValidToImpl() }
    }

    deinit {
        _CoreWebView2ClientCertificate_Manual = nil
        _default = nil
    }
}

public final class CoreWebView2ClientCertificateRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ClientCertificateRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs>?) -> CoreWebView2ClientCertificateRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    public var allowedCertificateAuthorities : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_AllowedCertificateAuthoritiesImpl() }
    }

    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    public var host : String {
        get { try! _default.get_HostImpl() }
    }

    public var isProxy : Bool {
        get { try! _default.get_IsProxyImpl() }
    }

    public var mutuallyTrustedCertificates : WindowsFoundation.AnyIVectorView<CoreWebView2ClientCertificate?>! {
        get { try! _default.get_MutuallyTrustedCertificatesImpl() }
    }

    public var port : Int32 {
        get { try! _default.get_PortImpl() }
    }

    public var selectedCertificate : CoreWebView2ClientCertificate! {
        get { try! _default.get_SelectedCertificateImpl() }
        set { try! _default.put_SelectedCertificateImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2CompositionController : WebView2Core.CoreWebView2Controller {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2CompositionController
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController>?) -> CoreWebView2CompositionController? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _ICoreWebView2CompositionControllerStatics: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2CompositionControllerStatics = try! RoGetActivationFactory(HString("Microsoft.Web.WebView2.Core.CoreWebView2CompositionController"))
    private static let _ICoreWebView2CompositionControllerStatics2_Manual: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2CompositionControllerStatics2_Manual = try! RoGetActivationFactory(HString("Microsoft.Web.WebView2.Core.CoreWebView2CompositionController"))
    private lazy var _ICoreWebView2CompositionController2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2CompositionController2! = getInterfaceForCaching()
    private lazy var _ICoreWebView2CompositionController3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2CompositionController3! = getInterfaceForCaching()
    public func dragLeave() throws {
        try _ICoreWebView2CompositionController3.DragLeaveImpl()
    }

    public func sendMouseInput(_ eventKind: CoreWebView2MouseEventKind, _ virtualKeys: CoreWebView2MouseEventVirtualKeys, _ mouseData: UInt32, _ point: WindowsFoundation.Point) throws {
        try _default.SendMouseInputImpl(eventKind, virtualKeys, mouseData, point)
    }

    public func sendPointerInput(_ eventKind: CoreWebView2PointerEventKind, _ pointerInfo: CoreWebView2PointerInfo!) throws {
        try _default.SendPointerInputImpl(eventKind, pointerInfo)
    }

    public func dragEnter(_ dragInfo: UWP.CoreDragInfo!, _ dragUIOverride: UWP.CoreDragUIOverride!) throws -> UWP.DataPackageOperation {
        try _default.DragEnterImpl(dragInfo, dragUIOverride)
    }

    public func dragOver(_ dragInfo: UWP.CoreDragInfo!, _ dragUIOverride: UWP.CoreDragUIOverride!) throws -> UWP.DataPackageOperation {
        try _default.DragOverImpl(dragInfo, dragUIOverride)
    }

    public func drop(_ dragInfo: UWP.CoreDragInfo!) throws -> UWP.DataPackageOperation {
        try _default.DropImpl(dragInfo)
    }

    public var cursor : UWP.CoreCursor! {
        get { try! _default.get_CursorImpl() }
    }

    public var rootVisualTarget : Any! {
        get { try! _default.get_RootVisualTargetImpl() }
        set { try! _default.put_RootVisualTargetImpl(newValue) }
    }

    public lazy var cursorChanged : Event<TypedEventHandler<CoreWebView2CompositionController?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CursorChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CursorChangedImpl($0)
       }
      )
    }()

    deinit {
        _ICoreWebView2CompositionController2 = nil
        _ICoreWebView2CompositionController3 = nil
        _default = nil
    }
}

public final class CoreWebView2ContentLoadingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ContentLoadingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContentLoadingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContentLoadingEventArgs>?) -> CoreWebView2ContentLoadingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var isErrorPage : Bool {
        get { try! _default.get_IsErrorPageImpl() }
    }

    public var navigationId : UInt64 {
        get { try! _default.get_NavigationIdImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2ContextMenuItem : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ContextMenuItem
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem>?) -> CoreWebView2ContextMenuItem? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var children : WindowsFoundation.AnyIVector<CoreWebView2ContextMenuItem?>! {
        get { try! _default.get_ChildrenImpl() }
    }

    public var commandId : Int32 {
        get { try! _default.get_CommandIdImpl() }
    }

    public var icon : UWP.AnyIRandomAccessStream! {
        get { try! _default.get_IconImpl() }
    }

    public var isChecked : Bool {
        get { try! _default.get_IsCheckedImpl() }
        set { try! _default.put_IsCheckedImpl(newValue) }
    }

    public var isEnabled : Bool {
        get { try! _default.get_IsEnabledImpl() }
        set { try! _default.put_IsEnabledImpl(newValue) }
    }

    public var kind : CoreWebView2ContextMenuItemKind {
        get { try! _default.get_KindImpl() }
    }

    public var label : String {
        get { try! _default.get_LabelImpl() }
    }

    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    public var shortcutKeyDescription : String {
        get { try! _default.get_ShortcutKeyDescriptionImpl() }
    }

    public lazy var customItemSelected : Event<TypedEventHandler<CoreWebView2ContextMenuItem?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CustomItemSelectedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CustomItemSelectedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

public final class CoreWebView2ContextMenuRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ContextMenuRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs>?) -> CoreWebView2ContextMenuRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    public var contextMenuTarget : CoreWebView2ContextMenuTarget! {
        get { try! _default.get_ContextMenuTargetImpl() }
    }

    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    public var location : WindowsFoundation.Point {
        get { try! _default.get_LocationImpl() }
    }

    public var menuItems : WindowsFoundation.AnyIVector<CoreWebView2ContextMenuItem?>! {
        get { try! _default.get_MenuItemsImpl() }
    }

    public var selectedCommandId : Int32 {
        get { try! _default.get_SelectedCommandIdImpl() }
        set { try! _default.put_SelectedCommandIdImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2ContextMenuTarget : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ContextMenuTarget
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget>?) -> CoreWebView2ContextMenuTarget? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var frameUri : String {
        get { try! _default.get_FrameUriImpl() }
    }

    public var hasLinkText : Bool {
        get { try! _default.get_HasLinkTextImpl() }
    }

    public var hasLinkUri : Bool {
        get { try! _default.get_HasLinkUriImpl() }
    }

    public var hasSelection : Bool {
        get { try! _default.get_HasSelectionImpl() }
    }

    public var hasSourceUri : Bool {
        get { try! _default.get_HasSourceUriImpl() }
    }

    public var isEditable : Bool {
        get { try! _default.get_IsEditableImpl() }
    }

    public var isRequestedForMainFrame : Bool {
        get { try! _default.get_IsRequestedForMainFrameImpl() }
    }

    public var kind : CoreWebView2ContextMenuTargetKind {
        get { try! _default.get_KindImpl() }
    }

    public var linkText : String {
        get { try! _default.get_LinkTextImpl() }
    }

    public var linkUri : String {
        get { try! _default.get_LinkUriImpl() }
    }

    public var pageUri : String {
        get { try! _default.get_PageUriImpl() }
    }

    public var selectionText : String {
        get { try! _default.get_SelectionTextImpl() }
    }

    public var sourceUri : String {
        get { try! _default.get_SourceUriImpl() }
    }

    deinit {
        _default = nil
    }
}

open class CoreWebView2Controller : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Controller
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller>?) -> CoreWebView2Controller? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICoreWebView2ControllerFactory : __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ControllerFactory =  try! RoGetActivationFactory(HString("Microsoft.Web.WebView2.Core.CoreWebView2Controller"))

    private lazy var _ICoreWebView2Controller2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Controller2! = getInterfaceForCaching()
    public var defaultBackgroundColor : UWP.Color {
        get { try! _ICoreWebView2Controller2.get_DefaultBackgroundColorImpl() }
        set { try! _ICoreWebView2Controller2.put_DefaultBackgroundColorImpl(newValue) }
    }

    private lazy var _ICoreWebView2Controller3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Controller3! = getInterfaceForCaching()
    public var boundsMode : CoreWebView2BoundsMode {
        get { try! _ICoreWebView2Controller3.get_BoundsModeImpl() }
        set { try! _ICoreWebView2Controller3.put_BoundsModeImpl(newValue) }
    }

    public var rasterizationScale : Double {
        get { try! _ICoreWebView2Controller3.get_RasterizationScaleImpl() }
        set { try! _ICoreWebView2Controller3.put_RasterizationScaleImpl(newValue) }
    }

    public var shouldDetectMonitorScaleChanges : Bool {
        get { try! _ICoreWebView2Controller3.get_ShouldDetectMonitorScaleChangesImpl() }
        set { try! _ICoreWebView2Controller3.put_ShouldDetectMonitorScaleChangesImpl(newValue) }
    }

    public lazy var rasterizationScaleChanged : Event<TypedEventHandler<CoreWebView2Controller?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2Controller3 else { return .init() }
          return try! this.add_RasterizationScaleChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2Controller3.remove_RasterizationScaleChangedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2Controller4: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Controller4! = getInterfaceForCaching()
    public var allowExternalDrop : Bool {
        get { try! _ICoreWebView2Controller4.get_AllowExternalDropImpl() }
        set { try! _ICoreWebView2Controller4.put_AllowExternalDropImpl(newValue) }
    }

    private lazy var _ICoreWebView2PrivatePartialController: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2PrivatePartialController! = getInterfaceForCaching()
    public var isBrowserHitTransparent : Bool {
        get { try! _ICoreWebView2PrivatePartialController.get_IsBrowserHitTransparentImpl() }
    }

    public func setBoundsAndZoomFactor(_ Bounds: WindowsFoundation.Rect, _ ZoomFactor: Double) throws {
        try _default.SetBoundsAndZoomFactorImpl(Bounds, ZoomFactor)
    }

    public func moveFocus(_ reason: CoreWebView2MoveFocusReason) throws {
        try _default.MoveFocusImpl(reason)
    }

    public func notifyParentWindowPositionChanged() throws {
        try _default.NotifyParentWindowPositionChangedImpl()
    }

    public func close() throws {
        try _default.CloseImpl()
    }

    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_BoundsImpl() }
        set { try! _default.put_BoundsImpl(newValue) }
    }

    public var coreWebView2 : CoreWebView2! {
        get { try! _default.get_CoreWebView2Impl() }
    }

    public var isVisible : Bool {
        get { try! _default.get_IsVisibleImpl() }
        set { try! _default.put_IsVisibleImpl(newValue) }
    }

    public var parentWindow : CoreWebView2ControllerWindowReference! {
        get { try! _default.get_ParentWindowImpl() }
        set { try! _default.put_ParentWindowImpl(newValue) }
    }

    public var zoomFactor : Double {
        get { try! _default.get_ZoomFactorImpl() }
        set { try! _default.put_ZoomFactorImpl(newValue) }
    }

    public lazy var acceleratorKeyPressed : Event<TypedEventHandler<CoreWebView2Controller?, CoreWebView2AcceleratorKeyPressedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AcceleratorKeyPressedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AcceleratorKeyPressedImpl($0)
       }
      )
    }()

    public lazy var gotFocus : Event<TypedEventHandler<CoreWebView2Controller?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_GotFocusImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_GotFocusImpl($0)
       }
      )
    }()

    public lazy var lostFocus : Event<TypedEventHandler<CoreWebView2Controller?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_LostFocusImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_LostFocusImpl($0)
       }
      )
    }()

    public lazy var moveFocusRequested : Event<TypedEventHandler<CoreWebView2Controller?, CoreWebView2MoveFocusRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_MoveFocusRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_MoveFocusRequestedImpl($0)
       }
      )
    }()

    public lazy var zoomFactorChanged : Event<TypedEventHandler<CoreWebView2Controller?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ZoomFactorChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ZoomFactorChangedImpl($0)
       }
      )
    }()

    internal enum ICoreWebView2Controller : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = CoreWebView2Controller
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller
            internal typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Controller
        }
    }
    internal typealias Composable = ICoreWebView2Controller
    deinit {
        _ICoreWebView2Controller2 = nil
        _ICoreWebView2Controller3 = nil
        _ICoreWebView2Controller4 = nil
        _ICoreWebView2PrivatePartialController = nil
        _default = nil
    }
}

public final class CoreWebView2ControllerOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ControllerOptions
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions>?) -> CoreWebView2ControllerOptions? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2ControllerOptions2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ControllerOptions2! = getInterfaceForCaching()
    public var scriptLocale : String {
        get { try! _ICoreWebView2ControllerOptions2.get_ScriptLocaleImpl() }
        set { try! _ICoreWebView2ControllerOptions2.put_ScriptLocaleImpl(newValue) }
    }

    public var isInPrivateModeEnabled : Bool {
        get { try! _default.get_IsInPrivateModeEnabledImpl() }
        set { try! _default.put_IsInPrivateModeEnabledImpl(newValue) }
    }

    public var profileName : String {
        get { try! _default.get_ProfileNameImpl() }
        set { try! _default.put_ProfileNameImpl(newValue) }
    }

    deinit {
        _ICoreWebView2ControllerOptions2 = nil
        _default = nil
    }
}

public final class CoreWebView2ControllerWindowReference : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ControllerWindowReference
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerWindowReference
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerWindowReference>?) -> CoreWebView2ControllerWindowReference? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICoreWebView2ControllerWindowReferenceStatics: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ControllerWindowReferenceStatics = try! RoGetActivationFactory(HString("Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference"))
    public static func createFromWindowHandle(_ windowHandle: UInt64) -> CoreWebView2ControllerWindowReference! {
        return try! _ICoreWebView2ControllerWindowReferenceStatics.CreateFromWindowHandleImpl(windowHandle)
    }

    public static func createFromCoreWindow(_ coreWindow: UWP.CoreWindow!) -> CoreWebView2ControllerWindowReference! {
        return try! _ICoreWebView2ControllerWindowReferenceStatics.CreateFromCoreWindowImpl(coreWindow)
    }

    public var coreWindow : UWP.CoreWindow! {
        get { try! _default.get_CoreWindowImpl() }
    }

    public var windowHandle : UInt64 {
        get { try! _default.get_WindowHandleImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2Cookie : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Cookie
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie>?) -> CoreWebView2Cookie? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var domain : String {
        get { try! _default.get_DomainImpl() }
    }

    public var expires : Double {
        get { try! _default.get_ExpiresImpl() }
        set { try! _default.put_ExpiresImpl(newValue) }
    }

    public var isHttpOnly : Bool {
        get { try! _default.get_IsHttpOnlyImpl() }
        set { try! _default.put_IsHttpOnlyImpl(newValue) }
    }

    public var isSecure : Bool {
        get { try! _default.get_IsSecureImpl() }
        set { try! _default.put_IsSecureImpl(newValue) }
    }

    public var isSession : Bool {
        get { try! _default.get_IsSessionImpl() }
    }

    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    public var path : String {
        get { try! _default.get_PathImpl() }
    }

    public var sameSite : CoreWebView2CookieSameSiteKind {
        get { try! _default.get_SameSiteImpl() }
        set { try! _default.put_SameSiteImpl(newValue) }
    }

    public var value : String {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2CookieManager : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2CookieManager
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager>?) -> CoreWebView2CookieManager? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2CookieManager_Manual: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2CookieManager_Manual! = getInterfaceForCaching()
    public func getCookiesAsync(_ uri: String) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<CoreWebView2Cookie?>?>! {
        try _ICoreWebView2CookieManager_Manual.GetCookiesAsyncImpl(uri)
    }

    public func createCookie(_ name: String, _ value: String, _ Domain: String, _ Path: String) throws -> CoreWebView2Cookie! {
        try _default.CreateCookieImpl(name, value, Domain, Path)
    }

    public func copyCookie(_ cookieParam: CoreWebView2Cookie!) throws -> CoreWebView2Cookie! {
        try _default.CopyCookieImpl(cookieParam)
    }

    public func addOrUpdateCookie(_ cookie: CoreWebView2Cookie!) throws {
        try _default.AddOrUpdateCookieImpl(cookie)
    }

    public func deleteCookie(_ cookie: CoreWebView2Cookie!) throws {
        try _default.DeleteCookieImpl(cookie)
    }

    public func deleteCookies(_ name: String, _ uri: String) throws {
        try _default.DeleteCookiesImpl(name, uri)
    }

    public func deleteCookiesWithDomainAndPath(_ name: String, _ Domain: String, _ Path: String) throws {
        try _default.DeleteCookiesWithDomainAndPathImpl(name, Domain, Path)
    }

    public func deleteAllCookies() throws {
        try _default.DeleteAllCookiesImpl()
    }

    deinit {
        _ICoreWebView2CookieManager_Manual = nil
        _default = nil
    }
}

public final class CoreWebView2CustomSchemeRegistration : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2CustomSchemeRegistration
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration>?) -> CoreWebView2CustomSchemeRegistration? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICoreWebView2CustomSchemeRegistrationFactory: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2CustomSchemeRegistrationFactory = try! RoGetActivationFactory(HString("Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration"))
    public init(_ schemeName: String) {
        super.init(try! Self._ICoreWebView2CustomSchemeRegistrationFactory.CreateInstanceImpl(schemeName))
    }

    private lazy var _ICoreWebView2CustomSchemeRegistration_Manual: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2CustomSchemeRegistration_Manual! = getInterfaceForCaching()
    public var allowedOrigins : WindowsFoundation.AnyIVector<String>! {
        get { try! _ICoreWebView2CustomSchemeRegistration_Manual.get_AllowedOriginsImpl() }
    }

    public var schemeName : String {
        get { try! _ICoreWebView2CustomSchemeRegistration_Manual.get_SchemeNameImpl() }
    }

    public var hasAuthorityComponent : Bool {
        get { try! _default.get_HasAuthorityComponentImpl() }
        set { try! _default.put_HasAuthorityComponentImpl(newValue) }
    }

    public var treatAsSecure : Int32 {
        get { try! _default.get_TreatAsSecureImpl() }
        set { try! _default.put_TreatAsSecureImpl(newValue) }
    }

    deinit {
        _ICoreWebView2CustomSchemeRegistration_Manual = nil
        _default = nil
    }
}

public final class CoreWebView2DOMContentLoadedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DOMContentLoadedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DOMContentLoadedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DOMContentLoadedEventArgs>?) -> CoreWebView2DOMContentLoadedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var navigationId : UInt64 {
        get { try! _default.get_NavigationIdImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2DevToolsProtocolEventReceivedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceivedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceivedEventArgs>?) -> CoreWebView2DevToolsProtocolEventReceivedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2DevToolsProtocolEventReceivedEventArgs2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs2! = getInterfaceForCaching()
    public var sessionId : String {
        get { try! _ICoreWebView2DevToolsProtocolEventReceivedEventArgs2.get_SessionIdImpl() }
    }

    public var parameterObjectAsJson : String {
        get { try! _default.get_ParameterObjectAsJsonImpl() }
    }

    deinit {
        _ICoreWebView2DevToolsProtocolEventReceivedEventArgs2 = nil
        _default = nil
    }
}

public final class CoreWebView2DevToolsProtocolEventReceiver : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DevToolsProtocolEventReceiver
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceiver
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceiver>?) -> CoreWebView2DevToolsProtocolEventReceiver? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public lazy var devToolsProtocolEventReceived : Event<TypedEventHandler<CoreWebView2?, CoreWebView2DevToolsProtocolEventReceivedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DevToolsProtocolEventReceivedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DevToolsProtocolEventReceivedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

public final class CoreWebView2DownloadOperation : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DownloadOperation
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation>?) -> CoreWebView2DownloadOperation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func cancel() throws {
        try _default.CancelImpl()
    }

    public func pause() throws {
        try _default.PauseImpl()
    }

    public func resume() throws {
        try _default.ResumeImpl()
    }

    public var bytesReceived : Int64 {
        get { try! _default.get_BytesReceivedImpl() }
    }

    public var canResume : Bool {
        get { try! _default.get_CanResumeImpl() }
    }

    public var contentDisposition : String {
        get { try! _default.get_ContentDispositionImpl() }
    }

    public var estimatedEndTime : String {
        get { try! _default.get_EstimatedEndTimeImpl() }
    }

    public var interruptReason : CoreWebView2DownloadInterruptReason {
        get { try! _default.get_InterruptReasonImpl() }
    }

    public var mimeType : String {
        get { try! _default.get_MimeTypeImpl() }
    }

    public var resultFilePath : String {
        get { try! _default.get_ResultFilePathImpl() }
    }

    public var state : CoreWebView2DownloadState {
        get { try! _default.get_StateImpl() }
    }

    public var totalBytesToReceive : Int64 {
        get { try! _default.get_TotalBytesToReceiveImpl() }
    }

    public var uri : String {
        get { try! _default.get_UriImpl() }
    }

    public lazy var bytesReceivedChanged : Event<TypedEventHandler<CoreWebView2DownloadOperation?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_BytesReceivedChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_BytesReceivedChangedImpl($0)
       }
      )
    }()

    public lazy var estimatedEndTimeChanged : Event<TypedEventHandler<CoreWebView2DownloadOperation?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_EstimatedEndTimeChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_EstimatedEndTimeChangedImpl($0)
       }
      )
    }()

    public lazy var stateChanged : Event<TypedEventHandler<CoreWebView2DownloadOperation?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_StateChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_StateChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

public final class CoreWebView2DownloadStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DownloadStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs>?) -> CoreWebView2DownloadStartingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    public var downloadOperation : CoreWebView2DownloadOperation! {
        get { try! _default.get_DownloadOperationImpl() }
    }

    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    public var resultFilePath : String {
        get { try! _default.get_ResultFilePathImpl() }
        set { try! _default.put_ResultFilePathImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2Environment : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment>?) -> CoreWebView2Environment? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICoreWebView2EnvironmentStatics: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2EnvironmentStatics = try! RoGetActivationFactory(HString("Microsoft.Web.WebView2.Core.CoreWebView2Environment"))
    public static func createAsync() -> WindowsFoundation.AnyIAsyncOperation<CoreWebView2Environment?>! {
        return try! _ICoreWebView2EnvironmentStatics.CreateAsyncImpl()
    }

    public static func createWithOptionsAsync(_ browserExecutableFolder: String, _ userDataFolder: String, _ options: CoreWebView2EnvironmentOptions!) -> WindowsFoundation.AnyIAsyncOperation<CoreWebView2Environment?>! {
        return try! _ICoreWebView2EnvironmentStatics.CreateWithOptionsAsyncImpl(browserExecutableFolder, userDataFolder, options)
    }

    public static func getAvailableBrowserVersionString() -> String {
        return try! _ICoreWebView2EnvironmentStatics.GetAvailableBrowserVersionStringImpl()
    }

    public static func getAvailableBrowserVersionString(_ browserExecutableFolder: String) -> String {
        return try! _ICoreWebView2EnvironmentStatics.GetAvailableBrowserVersionString2Impl(browserExecutableFolder)
    }

    public static func compareBrowserVersionString(_ browserVersionString1: String, _ browserVersionString2: String) -> Int32 {
        return try! _ICoreWebView2EnvironmentStatics.CompareBrowserVersionStringImpl(browserVersionString1, browserVersionString2)
    }

    private lazy var _ICoreWebView2Environment10: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment10! = getInterfaceForCaching()
    public func createCoreWebView2ControllerOptions() throws -> CoreWebView2ControllerOptions! {
        try _ICoreWebView2Environment10.CreateCoreWebView2ControllerOptionsImpl()
    }

    private lazy var _ICoreWebView2Environment11: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment11! = getInterfaceForCaching()
    public var failureReportFolderPath : String {
        get { try! _ICoreWebView2Environment11.get_FailureReportFolderPathImpl() }
    }

    private lazy var _ICoreWebView2Environment12: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment12! = getInterfaceForCaching()
    public func createSharedBuffer(_ Size: UInt64) throws -> CoreWebView2SharedBuffer! {
        try _ICoreWebView2Environment12.CreateSharedBufferImpl(Size)
    }

    private lazy var _ICoreWebView2Environment13: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment13! = getInterfaceForCaching()
    public func getProcessExtendedInfosAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<CoreWebView2ProcessExtendedInfo?>?>! {
        try _ICoreWebView2Environment13.GetProcessExtendedInfosAsyncImpl()
    }

    private lazy var _ICoreWebView2Environment2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment2! = getInterfaceForCaching()
    public func createWebResourceRequest(_ uri: String, _ Method: String, _ postData: UWP.AnyIRandomAccessStream!, _ Headers: String) throws -> CoreWebView2WebResourceRequest! {
        try _ICoreWebView2Environment2.CreateWebResourceRequestImpl(uri, Method, postData, Headers)
    }

    private lazy var _ICoreWebView2Environment3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment3! = getInterfaceForCaching()
    public func createCoreWebView2CompositionControllerAsync(_ ParentWindow: CoreWebView2ControllerWindowReference!) throws -> WindowsFoundation.AnyIAsyncOperation<CoreWebView2CompositionController?>! {
        try _ICoreWebView2Environment3.CreateCoreWebView2CompositionControllerAsyncImpl(ParentWindow)
    }

    public func createCoreWebView2PointerInfo() throws -> CoreWebView2PointerInfo! {
        try _ICoreWebView2Environment3.CreateCoreWebView2PointerInfoImpl()
    }

    private lazy var _ICoreWebView2Environment4: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment4! = getInterfaceForCaching()
    private lazy var _ICoreWebView2Environment5: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment5! = getInterfaceForCaching()
    public lazy var browserProcessExited : Event<TypedEventHandler<CoreWebView2Environment?, CoreWebView2BrowserProcessExitedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2Environment5 else { return .init() }
          return try! this.add_BrowserProcessExitedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2Environment5.remove_BrowserProcessExitedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2Environment6: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment6! = getInterfaceForCaching()
    public func createPrintSettings() throws -> CoreWebView2PrintSettings! {
        try _ICoreWebView2Environment6.CreatePrintSettingsImpl()
    }

    private lazy var _ICoreWebView2Environment7: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment7! = getInterfaceForCaching()
    public var userDataFolder : String {
        get { try! _ICoreWebView2Environment7.get_UserDataFolderImpl() }
    }

    private lazy var _ICoreWebView2Environment8: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment8! = getInterfaceForCaching()
    public func getProcessInfos() throws -> WindowsFoundation.AnyIVectorView<CoreWebView2ProcessInfo?>! {
        try _ICoreWebView2Environment8.GetProcessInfosImpl()
    }

    public lazy var processInfosChanged : Event<TypedEventHandler<CoreWebView2Environment?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2Environment8 else { return .init() }
          return try! this.add_ProcessInfosChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2Environment8.remove_ProcessInfosChangedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2Environment9: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment9! = getInterfaceForCaching()
    public func createContextMenuItem(_ Label: String, _ iconStream: UWP.AnyIRandomAccessStream!, _ Kind: CoreWebView2ContextMenuItemKind) throws -> CoreWebView2ContextMenuItem! {
        try _ICoreWebView2Environment9.CreateContextMenuItemImpl(Label, iconStream, Kind)
    }

    private lazy var _ICoreWebView2Environment_Manual: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Environment_Manual! = getInterfaceForCaching()
    public func createCoreWebView2ControllerAsync(_ ParentWindow: CoreWebView2ControllerWindowReference!, _ options: CoreWebView2ControllerOptions!) throws -> WindowsFoundation.AnyIAsyncOperation<CoreWebView2Controller?>! {
        try _ICoreWebView2Environment_Manual.CreateCoreWebView2ControllerAsyncImpl(ParentWindow, options)
    }

    public func createCoreWebView2CompositionControllerAsync(_ ParentWindow: CoreWebView2ControllerWindowReference!, _ options: CoreWebView2ControllerOptions!) throws -> WindowsFoundation.AnyIAsyncOperation<CoreWebView2CompositionController?>! {
        try _ICoreWebView2Environment_Manual.CreateCoreWebView2CompositionControllerAsyncImpl(ParentWindow, options)
    }

    public func createCoreWebView2ControllerAsync(_ ParentWindow: CoreWebView2ControllerWindowReference!) throws -> WindowsFoundation.AnyIAsyncOperation<CoreWebView2Controller?>! {
        try _default.CreateCoreWebView2ControllerAsyncImpl(ParentWindow)
    }

    public func createWebResourceResponse(_ Content: UWP.AnyIRandomAccessStream!, _ StatusCode: Int32, _ ReasonPhrase: String, _ Headers: String) throws -> CoreWebView2WebResourceResponse! {
        try _default.CreateWebResourceResponseImpl(Content, StatusCode, ReasonPhrase, Headers)
    }

    public var browserVersionString : String {
        get { try! _default.get_BrowserVersionStringImpl() }
    }

    public lazy var newBrowserVersionAvailable : Event<TypedEventHandler<CoreWebView2Environment?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NewBrowserVersionAvailableImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NewBrowserVersionAvailableImpl($0)
       }
      )
    }()

    deinit {
        _ICoreWebView2Environment10 = nil
        _ICoreWebView2Environment11 = nil
        _ICoreWebView2Environment12 = nil
        _ICoreWebView2Environment13 = nil
        _ICoreWebView2Environment2 = nil
        _ICoreWebView2Environment3 = nil
        _ICoreWebView2Environment4 = nil
        _ICoreWebView2Environment5 = nil
        _ICoreWebView2Environment6 = nil
        _ICoreWebView2Environment7 = nil
        _ICoreWebView2Environment8 = nil
        _ICoreWebView2Environment9 = nil
        _ICoreWebView2Environment_Manual = nil
        _default = nil
    }
}

public final class CoreWebView2EnvironmentOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2EnvironmentOptions
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions>?) -> CoreWebView2EnvironmentOptions? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions")))
    }

    private lazy var _ICoreWebView2EnvironmentOptions2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2EnvironmentOptions2! = getInterfaceForCaching()
    public var exclusiveUserDataFolderAccess : Bool {
        get { try! _ICoreWebView2EnvironmentOptions2.get_ExclusiveUserDataFolderAccessImpl() }
        set { try! _ICoreWebView2EnvironmentOptions2.put_ExclusiveUserDataFolderAccessImpl(newValue) }
    }

    private lazy var _ICoreWebView2EnvironmentOptions3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2EnvironmentOptions3! = getInterfaceForCaching()
    public var isCustomCrashReportingEnabled : Bool {
        get { try! _ICoreWebView2EnvironmentOptions3.get_IsCustomCrashReportingEnabledImpl() }
        set { try! _ICoreWebView2EnvironmentOptions3.put_IsCustomCrashReportingEnabledImpl(newValue) }
    }

    private lazy var _ICoreWebView2EnvironmentOptions4: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2EnvironmentOptions4! = getInterfaceForCaching()
    private lazy var _ICoreWebView2EnvironmentOptions5: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2EnvironmentOptions5! = getInterfaceForCaching()
    public var enableTrackingPrevention : Bool {
        get { try! _ICoreWebView2EnvironmentOptions5.get_EnableTrackingPreventionImpl() }
        set { try! _ICoreWebView2EnvironmentOptions5.put_EnableTrackingPreventionImpl(newValue) }
    }

    private lazy var _ICoreWebView2EnvironmentOptions6: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2EnvironmentOptions6! = getInterfaceForCaching()
    public var areBrowserExtensionsEnabled : Bool {
        get { try! _ICoreWebView2EnvironmentOptions6.get_AreBrowserExtensionsEnabledImpl() }
        set { try! _ICoreWebView2EnvironmentOptions6.put_AreBrowserExtensionsEnabledImpl(newValue) }
    }

    private lazy var _ICoreWebView2EnvironmentOptions_Manual: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2EnvironmentOptions_Manual! = getInterfaceForCaching()
    private lazy var _ICoreWebView2EnvironmentOptions_Manual3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2EnvironmentOptions_Manual3! = getInterfaceForCaching()
    public var customSchemeRegistrations : WindowsFoundation.AnyIVector<CoreWebView2CustomSchemeRegistration?>! {
        get { try! _ICoreWebView2EnvironmentOptions_Manual3.get_CustomSchemeRegistrationsImpl() }
        set { try! _ICoreWebView2EnvironmentOptions_Manual3.put_CustomSchemeRegistrationsImpl(newValue) }
    }

    public var additionalBrowserArguments : String {
        get { try! _default.get_AdditionalBrowserArgumentsImpl() }
        set { try! _default.put_AdditionalBrowserArgumentsImpl(newValue) }
    }

    public var allowSingleSignOnUsingOSPrimaryAccount : Bool {
        get { try! _default.get_AllowSingleSignOnUsingOSPrimaryAccountImpl() }
        set { try! _default.put_AllowSingleSignOnUsingOSPrimaryAccountImpl(newValue) }
    }

    public var language : String {
        get { try! _default.get_LanguageImpl() }
        set { try! _default.put_LanguageImpl(newValue) }
    }

    public var targetCompatibleBrowserVersion : String {
        get { try! _default.get_TargetCompatibleBrowserVersionImpl() }
        set { try! _default.put_TargetCompatibleBrowserVersionImpl(newValue) }
    }

    deinit {
        _ICoreWebView2EnvironmentOptions2 = nil
        _ICoreWebView2EnvironmentOptions3 = nil
        _ICoreWebView2EnvironmentOptions4 = nil
        _ICoreWebView2EnvironmentOptions5 = nil
        _ICoreWebView2EnvironmentOptions6 = nil
        _ICoreWebView2EnvironmentOptions_Manual = nil
        _ICoreWebView2EnvironmentOptions_Manual3 = nil
        _default = nil
    }
}

public final class CoreWebView2File : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2File
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2File
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2File>?) -> CoreWebView2File? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var path : String {
        get { try! _default.get_PathImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2Frame : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Frame
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame>?) -> CoreWebView2Frame? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2Frame2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Frame2! = getInterfaceForCaching()
    public func executeScriptAsync(_ javaScript: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _ICoreWebView2Frame2.ExecuteScriptAsyncImpl(javaScript)
    }

    public func postWebMessageAsJson(_ webMessageAsJson: String) throws {
        try _ICoreWebView2Frame2.PostWebMessageAsJsonImpl(webMessageAsJson)
    }

    public func postWebMessageAsString(_ webMessageAsString: String) throws {
        try _ICoreWebView2Frame2.PostWebMessageAsStringImpl(webMessageAsString)
    }

    public lazy var contentLoading : Event<TypedEventHandler<CoreWebView2Frame?, CoreWebView2ContentLoadingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2Frame2 else { return .init() }
          return try! this.add_ContentLoadingImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2Frame2.remove_ContentLoadingImpl($0)
       }
      )
    }()

    public lazy var domContentLoaded : Event<TypedEventHandler<CoreWebView2Frame?, CoreWebView2DOMContentLoadedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2Frame2 else { return .init() }
          return try! this.add_DOMContentLoadedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2Frame2.remove_DOMContentLoadedImpl($0)
       }
      )
    }()

    public lazy var navigationCompleted : Event<TypedEventHandler<CoreWebView2Frame?, CoreWebView2NavigationCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2Frame2 else { return .init() }
          return try! this.add_NavigationCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2Frame2.remove_NavigationCompletedImpl($0)
       }
      )
    }()

    public lazy var navigationStarting : Event<TypedEventHandler<CoreWebView2Frame?, CoreWebView2NavigationStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2Frame2 else { return .init() }
          return try! this.add_NavigationStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2Frame2.remove_NavigationStartingImpl($0)
       }
      )
    }()

    public lazy var webMessageReceived : Event<TypedEventHandler<CoreWebView2Frame?, CoreWebView2WebMessageReceivedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2Frame2 else { return .init() }
          return try! this.add_WebMessageReceivedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2Frame2.remove_WebMessageReceivedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2Frame3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Frame3! = getInterfaceForCaching()
    public lazy var permissionRequested : Event<TypedEventHandler<CoreWebView2Frame?, CoreWebView2PermissionRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2Frame3 else { return .init() }
          return try! this.add_PermissionRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2Frame3.remove_PermissionRequestedImpl($0)
       }
      )
    }()

    private lazy var _ICoreWebView2Frame4: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Frame4! = getInterfaceForCaching()
    public func postSharedBufferToScript(_ sharedBuffer: CoreWebView2SharedBuffer!, _ access: CoreWebView2SharedBufferAccess, _ additionalDataAsJson: String) throws {
        try _ICoreWebView2Frame4.PostSharedBufferToScriptImpl(sharedBuffer, access, additionalDataAsJson)
    }

    private lazy var _ICoreWebView2Frame5: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Frame5! = getInterfaceForCaching()
    public var frameId : UInt32 {
        get { try! _ICoreWebView2Frame5.get_FrameIdImpl() }
    }

    public func removeHostObjectFromScript(_ name: String) throws {
        try _default.RemoveHostObjectFromScriptImpl(name)
    }

    public func isDestroyed() throws -> Int32 {
        try _default.IsDestroyedImpl()
    }

    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    public lazy var destroyed : Event<TypedEventHandler<CoreWebView2Frame?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DestroyedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DestroyedImpl($0)
       }
      )
    }()

    public lazy var nameChanged : Event<TypedEventHandler<CoreWebView2Frame?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NameChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NameChangedImpl($0)
       }
      )
    }()

    deinit {
        _ICoreWebView2Frame2 = nil
        _ICoreWebView2Frame3 = nil
        _ICoreWebView2Frame4 = nil
        _ICoreWebView2Frame5 = nil
        _default = nil
    }
}

public final class CoreWebView2FrameCreatedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2FrameCreatedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameCreatedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameCreatedEventArgs>?) -> CoreWebView2FrameCreatedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var frame : CoreWebView2Frame! {
        get { try! _default.get_FrameImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2FrameInfo : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2FrameInfo
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo>?) -> CoreWebView2FrameInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2FrameInfo2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2FrameInfo2! = getInterfaceForCaching()
    public var frameId : UInt32 {
        get { try! _ICoreWebView2FrameInfo2.get_FrameIdImpl() }
    }

    public var frameKind : CoreWebView2FrameKind {
        get { try! _ICoreWebView2FrameInfo2.get_FrameKindImpl() }
    }

    public var parentFrameInfo : CoreWebView2FrameInfo! {
        get { try! _ICoreWebView2FrameInfo2.get_ParentFrameInfoImpl() }
    }

    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    public var source : String {
        get { try! _default.get_SourceImpl() }
    }

    deinit {
        _ICoreWebView2FrameInfo2 = nil
        _default = nil
    }
}

public final class CoreWebView2HttpHeadersCollectionIterator : WinRTClass, IIterator {
    public typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2HttpHeadersCollectionIterator
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpHeadersCollectionIterator
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpHeadersCollectionIterator>?) -> CoreWebView2HttpHeadersCollectionIterator? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IIterator: IIteratorIKeyValuePairString_String! = getInterfaceForCaching()
    public func moveNext() -> Bool {
        try! _IIterator.MoveNextImpl()
    }

    public var current : WindowsFoundation.AnyIKeyValuePair<String, String>? {
        get { try! _IIterator.get_CurrentImpl() }
    }

    public var hasCurrent : Bool {
        get { try! _IIterator.get_HasCurrentImpl() }
    }

    deinit {
        _default = nil
        _IIterator = nil
    }
}

public final class CoreWebView2HttpRequestHeaders : WinRTClass, IIterable {
    public typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2HttpRequestHeaders
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpRequestHeaders
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpRequestHeaders>?) -> CoreWebView2HttpRequestHeaders? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    public func getHeader(_ name: String) throws -> String {
        try _default.GetHeaderImpl(name)
    }

    public func getHeaders(_ name: String) throws -> CoreWebView2HttpHeadersCollectionIterator! {
        try _default.GetHeadersImpl(name)
    }

    public func contains(_ name: String) throws -> Bool {
        try _default.ContainsImpl(name)
    }

    public func setHeader(_ name: String, _ value: String) throws {
        try _default.SetHeaderImpl(name, value)
    }

    public func removeHeader(_ name: String) throws {
        try _default.RemoveHeaderImpl(name)
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_String! = getInterfaceForCaching()
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

public final class CoreWebView2HttpResponseHeaders : WinRTClass, IIterable {
    public typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2HttpResponseHeaders
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpResponseHeaders
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpResponseHeaders>?) -> CoreWebView2HttpResponseHeaders? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    public func appendHeader(_ name: String, _ value: String) throws {
        try _default.AppendHeaderImpl(name, value)
    }

    public func contains(_ name: String) throws -> Bool {
        try _default.ContainsImpl(name)
    }

    public func getHeader(_ name: String) throws -> String {
        try _default.GetHeaderImpl(name)
    }

    public func getHeaders(_ name: String) throws -> CoreWebView2HttpHeadersCollectionIterator! {
        try _default.GetHeadersImpl(name)
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_String! = getInterfaceForCaching()
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

public final class CoreWebView2LaunchingExternalUriSchemeEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2LaunchingExternalUriSchemeEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2LaunchingExternalUriSchemeEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2LaunchingExternalUriSchemeEventArgs>?) -> CoreWebView2LaunchingExternalUriSchemeEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    public var initiatingOrigin : String {
        get { try! _default.get_InitiatingOriginImpl() }
    }

    public var isUserInitiated : Bool {
        get { try! _default.get_IsUserInitiatedImpl() }
    }

    public var uri : String {
        get { try! _default.get_UriImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2MoveFocusRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2MoveFocusRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2MoveFocusRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2MoveFocusRequestedEventArgs>?) -> CoreWebView2MoveFocusRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    public var reason : CoreWebView2MoveFocusReason {
        get { try! _default.get_ReasonImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2NavigationCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2NavigationCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationCompletedEventArgs>?) -> CoreWebView2NavigationCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2NavigationCompletedEventArgs2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2NavigationCompletedEventArgs2! = getInterfaceForCaching()
    public var httpStatusCode : Int32 {
        get { try! _ICoreWebView2NavigationCompletedEventArgs2.get_HttpStatusCodeImpl() }
    }

    public var isSuccess : Bool {
        get { try! _default.get_IsSuccessImpl() }
    }

    public var navigationId : UInt64 {
        get { try! _default.get_NavigationIdImpl() }
    }

    public var webErrorStatus : CoreWebView2WebErrorStatus {
        get { try! _default.get_WebErrorStatusImpl() }
    }

    deinit {
        _ICoreWebView2NavigationCompletedEventArgs2 = nil
        _default = nil
    }
}

public final class CoreWebView2NavigationStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2NavigationStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs>?) -> CoreWebView2NavigationStartingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2NavigationStartingEventArgs2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2NavigationStartingEventArgs2! = getInterfaceForCaching()
    public var additionalAllowedFrameAncestors : String {
        get { try! _ICoreWebView2NavigationStartingEventArgs2.get_AdditionalAllowedFrameAncestorsImpl() }
        set { try! _ICoreWebView2NavigationStartingEventArgs2.put_AdditionalAllowedFrameAncestorsImpl(newValue) }
    }

    private lazy var _ICoreWebView2NavigationStartingEventArgs3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2NavigationStartingEventArgs3! = getInterfaceForCaching()
    public var navigationKind : CoreWebView2NavigationKind {
        get { try! _ICoreWebView2NavigationStartingEventArgs3.get_NavigationKindImpl() }
    }

    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    public var isRedirected : Bool {
        get { try! _default.get_IsRedirectedImpl() }
    }

    public var isUserInitiated : Bool {
        get { try! _default.get_IsUserInitiatedImpl() }
    }

    public var navigationId : UInt64 {
        get { try! _default.get_NavigationIdImpl() }
    }

    public var requestHeaders : CoreWebView2HttpRequestHeaders! {
        get { try! _default.get_RequestHeadersImpl() }
    }

    public var uri : String {
        get { try! _default.get_UriImpl() }
    }

    deinit {
        _ICoreWebView2NavigationStartingEventArgs2 = nil
        _ICoreWebView2NavigationStartingEventArgs3 = nil
        _default = nil
    }
}

public final class CoreWebView2NewWindowRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2NewWindowRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs>?) -> CoreWebView2NewWindowRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2NewWindowRequestedEventArgs2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2NewWindowRequestedEventArgs2! = getInterfaceForCaching()
    public var name : String {
        get { try! _ICoreWebView2NewWindowRequestedEventArgs2.get_NameImpl() }
    }

    private lazy var _ICoreWebView2NewWindowRequestedEventArgs3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2NewWindowRequestedEventArgs3! = getInterfaceForCaching()
    public var originalSourceFrameInfo : CoreWebView2FrameInfo! {
        get { try! _ICoreWebView2NewWindowRequestedEventArgs3.get_OriginalSourceFrameInfoImpl() }
    }

    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    public var isUserInitiated : Bool {
        get { try! _default.get_IsUserInitiatedImpl() }
    }

    public var newWindow : CoreWebView2! {
        get { try! _default.get_NewWindowImpl() }
        set { try! _default.put_NewWindowImpl(newValue) }
    }

    public var uri : String {
        get { try! _default.get_UriImpl() }
    }

    public var windowFeatures : CoreWebView2WindowFeatures! {
        get { try! _default.get_WindowFeaturesImpl() }
    }

    deinit {
        _ICoreWebView2NewWindowRequestedEventArgs2 = nil
        _ICoreWebView2NewWindowRequestedEventArgs3 = nil
        _default = nil
    }
}

public final class CoreWebView2PermissionRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2PermissionRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs>?) -> CoreWebView2PermissionRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2PermissionRequestedEventArgs2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2PermissionRequestedEventArgs2! = getInterfaceForCaching()
    public var handled : Bool {
        get { try! _ICoreWebView2PermissionRequestedEventArgs2.get_HandledImpl() }
        set { try! _ICoreWebView2PermissionRequestedEventArgs2.put_HandledImpl(newValue) }
    }

    private lazy var _ICoreWebView2PermissionRequestedEventArgs3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2PermissionRequestedEventArgs3! = getInterfaceForCaching()
    public var savesInProfile : Bool {
        get { try! _ICoreWebView2PermissionRequestedEventArgs3.get_SavesInProfileImpl() }
        set { try! _ICoreWebView2PermissionRequestedEventArgs3.put_SavesInProfileImpl(newValue) }
    }

    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    public var isUserInitiated : Bool {
        get { try! _default.get_IsUserInitiatedImpl() }
    }

    public var permissionKind : CoreWebView2PermissionKind {
        get { try! _default.get_PermissionKindImpl() }
    }

    public var state : CoreWebView2PermissionState {
        get { try! _default.get_StateImpl() }
        set { try! _default.put_StateImpl(newValue) }
    }

    public var uri : String {
        get { try! _default.get_UriImpl() }
    }

    deinit {
        _ICoreWebView2PermissionRequestedEventArgs2 = nil
        _ICoreWebView2PermissionRequestedEventArgs3 = nil
        _default = nil
    }
}

public final class CoreWebView2PermissionSetting : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2PermissionSetting
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionSetting
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionSetting>?) -> CoreWebView2PermissionSetting? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var permissionKind : CoreWebView2PermissionKind {
        get { try! _default.get_PermissionKindImpl() }
    }

    public var permissionOrigin : String {
        get { try! _default.get_PermissionOriginImpl() }
    }

    public var permissionState : CoreWebView2PermissionState {
        get { try! _default.get_PermissionStateImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2PointerInfo : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2PointerInfo
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo>?) -> CoreWebView2PointerInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var buttonChangeKind : Int32 {
        get { try! _default.get_ButtonChangeKindImpl() }
        set { try! _default.put_ButtonChangeKindImpl(newValue) }
    }

    public var displayRect : WindowsFoundation.Rect {
        get { try! _default.get_DisplayRectImpl() }
        set { try! _default.put_DisplayRectImpl(newValue) }
    }

    public var frameId : UInt32 {
        get { try! _default.get_FrameIdImpl() }
        set { try! _default.put_FrameIdImpl(newValue) }
    }

    public var himetricLocation : WindowsFoundation.Point {
        get { try! _default.get_HimetricLocationImpl() }
        set { try! _default.put_HimetricLocationImpl(newValue) }
    }

    public var himetricLocationRaw : WindowsFoundation.Point {
        get { try! _default.get_HimetricLocationRawImpl() }
        set { try! _default.put_HimetricLocationRawImpl(newValue) }
    }

    public var historyCount : UInt32 {
        get { try! _default.get_HistoryCountImpl() }
        set { try! _default.put_HistoryCountImpl(newValue) }
    }

    public var inputData : Int32 {
        get { try! _default.get_InputDataImpl() }
        set { try! _default.put_InputDataImpl(newValue) }
    }

    public var keyStates : UInt32 {
        get { try! _default.get_KeyStatesImpl() }
        set { try! _default.put_KeyStatesImpl(newValue) }
    }

    public var penFlags : UInt32 {
        get { try! _default.get_PenFlagsImpl() }
        set { try! _default.put_PenFlagsImpl(newValue) }
    }

    public var penMask : UInt32 {
        get { try! _default.get_PenMaskImpl() }
        set { try! _default.put_PenMaskImpl(newValue) }
    }

    public var penPressure : UInt32 {
        get { try! _default.get_PenPressureImpl() }
        set { try! _default.put_PenPressureImpl(newValue) }
    }

    public var penRotation : UInt32 {
        get { try! _default.get_PenRotationImpl() }
        set { try! _default.put_PenRotationImpl(newValue) }
    }

    public var penTiltX : Int32 {
        get { try! _default.get_PenTiltXImpl() }
        set { try! _default.put_PenTiltXImpl(newValue) }
    }

    public var penTiltY : Int32 {
        get { try! _default.get_PenTiltYImpl() }
        set { try! _default.put_PenTiltYImpl(newValue) }
    }

    public var performanceCount : UInt64 {
        get { try! _default.get_PerformanceCountImpl() }
        set { try! _default.put_PerformanceCountImpl(newValue) }
    }

    public var pixelLocation : WindowsFoundation.Point {
        get { try! _default.get_PixelLocationImpl() }
        set { try! _default.put_PixelLocationImpl(newValue) }
    }

    public var pixelLocationRaw : WindowsFoundation.Point {
        get { try! _default.get_PixelLocationRawImpl() }
        set { try! _default.put_PixelLocationRawImpl(newValue) }
    }

    public var pointerDeviceRect : WindowsFoundation.Rect {
        get { try! _default.get_PointerDeviceRectImpl() }
        set { try! _default.put_PointerDeviceRectImpl(newValue) }
    }

    public var pointerFlags : UInt32 {
        get { try! _default.get_PointerFlagsImpl() }
        set { try! _default.put_PointerFlagsImpl(newValue) }
    }

    public var pointerId : UInt32 {
        get { try! _default.get_PointerIdImpl() }
        set { try! _default.put_PointerIdImpl(newValue) }
    }

    public var pointerKind : UInt32 {
        get { try! _default.get_PointerKindImpl() }
        set { try! _default.put_PointerKindImpl(newValue) }
    }

    public var time : UInt32 {
        get { try! _default.get_TimeImpl() }
        set { try! _default.put_TimeImpl(newValue) }
    }

    public var touchContact : WindowsFoundation.Rect {
        get { try! _default.get_TouchContactImpl() }
        set { try! _default.put_TouchContactImpl(newValue) }
    }

    public var touchContactRaw : WindowsFoundation.Rect {
        get { try! _default.get_TouchContactRawImpl() }
        set { try! _default.put_TouchContactRawImpl(newValue) }
    }

    public var touchFlags : UInt32 {
        get { try! _default.get_TouchFlagsImpl() }
        set { try! _default.put_TouchFlagsImpl(newValue) }
    }

    public var touchMask : UInt32 {
        get { try! _default.get_TouchMaskImpl() }
        set { try! _default.put_TouchMaskImpl(newValue) }
    }

    public var touchOrientation : UInt32 {
        get { try! _default.get_TouchOrientationImpl() }
        set { try! _default.put_TouchOrientationImpl(newValue) }
    }

    public var touchPressure : UInt32 {
        get { try! _default.get_TouchPressureImpl() }
        set { try! _default.put_TouchPressureImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2PrintSettings : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2PrintSettings
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings>?) -> CoreWebView2PrintSettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2PrintSettings2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2PrintSettings2! = getInterfaceForCaching()
    public var collation : CoreWebView2PrintCollation {
        get { try! _ICoreWebView2PrintSettings2.get_CollationImpl() }
        set { try! _ICoreWebView2PrintSettings2.put_CollationImpl(newValue) }
    }

    public var colorMode : CoreWebView2PrintColorMode {
        get { try! _ICoreWebView2PrintSettings2.get_ColorModeImpl() }
        set { try! _ICoreWebView2PrintSettings2.put_ColorModeImpl(newValue) }
    }

    public var copies : Int32 {
        get { try! _ICoreWebView2PrintSettings2.get_CopiesImpl() }
        set { try! _ICoreWebView2PrintSettings2.put_CopiesImpl(newValue) }
    }

    public var duplex : CoreWebView2PrintDuplex {
        get { try! _ICoreWebView2PrintSettings2.get_DuplexImpl() }
        set { try! _ICoreWebView2PrintSettings2.put_DuplexImpl(newValue) }
    }

    public var mediaSize : CoreWebView2PrintMediaSize {
        get { try! _ICoreWebView2PrintSettings2.get_MediaSizeImpl() }
        set { try! _ICoreWebView2PrintSettings2.put_MediaSizeImpl(newValue) }
    }

    public var pageRanges : String {
        get { try! _ICoreWebView2PrintSettings2.get_PageRangesImpl() }
        set { try! _ICoreWebView2PrintSettings2.put_PageRangesImpl(newValue) }
    }

    public var pagesPerSide : Int32 {
        get { try! _ICoreWebView2PrintSettings2.get_PagesPerSideImpl() }
        set { try! _ICoreWebView2PrintSettings2.put_PagesPerSideImpl(newValue) }
    }

    public var printerName : String {
        get { try! _ICoreWebView2PrintSettings2.get_PrinterNameImpl() }
        set { try! _ICoreWebView2PrintSettings2.put_PrinterNameImpl(newValue) }
    }

    public var footerUri : String {
        get { try! _default.get_FooterUriImpl() }
        set { try! _default.put_FooterUriImpl(newValue) }
    }

    public var headerTitle : String {
        get { try! _default.get_HeaderTitleImpl() }
        set { try! _default.put_HeaderTitleImpl(newValue) }
    }

    public var marginBottom : Double {
        get { try! _default.get_MarginBottomImpl() }
        set { try! _default.put_MarginBottomImpl(newValue) }
    }

    public var marginLeft : Double {
        get { try! _default.get_MarginLeftImpl() }
        set { try! _default.put_MarginLeftImpl(newValue) }
    }

    public var marginRight : Double {
        get { try! _default.get_MarginRightImpl() }
        set { try! _default.put_MarginRightImpl(newValue) }
    }

    public var marginTop : Double {
        get { try! _default.get_MarginTopImpl() }
        set { try! _default.put_MarginTopImpl(newValue) }
    }

    public var orientation : CoreWebView2PrintOrientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    public var pageHeight : Double {
        get { try! _default.get_PageHeightImpl() }
        set { try! _default.put_PageHeightImpl(newValue) }
    }

    public var pageWidth : Double {
        get { try! _default.get_PageWidthImpl() }
        set { try! _default.put_PageWidthImpl(newValue) }
    }

    public var scaleFactor : Double {
        get { try! _default.get_ScaleFactorImpl() }
        set { try! _default.put_ScaleFactorImpl(newValue) }
    }

    public var shouldPrintBackgrounds : Bool {
        get { try! _default.get_ShouldPrintBackgroundsImpl() }
        set { try! _default.put_ShouldPrintBackgroundsImpl(newValue) }
    }

    public var shouldPrintHeaderAndFooter : Bool {
        get { try! _default.get_ShouldPrintHeaderAndFooterImpl() }
        set { try! _default.put_ShouldPrintHeaderAndFooterImpl(newValue) }
    }

    public var shouldPrintSelectionOnly : Bool {
        get { try! _default.get_ShouldPrintSelectionOnlyImpl() }
        set { try! _default.put_ShouldPrintSelectionOnlyImpl(newValue) }
    }

    deinit {
        _ICoreWebView2PrintSettings2 = nil
        _default = nil
    }
}

public final class CoreWebView2ProcessExtendedInfo : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ProcessExtendedInfo
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessExtendedInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessExtendedInfo>?) -> CoreWebView2ProcessExtendedInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var associatedFrameInfos : WindowsFoundation.AnyIVectorView<CoreWebView2FrameInfo?>! {
        get { try! _default.get_AssociatedFrameInfosImpl() }
    }

    public var processInfo : CoreWebView2ProcessInfo! {
        get { try! _default.get_ProcessInfoImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2ProcessFailedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ProcessFailedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs>?) -> CoreWebView2ProcessFailedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2ProcessFailedEventArgs2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ProcessFailedEventArgs2! = getInterfaceForCaching()
    public var exitCode : Int32 {
        get { try! _ICoreWebView2ProcessFailedEventArgs2.get_ExitCodeImpl() }
    }

    public var frameInfosForFailedProcess : WindowsFoundation.AnyIVectorView<CoreWebView2FrameInfo?>! {
        get { try! _ICoreWebView2ProcessFailedEventArgs2.get_FrameInfosForFailedProcessImpl() }
    }

    public var processDescription : String {
        get { try! _ICoreWebView2ProcessFailedEventArgs2.get_ProcessDescriptionImpl() }
    }

    public var reason : CoreWebView2ProcessFailedReason {
        get { try! _ICoreWebView2ProcessFailedEventArgs2.get_ReasonImpl() }
    }

    public var processFailedKind : CoreWebView2ProcessFailedKind {
        get { try! _default.get_ProcessFailedKindImpl() }
    }

    deinit {
        _ICoreWebView2ProcessFailedEventArgs2 = nil
        _default = nil
    }
}

public final class CoreWebView2ProcessInfo : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ProcessInfo
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessInfo>?) -> CoreWebView2ProcessInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var kind : CoreWebView2ProcessKind {
        get { try! _default.get_KindImpl() }
    }

    public var processId : Int32 {
        get { try! _default.get_ProcessIdImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2Profile : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Profile
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile>?) -> CoreWebView2Profile? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _CoreWebView2Profile_Manual: __ABI_Microsoft_Web_WebView2_Core.CoreWebView2Profile_Manual! = getInterfaceForCaching()
    public func clearBrowsingDataAsync(_ dataKinds: CoreWebView2BrowsingDataKinds, _ startTime: WindowsFoundation.DateTime, _ endTime: WindowsFoundation.DateTime) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _CoreWebView2Profile_Manual.ClearBrowsingDataAsyncImpl(dataKinds, startTime, endTime)
    }

    public func clearBrowsingDataAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _CoreWebView2Profile_Manual.ClearBrowsingDataAsync2Impl()
    }

    private lazy var _CoreWebView2Profile_Manual2: __ABI_Microsoft_Web_WebView2_Core.CoreWebView2Profile_Manual2! = getInterfaceForCaching()
    public func getNonDefaultPermissionSettingsAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<CoreWebView2PermissionSetting?>?>! {
        try _CoreWebView2Profile_Manual2.GetNonDefaultPermissionSettingsAsyncImpl()
    }

    private lazy var _ICoreWebView2Profile2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Profile2! = getInterfaceForCaching()
    public func clearBrowsingDataAsync(_ dataKinds: CoreWebView2BrowsingDataKinds) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _ICoreWebView2Profile2.ClearBrowsingDataAsyncImpl(dataKinds)
    }

    private lazy var _ICoreWebView2Profile3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Profile3! = getInterfaceForCaching()
    public var preferredTrackingPreventionLevel : CoreWebView2TrackingPreventionLevel {
        get { try! _ICoreWebView2Profile3.get_PreferredTrackingPreventionLevelImpl() }
        set { try! _ICoreWebView2Profile3.put_PreferredTrackingPreventionLevelImpl(newValue) }
    }

    private lazy var _ICoreWebView2Profile4: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Profile4! = getInterfaceForCaching()
    public func setPermissionStateAsync(_ PermissionKind: CoreWebView2PermissionKind, _ origin: String, _ State: CoreWebView2PermissionState) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _ICoreWebView2Profile4.SetPermissionStateAsyncImpl(PermissionKind, origin, State)
    }

    private lazy var _ICoreWebView2Profile5: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Profile5! = getInterfaceForCaching()
    public var cookieManager : CoreWebView2CookieManager! {
        get { try! _ICoreWebView2Profile5.get_CookieManagerImpl() }
    }

    private lazy var _ICoreWebView2Profile6: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Profile6! = getInterfaceForCaching()
    public var isGeneralAutofillEnabled : Bool {
        get { try! _ICoreWebView2Profile6.get_IsGeneralAutofillEnabledImpl() }
        set { try! _ICoreWebView2Profile6.put_IsGeneralAutofillEnabledImpl(newValue) }
    }

    public var isPasswordAutosaveEnabled : Bool {
        get { try! _ICoreWebView2Profile6.get_IsPasswordAutosaveEnabledImpl() }
        set { try! _ICoreWebView2Profile6.put_IsPasswordAutosaveEnabledImpl(newValue) }
    }

    private lazy var _ICoreWebView2Profile7: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Profile7! = getInterfaceForCaching()
    public func addBrowserExtensionAsync(_ extensionFolderPath: String) throws -> WindowsFoundation.AnyIAsyncOperation<CoreWebView2BrowserExtension?>! {
        try _ICoreWebView2Profile7.AddBrowserExtensionAsyncImpl(extensionFolderPath)
    }

    private lazy var _ICoreWebView2Profile8: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Profile8! = getInterfaceForCaching()
    public func delete() throws {
        try _ICoreWebView2Profile8.DeleteImpl()
    }

    public lazy var deleted : Event<TypedEventHandler<CoreWebView2Profile?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWebView2Profile8 else { return .init() }
          return try! this.add_DeletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWebView2Profile8.remove_DeletedImpl($0)
       }
      )
    }()

    public var defaultDownloadFolderPath : String {
        get { try! _default.get_DefaultDownloadFolderPathImpl() }
        set { try! _default.put_DefaultDownloadFolderPathImpl(newValue) }
    }

    public var isInPrivateModeEnabled : Bool {
        get { try! _default.get_IsInPrivateModeEnabledImpl() }
    }

    public var preferredColorScheme : CoreWebView2PreferredColorScheme {
        get { try! _default.get_PreferredColorSchemeImpl() }
        set { try! _default.put_PreferredColorSchemeImpl(newValue) }
    }

    public var profileName : String {
        get { try! _default.get_ProfileNameImpl() }
    }

    public var profilePath : String {
        get { try! _default.get_ProfilePathImpl() }
    }

    deinit {
        _CoreWebView2Profile_Manual = nil
        _CoreWebView2Profile_Manual2 = nil
        _ICoreWebView2Profile2 = nil
        _ICoreWebView2Profile3 = nil
        _ICoreWebView2Profile4 = nil
        _ICoreWebView2Profile5 = nil
        _ICoreWebView2Profile6 = nil
        _ICoreWebView2Profile7 = nil
        _ICoreWebView2Profile8 = nil
        _default = nil
    }
}

public final class CoreWebView2ScriptDialogOpeningEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ScriptDialogOpeningEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs>?) -> CoreWebView2ScriptDialogOpeningEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func accept() throws {
        try _default.AcceptImpl()
    }

    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    public var defaultText : String {
        get { try! _default.get_DefaultTextImpl() }
    }

    public var kind : CoreWebView2ScriptDialogKind {
        get { try! _default.get_KindImpl() }
    }

    public var message : String {
        get { try! _default.get_MessageImpl() }
    }

    public var resultText : String {
        get { try! _default.get_ResultTextImpl() }
        set { try! _default.put_ResultTextImpl(newValue) }
    }

    public var uri : String {
        get { try! _default.get_UriImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2ServerCertificateErrorDetectedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2ServerCertificateErrorDetectedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ServerCertificateErrorDetectedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ServerCertificateErrorDetectedEventArgs>?) -> CoreWebView2ServerCertificateErrorDetectedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    public var action : CoreWebView2ServerCertificateErrorAction {
        get { try! _default.get_ActionImpl() }
        set { try! _default.put_ActionImpl(newValue) }
    }

    public var errorStatus : CoreWebView2WebErrorStatus {
        get { try! _default.get_ErrorStatusImpl() }
    }

    public var requestUri : String {
        get { try! _default.get_RequestUriImpl() }
    }

    public var serverCertificate : CoreWebView2Certificate! {
        get { try! _default.get_ServerCertificateImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2Settings : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Settings
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings>?) -> CoreWebView2Settings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2Settings2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Settings2! = getInterfaceForCaching()
    public var userAgent : String {
        get { try! _ICoreWebView2Settings2.get_UserAgentImpl() }
        set { try! _ICoreWebView2Settings2.put_UserAgentImpl(newValue) }
    }

    private lazy var _ICoreWebView2Settings3: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Settings3! = getInterfaceForCaching()
    public var areBrowserAcceleratorKeysEnabled : Bool {
        get { try! _ICoreWebView2Settings3.get_AreBrowserAcceleratorKeysEnabledImpl() }
        set { try! _ICoreWebView2Settings3.put_AreBrowserAcceleratorKeysEnabledImpl(newValue) }
    }

    private lazy var _ICoreWebView2Settings4: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Settings4! = getInterfaceForCaching()
    public var isGeneralAutofillEnabled : Bool {
        get { try! _ICoreWebView2Settings4.get_IsGeneralAutofillEnabledImpl() }
        set { try! _ICoreWebView2Settings4.put_IsGeneralAutofillEnabledImpl(newValue) }
    }

    public var isPasswordAutosaveEnabled : Bool {
        get { try! _ICoreWebView2Settings4.get_IsPasswordAutosaveEnabledImpl() }
        set { try! _ICoreWebView2Settings4.put_IsPasswordAutosaveEnabledImpl(newValue) }
    }

    private lazy var _ICoreWebView2Settings5: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Settings5! = getInterfaceForCaching()
    public var isPinchZoomEnabled : Bool {
        get { try! _ICoreWebView2Settings5.get_IsPinchZoomEnabledImpl() }
        set { try! _ICoreWebView2Settings5.put_IsPinchZoomEnabledImpl(newValue) }
    }

    private lazy var _ICoreWebView2Settings6: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Settings6! = getInterfaceForCaching()
    public var isSwipeNavigationEnabled : Bool {
        get { try! _ICoreWebView2Settings6.get_IsSwipeNavigationEnabledImpl() }
        set { try! _ICoreWebView2Settings6.put_IsSwipeNavigationEnabledImpl(newValue) }
    }

    private lazy var _ICoreWebView2Settings7: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Settings7! = getInterfaceForCaching()
    public var hiddenPdfToolbarItems : CoreWebView2PdfToolbarItems {
        get { try! _ICoreWebView2Settings7.get_HiddenPdfToolbarItemsImpl() }
        set { try! _ICoreWebView2Settings7.put_HiddenPdfToolbarItemsImpl(newValue) }
    }

    private lazy var _ICoreWebView2Settings8: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Settings8! = getInterfaceForCaching()
    public var isReputationCheckingRequired : Bool {
        get { try! _ICoreWebView2Settings8.get_IsReputationCheckingRequiredImpl() }
        set { try! _ICoreWebView2Settings8.put_IsReputationCheckingRequiredImpl(newValue) }
    }

    private lazy var _ICoreWebView2Settings_Manual: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2Settings_Manual! = getInterfaceForCaching()
    public var hostObjectDispatchAdapter : AnyICoreWebView2DispatchAdapter! {
        get { try! _ICoreWebView2Settings_Manual.get_HostObjectDispatchAdapterImpl() }
        set { try! _ICoreWebView2Settings_Manual.put_HostObjectDispatchAdapterImpl(newValue) }
    }

    public var areDefaultContextMenusEnabled : Bool {
        get { try! _default.get_AreDefaultContextMenusEnabledImpl() }
        set { try! _default.put_AreDefaultContextMenusEnabledImpl(newValue) }
    }

    public var areDefaultScriptDialogsEnabled : Bool {
        get { try! _default.get_AreDefaultScriptDialogsEnabledImpl() }
        set { try! _default.put_AreDefaultScriptDialogsEnabledImpl(newValue) }
    }

    public var areDevToolsEnabled : Bool {
        get { try! _default.get_AreDevToolsEnabledImpl() }
        set { try! _default.put_AreDevToolsEnabledImpl(newValue) }
    }

    public var areHostObjectsAllowed : Bool {
        get { try! _default.get_AreHostObjectsAllowedImpl() }
        set { try! _default.put_AreHostObjectsAllowedImpl(newValue) }
    }

    public var isBuiltInErrorPageEnabled : Bool {
        get { try! _default.get_IsBuiltInErrorPageEnabledImpl() }
        set { try! _default.put_IsBuiltInErrorPageEnabledImpl(newValue) }
    }

    public var isScriptEnabled : Bool {
        get { try! _default.get_IsScriptEnabledImpl() }
        set { try! _default.put_IsScriptEnabledImpl(newValue) }
    }

    public var isStatusBarEnabled : Bool {
        get { try! _default.get_IsStatusBarEnabledImpl() }
        set { try! _default.put_IsStatusBarEnabledImpl(newValue) }
    }

    public var isWebMessageEnabled : Bool {
        get { try! _default.get_IsWebMessageEnabledImpl() }
        set { try! _default.put_IsWebMessageEnabledImpl(newValue) }
    }

    public var isZoomControlEnabled : Bool {
        get { try! _default.get_IsZoomControlEnabledImpl() }
        set { try! _default.put_IsZoomControlEnabledImpl(newValue) }
    }

    deinit {
        _ICoreWebView2Settings2 = nil
        _ICoreWebView2Settings3 = nil
        _ICoreWebView2Settings4 = nil
        _ICoreWebView2Settings5 = nil
        _ICoreWebView2Settings6 = nil
        _ICoreWebView2Settings7 = nil
        _ICoreWebView2Settings8 = nil
        _ICoreWebView2Settings_Manual = nil
        _default = nil
    }
}

public final class CoreWebView2SharedBuffer : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2SharedBuffer
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SharedBuffer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SharedBuffer>?) -> CoreWebView2SharedBuffer? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWebView2SharedBuffer_Manual: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2SharedBuffer_Manual! = getInterfaceForCaching()
    public var buffer : WindowsFoundation.AnyIMemoryBufferReference! {
        get { try! _ICoreWebView2SharedBuffer_Manual.get_BufferImpl() }
    }

    public func openStream() throws -> UWP.AnyIRandomAccessStream! {
        try _default.OpenStreamImpl()
    }

    public var size : UInt64 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    deinit {
        _ICoreWebView2SharedBuffer_Manual = nil
        _default = nil
        _IClosable = nil
    }
}

public final class CoreWebView2SourceChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2SourceChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SourceChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SourceChangedEventArgs>?) -> CoreWebView2SourceChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var isNewDocument : Bool {
        get { try! _default.get_IsNewDocumentImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2WebMessageReceivedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2WebMessageReceivedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebMessageReceivedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebMessageReceivedEventArgs>?) -> CoreWebView2WebMessageReceivedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _ICoreWebView2WebMessageReceivedEventArgs2: __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2WebMessageReceivedEventArgs2! = getInterfaceForCaching()
    public var additionalObjects : WindowsFoundation.AnyIVectorView<Any?>! {
        get { try! _ICoreWebView2WebMessageReceivedEventArgs2.get_AdditionalObjectsImpl() }
    }

    public func tryGetWebMessageAsString() throws -> String {
        try _default.TryGetWebMessageAsStringImpl()
    }

    public var source : String {
        get { try! _default.get_SourceImpl() }
    }

    public var webMessageAsJson : String {
        get { try! _default.get_WebMessageAsJsonImpl() }
    }

    deinit {
        _ICoreWebView2WebMessageReceivedEventArgs2 = nil
        _default = nil
    }
}

public final class CoreWebView2WebResourceRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2WebResourceRequest
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest>?) -> CoreWebView2WebResourceRequest? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var content : UWP.AnyIRandomAccessStream! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    public var headers : CoreWebView2HttpRequestHeaders! {
        get { try! _default.get_HeadersImpl() }
    }

    public var method : String {
        get { try! _default.get_MethodImpl() }
        set { try! _default.put_MethodImpl(newValue) }
    }

    public var uri : String {
        get { try! _default.get_UriImpl() }
        set { try! _default.put_UriImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2WebResourceRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2WebResourceRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequestedEventArgs>?) -> CoreWebView2WebResourceRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    public var request : CoreWebView2WebResourceRequest! {
        get { try! _default.get_RequestImpl() }
    }

    public var resourceContext : CoreWebView2WebResourceContext {
        get { try! _default.get_ResourceContextImpl() }
    }

    public var response : CoreWebView2WebResourceResponse! {
        get { try! _default.get_ResponseImpl() }
        set { try! _default.put_ResponseImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2WebResourceResponse : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2WebResourceResponse
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse>?) -> CoreWebView2WebResourceResponse? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var content : UWP.AnyIRandomAccessStream! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    public var headers : CoreWebView2HttpResponseHeaders! {
        get { try! _default.get_HeadersImpl() }
    }

    public var reasonPhrase : String {
        get { try! _default.get_ReasonPhraseImpl() }
        set { try! _default.put_ReasonPhraseImpl(newValue) }
    }

    public var statusCode : Int32 {
        get { try! _default.get_StatusCodeImpl() }
        set { try! _default.put_StatusCodeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2WebResourceResponseReceivedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2WebResourceResponseReceivedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseReceivedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseReceivedEventArgs>?) -> CoreWebView2WebResourceResponseReceivedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var request : CoreWebView2WebResourceRequest! {
        get { try! _default.get_RequestImpl() }
    }

    public var response : CoreWebView2WebResourceResponseView! {
        get { try! _default.get_ResponseImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2WebResourceResponseView : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2WebResourceResponseView
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseView>?) -> CoreWebView2WebResourceResponseView? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public func getContentAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>! {
        try _default.GetContentAsyncImpl()
    }

    public var headers : CoreWebView2HttpResponseHeaders! {
        get { try! _default.get_HeadersImpl() }
    }

    public var reasonPhrase : String {
        get { try! _default.get_ReasonPhraseImpl() }
    }

    public var statusCode : Int32 {
        get { try! _default.get_StatusCodeImpl() }
    }

    deinit {
        _default = nil
    }
}

public final class CoreWebView2WindowFeatures : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2WindowFeatures
    private typealias CABI = __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures>?) -> CoreWebView2WindowFeatures? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    public var hasPosition : Bool {
        get { try! _default.get_HasPositionImpl() }
    }

    public var hasSize : Bool {
        get { try! _default.get_HasSizeImpl() }
    }

    public var height : UInt32 {
        get { try! _default.get_HeightImpl() }
    }

    public var left : UInt32 {
        get { try! _default.get_LeftImpl() }
    }

    public var shouldDisplayMenuBar : Bool {
        get { try! _default.get_ShouldDisplayMenuBarImpl() }
    }

    public var shouldDisplayScrollBars : Bool {
        get { try! _default.get_ShouldDisplayScrollBarsImpl() }
    }

    public var shouldDisplayStatus : Bool {
        get { try! _default.get_ShouldDisplayStatusImpl() }
    }

    public var shouldDisplayToolbar : Bool {
        get { try! _default.get_ShouldDisplayToolbarImpl() }
    }

    public var top : UInt32 {
        get { try! _default.get_TopImpl() }
    }

    public var width : UInt32 {
        get { try! _default.get_WidthImpl() }
    }

    deinit {
        _default = nil
    }
}

public struct CoreWebView2PhysicalKeyStatus: Hashable, Codable {
    public var repeatCount: UInt32 = 0
    public var scanCode: UInt32 = 0
    public var isExtendedKey: Int32 = 0
    public var isMenuKeyDown: Int32 = 0
    public var wasKeyDown: Int32 = 0
    public var isKeyReleased: Int32 = 0
    public init() {}
    public init(repeatCount: UInt32, scanCode: UInt32, isExtendedKey: Int32, isMenuKeyDown: Int32, wasKeyDown: Int32, isKeyReleased: Int32) {
        self.repeatCount = repeatCount
        self.scanCode = scanCode
        self.isExtendedKey = isExtendedKey
        self.isMenuKeyDown = isMenuKeyDown
        self.wasKeyDown = wasKeyDown
        self.isKeyReleased = isKeyReleased
    }
    public static func from(abi: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PhysicalKeyStatus) -> CoreWebView2PhysicalKeyStatus {
        .init(repeatCount: abi.RepeatCount, scanCode: abi.ScanCode, isExtendedKey: abi.IsExtendedKey, isMenuKeyDown: abi.IsMenuKeyDown, wasKeyDown: abi.WasKeyDown, isKeyReleased: abi.IsKeyReleased)
    }
}

public protocol ICoreWebView2DispatchAdapter : WinRTInterface {
    func wrapNamedObject(_ name: String, _ adapter: WebView2Core.AnyICoreWebView2DispatchAdapter!) throws -> Any!
    func wrapObject(_ unwrapped: Any!, _ adapter: WebView2Core.AnyICoreWebView2DispatchAdapter!) throws -> Any!
    func unwrapObject(_ wrapped: Any!) throws -> Any!
    func clean() throws
}

extension ICoreWebView2DispatchAdapter {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterWrapper.IID:
                let wrapper = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICoreWebView2DispatchAdapter = any ICoreWebView2DispatchAdapter

extension WebView2Core.CoreWebView2BoundsMode {
    public static var useRawPixels : WebView2Core.CoreWebView2BoundsMode {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BoundsMode_UseRawPixels
    }
    public static var useRasterizationScale : WebView2Core.CoreWebView2BoundsMode {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BoundsMode_UseRasterizationScale
    }
}
extension WebView2Core.CoreWebView2BoundsMode: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2BrowserProcessExitKind {
    public static var normal : WebView2Core.CoreWebView2BrowserProcessExitKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowserProcessExitKind_Normal
    }
    public static var failed : WebView2Core.CoreWebView2BrowserProcessExitKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowserProcessExitKind_Failed
    }
}
extension WebView2Core.CoreWebView2BrowserProcessExitKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2BrowsingDataKinds {
    public static var fileSystems : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_FileSystems
    }
    public static var indexedDb : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_IndexedDb
    }
    public static var localStorage : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_LocalStorage
    }
    public static var webSql : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_WebSql
    }
    public static var cacheStorage : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_CacheStorage
    }
    public static var allDomStorage : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_AllDomStorage
    }
    public static var cookies : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_Cookies
    }
    public static var allSite : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_AllSite
    }
    public static var diskCache : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_DiskCache
    }
    public static var downloadHistory : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_DownloadHistory
    }
    public static var generalAutofill : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_GeneralAutofill
    }
    public static var passwordAutosave : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_PasswordAutosave
    }
    public static var browsingHistory : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_BrowsingHistory
    }
    public static var settings : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_Settings
    }
    public static var allProfile : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_AllProfile
    }
    public static var serviceWorkers : WebView2Core.CoreWebView2BrowsingDataKinds {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowsingDataKinds_ServiceWorkers
    }
}
extension WebView2Core.CoreWebView2BrowsingDataKinds: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2CapturePreviewImageFormat {
    public static var png : WebView2Core.CoreWebView2CapturePreviewImageFormat {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2CapturePreviewImageFormat_Png
    }
    public static var jpeg : WebView2Core.CoreWebView2CapturePreviewImageFormat {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2CapturePreviewImageFormat_Jpeg
    }
}
extension WebView2Core.CoreWebView2CapturePreviewImageFormat: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2ClientCertificateKind {
    public static var smartCard : WebView2Core.CoreWebView2ClientCertificateKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ClientCertificateKind_SmartCard
    }
    public static var pin : WebView2Core.CoreWebView2ClientCertificateKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ClientCertificateKind_Pin
    }
    public static var other : WebView2Core.CoreWebView2ClientCertificateKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ClientCertificateKind_Other
    }
}
extension WebView2Core.CoreWebView2ClientCertificateKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2ContextMenuItemKind {
    public static var command : WebView2Core.CoreWebView2ContextMenuItemKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuItemKind_Command
    }
    public static var checkBox : WebView2Core.CoreWebView2ContextMenuItemKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuItemKind_CheckBox
    }
    public static var radio : WebView2Core.CoreWebView2ContextMenuItemKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuItemKind_Radio
    }
    public static var separator : WebView2Core.CoreWebView2ContextMenuItemKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuItemKind_Separator
    }
    public static var submenu : WebView2Core.CoreWebView2ContextMenuItemKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuItemKind_Submenu
    }
}
extension WebView2Core.CoreWebView2ContextMenuItemKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2ContextMenuTargetKind {
    public static var page : WebView2Core.CoreWebView2ContextMenuTargetKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuTargetKind_Page
    }
    public static var image : WebView2Core.CoreWebView2ContextMenuTargetKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuTargetKind_Image
    }
    public static var selectedText : WebView2Core.CoreWebView2ContextMenuTargetKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuTargetKind_SelectedText
    }
    public static var audio : WebView2Core.CoreWebView2ContextMenuTargetKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuTargetKind_Audio
    }
    public static var video : WebView2Core.CoreWebView2ContextMenuTargetKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuTargetKind_Video
    }
}
extension WebView2Core.CoreWebView2ContextMenuTargetKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2CookieSameSiteKind {
    public static var none : WebView2Core.CoreWebView2CookieSameSiteKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2CookieSameSiteKind_None
    }
    public static var lax : WebView2Core.CoreWebView2CookieSameSiteKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2CookieSameSiteKind_Lax
    }
    public static var strict : WebView2Core.CoreWebView2CookieSameSiteKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2CookieSameSiteKind_Strict
    }
}
extension WebView2Core.CoreWebView2CookieSameSiteKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2DefaultDownloadDialogCornerAlignment {
    public static var topLeft : WebView2Core.CoreWebView2DefaultDownloadDialogCornerAlignment {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DefaultDownloadDialogCornerAlignment_TopLeft
    }
    public static var topRight : WebView2Core.CoreWebView2DefaultDownloadDialogCornerAlignment {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DefaultDownloadDialogCornerAlignment_TopRight
    }
    public static var bottomLeft : WebView2Core.CoreWebView2DefaultDownloadDialogCornerAlignment {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DefaultDownloadDialogCornerAlignment_BottomLeft
    }
    public static var bottomRight : WebView2Core.CoreWebView2DefaultDownloadDialogCornerAlignment {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DefaultDownloadDialogCornerAlignment_BottomRight
    }
}
extension WebView2Core.CoreWebView2DefaultDownloadDialogCornerAlignment: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2DownloadInterruptReason {
    public static var none : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_None
    }
    public static var fileFailed : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileFailed
    }
    public static var fileAccessDenied : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileAccessDenied
    }
    public static var fileNoSpace : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileNoSpace
    }
    public static var fileNameTooLong : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileNameTooLong
    }
    public static var fileTooLarge : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileTooLarge
    }
    public static var fileMalicious : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileMalicious
    }
    public static var fileTransientError : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileTransientError
    }
    public static var fileBlockedByPolicy : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileBlockedByPolicy
    }
    public static var fileSecurityCheckFailed : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileSecurityCheckFailed
    }
    public static var fileTooShort : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileTooShort
    }
    public static var fileHashMismatch : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_FileHashMismatch
    }
    public static var networkFailed : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_NetworkFailed
    }
    public static var networkTimeout : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_NetworkTimeout
    }
    public static var networkDisconnected : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_NetworkDisconnected
    }
    public static var networkServerDown : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_NetworkServerDown
    }
    public static var networkInvalidRequest : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_NetworkInvalidRequest
    }
    public static var serverFailed : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_ServerFailed
    }
    public static var serverNoRange : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_ServerNoRange
    }
    public static var serverBadContent : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_ServerBadContent
    }
    public static var serverUnauthorized : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_ServerUnauthorized
    }
    public static var serverCertificateProblem : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_ServerCertificateProblem
    }
    public static var serverForbidden : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_ServerForbidden
    }
    public static var serverUnexpectedResponse : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_ServerUnexpectedResponse
    }
    public static var serverContentLengthMismatch : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_ServerContentLengthMismatch
    }
    public static var serverCrossOriginRedirect : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_ServerCrossOriginRedirect
    }
    public static var userCanceled : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_UserCanceled
    }
    public static var userShutdown : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_UserShutdown
    }
    public static var userPaused : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_UserPaused
    }
    public static var downloadProcessCrashed : WebView2Core.CoreWebView2DownloadInterruptReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason_DownloadProcessCrashed
    }
}
extension WebView2Core.CoreWebView2DownloadInterruptReason: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2DownloadState {
    public static var inProgress : WebView2Core.CoreWebView2DownloadState {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadState_InProgress
    }
    public static var interrupted : WebView2Core.CoreWebView2DownloadState {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadState_Interrupted
    }
    public static var completed : WebView2Core.CoreWebView2DownloadState {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadState_Completed
    }
}
extension WebView2Core.CoreWebView2DownloadState: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2FaviconImageFormat {
    public static var png : WebView2Core.CoreWebView2FaviconImageFormat {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2FaviconImageFormat_Png
    }
    public static var jpeg : WebView2Core.CoreWebView2FaviconImageFormat {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2FaviconImageFormat_Jpeg
    }
}
extension WebView2Core.CoreWebView2FaviconImageFormat: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2FrameKind {
    public static var unknown : WebView2Core.CoreWebView2FrameKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2FrameKind_Unknown
    }
    public static var mainFrame : WebView2Core.CoreWebView2FrameKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2FrameKind_MainFrame
    }
    public static var iframe : WebView2Core.CoreWebView2FrameKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2FrameKind_Iframe
    }
    public static var embed : WebView2Core.CoreWebView2FrameKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2FrameKind_Embed
    }
    public static var object : WebView2Core.CoreWebView2FrameKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2FrameKind_Object
    }
}
extension WebView2Core.CoreWebView2FrameKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2HostResourceAccessKind {
    public static var deny : WebView2Core.CoreWebView2HostResourceAccessKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2HostResourceAccessKind_Deny
    }
    public static var allow : WebView2Core.CoreWebView2HostResourceAccessKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2HostResourceAccessKind_Allow
    }
    public static var denyCors : WebView2Core.CoreWebView2HostResourceAccessKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2HostResourceAccessKind_DenyCors
    }
}
extension WebView2Core.CoreWebView2HostResourceAccessKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2KeyEventKind {
    public static var keyDown : WebView2Core.CoreWebView2KeyEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2KeyEventKind_KeyDown
    }
    public static var keyUp : WebView2Core.CoreWebView2KeyEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2KeyEventKind_KeyUp
    }
    public static var systemKeyDown : WebView2Core.CoreWebView2KeyEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2KeyEventKind_SystemKeyDown
    }
    public static var systemKeyUp : WebView2Core.CoreWebView2KeyEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2KeyEventKind_SystemKeyUp
    }
}
extension WebView2Core.CoreWebView2KeyEventKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2MemoryUsageTargetLevel {
    public static var normal : WebView2Core.CoreWebView2MemoryUsageTargetLevel {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MemoryUsageTargetLevel_Normal
    }
    public static var low : WebView2Core.CoreWebView2MemoryUsageTargetLevel {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MemoryUsageTargetLevel_Low
    }
}
extension WebView2Core.CoreWebView2MemoryUsageTargetLevel: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2MouseEventKind {
    public static var horizontalWheel : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_HorizontalWheel
    }
    public static var leftButtonDoubleClick : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_LeftButtonDoubleClick
    }
    public static var leftButtonDown : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_LeftButtonDown
    }
    public static var leftButtonUp : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_LeftButtonUp
    }
    public static var leave : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_Leave
    }
    public static var middleButtonDoubleClick : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_MiddleButtonDoubleClick
    }
    public static var middleButtonDown : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_MiddleButtonDown
    }
    public static var middleButtonUp : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_MiddleButtonUp
    }
    public static var move : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_Move
    }
    public static var rightButtonDoubleClick : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_RightButtonDoubleClick
    }
    public static var rightButtonDown : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_RightButtonDown
    }
    public static var rightButtonUp : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_RightButtonUp
    }
    public static var wheel : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_Wheel
    }
    public static var xbuttonDoubleClick : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_XButtonDoubleClick
    }
    public static var xbuttonDown : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_XButtonDown
    }
    public static var xbuttonUp : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_XButtonUp
    }
    public static var nonClientRightButtonDown : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_NonClientRightButtonDown
    }
    public static var nonClientRightButtonUp : WebView2Core.CoreWebView2MouseEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventKind_NonClientRightButtonUp
    }
}
extension WebView2Core.CoreWebView2MouseEventKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2MouseEventVirtualKeys {
    public static var none : WebView2Core.CoreWebView2MouseEventVirtualKeys {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventVirtualKeys_None
    }
    public static var leftButton : WebView2Core.CoreWebView2MouseEventVirtualKeys {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventVirtualKeys_LeftButton
    }
    public static var rightButton : WebView2Core.CoreWebView2MouseEventVirtualKeys {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventVirtualKeys_RightButton
    }
    public static var shift : WebView2Core.CoreWebView2MouseEventVirtualKeys {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventVirtualKeys_Shift
    }
    public static var control : WebView2Core.CoreWebView2MouseEventVirtualKeys {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventVirtualKeys_Control
    }
    public static var middleButton : WebView2Core.CoreWebView2MouseEventVirtualKeys {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventVirtualKeys_MiddleButton
    }
    public static var xbutton1 : WebView2Core.CoreWebView2MouseEventVirtualKeys {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventVirtualKeys_XButton1
    }
    public static var xbutton2 : WebView2Core.CoreWebView2MouseEventVirtualKeys {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MouseEventVirtualKeys_XButton2
    }
}
extension WebView2Core.CoreWebView2MouseEventVirtualKeys: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2MoveFocusReason {
    public static var programmatic : WebView2Core.CoreWebView2MoveFocusReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MoveFocusReason_Programmatic
    }
    public static var next : WebView2Core.CoreWebView2MoveFocusReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MoveFocusReason_Next
    }
    public static var previous : WebView2Core.CoreWebView2MoveFocusReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MoveFocusReason_Previous
    }
}
extension WebView2Core.CoreWebView2MoveFocusReason: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2NavigationKind {
    public static var reload : WebView2Core.CoreWebView2NavigationKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2NavigationKind_Reload
    }
    public static var backOrForward : WebView2Core.CoreWebView2NavigationKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2NavigationKind_BackOrForward
    }
    public static var newDocument : WebView2Core.CoreWebView2NavigationKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2NavigationKind_NewDocument
    }
}
extension WebView2Core.CoreWebView2NavigationKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PdfToolbarItems {
    public static var none : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_None
    }
    public static var save : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_Save
    }
    public static var print : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_Print
    }
    public static var saveAs : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_SaveAs
    }
    public static var zoomIn : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_ZoomIn
    }
    public static var zoomOut : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_ZoomOut
    }
    public static var rotate : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_Rotate
    }
    public static var fitPage : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_FitPage
    }
    public static var pageLayout : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_PageLayout
    }
    public static var bookmarks : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_Bookmarks
    }
    public static var pageSelector : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_PageSelector
    }
    public static var search : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_Search
    }
    public static var fullScreen : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_FullScreen
    }
    public static var moreSettings : WebView2Core.CoreWebView2PdfToolbarItems {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems_MoreSettings
    }
}
extension WebView2Core.CoreWebView2PdfToolbarItems: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PermissionKind {
    public static var unknownPermission : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_UnknownPermission
    }
    public static var microphone : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_Microphone
    }
    public static var camera : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_Camera
    }
    public static var geolocation : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_Geolocation
    }
    public static var notifications : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_Notifications
    }
    public static var otherSensors : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_OtherSensors
    }
    public static var clipboardRead : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_ClipboardRead
    }
    public static var multipleAutomaticDownloads : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_MultipleAutomaticDownloads
    }
    public static var fileReadWrite : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_FileReadWrite
    }
    public static var autoplay : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_Autoplay
    }
    public static var localFonts : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_LocalFonts
    }
    public static var midiSystemExclusiveMessages : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_MidiSystemExclusiveMessages
    }
    public static var windowManagement : WebView2Core.CoreWebView2PermissionKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind_WindowManagement
    }
}
extension WebView2Core.CoreWebView2PermissionKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PermissionState {
    public static var `default` : WebView2Core.CoreWebView2PermissionState {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionState_Default
    }
    public static var allow : WebView2Core.CoreWebView2PermissionState {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionState_Allow
    }
    public static var deny : WebView2Core.CoreWebView2PermissionState {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionState_Deny
    }
}
extension WebView2Core.CoreWebView2PermissionState: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PointerEventKind {
    public static var activate : WebView2Core.CoreWebView2PointerEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PointerEventKind_Activate
    }
    public static var down : WebView2Core.CoreWebView2PointerEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PointerEventKind_Down
    }
    public static var enter : WebView2Core.CoreWebView2PointerEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PointerEventKind_Enter
    }
    public static var leave : WebView2Core.CoreWebView2PointerEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PointerEventKind_Leave
    }
    public static var up : WebView2Core.CoreWebView2PointerEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PointerEventKind_Up
    }
    public static var update : WebView2Core.CoreWebView2PointerEventKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PointerEventKind_Update
    }
}
extension WebView2Core.CoreWebView2PointerEventKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PreferredColorScheme {
    public static var auto : WebView2Core.CoreWebView2PreferredColorScheme {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PreferredColorScheme_Auto
    }
    public static var light : WebView2Core.CoreWebView2PreferredColorScheme {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PreferredColorScheme_Light
    }
    public static var dark : WebView2Core.CoreWebView2PreferredColorScheme {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PreferredColorScheme_Dark
    }
}
extension WebView2Core.CoreWebView2PreferredColorScheme: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PrintCollation {
    public static var `default` : WebView2Core.CoreWebView2PrintCollation {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintCollation_Default
    }
    public static var collated : WebView2Core.CoreWebView2PrintCollation {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintCollation_Collated
    }
    public static var uncollated : WebView2Core.CoreWebView2PrintCollation {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintCollation_Uncollated
    }
}
extension WebView2Core.CoreWebView2PrintCollation: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PrintColorMode {
    public static var `default` : WebView2Core.CoreWebView2PrintColorMode {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintColorMode_Default
    }
    public static var color : WebView2Core.CoreWebView2PrintColorMode {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintColorMode_Color
    }
    public static var grayscale : WebView2Core.CoreWebView2PrintColorMode {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintColorMode_Grayscale
    }
}
extension WebView2Core.CoreWebView2PrintColorMode: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PrintDialogKind {
    public static var browser : WebView2Core.CoreWebView2PrintDialogKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintDialogKind_Browser
    }
    public static var system : WebView2Core.CoreWebView2PrintDialogKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintDialogKind_System
    }
}
extension WebView2Core.CoreWebView2PrintDialogKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PrintDuplex {
    public static var `default` : WebView2Core.CoreWebView2PrintDuplex {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintDuplex_Default
    }
    public static var oneSided : WebView2Core.CoreWebView2PrintDuplex {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintDuplex_OneSided
    }
    public static var twoSidedLongEdge : WebView2Core.CoreWebView2PrintDuplex {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintDuplex_TwoSidedLongEdge
    }
    public static var twoSidedShortEdge : WebView2Core.CoreWebView2PrintDuplex {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintDuplex_TwoSidedShortEdge
    }
}
extension WebView2Core.CoreWebView2PrintDuplex: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PrintMediaSize {
    public static var `default` : WebView2Core.CoreWebView2PrintMediaSize {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintMediaSize_Default
    }
    public static var custom : WebView2Core.CoreWebView2PrintMediaSize {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintMediaSize_Custom
    }
}
extension WebView2Core.CoreWebView2PrintMediaSize: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PrintOrientation {
    public static var portrait : WebView2Core.CoreWebView2PrintOrientation {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintOrientation_Portrait
    }
    public static var landscape : WebView2Core.CoreWebView2PrintOrientation {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintOrientation_Landscape
    }
}
extension WebView2Core.CoreWebView2PrintOrientation: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2PrintStatus {
    public static var succeeded : WebView2Core.CoreWebView2PrintStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintStatus_Succeeded
    }
    public static var printerUnavailable : WebView2Core.CoreWebView2PrintStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintStatus_PrinterUnavailable
    }
    public static var otherError : WebView2Core.CoreWebView2PrintStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintStatus_OtherError
    }
}
extension WebView2Core.CoreWebView2PrintStatus: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2ProcessFailedKind {
    public static var browserProcessExited : WebView2Core.CoreWebView2ProcessFailedKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind_BrowserProcessExited
    }
    public static var renderProcessExited : WebView2Core.CoreWebView2ProcessFailedKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind_RenderProcessExited
    }
    public static var renderProcessUnresponsive : WebView2Core.CoreWebView2ProcessFailedKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind_RenderProcessUnresponsive
    }
    public static var frameRenderProcessExited : WebView2Core.CoreWebView2ProcessFailedKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind_FrameRenderProcessExited
    }
    public static var utilityProcessExited : WebView2Core.CoreWebView2ProcessFailedKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind_UtilityProcessExited
    }
    public static var sandboxHelperProcessExited : WebView2Core.CoreWebView2ProcessFailedKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind_SandboxHelperProcessExited
    }
    public static var gpuProcessExited : WebView2Core.CoreWebView2ProcessFailedKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind_GpuProcessExited
    }
    public static var ppapiPluginProcessExited : WebView2Core.CoreWebView2ProcessFailedKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind_PpapiPluginProcessExited
    }
    public static var ppapiBrokerProcessExited : WebView2Core.CoreWebView2ProcessFailedKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind_PpapiBrokerProcessExited
    }
    public static var unknownProcessExited : WebView2Core.CoreWebView2ProcessFailedKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind_UnknownProcessExited
    }
}
extension WebView2Core.CoreWebView2ProcessFailedKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2ProcessFailedReason {
    public static var unexpected : WebView2Core.CoreWebView2ProcessFailedReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedReason_Unexpected
    }
    public static var unresponsive : WebView2Core.CoreWebView2ProcessFailedReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedReason_Unresponsive
    }
    public static var terminated : WebView2Core.CoreWebView2ProcessFailedReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedReason_Terminated
    }
    public static var crashed : WebView2Core.CoreWebView2ProcessFailedReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedReason_Crashed
    }
    public static var launchFailed : WebView2Core.CoreWebView2ProcessFailedReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedReason_LaunchFailed
    }
    public static var outOfMemory : WebView2Core.CoreWebView2ProcessFailedReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedReason_OutOfMemory
    }
    public static var profileDeleted : WebView2Core.CoreWebView2ProcessFailedReason {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedReason_ProfileDeleted
    }
}
extension WebView2Core.CoreWebView2ProcessFailedReason: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2ProcessKind {
    public static var browser : WebView2Core.CoreWebView2ProcessKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessKind_Browser
    }
    public static var renderer : WebView2Core.CoreWebView2ProcessKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessKind_Renderer
    }
    public static var utility : WebView2Core.CoreWebView2ProcessKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessKind_Utility
    }
    public static var sandboxHelper : WebView2Core.CoreWebView2ProcessKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessKind_SandboxHelper
    }
    public static var gpu : WebView2Core.CoreWebView2ProcessKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessKind_Gpu
    }
    public static var ppapiPlugin : WebView2Core.CoreWebView2ProcessKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessKind_PpapiPlugin
    }
    public static var ppapiBroker : WebView2Core.CoreWebView2ProcessKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessKind_PpapiBroker
    }
}
extension WebView2Core.CoreWebView2ProcessKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2ScriptDialogKind {
    public static var alert : WebView2Core.CoreWebView2ScriptDialogKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ScriptDialogKind_Alert
    }
    public static var confirm : WebView2Core.CoreWebView2ScriptDialogKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ScriptDialogKind_Confirm
    }
    public static var prompt : WebView2Core.CoreWebView2ScriptDialogKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ScriptDialogKind_Prompt
    }
    public static var beforeunload : WebView2Core.CoreWebView2ScriptDialogKind {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ScriptDialogKind_Beforeunload
    }
}
extension WebView2Core.CoreWebView2ScriptDialogKind: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2ServerCertificateErrorAction {
    public static var alwaysAllow : WebView2Core.CoreWebView2ServerCertificateErrorAction {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ServerCertificateErrorAction_AlwaysAllow
    }
    public static var cancel : WebView2Core.CoreWebView2ServerCertificateErrorAction {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ServerCertificateErrorAction_Cancel
    }
    public static var `default` : WebView2Core.CoreWebView2ServerCertificateErrorAction {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ServerCertificateErrorAction_Default
    }
}
extension WebView2Core.CoreWebView2ServerCertificateErrorAction: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2SharedBufferAccess {
    public static var readOnly : WebView2Core.CoreWebView2SharedBufferAccess {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2SharedBufferAccess_ReadOnly
    }
    public static var readWrite : WebView2Core.CoreWebView2SharedBufferAccess {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2SharedBufferAccess_ReadWrite
    }
}
extension WebView2Core.CoreWebView2SharedBufferAccess: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2TrackingPreventionLevel {
    public static var none : WebView2Core.CoreWebView2TrackingPreventionLevel {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2TrackingPreventionLevel_None
    }
    public static var basic : WebView2Core.CoreWebView2TrackingPreventionLevel {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2TrackingPreventionLevel_Basic
    }
    public static var balanced : WebView2Core.CoreWebView2TrackingPreventionLevel {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2TrackingPreventionLevel_Balanced
    }
    public static var strict : WebView2Core.CoreWebView2TrackingPreventionLevel {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2TrackingPreventionLevel_Strict
    }
}
extension WebView2Core.CoreWebView2TrackingPreventionLevel: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2WebErrorStatus {
    public static var unknown : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_Unknown
    }
    public static var certificateCommonNameIsIncorrect : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_CertificateCommonNameIsIncorrect
    }
    public static var certificateExpired : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_CertificateExpired
    }
    public static var clientCertificateContainsErrors : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_ClientCertificateContainsErrors
    }
    public static var certificateRevoked : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_CertificateRevoked
    }
    public static var certificateIsInvalid : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_CertificateIsInvalid
    }
    public static var serverUnreachable : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_ServerUnreachable
    }
    public static var timeout : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_Timeout
    }
    public static var errorHttpInvalidServerResponse : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_ErrorHttpInvalidServerResponse
    }
    public static var connectionAborted : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_ConnectionAborted
    }
    public static var connectionReset : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_ConnectionReset
    }
    public static var disconnected : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_Disconnected
    }
    public static var cannotConnect : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_CannotConnect
    }
    public static var hostNameNotResolved : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_HostNameNotResolved
    }
    public static var operationCanceled : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_OperationCanceled
    }
    public static var redirectFailed : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_RedirectFailed
    }
    public static var unexpectedError : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_UnexpectedError
    }
    public static var validAuthenticationCredentialsRequired : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_ValidAuthenticationCredentialsRequired
    }
    public static var validProxyAuthenticationRequired : WebView2Core.CoreWebView2WebErrorStatus {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus_ValidProxyAuthenticationRequired
    }
}
extension WebView2Core.CoreWebView2WebErrorStatus: @retroactive Hashable, @retroactive Codable {}

extension WebView2Core.CoreWebView2WebResourceContext {
    public static var all : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_All
    }
    public static var document : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Document
    }
    public static var stylesheet : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Stylesheet
    }
    public static var image : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Image
    }
    public static var media : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Media
    }
    public static var font : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Font
    }
    public static var script : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Script
    }
    public static var xmlHttpRequest : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_XmlHttpRequest
    }
    public static var fetch : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Fetch
    }
    public static var textTrack : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_TextTrack
    }
    public static var eventSource : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_EventSource
    }
    public static var websocket : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Websocket
    }
    public static var manifest : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Manifest
    }
    public static var signedExchange : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_SignedExchange
    }
    public static var ping : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Ping
    }
    public static var cspViolationReport : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_CspViolationReport
    }
    public static var other : WebView2Core.CoreWebView2WebResourceContext {
        __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext_Other
    }
}
extension WebView2Core.CoreWebView2WebResourceContext: @retroactive Hashable, @retroactive Codable {}


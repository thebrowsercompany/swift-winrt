// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2Certificate__Manual: WindowsFoundation.IID {
    .init(Data1: 0x4B9B0FE5, Data2: 0x0AD9, Data3: 0x5594, Data4: ( 0x81,0xE7,0xB1,0x8E,0xCC,0x06,0x36,0xDE ))// 4B9B0FE5-0AD9-5594-81E7-B18ECC0636DE
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ClientCertificate__Manual: WindowsFoundation.IID {
    .init(Data1: 0xFAEFEFC2, Data2: 0x20C3, Data3: 0x5D86, Data4: ( 0x8A,0x74,0xF6,0xD8,0x7D,0x6F,0xF8,0xFA ))// FAEFEFC2-20C3-5D86-8A74-F6D87D6FF8FA
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2Profile__Manual: WindowsFoundation.IID {
    .init(Data1: 0xB42BFAB4, Data2: 0xC4BF, Data3: 0x5469, Data4: ( 0x89,0xAC,0xCA,0xDC,0x69,0xE3,0xB0,0xF5 ))// B42BFAB4-C4BF-5469-89AC-CADC69E3B0F5
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2Profile__Manual2: WindowsFoundation.IID {
    .init(Data1: 0x6E62815A, Data2: 0x6269, Data3: 0x5756, Data4: ( 0x92,0xC3,0xF0,0x8A,0xFE,0x17,0x64,0x9C ))// 6E62815A-6269-5756-92C3-F08AFE17649C
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2: WindowsFoundation.IID {
    .init(Data1: 0x3A3F559A, Data2: 0xE5E9, Data3: 0x5338, Data4: ( 0xBB,0x67,0x4E,0xB0,0x50,0x4A,0x4F,0x14 ))// 3A3F559A-E5E9-5338-BB67-4EB0504A4F14
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x41A56100, Data2: 0x92A5, Data3: 0x59D1, Data4: ( 0x9E,0x71,0x92,0x22,0xE3,0x3A,0xE3,0x8B ))// 41A56100-92A5-59D1-9E71-9222E33AE38B
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0x4D03AA18, Data2: 0x806D, Data3: 0x5F10, Data4: ( 0x9A,0xD8,0xCF,0x5D,0x32,0x7A,0x58,0xFB ))// 4D03AA18-806D-5F10-9AD8-CF5D327A58FB
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x4B16330C, Data2: 0x4CA5, Data3: 0x555E, Data4: ( 0xAF,0x21,0x16,0x43,0x34,0x40,0x5F,0x63 ))// 4B16330C-4CA5-555E-AF21-164334405F63
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationResponse: WindowsFoundation.IID {
    .init(Data1: 0x08DF33B9, Data2: 0x6E38, Data3: 0x5962, Data4: ( 0x9F,0xFD,0xCA,0xAB,0x3C,0x30,0xFB,0xC1 ))// 08DF33B9-6E38-5962-9FFD-CAAB3C30FBC1
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserExtension: WindowsFoundation.IID {
    .init(Data1: 0xBF991443, Data2: 0xEE4F, Data3: 0x57B8, Data4: ( 0xBF,0x2C,0x81,0xCD,0x6D,0xBE,0x11,0x53 ))// BF991443-EE4F-57B8-BF2C-81CD6DBE1153
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserProcessExitedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x79963F77, Data2: 0x1484, Data3: 0x5A46, Data4: ( 0xB9,0x1F,0xDF,0xC5,0xC1,0xA0,0xCE,0x14 ))// 79963F77-1484-5A46-B91F-DFC5C1A0CE14
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate: WindowsFoundation.IID {
    .init(Data1: 0x414A3B75, Data2: 0x1BC1, Data3: 0x55E1, Data4: ( 0x99,0x26,0x26,0x8C,0x0A,0x34,0x62,0xC7 ))// 414A3B75-1BC1-55E1-9926-268C0A3462C7
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate: WindowsFoundation.IID {
    .init(Data1: 0x091B39F2, Data2: 0x68DF, Data3: 0x52B4, Data4: ( 0x8F,0xB0,0xFD,0x35,0x61,0xAF,0x41,0xF2 ))// 091B39F2-68DF-52B4-8FB0-FD3561AF41F2
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x93287B55, Data2: 0x31F9, Data3: 0x55A0, Data4: ( 0xB6,0x8B,0xD9,0x84,0x1D,0x7E,0x1B,0xF4 ))// 93287B55-31F9-55A0-B68B-D9841D7E1BF4
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController: WindowsFoundation.IID {
    .init(Data1: 0x31BBB153, Data2: 0x11B2, Data3: 0x58E8, Data4: ( 0x9B,0xEB,0x69,0xF5,0xC8,0xE1,0x44,0x20 ))// 31BBB153-11B2-58E8-9BEB-69F5C8E14420
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController2: WindowsFoundation.IID {
    .init(Data1: 0x8CEF61B9, Data2: 0xFA55, Data3: 0x547D, Data4: ( 0xAA,0xE6,0x7B,0xCA,0xED,0x42,0x49,0xA2 ))// 8CEF61B9-FA55-547D-AAE6-7BCAED4249A2
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController3: WindowsFoundation.IID {
    .init(Data1: 0xBBBECDCF, Data2: 0x0F03, Data3: 0x50F0, Data4: ( 0x8F,0x85,0x9C,0xBF,0x6C,0x9B,0xBE,0x10 ))// BBBECDCF-0F03-50F0-8F85-9CBF6C9BBE10
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionControllerStatics: WindowsFoundation.IID {
    .init(Data1: 0x4DF0AB1F, Data2: 0x7F2A, Data3: 0x573B, Data4: ( 0xB8,0x1A,0xB9,0xB5,0x31,0x22,0x47,0x36 ))// 4DF0AB1F-7F2A-573B-B81A-B9B531224736
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionControllerStatics2__Manual: WindowsFoundation.IID {
    .init(Data1: 0x48A321E7, Data2: 0x4F40, Data3: 0x526E, Data4: ( 0x83,0x7E,0x1E,0xB0,0xC4,0x77,0xB6,0x9D ))// 48A321E7-4F40-526E-837E-1EB0C477B69D
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContentLoadingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6CF95373, Data2: 0x946C, Data3: 0x5DAE, Data4: ( 0x9B,0x3E,0x0F,0xE2,0x3D,0x5A,0xA2,0x9F ))// 6CF95373-946C-5DAE-9B3E-0FE23D5AA29F
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem: WindowsFoundation.IID {
    .init(Data1: 0x2A65706F, Data2: 0x941A, Data3: 0x52CD, Data4: ( 0x86,0x51,0xA1,0x65,0x58,0x6B,0x0A,0xBF ))// 2A65706F-941A-52CD-8651-A165586B0ABF
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xD77BDD8C, Data2: 0x9B3E, Data3: 0x596E, Data4: ( 0xAE,0x80,0x32,0x0C,0x0D,0xF4,0xEC,0xBC ))// D77BDD8C-9B3E-596E-AE80-320C0DF4ECBC
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget: WindowsFoundation.IID {
    .init(Data1: 0x41E24E6A, Data2: 0x4612, Data3: 0x5BD9, Data4: ( 0x8E,0x61,0xE9,0x28,0x06,0x15,0x20,0x5E ))// 41E24E6A-4612-5BD9-8E61-E9280615205E
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller: WindowsFoundation.IID {
    .init(Data1: 0xA588121C, Data2: 0x53BF, Data3: 0x590E, Data4: ( 0x80,0xE5,0x29,0xD7,0x29,0xCB,0xD7,0x43 ))// A588121C-53BF-590E-80E5-29D729CBD743
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller2: WindowsFoundation.IID {
    .init(Data1: 0x0069C40B, Data2: 0x2E8A, Data3: 0x513F, Data4: ( 0x9D,0x9D,0xE0,0xC2,0xB6,0x4F,0x72,0x00 ))// 0069C40B-2E8A-513F-9D9D-E0C2B64F7200
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller3: WindowsFoundation.IID {
    .init(Data1: 0xE5BAE214, Data2: 0x791A, Data3: 0x5D13, Data4: ( 0x9B,0x76,0xA2,0x57,0xD9,0xFD,0xA2,0xAC ))// E5BAE214-791A-5D13-9B76-A257D9FDA2AC
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller4: WindowsFoundation.IID {
    .init(Data1: 0x94E2862D, Data2: 0x4638, Data3: 0x54BA, Data4: ( 0x92,0xCF,0xE3,0x1A,0x31,0x49,0x9B,0x78 ))// 94E2862D-4638-54BA-92CF-E31A31499B78
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerFactory: WindowsFoundation.IID {
    .init(Data1: 0x270B2C5B, Data2: 0xC3A9, Data3: 0x53D8, Data4: ( 0xA5,0xCA,0x26,0x2E,0xA9,0xEA,0x62,0xE8 ))// 270B2C5B-C3A9-53D8-A5CA-262EA9EA62E8
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions: WindowsFoundation.IID {
    .init(Data1: 0x3337E821, Data2: 0x3606, Data3: 0x5A0E, Data4: ( 0x8E,0x2F,0x0C,0x1E,0x57,0xD7,0x43,0xF7 ))// 3337E821-3606-5A0E-8E2F-0C1E57D743F7
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions2: WindowsFoundation.IID {
    .init(Data1: 0x41B69E93, Data2: 0xCC17, Data3: 0x5C7D, Data4: ( 0xA0,0xC8,0xFA,0x21,0xC2,0x7A,0xAD,0xB6 ))// 41B69E93-CC17-5C7D-A0C8-FA21C27AADB6
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerWindowReference: WindowsFoundation.IID {
    .init(Data1: 0x0FEDDAD4, Data2: 0x48A3, Data3: 0x5CC4, Data4: ( 0x9F,0x61,0xE7,0xAD,0xFD,0x1E,0x9C,0x76 ))// 0FEDDAD4-48A3-5CC4-9F61-E7ADFD1E9C76
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerWindowReferenceStatics: WindowsFoundation.IID {
    .init(Data1: 0xDDF6EBF1, Data2: 0xEBC6, Data3: 0x5A34, Data4: ( 0x90,0x08,0x66,0x1C,0x3A,0x2E,0xB7,0x67 ))// DDF6EBF1-EBC6-5A34-9008-661C3A2EB767
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie: WindowsFoundation.IID {
    .init(Data1: 0x52F670FE, Data2: 0x8CA2, Data3: 0x5AAD, Data4: ( 0xAE,0xDB,0x25,0xF7,0x90,0x3B,0x70,0x38 ))// 52F670FE-8CA2-5AAD-AEDB-25F7903B7038
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager: WindowsFoundation.IID {
    .init(Data1: 0x4098F516, Data2: 0xADCA, Data3: 0x5563, Data4: ( 0xAA,0xA5,0xD7,0xAF,0xFD,0x84,0x7A,0xA3 ))// 4098F516-ADCA-5563-AAA5-D7AFFD847AA3
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager__Manual: WindowsFoundation.IID {
    .init(Data1: 0x9BCCA0EA, Data2: 0x7225, Data3: 0x577A, Data4: ( 0xBB,0x23,0xC7,0xC9,0x80,0x23,0x15,0x4E ))// 9BCCA0EA-7225-577A-BB23-C7C98023154E
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration: WindowsFoundation.IID {
    .init(Data1: 0x16DC60D9, Data2: 0xDDEC, Data3: 0x5C3D, Data4: ( 0xBC,0x1F,0x44,0x08,0xD1,0x87,0x5A,0xF1 ))// 16DC60D9-DDEC-5C3D-BC1F-4408D1875AF1
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistrationFactory: WindowsFoundation.IID {
    .init(Data1: 0x309DDDFA, Data2: 0xFF3E, Data3: 0x5D8D, Data4: ( 0xA1,0x8A,0xC1,0x34,0x1F,0x32,0x5E,0xA7 ))// 309DDDFA-FF3E-5D8D-A18A-C1341F325EA7
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration__Manual: WindowsFoundation.IID {
    .init(Data1: 0x074FF15C, Data2: 0x7D7F, Data3: 0x5101, Data4: ( 0xA0,0x2E,0xC0,0x77,0xC5,0xE2,0x1C,0x41 ))// 074FF15C-7D7F-5101-A02E-C077C5E21C41
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DOMContentLoadedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC474D0A3, Data2: 0x24AC, Data3: 0x59FC, Data4: ( 0xB7,0x8B,0xDA,0x75,0x62,0xA6,0xA0,0x52 ))// C474D0A3-24AC-59FC-B78B-DA7562A6A052
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB6A4B41D, Data2: 0xFD18, Data3: 0x59FA, Data4: ( 0x92,0x3A,0xC5,0x75,0x55,0xD9,0x60,0xCE ))// B6A4B41D-FD18-59FA-923A-C57555D960CE
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceivedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0x221728BA, Data2: 0x635E, Data3: 0x50D2, Data4: ( 0xBD,0x3C,0xFD,0x22,0xF4,0x11,0x39,0x78 ))// 221728BA-635E-50D2-BD3C-FD22F4113978
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceiver: WindowsFoundation.IID {
    .init(Data1: 0xB2A2BE79, Data2: 0x65FC, Data3: 0x5537, Data4: ( 0x87,0x15,0x3D,0x92,0xBF,0x31,0x09,0x0B ))// B2A2BE79-65FC-5537-8715-3D92BF31090B
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DispatchAdapter: WindowsFoundation.IID {
    .init(Data1: 0x7888A42D, Data2: 0x18F3, Data3: 0x5966, Data4: ( 0x80,0xCB,0x8C,0xC2,0x53,0x51,0xBD,0x0A ))// 7888A42D-18F3-5966-80CB-8CC25351BD0A
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation: WindowsFoundation.IID {
    .init(Data1: 0xAFE73E6B, Data2: 0xE760, Data3: 0x5A06, Data4: ( 0x9B,0xF6,0x1E,0x74,0x3C,0x13,0xCD,0x2D ))// AFE73E6B-E760-5A06-9BF6-1E743C13CD2D
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x45D982BA, Data2: 0x9256, Data3: 0x5B35, Data4: ( 0xB0,0x23,0x26,0xA4,0x38,0x59,0x91,0x10 ))// 45D982BA-9256-5B35-B023-26A438599110
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment: WindowsFoundation.IID {
    .init(Data1: 0xD8CC7831, Data2: 0xB783, Data3: 0x556B, Data4: ( 0xB9,0xCE,0x89,0x9C,0x1E,0x95,0xD5,0x85 ))// D8CC7831-B783-556B-B9CE-899C1E95D585
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment10: WindowsFoundation.IID {
    .init(Data1: 0xC224E69C, Data2: 0x1EFD, Data3: 0x5ECC, Data4: ( 0xAD,0xC8,0x2B,0x52,0xE7,0xB9,0x7C,0xE5 ))// C224E69C-1EFD-5ECC-ADC8-2B52E7B97CE5
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment11: WindowsFoundation.IID {
    .init(Data1: 0xDA23D64C, Data2: 0x8B61, Data3: 0x5B6C, Data4: ( 0x85,0x81,0xF6,0xA6,0x88,0xAB,0xD7,0xCD ))// DA23D64C-8B61-5B6C-8581-F6A688ABD7CD
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment12: WindowsFoundation.IID {
    .init(Data1: 0x82531DDB, Data2: 0xBE63, Data3: 0x5254, Data4: ( 0x81,0x2F,0x88,0x0D,0x9F,0x0E,0xC5,0x4E ))// 82531DDB-BE63-5254-812F-880D9F0EC54E
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment13: WindowsFoundation.IID {
    .init(Data1: 0x22C97F2F, Data2: 0x8A28, Data3: 0x5794, Data4: ( 0x94,0x1C,0xA2,0x5B,0xCC,0x3C,0xF4,0x7E ))// 22C97F2F-8A28-5794-941C-A25BCC3CF47E
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment2: WindowsFoundation.IID {
    .init(Data1: 0x0B634668, Data2: 0x1017, Data3: 0x5FC7, Data4: ( 0x99,0x21,0xF1,0xF5,0x18,0x66,0xA8,0xC0 ))// 0B634668-1017-5FC7-9921-F1F51866A8C0
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment3: WindowsFoundation.IID {
    .init(Data1: 0x5E33F46C, Data2: 0xC0B9, Data3: 0x5126, Data4: ( 0x88,0x40,0x17,0xF9,0xC1,0x1B,0x3A,0x8A ))// 5E33F46C-C0B9-5126-8840-17F9C11B3A8A
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment4: WindowsFoundation.IID {
    .init(Data1: 0x6DB697DA, Data2: 0xEEBD, Data3: 0x5818, Data4: ( 0x87,0x90,0x1F,0xE5,0x7E,0xF3,0x19,0xE2 ))// 6DB697DA-EEBD-5818-8790-1FE57EF319E2
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment5: WindowsFoundation.IID {
    .init(Data1: 0xF33399AF, Data2: 0xE4D3, Data3: 0x59DC, Data4: ( 0xAC,0x38,0x83,0x97,0xAA,0xDC,0xED,0xB1 ))// F33399AF-E4D3-59DC-AC38-8397AADCEDB1
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment6: WindowsFoundation.IID {
    .init(Data1: 0x965D538F, Data2: 0x5958, Data3: 0x5D98, Data4: ( 0x89,0x72,0xF6,0x22,0x02,0x1D,0xF4,0x02 ))// 965D538F-5958-5D98-8972-F622021DF402
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment7: WindowsFoundation.IID {
    .init(Data1: 0xE1F44FE2, Data2: 0xFC54, Data3: 0x5383, Data4: ( 0xA3,0x83,0xC8,0x7E,0x1D,0xA9,0x6B,0x83 ))// E1F44FE2-FC54-5383-A383-C87E1DA96B83
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment8: WindowsFoundation.IID {
    .init(Data1: 0xDB67C807, Data2: 0xD0DB, Data3: 0x5980, Data4: ( 0xA3,0xA9,0x75,0xEF,0x8F,0x63,0xD6,0xF6 ))// DB67C807-D0DB-5980-A3A9-75EF8F63D6F6
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment9: WindowsFoundation.IID {
    .init(Data1: 0xC8213EC7, Data2: 0x7DC9, Data3: 0x5468, Data4: ( 0xA8,0x8B,0x15,0xC6,0xB7,0x14,0x44,0x78 ))// C8213EC7-7DC9-5468-A88B-15C6B7144478
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions: WindowsFoundation.IID {
    .init(Data1: 0x25D6DC39, Data2: 0x0062, Data3: 0x5735, Data4: ( 0x8B,0x09,0xA6,0xF5,0x35,0xF1,0x9E,0x97 ))// 25D6DC39-0062-5735-8B09-A6F535F19E97
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions2: WindowsFoundation.IID {
    .init(Data1: 0xE77350FB, Data2: 0x77A1, Data3: 0x56F7, Data4: ( 0xBE,0x95,0xEB,0x7F,0x8A,0x7A,0x30,0x72 ))// E77350FB-77A1-56F7-BE95-EB7F8A7A3072
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions3: WindowsFoundation.IID {
    .init(Data1: 0x48AB919D, Data2: 0x2444, Data3: 0x5E8C, Data4: ( 0xA6,0xF6,0xAB,0xA8,0x40,0xD6,0xC5,0xFF ))// 48AB919D-2444-5E8C-A6F6-ABA840D6C5FF
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions4: WindowsFoundation.IID {
    .init(Data1: 0xA2CB850F, Data2: 0xCD14, Data3: 0x5A7D, Data4: ( 0x9C,0x98,0x53,0xFD,0x51,0xEC,0x98,0x58 ))// A2CB850F-CD14-5A7D-9C98-53FD51EC9858
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions5: WindowsFoundation.IID {
    .init(Data1: 0x36B1CA6C, Data2: 0xE06C, Data3: 0x5050, Data4: ( 0x8E,0xF9,0x24,0x7C,0x5A,0x7A,0xA9,0xC9 ))// 36B1CA6C-E06C-5050-8EF9-247C5A7AA9C9
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions6: WindowsFoundation.IID {
    .init(Data1: 0xEB5B14C2, Data2: 0x6F05, Data3: 0x514E, Data4: ( 0xB1,0x9A,0x76,0x74,0x4D,0x1C,0xE6,0x84 ))// EB5B14C2-6F05-514E-B19A-76744D1CE684
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions__Manual: WindowsFoundation.IID {
    .init(Data1: 0x1F104443, Data2: 0xEA93, Data3: 0x5A37, Data4: ( 0xB7,0x91,0x34,0xE6,0xA3,0x11,0x72,0xED ))// 1F104443-EA93-5A37-B791-34E6A31172ED
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions__Manual3: WindowsFoundation.IID {
    .init(Data1: 0x665E9C11, Data2: 0xCA1B, Data3: 0x5255, Data4: ( 0xA6,0xF5,0xD7,0x41,0xAC,0x39,0xE1,0x8F ))// 665E9C11-CA1B-5255-A6F5-D741AC39E18F
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentStatics: WindowsFoundation.IID {
    .init(Data1: 0x0E33F804, Data2: 0xF20B, Data3: 0x5635, Data4: ( 0x84,0x91,0x16,0x2A,0xAA,0x27,0x51,0x7B ))// 0E33F804-F20B-5635-8491-162AAA27517B
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment__Manual: WindowsFoundation.IID {
    .init(Data1: 0xF51CFABE, Data2: 0x73AD, Data3: 0x5635, Data4: ( 0xA9,0x35,0x63,0x86,0xAE,0xF9,0x23,0x8E ))// F51CFABE-73AD-5635-A935-6386AEF9238E
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2File: WindowsFoundation.IID {
    .init(Data1: 0xCAB45512, Data2: 0x9594, Data3: 0x50F1, Data4: ( 0xAC,0x3C,0x9C,0xC1,0x03,0xB5,0x74,0xA3 ))// CAB45512-9594-50F1-AC3C-9CC103B574A3
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame: WindowsFoundation.IID {
    .init(Data1: 0x02FFCBF9, Data2: 0x19E7, Data3: 0x5BB8, Data4: ( 0x82,0x73,0x34,0x64,0x20,0xFB,0x15,0x03 ))// 02FFCBF9-19E7-5BB8-8273-346420FB1503
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2: WindowsFoundation.IID {
    .init(Data1: 0x33DBC9C9, Data2: 0xA103, Data3: 0x56E3, Data4: ( 0xB7,0x22,0x36,0x38,0x14,0x20,0x03,0x20 ))// 33DBC9C9-A103-56E3-B722-363814200320
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame3: WindowsFoundation.IID {
    .init(Data1: 0x6545DAC4, Data2: 0x1666, Data3: 0x50A5, Data4: ( 0xBB,0xE8,0xEC,0x04,0x84,0x2A,0x46,0x6F ))// 6545DAC4-1666-50A5-BBE8-EC04842A466F
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame4: WindowsFoundation.IID {
    .init(Data1: 0xD46CD758, Data2: 0x64B9, Data3: 0x543E, Data4: ( 0xA7,0xB8,0xCA,0xC9,0xB4,0xC0,0x59,0xA7 ))// D46CD758-64B9-543E-A7B8-CAC9B4C059A7
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame5: WindowsFoundation.IID {
    .init(Data1: 0x27C4803D, Data2: 0x9A7F, Data3: 0x599A, Data4: ( 0xBF,0x72,0x07,0xE8,0xDC,0x96,0x4A,0x5B ))// 27C4803D-9A7F-599A-BF72-07E8DC964A5B
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameCreatedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x527B01B8, Data2: 0xFC6D, Data3: 0x5543, Data4: ( 0x8D,0xCE,0x96,0xCD,0xFD,0xB3,0x2C,0x81 ))// 527B01B8-FC6D-5543-8DCE-96CDFDB32C81
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo: WindowsFoundation.IID {
    .init(Data1: 0xF9B82E06, Data2: 0x73F3, Data3: 0x513B, Data4: ( 0xBC,0x2C,0x44,0x5D,0xDE,0xDB,0xA9,0x76 ))// F9B82E06-73F3-513B-BC2C-445DDEDBA976
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo2: WindowsFoundation.IID {
    .init(Data1: 0x7F0770C6, Data2: 0x0D5E, Data3: 0x529B, Data4: ( 0xB0,0x0C,0xF1,0x56,0x56,0xF6,0x05,0xC4 ))// 7F0770C6-0D5E-529B-B00C-F15656F605C4
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpHeadersCollectionIterator: WindowsFoundation.IID {
    .init(Data1: 0xADF264EE, Data2: 0xD980, Data3: 0x5F48, Data4: ( 0xA6,0x0E,0x87,0x05,0xDE,0x04,0x66,0x08 ))// ADF264EE-D980-5F48-A60E-8705DE046608
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpRequestHeaders: WindowsFoundation.IID {
    .init(Data1: 0xDC2226C7, Data2: 0x3515, Data3: 0x55BB, Data4: ( 0xBC,0xB2,0x57,0xB7,0x8F,0x86,0xB9,0x1D ))// DC2226C7-3515-55BB-BCB2-57B78F86B91D
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpResponseHeaders: WindowsFoundation.IID {
    .init(Data1: 0xF3D383E9, Data2: 0x747F, Data3: 0x5574, Data4: ( 0x86,0x62,0x9A,0x6B,0x92,0x0C,0xEC,0xD4 ))// F3D383E9-747F-5574-8662-9A6B920CECD4
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2LaunchingExternalUriSchemeEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6AB44F8D, Data2: 0xEC6A, Data3: 0x56A1, Data4: ( 0xAE,0x3C,0x9C,0x55,0xDF,0xF6,0xCB,0xC6 ))// 6AB44F8D-EC6A-56A1-AE3C-9C55DFF6CBC6
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2MoveFocusRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x2E29103B, Data2: 0xECDD, Data3: 0x5C1D, Data4: ( 0xB2,0x88,0x3F,0x06,0x6D,0x60,0x89,0x19 ))// 2E29103B-ECDD-5C1D-B288-3F066D608919
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x4865E238, Data2: 0x036A, Data3: 0x5664, Data4: ( 0x95,0xA3,0x44,0x7E,0xC4,0x4C,0xF4,0x98 ))// 4865E238-036A-5664-95A3-447EC44CF498
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationCompletedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0x6E4D3C33, Data2: 0xA6E2, Data3: 0x5896, Data4: ( 0x90,0xC5,0x68,0xB4,0xB5,0xE5,0x5B,0x40 ))// 6E4D3C33-A6E2-5896-90C5-68B4B5E55B40
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x548D23D3, Data2: 0xFEA3, Data3: 0x5616, Data4: ( 0xBD,0x05,0xAE,0x08,0x06,0x6C,0x86,0xD3 ))// 548D23D3-FEA3-5616-BD05-AE08066C86D3
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xD7A3824E, Data2: 0x7654, Data3: 0x5C4B, Data4: ( 0xB0,0x69,0xE6,0x50,0x16,0x34,0xD8,0x4C ))// D7A3824E-7654-5C4B-B069-E6501634D84C
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs3: WindowsFoundation.IID {
    .init(Data1: 0x17DB72F6, Data2: 0xE995, Data3: 0x59F6, Data4: ( 0x91,0xBA,0x44,0x11,0xE7,0x55,0xF3,0xAB ))// 17DB72F6-E995-59F6-91BA-4411E755F3AB
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xE6E013BA, Data2: 0xAEC8, Data3: 0x532E, Data4: ( 0x9A,0xC9,0x15,0x90,0xAF,0x7B,0x25,0xEC ))// E6E013BA-AEC8-532E-9AC9-1590AF7B25EC
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xF4806259, Data2: 0xE63A, Data3: 0x5C0B, Data4: ( 0xA0,0x2C,0x5F,0x10,0xE1,0x10,0x94,0xF4 ))// F4806259-E63A-5C0B-A02C-5F10E11094F4
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs3: WindowsFoundation.IID {
    .init(Data1: 0x1F0F7826, Data2: 0x8D70, Data3: 0x5720, Data4: ( 0xBB,0x8B,0xD8,0x7F,0x63,0xCB,0xFB,0x9C ))// 1F0F7826-8D70-5720-BB8B-D87F63CBFB9C
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x118BDD9B, Data2: 0xCEF1, Data3: 0x5910, Data4: ( 0x92,0x9E,0xC1,0xA3,0x21,0x32,0x82,0x39 ))// 118BDD9B-CEF1-5910-929E-C1A321328239
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xA6652FBA, Data2: 0xEBE5, Data3: 0x5891, Data4: ( 0xAD,0xDC,0xCB,0x37,0xDA,0x8F,0x7E,0x66 ))// A6652FBA-EBE5-5891-ADDC-CB37DA8F7E66
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs3: WindowsFoundation.IID {
    .init(Data1: 0x200E8BCC, Data2: 0xBC11, Data3: 0x5BEB, Data4: ( 0xAA,0x7A,0x79,0xD4,0xC9,0x5D,0x73,0xAA ))// 200E8BCC-BC11-5BEB-AA7A-79D4C95D73AA
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionSetting: WindowsFoundation.IID {
    .init(Data1: 0xB4158D0B, Data2: 0x8EF8, Data3: 0x575F, Data4: ( 0x8E,0x99,0x5F,0xE0,0x2E,0x8B,0x57,0x9E ))// B4158D0B-8EF8-575F-8E99-5FE02E8B579E
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo: WindowsFoundation.IID {
    .init(Data1: 0xC3860E0D, Data2: 0xC018, Data3: 0x5A84, Data4: ( 0xBC,0x06,0x9F,0x8F,0x7B,0x27,0x5D,0xFF ))// C3860E0D-C018-5A84-BC06-9F8F7B275DFF
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings: WindowsFoundation.IID {
    .init(Data1: 0x9C75C8C0, Data2: 0xEF3D, Data3: 0x58A8, Data4: ( 0x9A,0x8C,0x18,0xEE,0xD9,0xFD,0x0F,0x16 ))// 9C75C8C0-EF3D-58A8-9A8C-18EED9FD0F16
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2: WindowsFoundation.IID {
    .init(Data1: 0xD2A97895, Data2: 0xCA6E, Data3: 0x57FC, Data4: ( 0x90,0x5D,0xC6,0xF7,0x7A,0x08,0x17,0x68 ))// D2A97895-CA6E-57FC-905D-C6F77A081768
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrivatePartial: WindowsFoundation.IID {
    .init(Data1: 0x2850F27C, Data2: 0x0C9D, Data3: 0x5CDC, Data4: ( 0xB3,0x56,0x18,0xF5,0xB9,0x7D,0x9F,0xCF ))// 2850F27C-0C9D-5CDC-B356-18F5B97D9FCF
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrivatePartialController: WindowsFoundation.IID {
    .init(Data1: 0x527F6678, Data2: 0x8629, Data3: 0x5C2A, Data4: ( 0xBC,0x3B,0x8D,0x5C,0x95,0xE2,0xB9,0xBC ))// 527F6678-8629-5C2A-BC3B-8D5C95E2B9BC
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessExtendedInfo: WindowsFoundation.IID {
    .init(Data1: 0x60E9238B, Data2: 0x621D, Data3: 0x57E8, Data4: ( 0xB6,0x70,0x74,0x38,0x2B,0x23,0x80,0xA7 ))// 60E9238B-621D-57E8-B670-74382B2380A7
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x25A8F8C9, Data2: 0xD944, Data3: 0x539D, Data4: ( 0xAF,0xA3,0x24,0x17,0x2B,0x48,0xEF,0x47 ))// 25A8F8C9-D944-539D-AFA3-24172B48EF47
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xC5D9C952, Data2: 0xB456, Data3: 0x5DC7, Data4: ( 0x9F,0x76,0xFD,0xE9,0x67,0x48,0x4A,0xF5 ))// C5D9C952-B456-5DC7-9F76-FDE967484AF5
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessInfo: WindowsFoundation.IID {
    .init(Data1: 0xB6EC37E1, Data2: 0x23EB, Data3: 0x5924, Data4: ( 0xB3,0x46,0xE8,0x37,0x89,0x0A,0xA9,0xD5 ))// B6EC37E1-23EB-5924-B346-E837890AA9D5
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile: WindowsFoundation.IID {
    .init(Data1: 0xD4BDD25C, Data2: 0xA2DB, Data3: 0x5C03, Data4: ( 0x96,0x59,0xAB,0xDE,0xB9,0x79,0x36,0x21 ))// D4BDD25C-A2DB-5C03-9659-ABDEB9793621
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile2: WindowsFoundation.IID {
    .init(Data1: 0x93D21E18, Data2: 0x1B06, Data3: 0x59D0, Data4: ( 0x96,0x87,0x10,0xF4,0x84,0x4B,0x01,0x6D ))// 93D21E18-1B06-59D0-9687-10F4844B016D
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile3: WindowsFoundation.IID {
    .init(Data1: 0x507ED587, Data2: 0xC511, Data3: 0x5E47, Data4: ( 0xBE,0x5B,0xFC,0x9C,0xCD,0xF1,0x79,0xB6 ))// 507ED587-C511-5E47-BE5B-FC9CCDF179B6
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile4: WindowsFoundation.IID {
    .init(Data1: 0xEEAE109A, Data2: 0xF641, Data3: 0x5A5B, Data4: ( 0x94,0x2F,0x99,0x22,0x59,0x4F,0xFB,0x4D ))// EEAE109A-F641-5A5B-942F-9922594FFB4D
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile5: WindowsFoundation.IID {
    .init(Data1: 0xC9AAC8F7, Data2: 0xE502, Data3: 0x5485, Data4: ( 0xB0,0x33,0x99,0xE4,0x94,0x0E,0xE0,0xF1 ))// C9AAC8F7-E502-5485-B033-99E4940EE0F1
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile6: WindowsFoundation.IID {
    .init(Data1: 0xC16A4665, Data2: 0x9D44, Data3: 0x5768, Data4: ( 0x94,0xA3,0x69,0xB3,0x97,0x6F,0xC3,0xD6 ))// C16A4665-9D44-5768-94A3-69B3976FC3D6
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile7: WindowsFoundation.IID {
    .init(Data1: 0x5F665761, Data2: 0x5C12, Data3: 0x5F39, Data4: ( 0xB9,0xFE,0x60,0x7E,0x6E,0x94,0xAD,0xD1 ))// 5F665761-5C12-5F39-B9FE-607E6E94ADD1
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile8: WindowsFoundation.IID {
    .init(Data1: 0x9362D39C, Data2: 0xD521, Data3: 0x59E9, Data4: ( 0x88,0xFD,0x7C,0x5A,0xA1,0x16,0x7D,0xA6 ))// 9362D39C-D521-59E9-88FD-7C5AA1167DA6
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA4315212, Data2: 0xC7EB, Data3: 0x568A, Data4: ( 0x86,0xE4,0xC6,0x1E,0x31,0xBA,0x6C,0xDA ))// A4315212-C7EB-568A-86E4-C61E31BA6CDA
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ServerCertificateErrorDetectedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x90FDC703, Data2: 0x5A9E, Data3: 0x56F6, Data4: ( 0xA4,0x22,0x7C,0x11,0x4C,0x73,0x64,0x20 ))// 90FDC703-5A9E-56F6-A422-7C114C736420
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings: WindowsFoundation.IID {
    .init(Data1: 0x003B325E, Data2: 0x74CD, Data3: 0x52DD, Data4: ( 0x80,0x24,0xEB,0xB8,0xBE,0x38,0xE4,0x8E ))// 003B325E-74CD-52DD-8024-EBB8BE38E48E
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings2: WindowsFoundation.IID {
    .init(Data1: 0x377D3480, Data2: 0xFDB2, Data3: 0x56E7, Data4: ( 0xBA,0xDE,0x50,0x7D,0x35,0x28,0x87,0xE9 ))// 377D3480-FDB2-56E7-BADE-507D352887E9
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings3: WindowsFoundation.IID {
    .init(Data1: 0x52200F01, Data2: 0x5309, Data3: 0x5B2E, Data4: ( 0xA0,0x3C,0x3D,0x26,0x77,0x59,0x19,0x40 ))// 52200F01-5309-5B2E-A03C-3D2677591940
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings4: WindowsFoundation.IID {
    .init(Data1: 0xD6A955F0, Data2: 0xDAEF, Data3: 0x5A6A, Data4: ( 0xA6,0xF6,0xC7,0x2F,0x0E,0xDE,0x76,0x20 ))// D6A955F0-DAEF-5A6A-A6F6-C72F0EDE7620
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings5: WindowsFoundation.IID {
    .init(Data1: 0xAFC42B23, Data2: 0x4839, Data3: 0x5D73, Data4: ( 0xAC,0xF7,0xE0,0x33,0x56,0x31,0xAB,0xF5 ))// AFC42B23-4839-5D73-ACF7-E0335631ABF5
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings6: WindowsFoundation.IID {
    .init(Data1: 0x3FE4AE85, Data2: 0x0540, Data3: 0x5BF1, Data4: ( 0xB4,0xD9,0x99,0xEC,0x57,0xAA,0x64,0xF5 ))// 3FE4AE85-0540-5BF1-B4D9-99EC57AA64F5
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings7: WindowsFoundation.IID {
    .init(Data1: 0x688027CD, Data2: 0x9F84, Data3: 0x59E8, Data4: ( 0x8D,0x5C,0x91,0x12,0x3D,0xF2,0x4B,0x92 ))// 688027CD-9F84-59E8-8D5C-91123DF24B92
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings8: WindowsFoundation.IID {
    .init(Data1: 0x956F1A8F, Data2: 0x3198, Data3: 0x5577, Data4: ( 0xB2,0x50,0x7D,0x91,0xD1,0x7F,0x7E,0xED ))// 956F1A8F-3198-5577-B250-7D91D17F7EED
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings__Manual: WindowsFoundation.IID {
    .init(Data1: 0x0A538C87, Data2: 0xE000, Data3: 0x511C, Data4: ( 0x87,0xCA,0xDE,0xD3,0x41,0x3D,0x03,0xDA ))// 0A538C87-E000-511C-87CA-DED3413D03DA
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SharedBuffer: WindowsFoundation.IID {
    .init(Data1: 0x2907CC84, Data2: 0xF843, Data3: 0x5959, Data4: ( 0x87,0x34,0xF8,0x71,0x76,0x6F,0x8F,0x13 ))// 2907CC84-F843-5959-8734-F871766F8F13
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SharedBuffer__Manual: WindowsFoundation.IID {
    .init(Data1: 0x1AA4E213, Data2: 0xACE3, Data3: 0x5F74, Data4: ( 0xA2,0xAE,0xC6,0x48,0x9C,0xEB,0x32,0x39 ))// 1AA4E213-ACE3-5F74-A2AE-C6489CEB3239
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SourceChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xCA437B2C, Data2: 0x6A18, Data3: 0x5552, Data4: ( 0xB7,0x49,0xB1,0x98,0xF8,0xCC,0x34,0xD9 ))// CA437B2C-6A18-5552-B749-B198F8CC34D9
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebMessageReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xEB066159, Data2: 0xB725, Data3: 0x5D5B, Data4: ( 0xAD,0xC8,0xF5,0xD7,0xB9,0x29,0x03,0x04 ))// EB066159-B725-5D5B-ADC8-F5D7B9290304
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebMessageReceivedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0x71DC5FA0, Data2: 0x08A0, Data3: 0x5DEA, Data4: ( 0x93,0x63,0x79,0x9D,0xF5,0x02,0x14,0x52 ))// 71DC5FA0-08A0-5DEA-9363-799DF5021452
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest: WindowsFoundation.IID {
    .init(Data1: 0x5C742259, Data2: 0x67D2, Data3: 0x5DF2, Data4: ( 0x83,0x82,0x0F,0x20,0x1B,0x4D,0x71,0x97 ))// 5C742259-67D2-5DF2-8382-0F201B4D7197
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x577F1FC4, Data2: 0xC943, Data3: 0x54A9, Data4: ( 0x97,0x00,0xBD,0x46,0x9B,0x48,0xBD,0x41 ))// 577F1FC4-C943-54A9-9700-BD469B48BD41
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse: WindowsFoundation.IID {
    .init(Data1: 0x14621923, Data2: 0xE485, Data3: 0x5F44, Data4: ( 0x8F,0x5D,0xBD,0x42,0x43,0xBC,0x39,0x8F ))// 14621923-E485-5F44-8F5D-BD4243BC398F
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x12424671, Data2: 0x9711, Data3: 0x54F4, Data4: ( 0xBC,0xDF,0x5F,0x30,0x7A,0xDD,0x6E,0xC2 ))// 12424671-9711-54F4-BCDF-5F307ADD6EC2
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseView: WindowsFoundation.IID {
    .init(Data1: 0x33EE060B, Data2: 0xB578, Data3: 0x5698, Data4: ( 0xB5,0x41,0xFE,0xF8,0x7F,0xE7,0xFE,0x72 ))// 33EE060B-B578-5698-B541-FEF87FE7FE72
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures: WindowsFoundation.IID {
    .init(Data1: 0xEE8686D6, Data2: 0x056F, Data3: 0x5E06, Data4: ( 0x82,0x4F,0x4E,0x2A,0x24,0xC1,0xC1,0xD6 ))// EE8686D6-056F-5E06-824F-4E2A24C1C1D6
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__10: WindowsFoundation.IID {
    .init(Data1: 0xA7B20434, Data2: 0x970F, Data3: 0x54B1, Data4: ( 0xAA,0x63,0x3C,0x42,0x67,0x1F,0xA9,0xAB ))// A7B20434-970F-54B1-AA63-3C42671FA9AB
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__11: WindowsFoundation.IID {
    .init(Data1: 0xC00ACBB1, Data2: 0xAE32, Data3: 0x501F, Data4: ( 0xAD,0x19,0x9D,0x0A,0xC3,0x2D,0x61,0x42 ))// C00ACBB1-AE32-501F-AD19-9D0AC32D6142
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__12: WindowsFoundation.IID {
    .init(Data1: 0xDBBBE9A1, Data2: 0x18D3, Data3: 0x5F67, Data4: ( 0xB3,0x62,0x0F,0x4A,0xE9,0x37,0xD7,0x54 ))// DBBBE9A1-18D3-5F67-B362-0F4AE937D754
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__13: WindowsFoundation.IID {
    .init(Data1: 0x314B5846, Data2: 0xDBC7, Data3: 0x5DE4, Data4: ( 0xA7,0x92,0x64,0x7E,0xA0,0xF3,0x29,0x6A ))// 314B5846-DBC7-5DE4-A792-647EA0F3296A
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__14: WindowsFoundation.IID {
    .init(Data1: 0xA7647B24, Data2: 0x3B1E, Data3: 0x50A9, Data4: ( 0xBE,0x24,0x6E,0x8A,0xC6,0x3F,0xE4,0x91 ))// A7647B24-3B1E-50A9-BE24-6E8AC63FE491
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__15: WindowsFoundation.IID {
    .init(Data1: 0x4443F532, Data2: 0xD2BA, Data3: 0x5AE2, Data4: ( 0xA9,0xB3,0x8D,0xE6,0x2B,0xD5,0xD4,0xA9 ))// 4443F532-D2BA-5AE2-A9B3-8DE62BD5D4A9
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__16: WindowsFoundation.IID {
    .init(Data1: 0x61D0A57C, Data2: 0x6C4F, Data3: 0x50FF, Data4: ( 0xA1,0x37,0x31,0x4B,0x00,0x99,0xA2,0xB8 ))// 61D0A57C-6C4F-50FF-A137-314B0099A2B8
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__17: WindowsFoundation.IID {
    .init(Data1: 0x2345F9DB, Data2: 0x5488, Data3: 0x559A, Data4: ( 0x82,0xAF,0x90,0x86,0xCC,0x4F,0x79,0x88 ))// 2345F9DB-5488-559A-82AF-9086CC4F7988
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__18: WindowsFoundation.IID {
    .init(Data1: 0x94F52E61, Data2: 0x9D75, Data3: 0x5A81, Data4: ( 0xAC,0xD3,0x83,0x0F,0xF2,0x9C,0xE6,0xF7 ))// 94F52E61-9D75-5A81-ACD3-830FF29CE6F7
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__19: WindowsFoundation.IID {
    .init(Data1: 0x35A94A5C, Data2: 0xE027, Data3: 0x5DC5, Data4: ( 0x8C,0x2B,0xC2,0xFC,0x7D,0x58,0x91,0x59 ))// 35A94A5C-E027-5DC5-8C2B-C2FC7D589159
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__2: WindowsFoundation.IID {
    .init(Data1: 0x578CB133, Data2: 0x2873, Data3: 0x5408, Data4: ( 0xBD,0x9E,0x38,0x9B,0xBE,0x9F,0xA7,0xFA ))// 578CB133-2873-5408-BD9E-389BBE9FA7FA
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__20: WindowsFoundation.IID {
    .init(Data1: 0x859C4805, Data2: 0xE988, Data3: 0x50D5, Data4: ( 0x85,0xD7,0xA5,0x06,0x43,0xFC,0x81,0x5E ))// 859C4805-E988-50D5-85D7-A50643FC815E
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__3: WindowsFoundation.IID {
    .init(Data1: 0xA8C76AE7, Data2: 0x6170, Data3: 0x5DFE, Data4: ( 0x8F,0x00,0x79,0xCD,0x76,0xA9,0xB4,0xD9 ))// A8C76AE7-6170-5DFE-8F00-79CD76A9B4D9
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__4: WindowsFoundation.IID {
    .init(Data1: 0x4AC595CE, Data2: 0x1502, Data3: 0x5775, Data4: ( 0xB2,0xC8,0x22,0xC1,0x1A,0x36,0x9C,0x25 ))// 4AC595CE-1502-5775-B2C8-22C11A369C25
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__5: WindowsFoundation.IID {
    .init(Data1: 0xDD6AF643, Data2: 0x220C, Data3: 0x5DC6, Data4: ( 0xB0,0xA8,0x22,0xC4,0x1E,0x47,0x25,0x95 ))// DD6AF643-220C-5DC6-B0A8-22C41E472595
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__6: WindowsFoundation.IID {
    .init(Data1: 0x92B34B96, Data2: 0x853D, Data3: 0x5BB6, Data4: ( 0xAC,0x52,0x30,0x29,0x7C,0xE8,0x05,0xF1 ))// 92B34B96-853D-5BB6-AC52-30297CE805F1
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__7: WindowsFoundation.IID {
    .init(Data1: 0xF9B7107A, Data2: 0x2E09, Data3: 0x5596, Data4: ( 0xA0,0x33,0x91,0x1B,0xA1,0x23,0x15,0xF7 ))// F9B7107A-2E09-5596-A033-911BA12315F7
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__8: WindowsFoundation.IID {
    .init(Data1: 0xAA2503C0, Data2: 0x8D1C, Data3: 0x5A3D, Data4: ( 0xB8,0x98,0xF5,0x5F,0x75,0x95,0x26,0x8A ))// AA2503C0-8D1C-5A3D-B898-F55F7595268A
}

private var IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9: WindowsFoundation.IID {
    .init(Data1: 0x64B2EC16, Data2: 0x0B29, Data3: 0x5216, Data4: ( 0xBF,0x86,0xE5,0x75,0xC8,0x8F,0x70,0x31 ))// 64B2EC16-0B29-5216-BF86-E575C88F7031
}

public enum __ABI_Microsoft_Web_WebView2_Core {
    public class CoreWebView2Certificate_Manual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2Certificate__Manual }

        internal func ToCertificateImpl() throws -> UWP.Certificate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2Certificate__Manual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ToCertificate(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class CoreWebView2ClientCertificate_Manual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ClientCertificate__Manual }

        internal func ToCertificateImpl() throws -> UWP.Certificate? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ClientCertificate__Manual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ToCertificate(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class CoreWebView2Profile_Manual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2Profile__Manual }

        internal func ClearBrowsingDataAsyncImpl(_ dataKinds: WebView2Core.CoreWebView2BrowsingDataKinds, _ startTime: WindowsFoundation.DateTime, _ endTime: WindowsFoundation.DateTime) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2Profile__Manual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ClearBrowsingDataAsync(pThis, dataKinds, .from(swift: startTime), .from(swift: endTime), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func ClearBrowsingDataAsync2Impl() throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2Profile__Manual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ClearBrowsingDataAsync2(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class CoreWebView2Profile_Manual2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2Profile__Manual2 }

        internal func GetNonDefaultPermissionSettingsAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<WebView2Core.CoreWebView2PermissionSetting?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2Profile__Manual2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNonDefaultPermissionSettingsAsync(pThis, &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2PermissionSettingWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2 }

        internal func get_SettingsImpl() throws -> WebView2Core.CoreWebView2Settings? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Settings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_SourceImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_BrowserProcessIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BrowserProcessId(pThis, &value))
            }
            return value
        }

        internal func get_CanGoBackImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoBack(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CanGoForwardImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoForward(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DocumentTitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DocumentTitle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ContainsFullScreenElementImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainsFullScreenElement(pThis, &value))
            }
            return .init(from: value)
        }

        internal func add_NavigationStartingImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2NavigationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NavigationStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NavigationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigationStarting(pThis, token))
            }
        }

        internal func add_ContentLoadingImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2ContentLoadingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ContentLoadingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContentLoading(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ContentLoadingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContentLoading(pThis, token))
            }
        }

        internal func add_SourceChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2SourceChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2SourceChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SourceChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SourceChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SourceChanged(pThis, token))
            }
        }

        internal func add_HistoryChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_HistoryChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_HistoryChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_HistoryChanged(pThis, token))
            }
        }

        internal func add_NavigationCompletedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2NavigationCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NavigationCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NavigationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigationCompleted(pThis, token))
            }
        }

        internal func add_FrameNavigationStartingImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2NavigationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NavigationStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FrameNavigationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FrameNavigationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FrameNavigationStarting(pThis, token))
            }
        }

        internal func add_FrameNavigationCompletedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2NavigationCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NavigationCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FrameNavigationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FrameNavigationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FrameNavigationCompleted(pThis, token))
            }
        }

        internal func add_ScriptDialogOpeningImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2ScriptDialogOpeningEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ScriptDialogOpeningEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScriptDialogOpening(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ScriptDialogOpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScriptDialogOpening(pThis, token))
            }
        }

        internal func add_PermissionRequestedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2PermissionRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2PermissionRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PermissionRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PermissionRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PermissionRequested(pThis, token))
            }
        }

        internal func add_ProcessFailedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2ProcessFailedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ProcessFailedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ProcessFailed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ProcessFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ProcessFailed(pThis, token))
            }
        }

        internal func add_WebMessageReceivedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2WebMessageReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2WebMessageReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_WebMessageReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_WebMessageReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_WebMessageReceived(pThis, token))
            }
        }

        internal func add_NewWindowRequestedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2NewWindowRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NewWindowRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NewWindowRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NewWindowRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NewWindowRequested(pThis, token))
            }
        }

        internal func add_DocumentTitleChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DocumentTitleChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DocumentTitleChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DocumentTitleChanged(pThis, token))
            }
        }

        internal func add_ContainsFullScreenElementChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContainsFullScreenElementChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ContainsFullScreenElementChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContainsFullScreenElementChanged(pThis, token))
            }
        }

        internal func add_WebResourceRequestedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2WebResourceRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2WebResourceRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_WebResourceRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_WebResourceRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_WebResourceRequested(pThis, token))
            }
        }

        internal func add_WindowCloseRequestedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_WindowCloseRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_WindowCloseRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_WindowCloseRequested(pThis, token))
            }
        }

        internal func NavigateImpl(_ uri: String) throws {
            let _uri = try! HString(uri)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Navigate(pThis, _uri.get()))
            }
        }

        internal func NavigateToStringImpl(_ htmlContent: String) throws {
            let _htmlContent = try! HString(htmlContent)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NavigateToString(pThis, _htmlContent.get()))
            }
        }

        internal func AddScriptToExecuteOnDocumentCreatedAsyncImpl(_ javaScript: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _javaScript = try! HString(javaScript)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AddScriptToExecuteOnDocumentCreatedAsync(pThis, _javaScript.get(), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: operation)
        }

        internal func RemoveScriptToExecuteOnDocumentCreatedImpl(_ id: String) throws {
            let _id = try! HString(id)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveScriptToExecuteOnDocumentCreated(pThis, _id.get()))
            }
        }

        internal func ExecuteScriptAsyncImpl(_ javaScript: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _javaScript = try! HString(javaScript)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ExecuteScriptAsync(pThis, _javaScript.get(), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: operation)
        }

        internal func CapturePreviewAsyncImpl(_ imageFormat: WebView2Core.CoreWebView2CapturePreviewImageFormat, _ imageStream: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let imageStreamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(imageStream)
                let _imageStream = try! imageStreamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CapturePreviewAsync(pThis, imageFormat, _imageStream, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func ReloadImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Reload(pThis))
            }
        }

        internal func PostWebMessageAsJsonImpl(_ webMessageAsJson: String) throws {
            let _webMessageAsJson = try! HString(webMessageAsJson)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PostWebMessageAsJson(pThis, _webMessageAsJson.get()))
            }
        }

        internal func PostWebMessageAsStringImpl(_ webMessageAsString: String) throws {
            let _webMessageAsString = try! HString(webMessageAsString)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PostWebMessageAsString(pThis, _webMessageAsString.get()))
            }
        }

        internal func CallDevToolsProtocolMethodAsyncImpl(_ methodName: String, _ parametersAsJson: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _methodName = try! HString(methodName)
                let _parametersAsJson = try! HString(parametersAsJson)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CallDevToolsProtocolMethodAsync(pThis, _methodName.get(), _parametersAsJson.get(), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: operation)
        }

        internal func GoBackImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GoBack(pThis))
            }
        }

        internal func GoForwardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GoForward(pThis))
            }
        }

        internal func GetDevToolsProtocolEventReceiverImpl(_ eventName: String) throws -> WebView2Core.CoreWebView2DevToolsProtocolEventReceiver? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _eventName = try! HString(eventName)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDevToolsProtocolEventReceiver(pThis, _eventName.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func StopImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        internal func AddHostObjectToScriptImpl(_ name: String, _ rawObject: Any?) throws {
            let _name = try! HString(name)
            let rawObjectWrapper = __ABI_.AnyWrapper(rawObject)
            let _rawObject = try! rawObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddHostObjectToScript(pThis, _name.get(), _rawObject))
            }
        }

        internal func RemoveHostObjectFromScriptImpl(_ name: String) throws {
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveHostObjectFromScript(pThis, _name.get()))
            }
        }

        internal func OpenDevToolsWindowImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OpenDevToolsWindow(pThis))
            }
        }

        internal func AddWebResourceRequestedFilterImpl(_ uri: String, _ ResourceContext: WebView2Core.CoreWebView2WebResourceContext) throws {
            let _uri = try! HString(uri)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddWebResourceRequestedFilter(pThis, _uri.get(), ResourceContext))
            }
        }

        internal func RemoveWebResourceRequestedFilterImpl(_ uri: String, _ ResourceContext: WebView2Core.CoreWebView2WebResourceContext) throws {
            let _uri = try! HString(uri)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveWebResourceRequestedFilter(pThis, _uri.get(), ResourceContext))
            }
        }

    }

    public class ICoreWebView2AcceleratorKeyPressedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs }

        internal func get_KeyEventKindImpl() throws -> WebView2Core.CoreWebView2KeyEventKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2KeyEventKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyEventKind(pThis, &value))
            }
            return value
        }

        internal func get_VirtualKeyImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VirtualKey(pThis, &value))
            }
            return value
        }

        internal func get_KeyEventLParamImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyEventLParam(pThis, &value))
            }
            return value
        }

        internal func get_PhysicalKeyStatusImpl() throws -> WebView2Core.CoreWebView2PhysicalKeyStatus {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PhysicalKeyStatus = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PhysicalKeyStatus(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2AcceleratorKeyPressedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs2 }

        internal func get_IsBrowserAcceleratorKeyEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBrowserAcceleratorKeyEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsBrowserAcceleratorKeyEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2AcceleratorKeyPressedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsBrowserAcceleratorKeyEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2BasicAuthenticationRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationRequestedEventArgs }

        internal func get_UriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ChallengeImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Challenge(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ResponseImpl() throws -> WebView2Core.CoreWebView2BasicAuthenticationResponse? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Response(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2BasicAuthenticationResponse: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationResponse }

        internal func get_UserNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationResponse.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_UserNameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationResponse.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UserName(pThis, _value.get()))
            }
        }

        internal func get_PasswordImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationResponse.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Password(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PasswordImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BasicAuthenticationResponse.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Password(pThis, _value.get()))
            }
        }

    }

    public class ICoreWebView2BrowserExtension: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserExtension }

        internal func get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserExtension.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserExtension.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserExtension.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func RemoveAsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserExtension.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAsync(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func EnableAsyncImpl(_ IsEnabled: Bool) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserExtension.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.EnableAsync(pThis, .init(from: IsEnabled), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2BrowserProcessExitedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserProcessExitedEventArgs }

        internal func get_BrowserProcessExitKindImpl() throws -> WebView2Core.CoreWebView2BrowserProcessExitKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BrowserProcessExitKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserProcessExitedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BrowserProcessExitKind(pThis, &value))
            }
            return value
        }

        internal func get_BrowserProcessIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2BrowserProcessExitedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BrowserProcessId(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2Certificate: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate }

        internal func get_SubjectImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subject(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IssuerImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Issuer(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ValidFromImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValidFrom(pThis, &value))
            }
            return value
        }

        internal func get_ValidToImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValidTo(pThis, &value))
            }
            return value
        }

        internal func get_DerEncodedSerialNumberImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DerEncodedSerialNumber(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DisplayNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_PemEncodedIssuerCertificateChainImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PemEncodedIssuerCertificateChain(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func ToPemEncodingImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Certificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ToPemEncoding(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class ICoreWebView2ClientCertificate: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate }

        internal func get_SubjectImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subject(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IssuerImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Issuer(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ValidFromImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValidFrom(pThis, &value))
            }
            return value
        }

        internal func get_ValidToImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValidTo(pThis, &value))
            }
            return value
        }

        internal func get_DerEncodedSerialNumberImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DerEncodedSerialNumber(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DisplayNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_PemEncodedIssuerCertificateChainImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PemEncodedIssuerCertificateChain(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func get_KindImpl() throws -> WebView2Core.CoreWebView2ClientCertificateKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ClientCertificateKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal func ToPemEncodingImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ToPemEncoding(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class ICoreWebView2ClientCertificateRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs }

        internal func get_HostImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Host(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_PortImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Port(pThis, &value))
            }
            return value
        }

        internal func get_IsProxyImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsProxy(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AllowedCertificateAuthoritiesImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowedCertificateAuthorities(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func get_MutuallyTrustedCertificatesImpl() throws -> WindowsFoundation.AnyIVectorView<WebView2Core.CoreWebView2ClientCertificate?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MutuallyTrustedCertificates(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ClientCertificateWrapper.unwrapFrom(abi: value)
        }

        internal func get_SelectedCertificateImpl() throws -> WebView2Core.CoreWebView2ClientCertificate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedCertificate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SelectedCertificateImpl(_ value: WebView2Core.CoreWebView2ClientCertificate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedCertificate(pThis, RawPointer(value)))
            }
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ClientCertificateRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2CompositionController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController }

        internal func get_RootVisualTargetImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RootVisualTarget(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal func put_RootVisualTargetImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RootVisualTarget(pThis, _value))
            }
        }

        internal func add_CursorChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2CompositionController?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2CompositionController_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CursorChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CursorChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CursorChanged(pThis, token))
            }
        }

        internal func SendMouseInputImpl(_ eventKind: WebView2Core.CoreWebView2MouseEventKind, _ virtualKeys: WebView2Core.CoreWebView2MouseEventVirtualKeys, _ mouseData: UInt32, _ point: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SendMouseInput(pThis, eventKind, virtualKeys, mouseData, .from(swift: point)))
            }
        }

        internal func SendPointerInputImpl(_ eventKind: WebView2Core.CoreWebView2PointerEventKind, _ pointerInfo: WebView2Core.CoreWebView2PointerInfo?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SendPointerInput(pThis, eventKind, RawPointer(pointerInfo)))
            }
        }

        internal func get_CursorImpl() throws -> UWP.CoreCursor? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cursor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func DragEnterImpl(_ dragInfo: UWP.CoreDragInfo?, _ dragUIOverride: UWP.CoreDragUIOverride?) throws -> UWP.DataPackageOperation {
            var result: __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DragEnter(pThis, RawPointer(dragInfo), RawPointer(dragUIOverride), &result))
            }
            return result
        }

        internal func DragOverImpl(_ dragInfo: UWP.CoreDragInfo?, _ dragUIOverride: UWP.CoreDragUIOverride?) throws -> UWP.DataPackageOperation {
            var result: __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DragOver(pThis, RawPointer(dragInfo), RawPointer(dragUIOverride), &result))
            }
            return result
        }

        internal func DropImpl(_ dragInfo: UWP.CoreDragInfo?) throws -> UWP.DataPackageOperation {
            var result: __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Drop(pThis, RawPointer(dragInfo), &result))
            }
            return result
        }

    }

    public class ICoreWebView2CompositionController2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController2 }

    }

    public class ICoreWebView2CompositionController3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController3 }

        internal func DragLeaveImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionController3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DragLeave(pThis))
            }
        }

    }

    public class ICoreWebView2CompositionControllerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionControllerStatics }

    }

    public class ICoreWebView2CompositionControllerStatics2_Manual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CompositionControllerStatics2__Manual }

    }

    public class ICoreWebView2ContentLoadingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContentLoadingEventArgs }

        internal func get_IsErrorPageImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContentLoadingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsErrorPage(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_NavigationIdImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContentLoadingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigationId(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2ContextMenuItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_LabelImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Label(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CommandIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandId(pThis, &value))
            }
            return value
        }

        internal func get_ShortcutKeyDescriptionImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShortcutKeyDescription(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IconImpl() throws -> UWP.AnyIRandomAccessStream? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Icon(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: value)
        }

        internal func get_KindImpl() throws -> WebView2Core.CoreWebView2ContextMenuItemKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuItemKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal func get_IsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsCheckedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsChecked(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsCheckedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsChecked(pThis, .init(from: value)))
            }
        }

        internal func get_ChildrenImpl() throws -> WindowsFoundation.AnyIVector<WebView2Core.CoreWebView2ContextMenuItem?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Children(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ContextMenuItemWrapper.unwrapFrom(abi: value)
        }

        internal func add_CustomItemSelectedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2ContextMenuItem?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ContextMenuItem_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CustomItemSelected(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CustomItemSelectedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CustomItemSelected(pThis, token))
            }
        }

    }

    public class ICoreWebView2ContextMenuRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs }

        internal func get_MenuItemsImpl() throws -> WindowsFoundation.AnyIVector<WebView2Core.CoreWebView2ContextMenuItem?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItems(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ContextMenuItemWrapper.unwrapFrom(abi: value)
        }

        internal func get_ContextMenuTargetImpl() throws -> WebView2Core.CoreWebView2ContextMenuTarget? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContextMenuTarget(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LocationImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Location(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SelectedCommandIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedCommandId(pThis, &value))
            }
            return value
        }

        internal func put_SelectedCommandIdImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedCommandId(pThis, value))
            }
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2ContextMenuTarget: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget }

        internal func get_KindImpl() throws -> WebView2Core.CoreWebView2ContextMenuTargetKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ContextMenuTargetKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal func get_IsEditableImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEditable(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsRequestedForMainFrameImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRequestedForMainFrame(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_PageUriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PageUri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_FrameUriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameUri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HasLinkUriImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasLinkUri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_LinkUriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LinkUri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HasLinkTextImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasLinkText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_LinkTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LinkText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HasSourceUriImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasSourceUri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SourceUriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceUri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HasSelectionImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasSelection(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SelectionTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ContextMenuTarget.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionText(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2Controller: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller }

        internal func get_IsVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsVisibleImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsVisible(pThis, .init(from: value)))
            }
        }

        internal func get_BoundsImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BoundsImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bounds(pThis, .from(swift: value)))
            }
        }

        internal func get_ZoomFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomFactor(pThis, &value))
            }
            return value
        }

        internal func put_ZoomFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomFactor(pThis, value))
            }
        }

        internal func get_ParentWindowImpl() throws -> WebView2Core.CoreWebView2ControllerWindowReference? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ParentWindow(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ParentWindowImpl(_ value: WebView2Core.CoreWebView2ControllerWindowReference?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ParentWindow(pThis, RawPointer(value)))
            }
        }

        internal func get_CoreWebView2Impl() throws -> WebView2Core.CoreWebView2? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CoreWebView2(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_ZoomFactorChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Controller?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Controller_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ZoomFactorChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ZoomFactorChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ZoomFactorChanged(pThis, token))
            }
        }

        internal func add_MoveFocusRequestedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Controller?, WebView2Core.CoreWebView2MoveFocusRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Controller___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2MoveFocusRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_MoveFocusRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_MoveFocusRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MoveFocusRequested(pThis, token))
            }
        }

        internal func add_GotFocusImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Controller?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Controller_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_GotFocus(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_GotFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GotFocus(pThis, token))
            }
        }

        internal func add_LostFocusImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Controller?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Controller_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_LostFocus(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_LostFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LostFocus(pThis, token))
            }
        }

        internal func add_AcceleratorKeyPressedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Controller?, WebView2Core.CoreWebView2AcceleratorKeyPressedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Controller___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2AcceleratorKeyPressedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AcceleratorKeyPressed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AcceleratorKeyPressedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AcceleratorKeyPressed(pThis, token))
            }
        }

        internal func SetBoundsAndZoomFactorImpl(_ Bounds: WindowsFoundation.Rect, _ ZoomFactor: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetBoundsAndZoomFactor(pThis, .from(swift: Bounds), ZoomFactor))
            }
        }

        internal func MoveFocusImpl(_ reason: WebView2Core.CoreWebView2MoveFocusReason) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveFocus(pThis, reason))
            }
        }

        internal func NotifyParentWindowPositionChangedImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NotifyParentWindowPositionChanged(pThis))
            }
        }

        internal func CloseImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
            }
        }

    }

    public class ICoreWebView2Controller2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller2 }

        internal func get_DefaultBackgroundColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultBackgroundColor(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_DefaultBackgroundColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultBackgroundColor(pThis, .from(swift: value)))
            }
        }

    }

    public class ICoreWebView2Controller3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller3 }

        internal func get_RasterizationScaleImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RasterizationScale(pThis, &value))
            }
            return value
        }

        internal func put_RasterizationScaleImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RasterizationScale(pThis, value))
            }
        }

        internal func get_ShouldDetectMonitorScaleChangesImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldDetectMonitorScaleChanges(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShouldDetectMonitorScaleChangesImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShouldDetectMonitorScaleChanges(pThis, .init(from: value)))
            }
        }

        internal func get_BoundsModeImpl() throws -> WebView2Core.CoreWebView2BoundsMode {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2BoundsMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BoundsMode(pThis, &value))
            }
            return value
        }

        internal func put_BoundsModeImpl(_ value: WebView2Core.CoreWebView2BoundsMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BoundsMode(pThis, value))
            }
        }

        internal func add_RasterizationScaleChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Controller?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Controller_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_RasterizationScaleChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_RasterizationScaleChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RasterizationScaleChanged(pThis, token))
            }
        }

    }

    public class ICoreWebView2Controller4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller4 }

        internal func get_AllowExternalDropImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowExternalDrop(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AllowExternalDropImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Controller4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowExternalDrop(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2ControllerFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerFactory }

    }

    public class ICoreWebView2ControllerOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions }

        internal func get_ProfileNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfileName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ProfileNameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProfileName(pThis, _value.get()))
            }
        }

        internal func get_IsInPrivateModeEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInPrivateModeEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsInPrivateModeEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsInPrivateModeEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2ControllerOptions2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions2 }

        internal func get_ScriptLocaleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScriptLocale(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ScriptLocaleImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerOptions2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ScriptLocale(pThis, _value.get()))
            }
        }

    }

    public class ICoreWebView2ControllerWindowReference: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerWindowReference }

        internal func get_WindowHandleImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerWindowReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WindowHandle(pThis, &value))
            }
            return value
        }

        internal func get_CoreWindowImpl() throws -> UWP.CoreWindow? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerWindowReference.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CoreWindow(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICoreWebView2ControllerWindowReferenceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerWindowReferenceStatics }

        internal func CreateFromWindowHandleImpl(_ windowHandle: UInt64) throws -> WebView2Core.CoreWebView2ControllerWindowReference? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerWindowReferenceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromWindowHandle(pThis, windowHandle, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromCoreWindowImpl(_ coreWindow: UWP.CoreWindow?) throws -> WebView2Core.CoreWebView2ControllerWindowReference? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ControllerWindowReferenceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromCoreWindow(pThis, RawPointer(coreWindow), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2Cookie: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ValueImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ValueImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, _value.get()))
            }
        }

        internal func get_DomainImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Domain(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_PathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Path(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ExpiresImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Expires(pThis, &value))
            }
            return value
        }

        internal func put_ExpiresImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Expires(pThis, value))
            }
        }

        internal func get_IsHttpOnlyImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHttpOnly(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsHttpOnlyImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsHttpOnly(pThis, .init(from: value)))
            }
        }

        internal func get_SameSiteImpl() throws -> WebView2Core.CoreWebView2CookieSameSiteKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2CookieSameSiteKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SameSite(pThis, &value))
            }
            return value
        }

        internal func put_SameSiteImpl(_ value: WebView2Core.CoreWebView2CookieSameSiteKind) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SameSite(pThis, value))
            }
        }

        internal func get_IsSecureImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSecure(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSecureImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSecure(pThis, .init(from: value)))
            }
        }

        internal func get_IsSessionImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Cookie.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSession(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2CookieManager: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager }

        internal func CreateCookieImpl(_ name: String, _ value: String, _ Domain: String, _ Path: String) throws -> WebView2Core.CoreWebView2Cookie? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _name = try! HString(name)
                let _value = try! HString(value)
                let _Domain = try! HString(Domain)
                let _Path = try! HString(Path)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCookie(pThis, _name.get(), _value.get(), _Domain.get(), _Path.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CopyCookieImpl(_ cookieParam: WebView2Core.CoreWebView2Cookie?) throws -> WebView2Core.CoreWebView2Cookie? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CopyCookie(pThis, RawPointer(cookieParam), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func AddOrUpdateCookieImpl(_ cookie: WebView2Core.CoreWebView2Cookie?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddOrUpdateCookie(pThis, RawPointer(cookie)))
            }
        }

        internal func DeleteCookieImpl(_ cookie: WebView2Core.CoreWebView2Cookie?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteCookie(pThis, RawPointer(cookie)))
            }
        }

        internal func DeleteCookiesImpl(_ name: String, _ uri: String) throws {
            let _name = try! HString(name)
            let _uri = try! HString(uri)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteCookies(pThis, _name.get(), _uri.get()))
            }
        }

        internal func DeleteCookiesWithDomainAndPathImpl(_ name: String, _ Domain: String, _ Path: String) throws {
            let _name = try! HString(name)
            let _Domain = try! HString(Domain)
            let _Path = try! HString(Path)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteCookiesWithDomainAndPath(pThis, _name.get(), _Domain.get(), _Path.get()))
            }
        }

        internal func DeleteAllCookiesImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteAllCookies(pThis))
            }
        }

    }

    public class ICoreWebView2CookieManager_Manual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager__Manual }

        internal func GetCookiesAsyncImpl(_ uri: String) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<WebView2Core.CoreWebView2Cookie?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _uri = try! HString(uri)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CookieManager__Manual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCookiesAsync(pThis, _uri.get(), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2CookieWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2CustomSchemeRegistration: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration }

        internal func get_TreatAsSecureImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TreatAsSecure(pThis, &value))
            }
            return value
        }

        internal func put_TreatAsSecureImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TreatAsSecure(pThis, value))
            }
        }

        internal func get_HasAuthorityComponentImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasAuthorityComponent(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HasAuthorityComponentImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HasAuthorityComponent(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2CustomSchemeRegistrationFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistrationFactory }

        internal func CreateInstanceImpl(_ schemeName: String) throws -> ICoreWebView2CustomSchemeRegistration {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _schemeName = try! HString(schemeName)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistrationFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _schemeName.get(), &valueAbi))
                }
            }
            return ICoreWebView2CustomSchemeRegistration(value!)
        }

    }

    public class ICoreWebView2CustomSchemeRegistration_Manual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration__Manual }

        internal func get_SchemeNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration__Manual.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SchemeName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AllowedOriginsImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2CustomSchemeRegistration__Manual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowedOrigins(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

    }

    public class ICoreWebView2DOMContentLoadedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DOMContentLoadedEventArgs }

        internal func get_NavigationIdImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DOMContentLoadedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigationId(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2DevToolsProtocolEventReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceivedEventArgs }

        internal func get_ParameterObjectAsJsonImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ParameterObjectAsJson(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2DevToolsProtocolEventReceivedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceivedEventArgs2 }

        internal func get_SessionIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceivedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SessionId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2DevToolsProtocolEventReceiver: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceiver }

        internal func add_DevToolsProtocolEventReceivedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2DevToolsProtocolEventReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DevToolsProtocolEventReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DevToolsProtocolEventReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DevToolsProtocolEventReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DevToolsProtocolEventReceived(pThis, token))
            }
        }

    }

    public class ICoreWebView2DispatchAdapter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DispatchAdapter }

        open func WrapNamedObjectImpl(_ name: String, _ adapter: WebView2Core.AnyICoreWebView2DispatchAdapter?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _name = try! HString(name)
                let adapterWrapper = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterWrapper(adapter)
                let _adapter = try! adapterWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DispatchAdapter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WrapNamedObject(pThis, _name.get(), _adapter, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func WrapObjectImpl(_ unwrapped: Any?, _ adapter: WebView2Core.AnyICoreWebView2DispatchAdapter?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let unwrappedWrapper = __ABI_.AnyWrapper(unwrapped)
                let _unwrapped = try! unwrappedWrapper?.toABI { $0 }
                let adapterWrapper = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterWrapper(adapter)
                let _adapter = try! adapterWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DispatchAdapter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.WrapObject(pThis, _unwrapped, _adapter, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func UnwrapObjectImpl(_ wrapped: Any?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let wrappedWrapper = __ABI_.AnyWrapper(wrapped)
                let _wrapped = try! wrappedWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DispatchAdapter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.UnwrapObject(pThis, _wrapped, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func CleanImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DispatchAdapter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clean(pThis))
            }
        }

    }

    internal static var ICoreWebView2DispatchAdapterVTable: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DispatchAdapterVtbl = .init(
        QueryInterface: { ICoreWebView2DispatchAdapterWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICoreWebView2DispatchAdapterWrapper.addRef($0) },
        Release: { ICoreWebView2DispatchAdapterWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        WrapNamedObject: {
            do {
                guard let __unwrapped__instance = ICoreWebView2DispatchAdapterWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let name: String = .init(from: $1)
                let adapter: WebView2Core.AnyICoreWebView2DispatchAdapter? = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterWrapper.unwrapFrom(abi: ComPtr($2))
                let result = try __unwrapped__instance.wrapNamedObject(name, adapter)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        WrapObject: {
            do {
                guard let __unwrapped__instance = ICoreWebView2DispatchAdapterWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unwrapped: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let adapter: WebView2Core.AnyICoreWebView2DispatchAdapter? = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterWrapper.unwrapFrom(abi: ComPtr($2))
                let result = try __unwrapped__instance.wrapObject(unwrapped, adapter)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        UnwrapObject: {
            do {
                guard let __unwrapped__instance = ICoreWebView2DispatchAdapterWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let wrapped: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.unwrapObject(wrapped)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Clean: {
            do {
                guard let __unwrapped__instance = ICoreWebView2DispatchAdapterWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.clean()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ICoreWebView2DispatchAdapterWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterBridge>
    public class ICoreWebView2DownloadOperation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation }

        internal func get_UriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ContentDispositionImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentDisposition(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_MimeTypeImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MimeType(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_TotalBytesToReceiveImpl() throws -> Int64 {
            var value: INT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TotalBytesToReceive(pThis, &value))
            }
            return value
        }

        internal func get_BytesReceivedImpl() throws -> Int64 {
            var value: INT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesReceived(pThis, &value))
            }
            return value
        }

        internal func get_EstimatedEndTimeImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EstimatedEndTime(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ResultFilePathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResultFilePath(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_StateImpl() throws -> WebView2Core.CoreWebView2DownloadState {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, &value))
            }
            return value
        }

        internal func get_InterruptReasonImpl() throws -> WebView2Core.CoreWebView2DownloadInterruptReason {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DownloadInterruptReason = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterruptReason(pThis, &value))
            }
            return value
        }

        internal func get_CanResumeImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanResume(pThis, &value))
            }
            return .init(from: value)
        }

        internal func add_BytesReceivedChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2DownloadOperation?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2DownloadOperation_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BytesReceivedChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BytesReceivedChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BytesReceivedChanged(pThis, token))
            }
        }

        internal func add_EstimatedEndTimeChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2DownloadOperation?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2DownloadOperation_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EstimatedEndTimeChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_EstimatedEndTimeChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EstimatedEndTimeChanged(pThis, token))
            }
        }

        internal func add_StateChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2DownloadOperation?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2DownloadOperation_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StateChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_StateChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StateChanged(pThis, token))
            }
        }

        internal func CancelImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Cancel(pThis))
            }
        }

        internal func PauseImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Pause(pThis))
            }
        }

        internal func ResumeImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Resume(pThis))
            }
        }

    }

    public class ICoreWebView2DownloadStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs }

        internal func get_DownloadOperationImpl() throws -> WebView2Core.CoreWebView2DownloadOperation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DownloadOperation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func get_ResultFilePathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResultFilePath(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ResultFilePathImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ResultFilePath(pThis, _value.get()))
            }
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2DownloadStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2Environment: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment }

        internal func get_BrowserVersionStringImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BrowserVersionString(pThis, &value))
            }
            return .init(from: value)
        }

        internal func add_NewBrowserVersionAvailableImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Environment?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Environment_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NewBrowserVersionAvailable(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NewBrowserVersionAvailableImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NewBrowserVersionAvailable(pThis, token))
            }
        }

        internal func CreateCoreWebView2ControllerAsyncImpl(_ ParentWindow: WebView2Core.CoreWebView2ControllerWindowReference?) throws -> WindowsFoundation.AnyIAsyncOperation<WebView2Core.CoreWebView2Controller?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCoreWebView2ControllerAsync(pThis, RawPointer(ParentWindow), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ControllerWrapper.unwrapFrom(abi: operation)
        }

        internal func CreateWebResourceResponseImpl(_ Content: UWP.AnyIRandomAccessStream?, _ StatusCode: Int32, _ ReasonPhrase: String, _ Headers: String) throws -> WebView2Core.CoreWebView2WebResourceResponse? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let ContentWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(Content)
                let _Content = try! ContentWrapper?.toABI { $0 }
                let _ReasonPhrase = try! HString(ReasonPhrase)
                let _Headers = try! HString(Headers)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWebResourceResponse(pThis, _Content, StatusCode, _ReasonPhrase.get(), _Headers.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2Environment10: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment10 }

        internal func CreateCoreWebView2ControllerOptionsImpl() throws -> WebView2Core.CoreWebView2ControllerOptions? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment10.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCoreWebView2ControllerOptions(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2Environment11: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment11 }

        internal func get_FailureReportFolderPathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment11.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FailureReportFolderPath(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2Environment12: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment12 }

        internal func CreateSharedBufferImpl(_ Size: UInt64) throws -> WebView2Core.CoreWebView2SharedBuffer? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment12.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSharedBuffer(pThis, Size, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2Environment13: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment13 }

        internal func GetProcessExtendedInfosAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<WebView2Core.CoreWebView2ProcessExtendedInfo?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment13.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetProcessExtendedInfosAsync(pThis, &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ProcessExtendedInfoWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2Environment2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment2 }

        internal func CreateWebResourceRequestImpl(_ uri: String, _ Method: String, _ postData: UWP.AnyIRandomAccessStream?, _ Headers: String) throws -> WebView2Core.CoreWebView2WebResourceRequest? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _uri = try! HString(uri)
                let _Method = try! HString(Method)
                let postDataWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(postData)
                let _postData = try! postDataWrapper?.toABI { $0 }
                let _Headers = try! HString(Headers)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWebResourceRequest(pThis, _uri.get(), _Method.get(), _postData, _Headers.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2Environment3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment3 }

        internal func CreateCoreWebView2CompositionControllerAsyncImpl(_ ParentWindow: WebView2Core.CoreWebView2ControllerWindowReference?) throws -> WindowsFoundation.AnyIAsyncOperation<WebView2Core.CoreWebView2CompositionController?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCoreWebView2CompositionControllerAsync(pThis, RawPointer(ParentWindow), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2CompositionControllerWrapper.unwrapFrom(abi: operation)
        }

        internal func CreateCoreWebView2PointerInfoImpl() throws -> WebView2Core.CoreWebView2PointerInfo? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCoreWebView2PointerInfo(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2Environment4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment4 }

    }

    public class ICoreWebView2Environment5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment5 }

        internal func add_BrowserProcessExitedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Environment?, WebView2Core.CoreWebView2BrowserProcessExitedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Environment___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2BrowserProcessExitedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BrowserProcessExited(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BrowserProcessExitedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BrowserProcessExited(pThis, token))
            }
        }

    }

    public class ICoreWebView2Environment6: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment6 }

        internal func CreatePrintSettingsImpl() throws -> WebView2Core.CoreWebView2PrintSettings? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment6.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePrintSettings(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2Environment7: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment7 }

        internal func get_UserDataFolderImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment7.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserDataFolder(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2Environment8: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment8 }

        internal func add_ProcessInfosChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Environment?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Environment_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ProcessInfosChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ProcessInfosChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ProcessInfosChanged(pThis, token))
            }
        }

        internal func GetProcessInfosImpl() throws -> WindowsFoundation.AnyIVectorView<WebView2Core.CoreWebView2ProcessInfo?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment8.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetProcessInfos(pThis, &resultAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ProcessInfoWrapper.unwrapFrom(abi: result)
        }

    }

    public class ICoreWebView2Environment9: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment9 }

        internal func CreateContextMenuItemImpl(_ Label: String, _ iconStream: UWP.AnyIRandomAccessStream?, _ Kind: WebView2Core.CoreWebView2ContextMenuItemKind) throws -> WebView2Core.CoreWebView2ContextMenuItem? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _Label = try! HString(Label)
                let iconStreamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(iconStream)
                let _iconStream = try! iconStreamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment9.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateContextMenuItem(pThis, _Label.get(), _iconStream, Kind, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2EnvironmentOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions }

        internal func get_AdditionalBrowserArgumentsImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AdditionalBrowserArguments(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AdditionalBrowserArgumentsImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AdditionalBrowserArguments(pThis, _value.get()))
            }
        }

        internal func get_LanguageImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LanguageImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, _value.get()))
            }
        }

        internal func get_TargetCompatibleBrowserVersionImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetCompatibleBrowserVersion(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TargetCompatibleBrowserVersionImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TargetCompatibleBrowserVersion(pThis, _value.get()))
            }
        }

        internal func get_AllowSingleSignOnUsingOSPrimaryAccountImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowSingleSignOnUsingOSPrimaryAccount(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AllowSingleSignOnUsingOSPrimaryAccountImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowSingleSignOnUsingOSPrimaryAccount(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2EnvironmentOptions2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions2 }

        internal func get_ExclusiveUserDataFolderAccessImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExclusiveUserDataFolderAccess(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ExclusiveUserDataFolderAccessImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExclusiveUserDataFolderAccess(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2EnvironmentOptions3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions3 }

        internal func get_IsCustomCrashReportingEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCustomCrashReportingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsCustomCrashReportingEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsCustomCrashReportingEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2EnvironmentOptions4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions4 }

    }

    public class ICoreWebView2EnvironmentOptions5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions5 }

        internal func get_EnableTrackingPreventionImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnableTrackingPrevention(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_EnableTrackingPreventionImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnableTrackingPrevention(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2EnvironmentOptions6: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions6 }

        internal func get_AreBrowserExtensionsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreBrowserExtensionsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AreBrowserExtensionsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AreBrowserExtensionsEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2EnvironmentOptions_Manual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions__Manual }

    }

    public class ICoreWebView2EnvironmentOptions_Manual3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions__Manual3 }

        internal func get_CustomSchemeRegistrationsImpl() throws -> WindowsFoundation.AnyIVector<WebView2Core.CoreWebView2CustomSchemeRegistration?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions__Manual3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomSchemeRegistrations(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2CustomSchemeRegistrationWrapper.unwrapFrom(abi: value)
        }

        internal func put_CustomSchemeRegistrationsImpl(_ value: WindowsFoundation.AnyIVector<WebView2Core.CoreWebView2CustomSchemeRegistration?>?) throws {
            let valueWrapper = WebView2Core.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2CustomSchemeRegistrationWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentOptions__Manual3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomSchemeRegistrations(pThis, _value))
            }
        }

    }

    public class ICoreWebView2EnvironmentStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentStatics }

        internal func CreateAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WebView2Core.CoreWebView2Environment?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAsync(pThis, &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2EnvironmentWrapper.unwrapFrom(abi: operation)
        }

        internal func CreateWithOptionsAsyncImpl(_ browserExecutableFolder: String, _ userDataFolder: String, _ options: WebView2Core.CoreWebView2EnvironmentOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<WebView2Core.CoreWebView2Environment?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _browserExecutableFolder = try! HString(browserExecutableFolder)
                let _userDataFolder = try! HString(userDataFolder)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithOptionsAsync(pThis, _browserExecutableFolder.get(), _userDataFolder.get(), RawPointer(options), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2EnvironmentWrapper.unwrapFrom(abi: operation)
        }

        internal func GetAvailableBrowserVersionStringImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAvailableBrowserVersionString(pThis, &result))
            }
            return .init(from: result)
        }

        internal func GetAvailableBrowserVersionString2Impl(_ browserExecutableFolder: String) throws -> String {
            var result: HSTRING?
            let _browserExecutableFolder = try! HString(browserExecutableFolder)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAvailableBrowserVersionString2(pThis, _browserExecutableFolder.get(), &result))
            }
            return .init(from: result)
        }

        internal func CompareBrowserVersionStringImpl(_ browserVersionString1: String, _ browserVersionString2: String) throws -> Int32 {
            var result: INT32 = 0
            let _browserVersionString1 = try! HString(browserVersionString1)
            let _browserVersionString2 = try! HString(browserVersionString2)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2EnvironmentStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompareBrowserVersionString(pThis, _browserVersionString1.get(), _browserVersionString2.get(), &result))
            }
            return result
        }

    }

    public class ICoreWebView2Environment_Manual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment__Manual }

        internal func CreateCoreWebView2ControllerAsyncImpl(_ ParentWindow: WebView2Core.CoreWebView2ControllerWindowReference?, _ options: WebView2Core.CoreWebView2ControllerOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<WebView2Core.CoreWebView2Controller?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment__Manual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCoreWebView2ControllerAsync(pThis, RawPointer(ParentWindow), RawPointer(options), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ControllerWrapper.unwrapFrom(abi: operation)
        }

        internal func CreateCoreWebView2CompositionControllerAsyncImpl(_ ParentWindow: WebView2Core.CoreWebView2ControllerWindowReference?, _ options: WebView2Core.CoreWebView2ControllerOptions?) throws -> WindowsFoundation.AnyIAsyncOperation<WebView2Core.CoreWebView2CompositionController?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Environment__Manual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCoreWebView2CompositionControllerAsync(pThis, RawPointer(ParentWindow), RawPointer(options), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2CompositionControllerWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2File: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2File }

        internal func get_PathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2File.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Path(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2Frame: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func add_NameChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Frame?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Frame_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NameChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NameChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NameChanged(pThis, token))
            }
        }

        internal func add_DestroyedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Frame?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Frame_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Destroyed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DestroyedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Destroyed(pThis, token))
            }
        }

        internal func RemoveHostObjectFromScriptImpl(_ name: String) throws {
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveHostObjectFromScript(pThis, _name.get()))
            }
        }

        internal func IsDestroyedImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDestroyed(pThis, &result))
            }
            return result
        }

    }

    public class ICoreWebView2Frame2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2 }

        internal func add_NavigationStartingImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Frame?, WebView2Core.CoreWebView2NavigationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Frame___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NavigationStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NavigationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigationStarting(pThis, token))
            }
        }

        internal func add_ContentLoadingImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Frame?, WebView2Core.CoreWebView2ContentLoadingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Frame___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ContentLoadingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContentLoading(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ContentLoadingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContentLoading(pThis, token))
            }
        }

        internal func add_NavigationCompletedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Frame?, WebView2Core.CoreWebView2NavigationCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Frame___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NavigationCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_NavigationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigationCompleted(pThis, token))
            }
        }

        internal func add_DOMContentLoadedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Frame?, WebView2Core.CoreWebView2DOMContentLoadedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Frame___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2DOMContentLoadedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DOMContentLoaded(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DOMContentLoadedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DOMContentLoaded(pThis, token))
            }
        }

        internal func add_WebMessageReceivedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Frame?, WebView2Core.CoreWebView2WebMessageReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Frame___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2WebMessageReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_WebMessageReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_WebMessageReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_WebMessageReceived(pThis, token))
            }
        }

        internal func ExecuteScriptAsyncImpl(_ javaScript: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _javaScript = try! HString(javaScript)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ExecuteScriptAsync(pThis, _javaScript.get(), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: operation)
        }

        internal func PostWebMessageAsJsonImpl(_ webMessageAsJson: String) throws {
            let _webMessageAsJson = try! HString(webMessageAsJson)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PostWebMessageAsJson(pThis, _webMessageAsJson.get()))
            }
        }

        internal func PostWebMessageAsStringImpl(_ webMessageAsString: String) throws {
            let _webMessageAsString = try! HString(webMessageAsString)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PostWebMessageAsString(pThis, _webMessageAsString.get()))
            }
        }

    }

    public class ICoreWebView2Frame3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame3 }

        internal func add_PermissionRequestedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Frame?, WebView2Core.CoreWebView2PermissionRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Frame___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2PermissionRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PermissionRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PermissionRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PermissionRequested(pThis, token))
            }
        }

    }

    public class ICoreWebView2Frame4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame4 }

        internal func PostSharedBufferToScriptImpl(_ sharedBuffer: WebView2Core.CoreWebView2SharedBuffer?, _ access: WebView2Core.CoreWebView2SharedBufferAccess, _ additionalDataAsJson: String) throws {
            let _additionalDataAsJson = try! HString(additionalDataAsJson)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PostSharedBufferToScript(pThis, RawPointer(sharedBuffer), access, _additionalDataAsJson.get()))
            }
        }

    }

    public class ICoreWebView2Frame5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame5 }

        internal func get_FrameIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Frame5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameId(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2FrameCreatedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameCreatedEventArgs }

        internal func get_FrameImpl() throws -> WebView2Core.CoreWebView2Frame? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameCreatedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Frame(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICoreWebView2FrameInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SourceImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2FrameInfo2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo2 }

        internal func get_ParentFrameInfoImpl() throws -> WebView2Core.CoreWebView2FrameInfo? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ParentFrameInfo(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_FrameIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameId(pThis, &value))
            }
            return value
        }

        internal func get_FrameKindImpl() throws -> WebView2Core.CoreWebView2FrameKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2FrameKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2FrameInfo2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameKind(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2HttpHeadersCollectionIterator: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpHeadersCollectionIterator }

    }

    public class ICoreWebView2HttpRequestHeaders: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpRequestHeaders }

        internal func GetHeaderImpl(_ name: String) throws -> String {
            var result: HSTRING?
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpRequestHeaders.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetHeader(pThis, _name.get(), &result))
            }
            return .init(from: result)
        }

        internal func GetHeadersImpl(_ name: String) throws -> WebView2Core.CoreWebView2HttpHeadersCollectionIterator? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpRequestHeaders.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetHeaders(pThis, _name.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func ContainsImpl(_ name: String) throws -> Bool {
            var result: boolean = 0
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpRequestHeaders.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Contains(pThis, _name.get(), &result))
            }
            return .init(from: result)
        }

        internal func SetHeaderImpl(_ name: String, _ value: String) throws {
            let _name = try! HString(name)
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpRequestHeaders.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetHeader(pThis, _name.get(), _value.get()))
            }
        }

        internal func RemoveHeaderImpl(_ name: String) throws {
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpRequestHeaders.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveHeader(pThis, _name.get()))
            }
        }

    }

    public class ICoreWebView2HttpResponseHeaders: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpResponseHeaders }

        internal func AppendHeaderImpl(_ name: String, _ value: String) throws {
            let _name = try! HString(name)
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpResponseHeaders.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AppendHeader(pThis, _name.get(), _value.get()))
            }
        }

        internal func ContainsImpl(_ name: String) throws -> Bool {
            var result: boolean = 0
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpResponseHeaders.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Contains(pThis, _name.get(), &result))
            }
            return .init(from: result)
        }

        internal func GetHeaderImpl(_ name: String) throws -> String {
            var result: HSTRING?
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpResponseHeaders.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetHeader(pThis, _name.get(), &result))
            }
            return .init(from: result)
        }

        internal func GetHeadersImpl(_ name: String) throws -> WebView2Core.CoreWebView2HttpHeadersCollectionIterator? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2HttpResponseHeaders.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetHeaders(pThis, _name.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2LaunchingExternalUriSchemeEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2LaunchingExternalUriSchemeEventArgs }

        internal func get_UriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2LaunchingExternalUriSchemeEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_InitiatingOriginImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2LaunchingExternalUriSchemeEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InitiatingOrigin(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsUserInitiatedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2LaunchingExternalUriSchemeEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsUserInitiated(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2LaunchingExternalUriSchemeEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2LaunchingExternalUriSchemeEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2LaunchingExternalUriSchemeEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2MoveFocusRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2MoveFocusRequestedEventArgs }

        internal func get_ReasonImpl() throws -> WebView2Core.CoreWebView2MoveFocusReason {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MoveFocusReason = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2MoveFocusRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2MoveFocusRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2MoveFocusRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2NavigationCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationCompletedEventArgs }

        internal func get_IsSuccessImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationCompletedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSuccess(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_WebErrorStatusImpl() throws -> WebView2Core.CoreWebView2WebErrorStatus {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationCompletedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WebErrorStatus(pThis, &value))
            }
            return value
        }

        internal func get_NavigationIdImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationCompletedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigationId(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2NavigationCompletedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationCompletedEventArgs2 }

        internal func get_HttpStatusCodeImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationCompletedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HttpStatusCode(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2NavigationStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs }

        internal func get_UriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsUserInitiatedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsUserInitiated(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsRedirectedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRedirected(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_RequestHeadersImpl() throws -> WebView2Core.CoreWebView2HttpRequestHeaders? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestHeaders(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func get_NavigationIdImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigationId(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2NavigationStartingEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs2 }

        internal func get_AdditionalAllowedFrameAncestorsImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AdditionalAllowedFrameAncestors(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AdditionalAllowedFrameAncestorsImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AdditionalAllowedFrameAncestors(pThis, _value.get()))
            }
        }

    }

    public class ICoreWebView2NavigationStartingEventArgs3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs3 }

        internal func get_NavigationKindImpl() throws -> WebView2Core.CoreWebView2NavigationKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2NavigationKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NavigationStartingEventArgs3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigationKind(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2NewWindowRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs }

        internal func get_UriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_NewWindowImpl() throws -> WebView2Core.CoreWebView2? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewWindow(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_NewWindowImpl(_ value: WebView2Core.CoreWebView2?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NewWindow(pThis, RawPointer(value)))
            }
        }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal func get_IsUserInitiatedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsUserInitiated(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_WindowFeaturesImpl() throws -> WebView2Core.CoreWebView2WindowFeatures? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_WindowFeatures(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2NewWindowRequestedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs2 }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2NewWindowRequestedEventArgs3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs3 }

        internal func get_OriginalSourceFrameInfoImpl() throws -> WebView2Core.CoreWebView2FrameInfo? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2NewWindowRequestedEventArgs3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OriginalSourceFrameInfo(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICoreWebView2PermissionRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs }

        internal func get_UriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_PermissionKindImpl() throws -> WebView2Core.CoreWebView2PermissionKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PermissionKind(pThis, &value))
            }
            return value
        }

        internal func get_IsUserInitiatedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsUserInitiated(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_StateImpl() throws -> WebView2Core.CoreWebView2PermissionState {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, &value))
            }
            return value
        }

        internal func put_StateImpl(_ value: WebView2Core.CoreWebView2PermissionState) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_State(pThis, value))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2PermissionRequestedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs2 }

        internal func get_HandledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HandledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2PermissionRequestedEventArgs3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs3 }

        internal func get_SavesInProfileImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SavesInProfile(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SavesInProfileImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionRequestedEventArgs3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SavesInProfile(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2PermissionSetting: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionSetting }

        internal func get_PermissionKindImpl() throws -> WebView2Core.CoreWebView2PermissionKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionSetting.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PermissionKind(pThis, &value))
            }
            return value
        }

        internal func get_PermissionOriginImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionSetting.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PermissionOrigin(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_PermissionStateImpl() throws -> WebView2Core.CoreWebView2PermissionState {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PermissionState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PermissionSetting.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PermissionState(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2PointerInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo }

        internal func get_PointerKindImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerKind(pThis, &value))
            }
            return value
        }

        internal func put_PointerKindImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PointerKind(pThis, value))
            }
        }

        internal func get_PointerIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerId(pThis, &value))
            }
            return value
        }

        internal func put_PointerIdImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PointerId(pThis, value))
            }
        }

        internal func get_FrameIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameId(pThis, &value))
            }
            return value
        }

        internal func put_FrameIdImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FrameId(pThis, value))
            }
        }

        internal func get_PointerFlagsImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerFlags(pThis, &value))
            }
            return value
        }

        internal func put_PointerFlagsImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PointerFlags(pThis, value))
            }
        }

        internal func get_PointerDeviceRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PointerDeviceRectImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PointerDeviceRect(pThis, .from(swift: value)))
            }
        }

        internal func get_DisplayRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_DisplayRectImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayRect(pThis, .from(swift: value)))
            }
        }

        internal func get_PixelLocationImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelLocation(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PixelLocationImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PixelLocation(pThis, .from(swift: value)))
            }
        }

        internal func get_HimetricLocationImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HimetricLocation(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_HimetricLocationImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HimetricLocation(pThis, .from(swift: value)))
            }
        }

        internal func get_PixelLocationRawImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelLocationRaw(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PixelLocationRawImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PixelLocationRaw(pThis, .from(swift: value)))
            }
        }

        internal func get_HimetricLocationRawImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HimetricLocationRaw(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_HimetricLocationRawImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HimetricLocationRaw(pThis, .from(swift: value)))
            }
        }

        internal func get_TimeImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Time(pThis, &value))
            }
            return value
        }

        internal func put_TimeImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Time(pThis, value))
            }
        }

        internal func get_HistoryCountImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HistoryCount(pThis, &value))
            }
            return value
        }

        internal func put_HistoryCountImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HistoryCount(pThis, value))
            }
        }

        internal func get_InputDataImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputData(pThis, &value))
            }
            return value
        }

        internal func put_InputDataImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InputData(pThis, value))
            }
        }

        internal func get_KeyStatesImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyStates(pThis, &value))
            }
            return value
        }

        internal func put_KeyStatesImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyStates(pThis, value))
            }
        }

        internal func get_PerformanceCountImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PerformanceCount(pThis, &value))
            }
            return value
        }

        internal func put_PerformanceCountImpl(_ value: UInt64) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PerformanceCount(pThis, value))
            }
        }

        internal func get_ButtonChangeKindImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonChangeKind(pThis, &value))
            }
            return value
        }

        internal func put_ButtonChangeKindImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonChangeKind(pThis, value))
            }
        }

        internal func get_PenFlagsImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PenFlags(pThis, &value))
            }
            return value
        }

        internal func put_PenFlagsImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PenFlags(pThis, value))
            }
        }

        internal func get_PenMaskImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PenMask(pThis, &value))
            }
            return value
        }

        internal func put_PenMaskImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PenMask(pThis, value))
            }
        }

        internal func get_PenPressureImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PenPressure(pThis, &value))
            }
            return value
        }

        internal func put_PenPressureImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PenPressure(pThis, value))
            }
        }

        internal func get_PenRotationImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PenRotation(pThis, &value))
            }
            return value
        }

        internal func put_PenRotationImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PenRotation(pThis, value))
            }
        }

        internal func get_PenTiltXImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PenTiltX(pThis, &value))
            }
            return value
        }

        internal func put_PenTiltXImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PenTiltX(pThis, value))
            }
        }

        internal func get_PenTiltYImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PenTiltY(pThis, &value))
            }
            return value
        }

        internal func put_PenTiltYImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PenTiltY(pThis, value))
            }
        }

        internal func get_TouchFlagsImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TouchFlags(pThis, &value))
            }
            return value
        }

        internal func put_TouchFlagsImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TouchFlags(pThis, value))
            }
        }

        internal func get_TouchMaskImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TouchMask(pThis, &value))
            }
            return value
        }

        internal func put_TouchMaskImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TouchMask(pThis, value))
            }
        }

        internal func get_TouchContactImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TouchContact(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_TouchContactImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TouchContact(pThis, .from(swift: value)))
            }
        }

        internal func get_TouchContactRawImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TouchContactRaw(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_TouchContactRawImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TouchContactRaw(pThis, .from(swift: value)))
            }
        }

        internal func get_TouchOrientationImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TouchOrientation(pThis, &value))
            }
            return value
        }

        internal func put_TouchOrientationImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TouchOrientation(pThis, value))
            }
        }

        internal func get_TouchPressureImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TouchPressure(pThis, &value))
            }
            return value
        }

        internal func put_TouchPressureImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PointerInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TouchPressure(pThis, value))
            }
        }

    }

    public class ICoreWebView2PrintSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings }

        internal func get_OrientationImpl() throws -> WebView2Core.CoreWebView2PrintOrientation {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

        internal func put_OrientationImpl(_ value: WebView2Core.CoreWebView2PrintOrientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
            }
        }

        internal func get_ScaleFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScaleFactor(pThis, &value))
            }
            return value
        }

        internal func put_ScaleFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ScaleFactor(pThis, value))
            }
        }

        internal func get_PageWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PageWidth(pThis, &value))
            }
            return value
        }

        internal func put_PageWidthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PageWidth(pThis, value))
            }
        }

        internal func get_PageHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PageHeight(pThis, &value))
            }
            return value
        }

        internal func put_PageHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PageHeight(pThis, value))
            }
        }

        internal func get_MarginTopImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MarginTop(pThis, &value))
            }
            return value
        }

        internal func put_MarginTopImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MarginTop(pThis, value))
            }
        }

        internal func get_MarginBottomImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MarginBottom(pThis, &value))
            }
            return value
        }

        internal func put_MarginBottomImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MarginBottom(pThis, value))
            }
        }

        internal func get_MarginLeftImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MarginLeft(pThis, &value))
            }
            return value
        }

        internal func put_MarginLeftImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MarginLeft(pThis, value))
            }
        }

        internal func get_MarginRightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MarginRight(pThis, &value))
            }
            return value
        }

        internal func put_MarginRightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MarginRight(pThis, value))
            }
        }

        internal func get_ShouldPrintBackgroundsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldPrintBackgrounds(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShouldPrintBackgroundsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShouldPrintBackgrounds(pThis, .init(from: value)))
            }
        }

        internal func get_ShouldPrintSelectionOnlyImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldPrintSelectionOnly(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShouldPrintSelectionOnlyImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShouldPrintSelectionOnly(pThis, .init(from: value)))
            }
        }

        internal func get_ShouldPrintHeaderAndFooterImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldPrintHeaderAndFooter(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ShouldPrintHeaderAndFooterImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShouldPrintHeaderAndFooter(pThis, .init(from: value)))
            }
        }

        internal func get_HeaderTitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTitle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_HeaderTitleImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTitle(pThis, _value.get()))
            }
        }

        internal func get_FooterUriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterUri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_FooterUriImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FooterUri(pThis, _value.get()))
            }
        }

    }

    public class ICoreWebView2PrintSettings2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2 }

        internal func get_PageRangesImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PageRanges(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PageRangesImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PageRanges(pThis, _value.get()))
            }
        }

        internal func get_PagesPerSideImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PagesPerSide(pThis, &value))
            }
            return value
        }

        internal func put_PagesPerSideImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PagesPerSide(pThis, value))
            }
        }

        internal func get_CopiesImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Copies(pThis, &value))
            }
            return value
        }

        internal func put_CopiesImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Copies(pThis, value))
            }
        }

        internal func get_CollationImpl() throws -> WebView2Core.CoreWebView2PrintCollation {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintCollation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Collation(pThis, &value))
            }
            return value
        }

        internal func put_CollationImpl(_ value: WebView2Core.CoreWebView2PrintCollation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Collation(pThis, value))
            }
        }

        internal func get_ColorModeImpl() throws -> WebView2Core.CoreWebView2PrintColorMode {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintColorMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorMode(pThis, &value))
            }
            return value
        }

        internal func put_ColorModeImpl(_ value: WebView2Core.CoreWebView2PrintColorMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorMode(pThis, value))
            }
        }

        internal func get_DuplexImpl() throws -> WebView2Core.CoreWebView2PrintDuplex {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintDuplex = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Duplex(pThis, &value))
            }
            return value
        }

        internal func put_DuplexImpl(_ value: WebView2Core.CoreWebView2PrintDuplex) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Duplex(pThis, value))
            }
        }

        internal func get_MediaSizeImpl() throws -> WebView2Core.CoreWebView2PrintMediaSize {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PrintMediaSize = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaSize(pThis, &value))
            }
            return value
        }

        internal func put_MediaSizeImpl(_ value: WebView2Core.CoreWebView2PrintMediaSize) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MediaSize(pThis, value))
            }
        }

        internal func get_PrinterNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrinterName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_PrinterNameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrintSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrinterName(pThis, _value.get()))
            }
        }

    }

    public class ICoreWebView2PrivatePartial: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrivatePartial }

    }

    public class ICoreWebView2PrivatePartialController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrivatePartialController }

        internal func get_IsBrowserHitTransparentImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2PrivatePartialController.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBrowserHitTransparent(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2ProcessExtendedInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessExtendedInfo }

        internal func get_ProcessInfoImpl() throws -> WebView2Core.CoreWebView2ProcessInfo? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessExtendedInfo.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProcessInfo(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AssociatedFrameInfosImpl() throws -> WindowsFoundation.AnyIVectorView<WebView2Core.CoreWebView2FrameInfo?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessExtendedInfo.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AssociatedFrameInfos(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2FrameInfoWrapper.unwrapFrom(abi: value)
        }

    }

    public class ICoreWebView2ProcessFailedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs }

        internal func get_ProcessFailedKindImpl() throws -> WebView2Core.CoreWebView2ProcessFailedKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProcessFailedKind(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2ProcessFailedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs2 }

        internal func get_ReasonImpl() throws -> WebView2Core.CoreWebView2ProcessFailedReason {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessFailedReason = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

        internal func get_ExitCodeImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExitCode(pThis, &value))
            }
            return value
        }

        internal func get_ProcessDescriptionImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProcessDescription(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_FrameInfosForFailedProcessImpl() throws -> WindowsFoundation.AnyIVectorView<WebView2Core.CoreWebView2FrameInfo?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessFailedEventArgs2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameInfosForFailedProcess(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2FrameInfoWrapper.unwrapFrom(abi: value)
        }

    }

    public class ICoreWebView2ProcessInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessInfo }

        internal func get_ProcessIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProcessId(pThis, &value))
            }
            return value
        }

        internal func get_KindImpl() throws -> WebView2Core.CoreWebView2ProcessKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ProcessKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ProcessInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2Profile: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile }

        internal func get_ProfileNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfileName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsInPrivateModeEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInPrivateModeEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ProfilePathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfilePath(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DefaultDownloadFolderPathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultDownloadFolderPath(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_DefaultDownloadFolderPathImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultDownloadFolderPath(pThis, _value.get()))
            }
        }

        internal func get_PreferredColorSchemeImpl() throws -> WebView2Core.CoreWebView2PreferredColorScheme {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PreferredColorScheme = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredColorScheme(pThis, &value))
            }
            return value
        }

        internal func put_PreferredColorSchemeImpl(_ value: WebView2Core.CoreWebView2PreferredColorScheme) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredColorScheme(pThis, value))
            }
        }

    }

    public class ICoreWebView2Profile2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile2 }

        internal func ClearBrowsingDataAsyncImpl(_ dataKinds: WebView2Core.CoreWebView2BrowsingDataKinds) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ClearBrowsingDataAsync(pThis, dataKinds, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2Profile3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile3 }

        internal func get_PreferredTrackingPreventionLevelImpl() throws -> WebView2Core.CoreWebView2TrackingPreventionLevel {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2TrackingPreventionLevel = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredTrackingPreventionLevel(pThis, &value))
            }
            return value
        }

        internal func put_PreferredTrackingPreventionLevelImpl(_ value: WebView2Core.CoreWebView2TrackingPreventionLevel) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredTrackingPreventionLevel(pThis, value))
            }
        }

    }

    public class ICoreWebView2Profile4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile4 }

        internal func SetPermissionStateAsyncImpl(_ PermissionKind: WebView2Core.CoreWebView2PermissionKind, _ origin: String, _ State: WebView2Core.CoreWebView2PermissionState) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _origin = try! HString(origin)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetPermissionStateAsync(pThis, PermissionKind, _origin.get(), State, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2Profile5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile5 }

        internal func get_CookieManagerImpl() throws -> WebView2Core.CoreWebView2CookieManager? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile5.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CookieManager(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICoreWebView2Profile6: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile6 }

        internal func get_IsPasswordAutosaveEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPasswordAutosaveEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsPasswordAutosaveEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPasswordAutosaveEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsGeneralAutofillEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsGeneralAutofillEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsGeneralAutofillEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsGeneralAutofillEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2Profile7: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile7 }

        internal func AddBrowserExtensionAsyncImpl(_ extensionFolderPath: String) throws -> WindowsFoundation.AnyIAsyncOperation<WebView2Core.CoreWebView2BrowserExtension?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _extensionFolderPath = try! HString(extensionFolderPath)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile7.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AddBrowserExtensionAsync(pThis, _extensionFolderPath.get(), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2BrowserExtensionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2Profile8: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile8 }

        internal func add_DeletedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2Profile?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2Profile_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Deleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DeletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Deleted(pThis, token))
            }
        }

        internal func DeleteImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Profile8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Delete(pThis))
            }
        }

    }

    public class ICoreWebView2ScriptDialogOpeningEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs }

        internal func get_UriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_KindImpl() throws -> WebView2Core.CoreWebView2ScriptDialogKind {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ScriptDialogKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal func get_MessageImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Message(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DefaultTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ResultTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResultText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ResultTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ResultText(pThis, _value.get()))
            }
        }

        internal func AcceptImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Accept(pThis))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ScriptDialogOpeningEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2ServerCertificateErrorDetectedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ServerCertificateErrorDetectedEventArgs }

        internal func get_ErrorStatusImpl() throws -> WebView2Core.CoreWebView2WebErrorStatus {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebErrorStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ServerCertificateErrorDetectedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorStatus(pThis, &value))
            }
            return value
        }

        internal func get_RequestUriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ServerCertificateErrorDetectedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestUri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ServerCertificateImpl() throws -> WebView2Core.CoreWebView2Certificate? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ServerCertificateErrorDetectedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCertificate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ActionImpl() throws -> WebView2Core.CoreWebView2ServerCertificateErrorAction {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2ServerCertificateErrorAction = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ServerCertificateErrorDetectedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Action(pThis, &value))
            }
            return value
        }

        internal func put_ActionImpl(_ value: WebView2Core.CoreWebView2ServerCertificateErrorAction) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ServerCertificateErrorDetectedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Action(pThis, value))
            }
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2ServerCertificateErrorDetectedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2Settings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings }

        internal func get_IsScriptEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsScriptEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsScriptEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsScriptEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsWebMessageEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsWebMessageEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsWebMessageEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsWebMessageEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_AreDefaultScriptDialogsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreDefaultScriptDialogsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AreDefaultScriptDialogsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AreDefaultScriptDialogsEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsStatusBarEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsStatusBarEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsStatusBarEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsStatusBarEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_AreDevToolsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreDevToolsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AreDevToolsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AreDevToolsEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_AreDefaultContextMenusEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreDefaultContextMenusEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AreDefaultContextMenusEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AreDefaultContextMenusEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_AreHostObjectsAllowedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreHostObjectsAllowed(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AreHostObjectsAllowedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AreHostObjectsAllowed(pThis, .init(from: value)))
            }
        }

        internal func get_IsZoomControlEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomControlEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsZoomControlEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomControlEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsBuiltInErrorPageEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBuiltInErrorPageEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsBuiltInErrorPageEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsBuiltInErrorPageEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2Settings2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings2 }

        internal func get_UserAgentImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserAgent(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_UserAgentImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UserAgent(pThis, _value.get()))
            }
        }

    }

    public class ICoreWebView2Settings3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings3 }

        internal func get_AreBrowserAcceleratorKeysEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreBrowserAcceleratorKeysEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AreBrowserAcceleratorKeysEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AreBrowserAcceleratorKeysEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2Settings4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings4 }

        internal func get_IsPasswordAutosaveEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPasswordAutosaveEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsPasswordAutosaveEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPasswordAutosaveEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsGeneralAutofillEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsGeneralAutofillEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsGeneralAutofillEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsGeneralAutofillEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2Settings5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings5 }

        internal func get_IsPinchZoomEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPinchZoomEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsPinchZoomEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPinchZoomEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2Settings6: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings6 }

        internal func get_IsSwipeNavigationEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSwipeNavigationEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsSwipeNavigationEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSwipeNavigationEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2Settings7: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings7 }

        internal func get_HiddenPdfToolbarItemsImpl() throws -> WebView2Core.CoreWebView2PdfToolbarItems {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PdfToolbarItems = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings7.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HiddenPdfToolbarItems(pThis, &value))
            }
            return value
        }

        internal func put_HiddenPdfToolbarItemsImpl(_ value: WebView2Core.CoreWebView2PdfToolbarItems) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings7.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HiddenPdfToolbarItems(pThis, value))
            }
        }

    }

    public class ICoreWebView2Settings8: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings8 }

        internal func get_IsReputationCheckingRequiredImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsReputationCheckingRequired(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsReputationCheckingRequiredImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsReputationCheckingRequired(pThis, .init(from: value)))
            }
        }

    }

    public class ICoreWebView2Settings_Manual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings__Manual }

        internal func get_HostObjectDispatchAdapterImpl() throws -> WebView2Core.AnyICoreWebView2DispatchAdapter? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings__Manual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HostObjectDispatchAdapter(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterWrapper.unwrapFrom(abi: value)
        }

        internal func put_HostObjectDispatchAdapterImpl(_ value: WebView2Core.AnyICoreWebView2DispatchAdapter?) throws {
            let valueWrapper = __ABI_Microsoft_Web_WebView2_Core.ICoreWebView2DispatchAdapterWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2Settings__Manual.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HostObjectDispatchAdapter(pThis, _value))
            }
        }

    }

    public class ICoreWebView2SharedBuffer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SharedBuffer }

        internal func get_SizeImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SharedBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return value
        }

        internal func OpenStreamImpl() throws -> UWP.AnyIRandomAccessStream? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SharedBuffer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OpenStream(pThis, &resultAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: result)
        }

    }

    public class ICoreWebView2SharedBuffer_Manual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SharedBuffer__Manual }

        internal func get_BufferImpl() throws -> WindowsFoundation.AnyIMemoryBufferReference? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SharedBuffer__Manual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Buffer(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Foundation.IMemoryBufferReferenceWrapper.unwrapFrom(abi: value)
        }

    }

    public class ICoreWebView2SourceChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SourceChangedEventArgs }

        internal func get_IsNewDocumentImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2SourceChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsNewDocument(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2WebMessageReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebMessageReceivedEventArgs }

        internal func get_SourceImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebMessageReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_WebMessageAsJsonImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebMessageReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WebMessageAsJson(pThis, &value))
            }
            return .init(from: value)
        }

        internal func TryGetWebMessageAsStringImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebMessageReceivedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryGetWebMessageAsString(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class ICoreWebView2WebMessageReceivedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebMessageReceivedEventArgs2 }

        internal func get_AdditionalObjectsImpl() throws -> WindowsFoundation.AnyIVectorView<Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebMessageReceivedEventArgs2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AdditionalObjects(pThis, &valueAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIVectorView_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

    }

    public class ICoreWebView2WebResourceRequest: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest }

        internal func get_UriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_UriImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Uri(pThis, _value.get()))
            }
        }

        internal func get_MethodImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Method(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_MethodImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Method(pThis, _value.get()))
            }
        }

        internal func get_ContentImpl() throws -> UWP.AnyIRandomAccessStream? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: value)
        }

        internal func put_ContentImpl(_ value: UWP.AnyIRandomAccessStream?) throws {
            let valueWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, _value))
            }
        }

        internal func get_HeadersImpl() throws -> WebView2Core.CoreWebView2HttpRequestHeaders? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Headers(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICoreWebView2WebResourceRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequestedEventArgs }

        internal func get_RequestImpl() throws -> WebView2Core.CoreWebView2WebResourceRequest? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ResponseImpl() throws -> WebView2Core.CoreWebView2WebResourceResponse? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Response(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ResponseImpl(_ value: WebView2Core.CoreWebView2WebResourceResponse?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Response(pThis, RawPointer(value)))
            }
        }

        internal func get_ResourceContextImpl() throws -> WebView2Core.CoreWebView2WebResourceContext {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2WebResourceContext = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequestedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResourceContext(pThis, &value))
            }
            return value
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICoreWebView2WebResourceResponse: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse }

        internal func get_ContentImpl() throws -> UWP.AnyIRandomAccessStream? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: value)
        }

        internal func put_ContentImpl(_ value: UWP.AnyIRandomAccessStream?) throws {
            let valueWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, _value))
            }
        }

        internal func get_HeadersImpl() throws -> WebView2Core.CoreWebView2HttpResponseHeaders? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Headers(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_StatusCodeImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StatusCode(pThis, &value))
            }
            return value
        }

        internal func put_StatusCodeImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StatusCode(pThis, value))
            }
        }

        internal func get_ReasonPhraseImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReasonPhrase(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ReasonPhraseImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponse.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ReasonPhrase(pThis, _value.get()))
            }
        }

    }

    public class ICoreWebView2WebResourceResponseReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseReceivedEventArgs }

        internal func get_RequestImpl() throws -> WebView2Core.CoreWebView2WebResourceRequest? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ResponseImpl() throws -> WebView2Core.CoreWebView2WebResourceResponseView? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseReceivedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Response(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICoreWebView2WebResourceResponseView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseView }

        internal func get_HeadersImpl() throws -> WebView2Core.CoreWebView2HttpResponseHeaders? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Headers(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_StatusCodeImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StatusCode(pThis, &value))
            }
            return value
        }

        internal func get_ReasonPhraseImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReasonPhrase(pThis, &value))
            }
            return .init(from: value)
        }

        internal func GetContentAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WebResourceResponseView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetContentAsync(pThis, &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2WindowFeatures: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures }

        internal func get_HasPositionImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasPosition(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HasSizeImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasSize(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_LeftImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Left(pThis, &value))
            }
            return value
        }

        internal func get_TopImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Top(pThis, &value))
            }
            return value
        }

        internal func get_HeightImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, &value))
            }
            return value
        }

        internal func get_WidthImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Width(pThis, &value))
            }
            return value
        }

        internal func get_ShouldDisplayMenuBarImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldDisplayMenuBar(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ShouldDisplayStatusImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldDisplayStatus(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ShouldDisplayToolbarImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldDisplayToolbar(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ShouldDisplayScrollBarsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2WindowFeatures.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldDisplayScrollBars(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreWebView2_10: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__10 }

        internal func add_BasicAuthenticationRequestedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2BasicAuthenticationRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2BasicAuthenticationRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__10.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BasicAuthenticationRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BasicAuthenticationRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__10.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BasicAuthenticationRequested(pThis, token))
            }
        }

    }

    public class ICoreWebView2_11: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__11 }

        internal func add_ContextMenuRequestedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2ContextMenuRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ContextMenuRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__11.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextMenuRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ContextMenuRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__11.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextMenuRequested(pThis, token))
            }
        }

        internal func CallDevToolsProtocolMethodForSessionAsyncImpl(_ sessionId: String, _ methodName: String, _ parametersAsJson: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _sessionId = try! HString(sessionId)
                let _methodName = try! HString(methodName)
                let _parametersAsJson = try! HString(parametersAsJson)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__11.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CallDevToolsProtocolMethodForSessionAsync(pThis, _sessionId.get(), _methodName.get(), _parametersAsJson.get(), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2_12: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__12 }

        internal func get_StatusBarTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__12.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StatusBarText(pThis, &value))
            }
            return .init(from: value)
        }

        internal func add_StatusBarTextChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__12.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StatusBarTextChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_StatusBarTextChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__12.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StatusBarTextChanged(pThis, token))
            }
        }

    }

    public class ICoreWebView2_13: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__13 }

        internal func get_ProfileImpl() throws -> WebView2Core.CoreWebView2Profile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__13.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Profile(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICoreWebView2_14: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__14 }

        internal func add_ServerCertificateErrorDetectedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2ServerCertificateErrorDetectedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ServerCertificateErrorDetectedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__14.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ServerCertificateErrorDetected(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ServerCertificateErrorDetectedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__14.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ServerCertificateErrorDetected(pThis, token))
            }
        }

        internal func ClearServerCertificateErrorActionsAsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__14.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ClearServerCertificateErrorActionsAsync(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2_15: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__15 }

        internal func get_FaviconUriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__15.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FaviconUri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func add_FaviconChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__15.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FaviconChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FaviconChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__15.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FaviconChanged(pThis, token))
            }
        }

        internal func GetFaviconAsyncImpl(_ format: WebView2Core.CoreWebView2FaviconImageFormat) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__15.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFaviconAsync(pThis, format, &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2_16: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__16 }

        internal func PrintAsyncImpl(_ printSettings: WebView2Core.CoreWebView2PrintSettings?) throws -> WindowsFoundation.AnyIAsyncOperation<WebView2Core.CoreWebView2PrintStatus>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__16.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PrintAsync(pThis, RawPointer(printSettings), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2PrintStatusWrapper.unwrapFrom(abi: operation)
        }

        internal func ShowPrintUIImpl(_ printDialogKind: WebView2Core.CoreWebView2PrintDialogKind) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__16.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowPrintUI(pThis, printDialogKind))
            }
        }

        internal func PrintToPdfStreamAsyncImpl(_ printSettings: WebView2Core.CoreWebView2PrintSettings?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__16.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PrintToPdfStreamAsync(pThis, RawPointer(printSettings), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2_17: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__17 }

        internal func PostSharedBufferToScriptImpl(_ sharedBuffer: WebView2Core.CoreWebView2SharedBuffer?, _ access: WebView2Core.CoreWebView2SharedBufferAccess, _ additionalDataAsJson: String) throws {
            let _additionalDataAsJson = try! HString(additionalDataAsJson)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__17.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PostSharedBufferToScript(pThis, RawPointer(sharedBuffer), access, _additionalDataAsJson.get()))
            }
        }

    }

    public class ICoreWebView2_18: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__18 }

        internal func add_LaunchingExternalUriSchemeImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2LaunchingExternalUriSchemeEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2LaunchingExternalUriSchemeEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__18.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_LaunchingExternalUriScheme(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_LaunchingExternalUriSchemeImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__18.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LaunchingExternalUriScheme(pThis, token))
            }
        }

    }

    public class ICoreWebView2_19: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__19 }

        internal func get_MemoryUsageTargetLevelImpl() throws -> WebView2Core.CoreWebView2MemoryUsageTargetLevel {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2MemoryUsageTargetLevel = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__19.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MemoryUsageTargetLevel(pThis, &value))
            }
            return value
        }

        internal func put_MemoryUsageTargetLevelImpl(_ value: WebView2Core.CoreWebView2MemoryUsageTargetLevel) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__19.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MemoryUsageTargetLevel(pThis, value))
            }
        }

    }

    public class ICoreWebView2_2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__2 }

        internal func get_CookieManagerImpl() throws -> WebView2Core.CoreWebView2CookieManager? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CookieManager(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_EnvironmentImpl() throws -> WebView2Core.CoreWebView2Environment? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Environment(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_WebResourceResponseReceivedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2WebResourceResponseReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2WebResourceResponseReceivedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_WebResourceResponseReceived(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_WebResourceResponseReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_WebResourceResponseReceived(pThis, token))
            }
        }

        internal func add_DOMContentLoadedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2DOMContentLoadedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2DOMContentLoadedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DOMContentLoaded(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DOMContentLoadedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DOMContentLoaded(pThis, token))
            }
        }

        internal func NavigateWithWebResourceRequestImpl(_ Request: WebView2Core.CoreWebView2WebResourceRequest?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NavigateWithWebResourceRequest(pThis, RawPointer(Request)))
            }
        }

    }

    public class ICoreWebView2_20: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__20 }

        internal func get_FrameIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__20.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameId(pThis, &value))
            }
            return value
        }

    }

    public class ICoreWebView2_3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__3 }

        internal func get_IsSuspendedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSuspended(pThis, &value))
            }
            return .init(from: value)
        }

        internal func TrySuspendAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TrySuspendAsync(pThis, &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal func ResumeImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Resume(pThis))
            }
        }

        internal func SetVirtualHostNameToFolderMappingImpl(_ hostName: String, _ folderPath: String, _ accessKind: WebView2Core.CoreWebView2HostResourceAccessKind) throws {
            let _hostName = try! HString(hostName)
            let _folderPath = try! HString(folderPath)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetVirtualHostNameToFolderMapping(pThis, _hostName.get(), _folderPath.get(), accessKind))
            }
        }

        internal func ClearVirtualHostNameToFolderMappingImpl(_ hostName: String) throws {
            let _hostName = try! HString(hostName)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearVirtualHostNameToFolderMapping(pThis, _hostName.get()))
            }
        }

    }

    public class ICoreWebView2_4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__4 }

        internal func add_FrameCreatedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2FrameCreatedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2FrameCreatedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FrameCreated(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FrameCreatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FrameCreated(pThis, token))
            }
        }

        internal func add_DownloadStartingImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2DownloadStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2DownloadStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DownloadStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DownloadStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DownloadStarting(pThis, token))
            }
        }

    }

    public class ICoreWebView2_5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__5 }

        internal func add_ClientCertificateRequestedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, WebView2Core.CoreWebView2ClientCertificateRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ClientCertificateRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ClientCertificateRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClientCertificateRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__5.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ClientCertificateRequested(pThis, token))
            }
        }

    }

    public class ICoreWebView2_6: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__6 }

        internal func OpenTaskManagerWindowImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OpenTaskManagerWindow(pThis))
            }
        }

    }

    public class ICoreWebView2_7: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__7 }

        internal func PrintToPdfAsyncImpl(_ ResultFilePath: String, _ printSettings: WebView2Core.CoreWebView2PrintSettings?) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _ResultFilePath = try! HString(ResultFilePath)
                _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__7.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PrintToPdfAsync(pThis, _ResultFilePath.get(), RawPointer(printSettings), &operationAbi))
                }
            }
            return WebView2Core.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreWebView2_8: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__8 }

        internal func get_IsMutedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMuted(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsMutedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsMuted(pThis, .init(from: value)))
            }
        }

        internal func get_IsDocumentPlayingAudioImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDocumentPlayingAudio(pThis, &value))
            }
            return .init(from: value)
        }

        internal func add_IsMutedChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsMutedChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_IsMutedChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsMutedChanged(pThis, token))
            }
        }

        internal func add_IsDocumentPlayingAudioChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsDocumentPlayingAudioChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_IsDocumentPlayingAudioChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__8.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsDocumentPlayingAudioChanged(pThis, token))
            }
        }

    }

    public class ICoreWebView2_9: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9 }

        internal func get_IsDefaultDownloadDialogOpenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDefaultDownloadDialogOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DefaultDownloadDialogCornerAlignmentImpl() throws -> WebView2Core.CoreWebView2DefaultDownloadDialogCornerAlignment {
            var value: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2DefaultDownloadDialogCornerAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultDownloadDialogCornerAlignment(pThis, &value))
            }
            return value
        }

        internal func put_DefaultDownloadDialogCornerAlignmentImpl(_ value: WebView2Core.CoreWebView2DefaultDownloadDialogCornerAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultDownloadDialogCornerAlignment(pThis, value))
            }
        }

        internal func get_DefaultDownloadDialogMarginImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultDownloadDialogMargin(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_DefaultDownloadDialogMarginImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultDownloadDialogMargin(pThis, .from(swift: value)))
            }
        }

        internal func add_IsDefaultDownloadDialogOpenChangedImpl(_ handler: TypedEventHandler<WebView2Core.CoreWebView2?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WebView2Core.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsDefaultDownloadDialogOpenChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_IsDefaultDownloadDialogOpenChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsDefaultDownloadDialogOpenChanged(pThis, token))
            }
        }

        internal func OpenDefaultDownloadDialogImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OpenDefaultDownloadDialog(pThis))
            }
        }

        internal func CloseDefaultDownloadDialogImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CICoreWebView2__9.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CloseDefaultDownloadDialog(pThis))
            }
        }

    }

}
extension __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PhysicalKeyStatus {
        public static func from(swift: WebView2Core.CoreWebView2PhysicalKeyStatus) -> __x_ABI_CMicrosoft_CWeb_CWebView2_CCore_CCoreWebView2PhysicalKeyStatus {
            .init(RepeatCount: swift.repeatCount, ScanCode: swift.scanCode, IsExtendedKey: swift.isExtendedKey, IsMenuKeyDown: swift.isMenuKeyDown, WasKeyDown: swift.wasKeyDown, IsKeyReleased: swift.isKeyReleased)
        }
    }
    